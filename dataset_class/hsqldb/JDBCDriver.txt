Location: JDBCDriver.java

Content: 

/** 

 * Returns true if the driver thinks that it can open a connection to the given URL. Typically drivers will return true if they understand the subprotocol specified in the URL and false if they don't.

 * @param url the URL of the database

 * @return  true if this driver can connect to the given URL

 */

public boolean acceptsURL(String url){

  if (url == null) {

    return false;

  }

  if (url.regionMatches(true,0,DatabaseURL.S_URL_PREFIX,0,DatabaseURL.S_URL_PREFIX.length())) {

    return true;

  }

  if (url.regionMatches(true,0,DatabaseURL.S_URL_INTERNAL,0,DatabaseURL.S_URL_INTERNAL.length())) {

    return true;

  }

  return false;

}

Location: JDBCDriver.java

Content: 

/** 

 * Attempts to make a database connection to the given URL.<p> Returns "null" if this is the wrong kind of driver to connect to the given URL.  This will be common, as when the JDBC driver manager is asked to connect to a given URL it passes the URL to each loaded driver in turn. <P>The driver throws an <code>SQLException</code> if it is the right driver to connect to the given URL but has trouble connecting to the database. <P>The <code>java.util.Properties</code> argument can be used to pass arbitrary string tag/value pairs as connection arguments. Normally at least "user" and "password" properties should be included in the <code>Properties</code> object. <!-- start release-specific documentation --> <div class="ReleaseSpecificDocumentation"> <h3>HSQLDB-Specific Information:</h3> <p> For the HSQL Database Engine, at least "user" and "password" properties should be included in the Properties.<p> From version 1.7.1, two optional properties are supported: <ul> <li><code>get_column_name</code> (default true) -  if set to false, a ResultSetMetaData.getColumnName() call will return the user defined label (getColumnLabel()) instead of the column name.<br> This property is available in order to achieve compatibility with certain non-HSQLDB JDBC driver implementations.</li> <li><code>strict_md</code> if set to true, some ResultSetMetaData methods return more strict values for compatibility reasons.</li> </ul> <p> From version 1.8.0.x, <code>strict_md</code> is deprecated (ignored) because metadata reporting is always strict (JDBC-compliant), and three new optional properties are supported: <ul> <li><code>ifexits</code> (default false) - when true, an exception is raised when attempting to connect to an in-process file: or mem: scheme database instance if it has not yet been created.  When false, an in-process file: or mem: scheme database instance is created automatically if it has not yet been created. This property does not apply to requests for network or res: (i.e. files_in_jar) scheme connections. <li> <li><code>shutdown</code> (default false) - when true, the the target database mimics the behaviour of 1.7.1 and older versions. When the last connection to a database is closed, the database is automatically shut down. The property takes effect only when the first connection is made to the database. This means the connection that opens the database. It has no effect if used with subsequent, simultaneous connections. <br> This command has two uses. One is for test suites, where connections to the database are made from one JVM context, immediately followed by another context. The other use is for applications where it is not easy to configure the environment to shutdown the database. Examples reported by users include web application servers, where the closing of the last connection coincides with the web application being shut down. </li> <li><code>default_schema</code> - backwards compatibility feature. To be used for clients written before HSQLDB schema support. Denotes whether to use the default schema when a schema qualifier is not included in a database object's SQL identifier character sequence. Also affects the semantics of DatabaseMetaData calls that supply null-valued schemaNamePattern parameter values.</li> </ul> </div> <!-- end release-specific documentation -->

 * @param url the URL of the database to which to connect

 * @param info a list of arbitrary string tag/value pairs as connectionarguments. Normally at least a "user" and "password" property should be included.

 * @return a <code>Connection</code> object that represents aconnection to the URL

 * @exception SQLException if a database access error occurs

 */

public Connection connect(String url,Properties info) throws SQLException {

  if (url.regionMatches(true,0,DatabaseURL.S_URL_INTERNAL,0,DatabaseURL.S_URL_INTERNAL.length())) {

    JDBCConnection conn=(JDBCConnection)threadConnection.get();

    if (conn == null) {

      return null;

    }

    return conn;

  }

  return getConnection(url,info);

}

Location: JDBCDriver.java

Content: 

/** 

 * Gets the driver's major version number.

 * @return  this driver's major version number

 */

public int getMajorVersion(){

  return HsqlDatabaseProperties.MAJOR;

}

Location: JDBCDriver.java

Content: 

/** 

 * Gets the driver's minor version number.

 * @return  this driver's minor version number

 */

public int getMinorVersion(){

  return HsqlDatabaseProperties.MINOR;

}

Location: JDBCDriver.java

Content: 

/** 

 * Gets information about the possible properties for this driver. <p> The getPropertyInfo method is intended to allow a generic GUI tool to discover what properties it should prompt a human for in order to get enough information to connect to a database. Note that depending on the values the human has supplied so far, additional values may become necessary, so it may be necessary to iterate though several calls to getPropertyInfo. <!-- start release-specific documentation --> <div class="ReleaseSpecificDocumentation"> <h3>HSQLDB-Specific Information:</h3> <p> HSQLDB uses the values submitted in info to set the value for each DriverPropertyInfo object returned. It does not use the default value that it would use for the property if the value is null. <p> </div> <!-- end release-specific documentation -->

 * @param url the URL of the database to which to connect

 * @param info a proposed list of tag/value pairs that will be sent onconnect open

 * @return  an array of DriverPropertyInfo objects describing possibleproperties. This array may be an empty array if no properties are required.

 */

public DriverPropertyInfo[] getPropertyInfo(String url,Properties info){

  if (!acceptsURL(url)) {

    return new DriverPropertyInfo[0];

  }

  String[] choices=new String[]{"true","false"};

  DriverPropertyInfo[] pinfo=new DriverPropertyInfo[6];

  DriverPropertyInfo p;

  if (info == null) {

    info=new Properties();

  }

  p=new DriverPropertyInfo("user",null);

  p.value=info.getProperty("user");

  p.required=true;

  pinfo[0]=p;

  p=new DriverPropertyInfo("password",null);

  p.value=info.getProperty("password");

  p.required=true;

  pinfo[1]=p;

  p=new DriverPropertyInfo("get_column_name",null);

  p.value=info.getProperty("get_column_name","true");

  p.required=false;

  p.choices=choices;

  pinfo[2]=p;

  p=new DriverPropertyInfo("ifexists",null);

  p.value=info.getProperty("ifexists","false");

  p.required=false;

  p.choices=choices;

  pinfo[3]=p;

  p=new DriverPropertyInfo("default_schema",null);

  p.value=info.getProperty("default_schema","false");

  p.required=false;

  p.choices=choices;

  pinfo[4]=p;

  p=new DriverPropertyInfo("shutdown",null);

  p.value=info.getProperty("shutdown","false");

  p.required=false;

  p.choices=choices;

  pinfo[5]=p;

  return pinfo;

}

Location: JDBCDriver.java

Content: 

/** 

 * Reports whether this driver is a genuine JDBC Compliant&trade; driver. A driver may only report <code>true</code> here if it passes the JDBC compliance tests; otherwise it is required to return <code>false</code>. <p> JDBC compliance requires full support for the JDBC API and full support for SQL 92 Entry Level. <!-- start release-specific documentation --> <div class="ReleaseSpecificDocumentation"> <h3>HSQLDB-Specific Information:</h3> <p> HSQLDB 2.0 is aimed to be compliant with JDBC 4.2 specification. It supports SQL 92 Entry Level and beyond. </div> <!-- end release-specific documentation --> This method is not intended to encourage the development of non-JDBC compliant drivers, but is a recognition of the fact that some vendors are interested in using the JDBC API and framework for lightweight databases that do not support full database functionality, or for special databases such as document information retrieval where a SQL implementation may not be feasible.

 * @return <code>true</code> if this driver is JDBC Compliant;<code>false</code> otherwise

 */

public boolean jdbcCompliant(){

  return true;

}

Location: JDBCDriver.java

Content: 

/** 

 * Default constructor

 */

public JDBCDriver(){

}

