Location: ClientConnection.java

Content: 

protected ClientConnection(ClientConnection other){

  this.host=other.host;

  this.port=other.port;

  this.path=other.path;

  this.database=other.database;

  this.isTLS=other.isTLS;

  this.isTLSWrapper=other.isTLSWrapper;

  this.zoneSeconds=other.zoneSeconds;

  this.zoneString=other.zoneString;

  this.sessionID=other.sessionID;

  this.databaseID=other.databaseID;

  this.databaseUniqueName=other.databaseUniqueName;

  this.clientPropertiesString=other.clientPropertiesString;

  this.randomID=other.randomID;

  initStructures();

  initConnection(host,port,isTLS);

}

Location: ClientConnection.java

Content: 

/** 

 * Establishes a connection to the server.

 */

public ClientConnection(String host,int port,String path,String database,boolean isTLS,boolean isTLSWrapper,String user,String password,int timeZoneSeconds){

  this.host=host;

  this.port=port;

  this.path=path;

  this.database=database;

  this.isTLS=isTLS;

  this.isTLSWrapper=isTLSWrapper;

  this.zoneSeconds=timeZoneSeconds;

  this.zoneString=TimeZone.getDefault().getID();

  initStructures();

  initConnection(host,port,isTLS);

  Result login=Result.newConnectionAttemptRequest(user,password,database,zoneString,timeZoneSeconds);

  Result resultIn=execute(login);

  if (resultIn.isError()) {

    throw Error.error(resultIn);

  }

  sessionID=resultIn.getSessionId();

  databaseID=resultIn.getDatabaseId();

  databaseUniqueName=resultIn.getDatabaseName();

  clientPropertiesString=resultIn.getMainString();

  randomID=resultIn.getSessionRandomID();

}

Location: ClientConnection.java

Content: 

/** 

 * resultOut is reused to transmit all remote calls for session management. Here the structure is preset for sending attributes.

 */

private void initStructures(){

  RowOutputBinary rowOutTemp=new RowOutputBinary(mainBuffer);

  rowOut=rowOutTemp;

  rowIn=new RowInputBinary(rowOutTemp);

  resultOut=Result.newSessionAttributesResult();

}

Location: ClientConnection.java

Content: 

/** 

 * Converts specified encoded integer to a Network Compatibility Version String. The transmitted integer is negative to distinguish it from 7 bit ASCII characters.

 */

public static String toNetCompVersionString(int i){

  StringBuffer sb=new StringBuffer();

  i*=-1;

  sb.append(i / 1000000);

  i%=1000000;

  sb.append('.');

  sb.append(i / 10000);

  i%=10000;

  sb.append('.');

  sb.append(i / 100);

  i%=100;

  sb.append('.');

  sb.append(i);

  return sb.toString();

}

