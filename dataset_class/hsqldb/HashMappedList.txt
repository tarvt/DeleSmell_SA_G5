Location: HashMappedList.java

Content: 

public boolean add(Object key,Object value){

  int lookup=getLookup(key,key.hashCode());

  if (lookup >= 0) {

    return false;

  }

  super.put(key,value);

  return true;

}

Location: HashMappedList.java

Content: 

public HashMappedList(){

  this(8);

}

Location: HashMappedList.java

Content: 

public HashMappedList(int initialCapacity) throws IllegalArgumentException {

  super(initialCapacity);

  isList=true;

}

Location: HashMappedList.java

Content: 

public boolean insert(int index,Object key,Object value) throws IndexOutOfBoundsException {

  if (index < 0 || index > size()) {

    throw new IndexOutOfBoundsException();

  }

  int lookup=getLookup(key,key.hashCode());

  if (lookup >= 0) {

    return false;

  }

  if (index == size()) {

    return add(key,value);

  }

  HashMappedList hm=new HashMappedList(size());

  for (int i=index; i < size(); i++) {

    hm.add(getKey(i),get(i));

  }

  for (int i=size() - 1; i >= index; i--) {

    remove(i);

  }

  for (int i=0; i < hm.size(); i++) {

    add(hm.getKey(i),hm.get(i));

  }

  return true;

}

Location: HashMappedList.java

Content: 

public Object put(Object key,Object value){

  return super.put(key,value);

}

Location: HashMappedList.java

Content: 

public boolean setKey(int index,Object key) throws IndexOutOfBoundsException {

  checkRange(index);

  Object value=objectValueTable[index];

  return set(index,key,value);

}

Location: HashMappedList.java

Content: 

public boolean setValue(int index,Object value) throws IndexOutOfBoundsException {

  boolean result;

  Object existing=objectValueTable[index];

  if (value == null) {

    result=existing != null;

  }

 else {

    result=!value.equals(existing);

  }

  objectValueTable[index]=value;

  return result;

}

Location: HashMappedList.java

Content: 

public boolean set(int index,Object key,Object value) throws IndexOutOfBoundsException {

  checkRange(index);

  if (keySet().contains(key) && getIndex(key) != index) {

    return false;

  }

  super.remove(objectKeyTable[index]);

  super.put(key,value);

  return true;

}

Location: HashMappedList.java

Content: 

public Object[] toKeysArray(Object[] a){

  int size=size();

  if (a == null || a.length < size) {

    a=new Object[size];

  }

  for (int i=0; i < size; i++) {

    a[i]=super.objectKeyTable[i];

  }

  return a;

}

Location: HashMappedList.java

Content: 

public Object[] toValuesArray(Object[] a){

  int size=size();

  if (a == null || a.length < size) {

    a=new Object[size];

  }

  for (int i=0; i < size; i++) {

    a[i]=super.objectValueTable[i];

  }

  return a;

}

