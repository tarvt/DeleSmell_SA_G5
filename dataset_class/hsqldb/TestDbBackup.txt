Location: TestDbBackup.java

Content: 

/** 

 * Make sure to close after using the returned connection (like in a finally block).

 */

protected Connection getConnection(String id) throws SQLException {

  Connection c=DriverManager.getConnection("jdbc:hsqldb:file:" + baseDir.getAbsolutePath() + '/'+ id+ "/dbfile","SA","");

  if (verbose) {

    System.err.println("Opening JDBC URL '" + "jdbc:hsqldb:file:" + baseDir.getAbsolutePath() + '/'+ id+ "/dbfile");

  }

  c.setAutoCommit(false);

  return c;

}

Location: TestDbBackup.java

Content: 

public void mainBackupAndRestore(String baseTarName) throws SQLException, IOException, TarMalformatException {

  DbBackupMain.main(new String[]{"--save",baseDir.getAbsolutePath() + '/' + baseTarName,baseDir.getAbsolutePath() + "/db1/dbfile"});

  File destDir=new File(baseDir,"mainrestored");

  if (!destDir.mkdir()) {

    throw new IOException("Failed to make new dir. to restore to: " + destDir.getAbsolutePath());

  }

  DbBackupMain.main(new String[]{"--extract",baseDir.getAbsolutePath() + '/' + baseTarName,destDir.getAbsolutePath()});

  try {

    setupConn("mainrestored");

    ResultSet rs=conn.createStatement().executeQuery("SELECT * FROM t;");

    rs.next();

    assertEquals("Wrong table 't' contents",34,rs.getInt("i"));

  }

  finally {

    hongshuai();

    if (conn == null) {

      return;

    }

    if (!alreadyShut) {

      conn.createStatement().executeUpdate("SHUTDOWN");

      alreadyShut=true;

    }

    if (verbose) {

      System.err.println("Shut down 'db1'");

    }

    conn.close();

    conn=null;

  }

}

Location: TestDbBackup.java

Content: 

public void onlineBackupAndRestore(String baseTarName,boolean populate,boolean compress,String restoreDest) throws SQLException, IOException, TarMalformatException {

  try {

    setupConn("db1");

    conn.createStatement().executeUpdate("DELETE FROM t");

    conn.commit();

    conn.createStatement().executeUpdate("INSERT INTO t VALUES(1)");

    conn.createStatement().executeUpdate("INSERT INTO t VALUES(2)");

    conn.createStatement().executeUpdate("INSERT INTO t VALUES(3)");

    conn.commit();

    conn.createStatement().executeUpdate("INSERT INTO t VALUES(4)");

    conn.createStatement().executeUpdate("INSERT INTO t VALUES(5)");

    conn.createStatement().executeUpdate("BACKUP DATABASE TO '" + baseDir.getAbsolutePath() + '/'+ baseTarName+ "' BLOCKING"+ (compress ? "" : " NOT COMPRESSED"));

    conn.createStatement().executeUpdate("INSERT INTO t VALUES(6)");

    conn.commit();

    conn.createStatement().executeUpdate("SHUTDOWN");

    alreadyShut=true;

    if (verbose) {

      System.err.println("Shut down 'db1'");

    }

  }

  finally {

    hongshuai();

    if (conn == null) {

      return;

    }

    if (!alreadyShut) {

      conn.createStatement().executeUpdate("SHUTDOWN");

      alreadyShut=true;

    }

    if (verbose) {

      System.err.println("Shut down 'db1'");

    }

    conn.close();

    conn=null;

  }

  File destDir=new File(baseDir,restoreDest);

  if (!destDir.mkdir()) {

    throw new IOException("Failed to make new dir. to restore to: " + destDir.getAbsolutePath());

  }

  DbBackupMain.main(new String[]{"--extract",baseDir.getAbsolutePath() + '/' + baseTarName,destDir.getAbsolutePath()});

  try {

    setupConn(restoreDest);

    conn.createStatement().executeUpdate("ROLLBACK");

    ResultSet rs=conn.createStatement().executeQuery("SELECT count(*) c FROM t;");

    rs.next();

    assertEquals("Wrong table 't' contents",5,rs.getInt("c"));

  }

  finally {

    hongshuai();

    if (conn == null) {

      return;

    }

    if (!alreadyShut) {

      conn.createStatement().executeUpdate("SHUTDOWN");

      alreadyShut=true;

    }

    if (verbose) {

      System.err.println("Shut down 'db1'");

    }

    conn.close();

    conn=null;

  }

}

Location: TestDbBackup.java

Content: 

/** 

 * Remove the specified directory and all of it's descendants.

 * @throws IOException if unable to completely remove the specified dir

 */

protected void rmR(File dir) throws IOException {

  if (!dir.exists()) {

    throw new IOException("Specified dir does not exist: " + dir.getAbsolutePath());

  }

  File[] children=dir.listFiles();

  for (int i=0; i < children.length; i++) {

    if (children[i].isDirectory()) {

      rmR(children[i]);

    }

 else     if (!children[i].delete()) {

      throw new IOException("Failed to remove '" + children[i].getAbsolutePath() + "'");

    }

  }

  if (!dir.delete()) {

    throw new IOException("Failed to remove '" + dir.getAbsolutePath() + "'");

  }

}

Location: TestDbBackup.java

Content: 

/** 

 * Individual test methods may or may not need a Connection. If they do, they run setupConn() then use 'conn', and it will be automatically closed by the tearDown() method.

 * @see #tearDown()

 */

protected void setupConn(String id) throws SQLException {

  conn=getConnection(id);

  alreadyShut=false;

}

Location: TestDbBackup.java

Content: 

protected void shutdownAndCloseConn() throws SQLException {

  if (conn == null) {

    return;

  }

  if (!alreadyShut) {

    conn.createStatement().executeUpdate("SHUTDOWN");

    alreadyShut=true;

  }

  if (verbose) {

    System.err.println("Shut down 'db1'");

  }

  conn.close();

  conn=null;

}

Location: TestDbBackup.java

Content: 

public static Test suite() throws IOException, SQLException {

  TestSuite newSuite=new TestSuite();

  newSuite.addTest(new TestDbBackup("testSanity"));

  newSuite.addTest(new TestDbBackup("testBasicBackup"));

  newSuite.addTest(new TestDbBackup("testMainAlreadyOpen"));

  newSuite.addTest(new TestDbBackup("testGzip"));

  newSuite.addTest(new TestDbBackup("testOnlineBackup"));

  newSuite.addTest(new TestDbBackup("testTarFileNames"));

  newSuite.addTest(new TestDbBackup("testAutoNaming"));

  return newSuite;

}

Location: TestDbBackup.java

Content: 

/** 

 * Test that correct DB names are generated when user supplies just a directory. N.b.  This test may not work right if tests are run at midnight. This limitation will be removed once we can update the FilenameFilters with Java 4's java.util.regex.

 */

public void testAutoNaming() throws SQLException, IOException, TarMalformatException {

  boolean caught;

  int fileCount;

  try {

    setupConn("db1");

    conn.createStatement().executeUpdate("INSERT INTO t VALUES(2)");

    conn.commit();

    fileCount=baseDir.listFiles(autoTarFilenameFilter).length;

    if (fileCount != 0) {

      throw new IllegalStateException(Integer.toString(fileCount) + " auto-tar files exist in baseDir '" + baseDir.getAbsolutePath()+ "' before starting testAutoNaming");

    }

    fileCount=baseDir.listFiles(autoTarGzFilenameFilter).length;

    if (fileCount != 0) {

      throw new IllegalStateException(Integer.toString(fileCount) + " auto-tar.gz files exist in baseDir '" + baseDir.getAbsolutePath()+ "' before starting testAutoNaming");

    }

    conn.createStatement().executeUpdate("BACKUP DATABASE TO '" + baseDir.getAbsolutePath() + "/' BLOCKING NOT COMPRESSED");

    fileCount=baseDir.listFiles(autoTarFilenameFilter).length;

    if (fileCount != 1) {

      fail(Integer.toString(fileCount) + " auto-tar files exist in baseDir '" + baseDir.getAbsolutePath()+ "' after writing a non-compressed backup");

    }

    fileCount=baseDir.listFiles(autoTarGzFilenameFilter).length;

    if (fileCount != 0) {

      fail(Integer.toString(fileCount) + " auto-tar.gz files exist in baseDir '" + baseDir.getAbsolutePath()+ "' after writing a non-compressed backup");

    }

    conn.createStatement().executeUpdate("BACKUP DATABASE TO '" + baseDir.getAbsolutePath() + "/' BLOCKING COMPRESSED");

    fileCount=baseDir.listFiles(autoTarFilenameFilter).length;

    if (fileCount != 1) {

      fail(Integer.toString(fileCount) + " auto-tar files exist in baseDir '" + baseDir.getAbsolutePath()+ "' after writing both backups");

    }

    fileCount=baseDir.listFiles(autoTarGzFilenameFilter).length;

    if (fileCount != 1) {

      fail(Integer.toString(fileCount) + " auto-tar.gz files exist in baseDir '" + baseDir.getAbsolutePath()+ "' after writing a compressed backup");

    }

  }

  finally {

    hongshuai();

    if (conn == null) {

      return;

    }

    if (!alreadyShut) {

      conn.createStatement().executeUpdate("SHUTDOWN");

      alreadyShut=true;

    }

    if (verbose) {

      System.err.println("Shut down 'db1'");

    }

    conn.close();

    conn=null;

  }

}

Location: TestDbBackup.java

Content: 

public void testBasicBackup() throws SQLException, IOException, TarMalformatException {

  mainBackupAndRestore("basic.tar");

}

Location: TestDbBackup.java

Content: 

public TestDbBackup() throws IOException, SQLException {

}

Location: TestDbBackup.java

Content: 

/** 

 * Accommodate JUnit's test-runner conventions.

 */

public TestDbBackup(String s) throws IOException, SQLException {

  super(s);

}

Location: TestDbBackup.java

Content: 

public void testGzip() throws SQLException, IOException, TarMalformatException {

  mainBackupAndRestore("compressed.tar.gz");

}

Location: TestDbBackup.java

Content: 

public void testMainAlreadyOpen() throws SQLException, IOException, TarMalformatException {

  try {

    setupConn("db1");

    try {

      DbBackupMain.main(new String[]{"--save",baseDir.getAbsolutePath() + "/mainOpen.tar",baseDir.getAbsolutePath() + "/db1/dbfile"});

    }

 catch (    IllegalStateException ioe) {

      return;

    }

  }

  finally {

    hongshuai();

    if (conn == null) {

      return;

    }

    if (!alreadyShut) {

      conn.createStatement().executeUpdate("SHUTDOWN");

      alreadyShut=true;

    }

    if (verbose) {

      System.err.println("Shut down 'db1'");

    }

    conn.close();

    conn=null;

  }

  fail("Backup from main() did not throw even though DB is open");

}

Location: TestDbBackup.java

Content: 

/** 

 * Test all forms of online backups with explicit filenames.

 */

public void testOnlineBackup() throws SQLException, IOException, TarMalformatException {

  onlineBackupAndRestore("online.tar",true,false,"db11");

  onlineBackupAndRestore("online.tar.gz",false,true,"db12");

  onlineBackupAndRestore("online.tgz",false,true,"db13");

}

Location: TestDbBackup.java

Content: 

public void testSanity() throws SQLException {

  try {

    setupConn("db1");

    ResultSet rs=conn.createStatement().executeQuery("SELECT * FROM t;");

    rs.next();

    assertEquals("Wrong table 't' contents",34,rs.getInt("i"));

  }

  finally {

    hongshuai();

    if (conn == null) {

      return;

    }

    if (!alreadyShut) {

      conn.createStatement().executeUpdate("SHUTDOWN");

      alreadyShut=true;

    }

    if (verbose) {

      System.err.println("Shut down 'db1'");

    }

    conn.close();

    conn=null;

  }

}

Location: TestDbBackup.java

Content: 

/** 

 * Test that bad explicit filenames are rejected for onilne backups.

 */

public void testTarFileNames() throws SQLException, IOException, TarMalformatException {

  boolean caught;

  try {

    setupConn("db1");

    conn.createStatement().executeUpdate("INSERT INTO t VALUES(2)");

    conn.commit();

    caught=false;

    try {

      conn.createStatement().executeUpdate("BACKUP DATABASE TO '" + baseDir.getAbsolutePath() + "/x/bad' BLOCKING COMPRESSED");

    }

 catch (    SQLException se) {

      caught=true;

    }

    if (!caught) {

      fail("BACKUP did not throw even though requested compression " + "to file '/x/bad'");

    }

    caught=false;

    try {

      conn.createStatement().executeUpdate("BACKUP DATABASE TO '" + baseDir.getAbsolutePath() + "/x/bad' BLOCKING NOT COMPRESSED");

    }

 catch (    SQLException se) {

      caught=true;

    }

    if (!caught) {

      fail("BACKUP did not throw even though requested " + "no-compression to file '/x/bad'");

    }

    caught=false;

    try {

      conn.createStatement().executeUpdate("BACKUP DATABASE TO '" + baseDir.getAbsolutePath() + "/x/bad.txt' BLOCKING COMPRESSED");

    }

 catch (    SQLException se) {

      caught=true;

    }

    if (!caught) {

      fail("BACKUP did not throw even though requested compression " + "to file '/x/bad.txt'");

    }

    caught=false;

    try {

      conn.createStatement().executeUpdate("BACKUP DATABASE TO '" + baseDir.getAbsolutePath() + "/x/bad.txt' BLOCKING NOT COMPRESSED");

    }

 catch (    SQLException se) {

      caught=true;

    }

    if (!caught) {

      fail("BACKUP did not throw even though requested " + "no-compression to file '/x/bad.txt'");

    }

    caught=false;

    try {

      conn.createStatement().executeUpdate("BACKUP DATABASE TO '" + baseDir.getAbsolutePath() + "/x/bad.tar' BLOCKING");

    }

 catch (    SQLException se) {

      caught=true;

    }

    if (!caught) {

      fail("BACKUP did not throw even though requested default " + "to file '/x/bad.tar'");

    }

    caught=false;

    try {

      conn.createStatement().executeUpdate("BACKUP DATABASE TO '" + baseDir.getAbsolutePath() + "/x/bad.tar' BLOCKING COMPRESSED");

    }

 catch (    SQLException se) {

      caught=true;

    }

    if (!caught) {

      fail("BACKUP did not throw even though requested compression " + "to file '/x/bad.tar'");

    }

    caught=false;

    try {

      conn.createStatement().executeUpdate("BACKUP DATABASE TO '" + baseDir.getAbsolutePath() + "/x/bad.tar.gz' BLOCKING NOT COMPRESSED");

    }

 catch (    SQLException se) {

      caught=true;

    }

    if (!caught) {

      fail("BACKUP did not throw even though requested " + "non-compression to file '/x/bad.tar.gz'");

    }

    caught=false;

    try {

      conn.createStatement().executeUpdate("BACKUP DATABASE TO '" + baseDir.getAbsolutePath() + "/x/bad.tgz' BLOCKING NOT COMPRESSED");

    }

 catch (    SQLException se) {

      caught=true;

    }

    if (!caught) {

      fail("BACKUP did not throw even though requested " + "non-compression to file '/x/bad.tgz'");

    }

    conn.createStatement().executeUpdate("BACKUP DATABASE TO '" + baseDir.getAbsolutePath() + "/positivetest.tar' BLOCKING NOT COMPRESSED");

  }

  finally {

    hongshuai();

    if (conn == null) {

      return;

    }

    if (!alreadyShut) {

      conn.createStatement().executeUpdate("SHUTDOWN");

      alreadyShut=true;

    }

    if (verbose) {

      System.err.println("Shut down 'db1'");

    }

    conn.close();

    conn=null;

  }

}

