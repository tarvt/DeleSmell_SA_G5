Location: DateTimeType.java

Content: 

public boolean acceptsFractionalPrecision(){

  return typeCode != Types.SQL_DATE;

}

Location: DateTimeType.java

Content: 

public Object addMonthsSpecial(Session session,Object dateTime,int months){

  TimestampData ts=(TimestampData)dateTime;

  Calendar cal=session.getCalendarGMT();

  long millis=(ts.getSeconds() + ts.getZone()) * 1000;

  boolean lastDay;

  HsqlDateTime.setTimeInMillis(cal,millis);

  cal.set(Calendar.DAY_OF_MONTH,1);

  cal.add(Calendar.MONTH,1);

  cal.add(Calendar.DAY_OF_MONTH,-1);

  lastDay=millis == cal.getTimeInMillis();

  HsqlDateTime.setTimeInMillis(cal,millis);

  cal.add(Calendar.MONTH,months);

  if (lastDay) {

    cal.set(Calendar.DAY_OF_MONTH,1);

    cal.add(Calendar.MONTH,1);

    cal.add(Calendar.DAY_OF_MONTH,-1);

  }

  millis=cal.getTimeInMillis();

  return new TimestampData(millis / 1000,0,0);

}

Location: DateTimeType.java

Content: 

/** 

 * @todo - overflow 

 */

public static TimestampData addMonths(Session session,TimestampData source,int months){

  int n=source.getNanos();

  Calendar cal=session.getCalendarGMT();

  HsqlDateTime.setTimeInMillis(cal,source.getSeconds() * 1000);

  cal.add(Calendar.MONTH,months);

  TimestampData ts=new TimestampData(cal.getTimeInMillis() / 1000,n,source.getZone());

  return ts;

}

Location: DateTimeType.java

Content: 

public static TimeData addSeconds(TimeData source,long seconds,int nanos){

  nanos+=source.getNanos();

  seconds+=nanos / limitNanoseconds;

  nanos%=limitNanoseconds;

  if (nanos < 0) {

    nanos+=DTIType.limitNanoseconds;

    seconds--;

  }

  seconds+=source.getSeconds();

  seconds%=(24 * 60 * 60);

  TimeData ti=new TimeData((int)seconds,nanos,source.getZone());

  return ti;

}

Location: DateTimeType.java

Content: 

public static TimestampData addSeconds(TimestampData source,long seconds,int nanos){

  nanos+=source.getNanos();

  seconds+=nanos / limitNanoseconds;

  nanos%=limitNanoseconds;

  if (nanos < 0) {

    nanos+=limitNanoseconds;

    seconds--;

  }

  long newSeconds=source.getSeconds() + seconds;

  TimestampData ts=new TimestampData(newSeconds,nanos,source.getZone());

  return ts;

}

Location: DateTimeType.java

Content: 

public boolean canAdd(IntervalType other){

  return other.startPartIndex >= startPartIndex && other.endPartIndex <= endPartIndex;

}

Location: DateTimeType.java

Content: 

public boolean canCompareDirect(Type otherType){

  return typeCode == otherType.typeCode;

}

Location: DateTimeType.java

Content: 

public Object changeZone(Object a,Type otherType,int targetZone,int localZone){

  if (a == null) {

    return null;

  }

  if (targetZone > DTIType.timezoneSecondsLimit || -targetZone > DTIType.timezoneSecondsLimit) {

    throw Error.error(ErrorCode.X_22009);

  }

switch (typeCode) {

case Types.SQL_TIME_WITH_TIME_ZONE:

{

      TimeData value=(TimeData)a;

      if (otherType.isDateTimeTypeWithZone()) {

        if (value.zone != targetZone) {

          return new TimeData(value.getSeconds(),value.getNanos(),targetZone);

        }

      }

 else {

        int seconds=value.getSeconds() - localZone;

        seconds=(int)(HsqlDateTime.getNormalisedTime(seconds * 1000L) / 1000);

        return new TimeData(seconds,value.getNanos(),targetZone);

      }

      break;

    }

case Types.SQL_TIMESTAMP_WITH_TIME_ZONE:

{

    TimestampData value=(TimestampData)a;

    long seconds=value.getSeconds();

    if (!otherType.isDateTimeTypeWithZone()) {

      seconds-=localZone;

    }

    if (value.getSeconds() != seconds || value.zone != targetZone) {

      return new TimestampData(seconds,value.getNanos(),targetZone);

    }

    break;

  }

}

return a;

}

Location: DateTimeType.java

Content: 

/** 

 * The predicate "x CONTAINS y" applies when<br> a) both x and y are either period names or period constructors. In this case, the predicate returns True if x contains every time point in y, i.e., if xs <= ys and xe >= ye.<br> b) x is either a period name or a period constructor and y is a datetime value expression. In this case, the predicate returns True if x contains y, i.e., if xs <= y and xe > y. <p> The <i>b</i> part of this definition is not supported yet. In order to get the same result, one have to specify a period with the same date time value for the period start and end. <p>

 * @param session

 * @param a First period to compare

 * @param ta Types of the first period

 * @param b Second period to compare

 * @param tb Type of the second period

 * @return {@link Boolean#TRUE} if period a contains period b,else  {@link Boolean#FALSE}

 */

public static Boolean contains(Session session,Object[] a,Type[] ta,Object[] b,Type[] tb,boolean pointOfTime){

  Type commonType=normalizeInput(session,a,ta,b,tb,pointOfTime);

  if (commonType == null) {

    return null;

  }

  int compareStart=commonType.compare(session,a[0],b[0]);

  int compareEnd=commonType.compare(session,a[1],b[1]);

  if (compareStart <= 0 && compareEnd >= 0) {

    if (pointOfTime) {

      if (compareEnd == 0) {

        return Boolean.FALSE;

      }

    }

    return Boolean.TRUE;

  }

  return Boolean.FALSE;

}

Location: DateTimeType.java

Content: 

TimestampData convertJavaTimeObject(SessionInterface session,Object a,boolean timestamp){

  return null;

}

Location: DateTimeType.java

Content: 

public Object convertSQLToJavaGMT(SessionInterface session,Object a){

  long millis;

switch (typeCode) {

case Types.SQL_TIME:

case Types.SQL_TIME_WITH_TIME_ZONE:

    millis=((TimeData)a).getSeconds() * 1000L;

  millis+=((TimeData)a).getNanos() / 1000000;

return new java.sql.Time(millis);

case Types.SQL_DATE:

millis=((TimestampData)a).getSeconds() * 1000;

return new java.sql.Date(millis);

case Types.SQL_TIMESTAMP:

case Types.SQL_TIMESTAMP_WITH_TIME_ZONE:

millis=((TimestampData)a).getSeconds() * 1000;

java.sql.Timestamp value=new java.sql.Timestamp(millis);

value.setNanos(((TimestampData)a).getNanos());

return value;

default :

throw Error.runtimeError(ErrorCode.U_S0500,"DateTimeType");

}

}

Location: DateTimeType.java

Content: 

public static TimestampData convertToDatetimeSpecial(SessionInterface session,String s,DateTimeType type){

switch (type.typeCode) {

case Types.SQL_TIMESTAMP:

    if (session instanceof Session && ((Session)session).database.sqlSyntaxOra) {

      String pattern;

switch (s.length()) {

case 8:

case 9:

{

          pattern="DD-MON-YY";

          break;

        }

case 10:

case 11:

{

        pattern="DD-MON-YYYY";

        break;

      }

case 19:

case 20:

{

      pattern="DD-MON-YYYY HH24:MI:SS";

      break;

    }

default :

{

    pattern="DD-MON-YYYY HH24:MI:SS.FF";

    break;

  }

}

SimpleDateFormat format=session.getSimpleDateFormatGMT();

return HsqlDateTime.toDate(s,pattern,format,true);

}

case Types.SQL_TIMESTAMP_WITH_TIME_ZONE:

case Types.SQL_DATE:

case Types.SQL_TIME:

case Types.SQL_TIME_WITH_TIME_ZONE:

default :

}

throw Error.error(ErrorCode.X_22007);

}

Location: DateTimeType.java

Content: 

public DateTimeType(int typeGroup,int type,int scale){

  super(typeGroup,type,0,scale);

  withTimeZone=type == Types.SQL_TIME_WITH_TIME_ZONE || type == Types.SQL_TIMESTAMP_WITH_TIME_ZONE;

  nameString=getNameStringPrivate();

}

Location: DateTimeType.java

Content: 

/** 

 * The predicate "x EQUALS y" applies when both x and y are either period names or period constructors. This predicate returns True if the two periods have every time point in common, i.e., if xs = ys and xe = ye. <p>

 * @param session

 * @param a First period to compare

 * @param ta Types of the first period

 * @param b Second period to compare

 * @param tb Type of the second period

 * @return {@link Boolean#TRUE} if period a equals period b,else  {@link Boolean#FALSE}

 */

public static Boolean equals(Session session,Object[] a,Type[] ta,Object[] b,Type[] tb){

  Type commonType=normalizeInput(session,a,ta,b,tb,false);

  if (commonType == null) {

    return null;

  }

  if (commonType.compare(session,a[0],b[0]) == 0 && commonType.compare(session,a[1],b[1]) == 0) {

    return Boolean.TRUE;

  }

  return Boolean.FALSE;

}

Location: DateTimeType.java

Content: 

public DateTimeType getDateTimeTypeWithoutZone(){

  if (this.withTimeZone) {

    DateTimeType type;

switch (typeCode) {

case Types.SQL_TIME_WITH_TIME_ZONE:

      type=new DateTimeType(Types.SQL_TIME,Types.SQL_TIME,scale);

    break;

case Types.SQL_TIMESTAMP_WITH_TIME_ZONE:

  type=new DateTimeType(Types.SQL_TIMESTAMP,Types.SQL_TIMESTAMP,scale);

break;

default :

throw Error.runtimeError(ErrorCode.U_S0500,"DateTimeType");

}

type.nameString=nameString;

return type;

}

return this;

}

Location: DateTimeType.java

Content: 

public static DateTimeType getDateTimeType(int type,int scale){

  if (scale > DTIType.maxFractionPrecision) {

    throw Error.error(ErrorCode.X_42592);

  }

switch (type) {

case Types.SQL_DATE:

    return SQL_DATE;

case Types.SQL_TIME:

  if (scale == DTIType.defaultTimeFractionPrecision) {

    return SQL_TIME;

  }

return new DateTimeType(Types.SQL_TIME,type,scale);

case Types.SQL_TIME_WITH_TIME_ZONE:

if (scale == DTIType.defaultTimeFractionPrecision) {

return SQL_TIME_WITH_TIME_ZONE;

}

return new DateTimeType(Types.SQL_TIME,type,scale);

case Types.SQL_TIMESTAMP:

if (scale == DTIType.defaultTimestampFractionPrecision) {

return SQL_TIMESTAMP;

}

if (scale == 0) {

return SQL_TIMESTAMP_NO_FRACTION;

}

return new DateTimeType(Types.SQL_TIMESTAMP,type,scale);

case Types.SQL_TIMESTAMP_WITH_TIME_ZONE:

if (scale == DTIType.defaultTimestampFractionPrecision) {

return SQL_TIMESTAMP_WITH_TIME_ZONE;

}

return new DateTimeType(Types.SQL_TIMESTAMP,type,scale);

default :

throw Error.runtimeError(ErrorCode.U_S0500,"DateTimeType");

}

}

Location: DateTimeType.java

Content: 

public static int getDayOfWeek(String name){

  int c=Character.toUpperCase(name.charAt(0));

switch (c) {

case 'M':

    return 2;

case 'T':

  if (Character.toUpperCase(name.charAt(1)) == 'U') {

    return 3;

  }

 else   if (Character.toUpperCase(name.charAt(1)) == 'H') {

    return 5;

  }

break;

case 'W':

return 4;

case 'F':

return 6;

case 'S':

if (Character.toUpperCase(name.charAt(1)) == 'A') {

return 7;

}

 else if (Character.toUpperCase(name.charAt(1)) == 'U') {

return 1;

}

break;

}

throw Error.error(ErrorCode.X_22007);

}

Location: DateTimeType.java

Content: 

public Object getLastDayOfMonth(Session session,Object dateTime){

  TimestampData ts=(TimestampData)dateTime;

  Calendar cal=session.getCalendarGMT();

  long millis=(ts.getSeconds() + ts.getZone()) * 1000;

  HsqlDateTime.setTimeInMillis(cal,millis);

  cal.set(Calendar.DAY_OF_MONTH,1);

  cal.add(Calendar.MONTH,1);

  cal.add(Calendar.DAY_OF_MONTH,-1);

  millis=cal.getTimeInMillis();

  return new TimestampData(millis / 1000,0,0);

}

Location: DateTimeType.java

Content: 

long getMillis(Object dateTime){

  long millis;

  if (typeCode == Types.SQL_TIME || typeCode == Types.SQL_TIME_WITH_TIME_ZONE) {

    millis=(((TimeData)dateTime).getSeconds() + ((TimeData)dateTime).getZone()) * 1000L;

  }

 else {

    millis=(((TimestampData)dateTime).getSeconds() + ((TimestampData)dateTime).getZone()) * 1000;

  }

  return millis;

}

Location: DateTimeType.java

Content: 

public String getPartString(Session session,Object dateTime,int part){

  String javaPattern="";

switch (part) {

case DAY_NAME:

    javaPattern="EEEE";

  break;

case MONTH_NAME:

javaPattern="MMMM";

break;

}

SimpleDateFormat format=session.getSimpleDateFormatGMT();

try {

format.applyPattern(javaPattern);

}

 catch (Exception e) {

}

Date date=(Date)convertSQLToJavaGMT(session,dateTime);

return format.format(date);

}

Location: DateTimeType.java

Content: 

public int getPart(Session session,Object dateTime,int part){

  int calendarPart;

  int increment=0;

  int divisor=1;

switch (part) {

case Types.SQL_INTERVAL_YEAR:

    calendarPart=Calendar.YEAR;

  break;

case Types.SQL_INTERVAL_MONTH:

increment=1;

calendarPart=Calendar.MONTH;

break;

case Types.SQL_INTERVAL_DAY:

case DAY_OF_MONTH:

calendarPart=Calendar.DAY_OF_MONTH;

break;

case Types.SQL_INTERVAL_HOUR:

calendarPart=Calendar.HOUR_OF_DAY;

break;

case Types.SQL_INTERVAL_MINUTE:

calendarPart=Calendar.MINUTE;

break;

case Types.SQL_INTERVAL_SECOND:

calendarPart=Calendar.SECOND;

break;

case DAY_OF_WEEK:

calendarPart=Calendar.DAY_OF_WEEK;

break;

case WEEK_OF_YEAR:

calendarPart=Calendar.WEEK_OF_YEAR;

break;

case SECONDS_MIDNIGHT:

{

if (typeCode == Types.SQL_TIME || typeCode == Types.SQL_TIME_WITH_TIME_ZONE) {

}

 else {

try {

Type target=withTimeZone ? Type.SQL_TIME_WITH_TIME_ZONE : Type.SQL_TIME;

dateTime=target.castToType(session,dateTime,this);

}

 catch (HsqlException e) {

}

}

return ((TimeData)dateTime).getSeconds();

}

case TIMEZONE_HOUR:

if (typeCode == Types.SQL_TIMESTAMP_WITH_TIME_ZONE) {

return ((TimestampData)dateTime).getZone() / 3600;

}

 else {

return ((TimeData)dateTime).getZone() / 3600;

}

case TIMEZONE_MINUTE:

if (typeCode == Types.SQL_TIMESTAMP_WITH_TIME_ZONE) {

return ((TimestampData)dateTime).getZone() / 60 % 60;

}

 else {

return ((TimeData)dateTime).getZone() / 60 % 60;

}

case TIMEZONE:

if (typeCode == Types.SQL_TIMESTAMP_WITH_TIME_ZONE) {

return ((TimestampData)dateTime).getZone() / 60;

}

 else {

return ((TimeData)dateTime).getZone() / 60;

}

case QUARTER:

increment=1;

divisor=3;

calendarPart=Calendar.MONTH;

break;

case DAY_OF_YEAR:

calendarPart=Calendar.DAY_OF_YEAR;

break;

case MILLISECOND:

if (this.isDateOrTimestampType()) {

return ((TimestampData)dateTime).getNanos() / 1000000;

}

 else {

return ((TimeData)dateTime).getNanos() / 1000000;

}

case NANOSECOND:

if (this.isDateOrTimestampType()) {

return ((TimestampData)dateTime).getNanos();

}

 else {

return ((TimeData)dateTime).getNanos();

}

default :

throw Error.runtimeError(ErrorCode.U_S0500,"DateTimeType - " + part);

}

long millis=getMillis(dateTime);

return HsqlDateTime.getDateTimePart(millis,calendarPart) / divisor + increment;

}

Location: DateTimeType.java

Content: 

public BigDecimal getSecondPart(Object dateTime){

  long seconds=getPart(null,dateTime,Types.SQL_INTERVAL_SECOND);

  int nanos=0;

  if (typeCode == Types.SQL_TIMESTAMP || typeCode == Types.SQL_TIMESTAMP_WITH_TIME_ZONE) {

    nanos=((TimestampData)dateTime).getNanos();

  }

 else   if (typeCode == Types.SQL_TIME || typeCode == Types.SQL_TIME_WITH_TIME_ZONE) {

    nanos=((TimeData)dateTime).getNanos();

  }

  return getSecondPart(seconds,nanos);

}

Location: DateTimeType.java

Content: 

public int getSqlDateTimeSub(){

switch (typeCode) {

case Types.SQL_DATE:

    return 1;

case Types.SQL_TIME:

  return 2;

case Types.SQL_TIMESTAMP:

return 3;

default :

return 0;

}

}

Location: DateTimeType.java

Content: 

public Object getValue(long seconds,int nanos,int zoneSeconds){

switch (typeCode) {

case Types.SQL_DATE:

    seconds=HsqlDateTime.getNormalisedDate((seconds + zoneSeconds) * 1000) / 1000;

  return new TimestampData(seconds);

case Types.SQL_TIME_WITH_TIME_ZONE:

seconds=HsqlDateTime.getNormalisedDate(seconds * 1000) / 1000;

return new TimeData((int)seconds,nanos,zoneSeconds);

case Types.SQL_TIME:

seconds=HsqlDateTime.getNormalisedTime((seconds + zoneSeconds) * 1000) / 1000;

return new TimeData((int)seconds,nanos);

case Types.SQL_TIMESTAMP_WITH_TIME_ZONE:

return new TimestampData(seconds,nanos,zoneSeconds);

case Types.SQL_TIMESTAMP:

return new TimestampData(seconds + zoneSeconds,nanos);

default :

throw Error.runtimeError(ErrorCode.U_S0500,"DateTimeType");

}

}

Location: DateTimeType.java

Content: 

long getZoneMillis(Object dateTime){

  long millis;

  if (typeCode == Types.SQL_TIME || typeCode == Types.SQL_TIME_WITH_TIME_ZONE) {

    millis=((TimeData)dateTime).getZone() * 1000L;

  }

 else {

    millis=((TimestampData)dateTime).getZone() * 1000L;

  }

  return millis;

}

Location: DateTimeType.java

Content: 

/** 

 * The predicate "x IMMEDIATELY PRECEDES y" applies when both x and y are either period names or period constructors. In this case, the predicate returns True if the end value of x is equal to the start value of y, i.e., if xe = ys. <p>

 * @param session

 * @param a First period to compare

 * @param ta Types of the first period

 * @param b Second period to compare

 * @param tb Type of the second period

 * @return {@link Boolean#TRUE} if period a immediately precedes period b,else  {@link Boolean#FALSE}

 */

public static Boolean immediatelyPrecedes(Session session,Object[] a,Type[] ta,Object[] b,Type[] tb){

  Type commonType=normalizeInput(session,a,ta,b,tb,false);

  if (commonType == null) {

    return null;

  }

  if (commonType.compare(session,a[1],b[0]) == 0) {

    return Boolean.TRUE;

  }

  return Boolean.FALSE;

}

Location: DateTimeType.java

Content: 

/** 

 * The predicate "x IMMEDIATELY SUCCEEDS y" applies when both x and y are either period names or period constructors. In this case, the predicate returns True if the start value of x is equal to the end value of y, i.e., if xs = ye. <p>

 * @param session

 * @param a First period to compare

 * @param ta Types of the first period

 * @param b Second period to compare

 * @param tb Type of the second period

 * @return {@link Boolean#TRUE} if period a immediately succeeds period b,else  {@link Boolean#FALSE}

 */

public static Boolean immediatelySucceeds(Session session,Object[] a,Type[] ta,Object[] b,Type[] tb){

  Type commonType=normalizeInput(session,a,ta,b,tb,false);

  if (commonType == null) {

    return null;

  }

  if (commonType.compare(session,a[0],b[1]) == 0) {

    return Boolean.TRUE;

  }

  return Boolean.FALSE;

}

Location: DateTimeType.java

Content: 

public boolean isDateOrTimestampType(){

switch (typeCode) {

case Types.SQL_DATE:

case Types.SQL_TIMESTAMP:

case Types.SQL_TIMESTAMP_WITH_TIME_ZONE:

    return true;

case Types.SQL_TIME:

case Types.SQL_TIME_WITH_TIME_ZONE:

  return false;

default :

throw Error.runtimeError(ErrorCode.U_S0500,"DateTimeType");

}

}

Location: DateTimeType.java

Content: 

public boolean isDateTimeType(){

  return true;

}

Location: DateTimeType.java

Content: 

public boolean isDateTimeTypeWithZone(){

  return withTimeZone;

}

Location: DateTimeType.java

Content: 

public boolean isTimestampType(){

switch (typeCode) {

case Types.SQL_TIMESTAMP:

case Types.SQL_TIMESTAMP_WITH_TIME_ZONE:

    return true;

case Types.SQL_DATE:

case Types.SQL_TIME:

case Types.SQL_TIME_WITH_TIME_ZONE:

  return false;

default :

throw Error.runtimeError(ErrorCode.U_S0500,"DateTimeType");

}

}

Location: DateTimeType.java

Content: 

public boolean isTimeType(){

switch (typeCode) {

case Types.SQL_TIMESTAMP:

case Types.SQL_TIMESTAMP_WITH_TIME_ZONE:

case Types.SQL_DATE:

    return false;

case Types.SQL_TIME:

case Types.SQL_TIME_WITH_TIME_ZONE:

  return true;

default :

throw Error.runtimeError(ErrorCode.U_S0500,"DateTimeType");

}

}

Location: DateTimeType.java

Content: 

public static TimestampData nextDayOfWeek(Session session,TimestampData d,int day){

  Calendar cal=session.getCalendarGMT();

  cal.setTimeInMillis(d.getMillis());

  int start=cal.get(Calendar.DAY_OF_WEEK);

  if (start >= day) {

    day+=7;

  }

  int diff=day - start;

  cal.add(Calendar.DAY_OF_MONTH,diff);

  long millis=cal.getTimeInMillis();

  millis=HsqlDateTime.getNormalisedDate(cal,millis);

  return new TimestampData(millis / 1000);

}

Location: DateTimeType.java

Content: 

public static int normaliseTime(int seconds){

  while (seconds < 0) {

    seconds+=24 * 60 * 60;

  }

  if (seconds > 24 * 60 * 60) {

    seconds%=24 * 60 * 60;

  }

  return seconds;

}

Location: DateTimeType.java

Content: 

/** 

 * For temporal predicate operations on periods, we need to make sure we compare data of the same types. We also switch the period boundaries if the first entry is after the second one. <p> Important: when this method returns, the boundaries of the periods may have been changed.

 * @param session

 * @param a First period to compare

 * @param ta Types of the first period

 * @param b Second period to compare

 * @param tb Type of the second period

 * @return The common data type of the boundaries of the two limits.null if any of the two periods is null or if the first limit of any period is null.

 * @since 2.3.4

 */

public static Type normalizeInputRelaxed(Session session,Object[] a,Type[] ta,Object[] b,Type[] tb){

  if (a == null || b == null) {

    return null;

  }

  if (a[0] == null || b[0] == null) {

    return null;

  }

  if (a[1] == null) {

    a[1]=a[0];

  }

  if (b[1] == null) {

    b[1]=b[0];

  }

  Type commonType=ta[0].getCombinedType(session,tb[0],OpTypes.EQUAL);

  a[0]=commonType.castToType(session,a[0],ta[0]);

  b[0]=commonType.castToType(session,b[0],tb[0]);

  if (ta[1].isIntervalType()) {

    a[1]=commonType.add(session,a[0],a[1],ta[1]);

  }

 else {

    a[1]=commonType.castToType(session,a[1],ta[1]);

  }

  if (tb[1].isIntervalType()) {

    b[1]=commonType.add(session,b[0],b[1],tb[1]);

  }

 else {

    b[1]=commonType.castToType(session,b[1],tb[1]);

  }

  if (commonType.compare(session,a[0],a[1]) > 0) {

    Object temp=a[0];

    a[0]=a[1];

    a[1]=temp;

  }

  if (commonType.compare(session,b[0],b[1]) > 0) {

    Object temp=b[0];

    b[0]=b[1];

    b[1]=temp;

  }

  return commonType;

}

Location: DateTimeType.java

Content: 

/** 

 * For temporal predicate operations on periods, we need to make sure we compare data of the same types. <p>

 * @param session

 * @param a First period to compare

 * @param ta Types of the first period

 * @param b Second period to compare

 * @param tb Type of the second period

 * @return The common data type of the boundaries of the two limits.null if any of the two periods is null or if the first limit of any period is null.

 * @since 2.3.4

 */

public static Type normalizeInput(Session session,Object[] a,Type[] ta,Object[] b,Type[] tb,boolean pointOfTime){

  if (a == null || b == null) {

    return null;

  }

  if (a[0] == null || b[0] == null) {

    return null;

  }

  if (a[1] == null) {

    return null;

  }

  if (!pointOfTime && b[1] == null) {

    return null;

  }

  Type commonType=SQL_TIMESTAMP_WITH_TIME_ZONE;

  a[0]=commonType.castToType(session,a[0],ta[0]);

  b[0]=commonType.castToType(session,b[0],tb[0]);

  if (ta[1].isIntervalType()) {

    a[1]=commonType.add(session,a[0],a[1],ta[1]);

  }

 else {

    a[1]=commonType.castToType(session,a[1],ta[1]);

  }

  if (tb[1].isIntervalType()) {

    b[1]=commonType.add(session,b[0],b[1],tb[1]);

  }

 else {

    if (pointOfTime) {

      b[1]=b[0];

    }

 else {

      b[1]=commonType.castToType(session,b[1],tb[1]);

    }

  }

  if (commonType.compare(session,a[0],a[1]) >= 0) {

    throw Error.error(ErrorCode.X_22020);

  }

  if (!pointOfTime && commonType.compare(session,b[0],b[1]) >= 0) {

    throw Error.error(ErrorCode.X_22020);

  }

  return commonType;

}

Location: DateTimeType.java

Content: 

/** 

 * The predicate "a OVERLAPS b" applies when both a and b are rows. This predicate returns True if the two periods have at least one time point in common, i.e, if a[0] < b[1] and a[1] > b[0]. This predicates is commutative: "a OVERLAPS B" must return the same result of "b OVERLAPS a" <p> Important: when this method returns, the boundaries of the periods may have been changed.

 * @param session

 * @param a First period to compare

 * @param ta Types of the first period

 * @param b Second period to compare

 * @param tb Type of the second period

 * @return {@link Boolean#TRUE} if the two periods overlaps,else  {@link Boolean#FALSE}

 */

public static Boolean overlapsRelaxed(Session session,Object[] a,Type[] ta,Object[] b,Type[] tb){

  Type commonType=normalizeInputRelaxed(session,a,ta,b,tb);

  if (commonType == null) {

    return null;

  }

  if (commonType.compare(session,a[0],b[0]) > 0) {

    Object[] temp=a;

    a=b;

    b=temp;

  }

  if (commonType.compare(session,a[1],b[0]) > 0) {

    return Boolean.TRUE;

  }

  return Boolean.FALSE;

}

Location: DateTimeType.java

Content: 

/** 

 * The predicate "a OVERLAPS b" applies when both a and b are either period names or period constructors. This predicate returns True if the two periods have at least one time point in common, i.e, if a[0] < b[1] and a[1] > b[0]. This predicates is commutative: "a OVERLAPS B" must return the same result of "b OVERLAPS a" <p>

 * @param session

 * @param a First period to compare

 * @param ta Types of the first period

 * @param b Second period to compare

 * @param tb Type of the second period

 * @return {@link Boolean#TRUE} if the two periods overlaps,else  {@link Boolean#FALSE}

 */

public static Boolean overlaps(Session session,Object[] a,Type[] ta,Object[] b,Type[] tb){

  Type commonType=normalizeInput(session,a,ta,b,tb,false);

  if (commonType == null) {

    return null;

  }

  if (commonType.compare(session,a[0],b[0]) > 0) {

    Object[] temp=a;

    a=b;

    b=temp;

  }

  if (commonType.compare(session,a[1],b[0]) > 0) {

    return Boolean.TRUE;

  }

  return Boolean.FALSE;

}

Location: DateTimeType.java

Content: 

/** 

 * The predicate "a PRECEDES b" applies when both a and b are either period names or period constructors. In this case, the predicate returns True if the end value of a is less than or equal to the start value of b, i.e., if ae <= as. <p>

 * @param session

 * @param a First period to compare

 * @param ta Types of the first period

 * @param b Second period to compare

 * @param tb Type of the second period

 * @return {@link Boolean#TRUE} if period a precedes period b,else  {@link Boolean#FALSE}

 */

public static Boolean precedes(Session session,Object[] a,Type[] ta,Object[] b,Type[] tb){

  Type commonType=normalizeInput(session,a,ta,b,tb,false);

  if (commonType == null) {

    return null;

  }

  if (commonType.compare(session,a[1],b[0]) <= 0) {

    return Boolean.TRUE;

  }

  return Boolean.FALSE;

}

Location: DateTimeType.java

Content: 

int scaleNanos(int nanos){

  int divisor=nanoScaleFactors[scale];

  return (nanos / divisor) * divisor;

}

Location: DateTimeType.java

Content: 

public static BigDecimal subtractMonthsSpecial(Session session,TimestampData a,TimestampData b){

  long s1=(a.getSeconds() + a.getZone()) * 1000;

  long s2=(b.getSeconds() + b.getZone()) * 1000;

  boolean minus=false;

  if (s1 < s2) {

    minus=true;

    long temp=s1;

    s1=s2;

    s2=temp;

  }

  s1=HsqlDateTime.getNormalisedDate(session.getCalendarGMT(),s1);

  s2=HsqlDateTime.getNormalisedDate(session.getCalendarGMT(),s2);

  Calendar cal=session.getCalendarGMT();

  cal.setTimeInMillis(s1);

  int lastDay1;

  int months1=cal.get(Calendar.MONTH) + cal.get(Calendar.YEAR) * 12;

  int day1=cal.get(Calendar.DAY_OF_MONTH);

  cal.set(Calendar.DAY_OF_MONTH,1);

  long millis=cal.getTimeInMillis();

  cal.add(Calendar.MONTH,1);

  millis=cal.getTimeInMillis();

  cal.add(Calendar.DAY_OF_MONTH,-1);

  millis=cal.getTimeInMillis();

  lastDay1=cal.get(Calendar.DAY_OF_MONTH);

  cal.setTimeInMillis(s2);

  int lastDay2;

  int months2=cal.get(Calendar.MONTH) + cal.get(Calendar.YEAR) * 12;

  int day2=cal.get(Calendar.DAY_OF_MONTH);

  cal.set(Calendar.DAY_OF_MONTH,1);

  millis=cal.getTimeInMillis();

  cal.add(Calendar.MONTH,1);

  millis=cal.getTimeInMillis();

  cal.add(Calendar.DAY_OF_MONTH,-1);

  millis=cal.getTimeInMillis();

  lastDay2=cal.get(Calendar.DAY_OF_MONTH);

  double months;

  double days;

  if (day1 == day2 || (day1 == lastDay1 && day2 == lastDay2)) {

    months=months1 - months2;

    if (minus) {

      months=-months;

    }

    return BigDecimal.valueOf(months);

  }

 else   if (day2 > day1) {

    months=months1 - months2 - 1;

    days=lastDay2 - day2 + day1;

    months+=days / 31;

    if (minus) {

      months=-months;

    }

    return BigDecimal.valueOf(months);

  }

 else {

    months=months1 - months2;

    days=day1 - day2;

    months+=days / 31;

    if (minus) {

      months=-months;

    }

    return BigDecimal.valueOf(months);

  }

}

Location: DateTimeType.java

Content: 

public static int subtractMonths(Session session,TimestampData a,TimestampData b,boolean isYear){

  Calendar calendar=session.getCalendarGMT();

synchronized (calendar) {

    boolean negate=false;

    if (b.getSeconds() > a.getSeconds()) {

      negate=true;

      TimestampData temp=a;

      a=b;

      b=temp;

    }

    calendar.setTimeInMillis(a.getSeconds() * 1000);

    int months=calendar.get(Calendar.MONTH);

    int years=calendar.get(Calendar.YEAR);

    calendar.setTimeInMillis(b.getSeconds() * 1000);

    months-=calendar.get(Calendar.MONTH);

    years-=calendar.get(Calendar.YEAR);

    if (isYear) {

      months=years * 12;

    }

 else {

      if (months < 0) {

        months+=12;

        years--;

      }

      months+=years * 12;

    }

    if (negate) {

      months=-months;

    }

    return months;

  }

}

Location: DateTimeType.java

Content: 

/** 

 * The predicate "x SUCCEEDS y" applies when both x and y are either period names or period constructors. In this case, the predicate returns True if the start value of x is greater than or equal to the end value of y, i.e., if xs >= ye. <p>

 * @param session

 * @param a First period to compare

 * @param ta Types of the first period

 * @param b Second period to compare

 * @param tb Type of the second period

 * @return {@link Boolean#TRUE} if period a succeeds period b,else  {@link Boolean#FALSE}

 */

public static Boolean succeeds(Session session,Object[] a,Type[] ta,Object[] b,Type[] tb){

  Type commonType=normalizeInput(session,a,ta,b,tb,false);

  if (commonType == null) {

    return null;

  }

  if (commonType.compare(session,a[0],b[1]) >= 0) {

    return Boolean.TRUE;

  }

  return Boolean.FALSE;

}

