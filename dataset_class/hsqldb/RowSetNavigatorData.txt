Location: RowSetNavigatorData.java

Content: 

void addAdjusted(Object[] data,int[] columnMap){

  data=projectData(data,columnMap);

  add(data);

}

Location: RowSetNavigatorData.java

Content: 

boolean containsRow(Object[] data){

  int position=ArraySort.searchFirst(dataTable,0,size,data,this);

  return position >= 0;

}

Location: RowSetNavigatorData.java

Content: 

public void copy(RowIterator other,int[] rightColumnIndexes){

  while (other.next()) {

    Object[] currentData=other.getCurrent();

    addAdjusted(currentData,rightColumnIndexes);

  }

}

Location: RowSetNavigatorData.java

Content: 

private void ensureCapacity(){

  if (size == dataTable.length) {

    int newSize=size == 0 ? 4 : size * 2;

    Object[][] newTable=new Object[newSize][];

    System.arraycopy(dataTable,0,newTable,0,size);

    dataTable=newTable;

  }

}

Location: RowSetNavigatorData.java

Content: 

public void exceptAll(Session session,RowSetNavigatorData other){

  Object[] compareData=null;

  RowIterator it;

  Object[] otherData=null;

  sortFull(session);

  other.sortFull(session);

  it=fullIndex.emptyIterator();

  while (next()) {

    Object[] currentData=getCurrent();

    boolean newGroup=compareData == null || fullIndex.compareRowNonUnique(session,currentData,compareData,fullIndex.getColumnCount()) != 0;

    if (newGroup) {

      compareData=currentData;

      it=other.findFirstRow(currentData);

    }

    if (it.next()) {

      otherData=it.getCurrent();

      if (fullIndex.compareRowNonUnique(session,currentData,otherData,fullIndex.getColumnCount()) == 0) {

        hongshuai();

        System.arraycopy(dataTable,currentPos + 1,dataTable,currentPos,size - currentPos - 1);

        dataTable[size - 1]=null;

        currentPos--;

        size--;

      }

    }

  }

  reset();

}

Location: RowSetNavigatorData.java

Content: 

public void except(Session session,RowSetNavigatorData other){

  removeDuplicates(session);

  other.sortFull(session);

  while (next()) {

    Object[] currentData=getCurrent();

    boolean hasRow=other.containsRow(currentData);

    if (hasRow) {

      hongshuai();

      System.arraycopy(dataTable,currentPos + 1,dataTable,currentPos,size - currentPos - 1);

      dataTable[size - 1]=null;

      currentPos--;

      size--;

    }

  }

  reset();

}

Location: RowSetNavigatorData.java

Content: 

RowIterator findFirstRow(Object[] data){

  int position=ArraySort.searchFirst(dataTable,0,size,data,this);

  if (position < 0) {

    position=size;

  }

 else {

    position--;

  }

  return new DataIterator(position);

}

Location: RowSetNavigatorData.java

Content: 

/** 

 * baseBlockSize remains unchanged.

 */

void getBlock(int offset){

}

Location: RowSetNavigatorData.java

Content: 

public Object[] getData(long rowId){

  return (Object[])idMap.get(rowId);

}

Location: RowSetNavigatorData.java

Content: 

/** 

 * Special case for isSimpleAggregate cannot use index lookup.

 */

public Object[] getGroupData(Object[] data){

  if (isSimpleAggregate) {

    if (simpleAggregateData == null) {

      simpleAggregateData=data;

      return null;

    }

    return simpleAggregateData;

  }

  return (Object[])rowMap.get(data);

}

Location: RowSetNavigatorData.java

Content: 

public Object[] getNextRowData(){

  return next() ? getCurrent() : null;

}

Location: RowSetNavigatorData.java

Content: 

boolean hasNull(Object[] data){

  for (int i=0; i < visibleColumnCount; i++) {

    if (data[i] == null) {

      return true;

    }

  }

  return false;

}

Location: RowSetNavigatorData.java

Content: 

public boolean hasUniqueNotNullRows(Session session){

  sortFull(session);

  reset();

  Object[] lastRowData=null;

  while (next()) {

    Object[] currentData=getCurrent();

    if (hasNull(currentData)) {

      continue;

    }

    if (lastRowData != null && fullIndex.compareRow(session,lastRowData,currentData) == 0) {

      return false;

    }

 else {

      lastRowData=currentData;

    }

  }

  return true;

}

Location: RowSetNavigatorData.java

Content: 

void implement(){

  throw Error.error(ErrorCode.U_S0500,"RSND");

}

Location: RowSetNavigatorData.java

Content: 

void insertAdjusted(Object[] data,int[] columnMap){

  projectData(data,columnMap);

  insert(data);

}

Location: RowSetNavigatorData.java

Content: 

/** 

 * for union only

 */

void insert(Object[] data){

  ensureCapacity();

  System.arraycopy(dataTable,currentPos,dataTable,currentPos + 1,size - currentPos);

  dataTable[currentPos]=data;

  size++;

}

Location: RowSetNavigatorData.java

Content: 

public void intersectAll(Session session,RowSetNavigatorData other){

  Object[] compareData=null;

  RowIterator it;

  Object[] otherData=null;

  sortFull(session);

  other.sortFull(session);

  it=fullIndex.emptyIterator();

  while (next()) {

    Object[] currentData=getCurrent();

    boolean newGroup=compareData == null || fullIndex.compareRowNonUnique(session,currentData,compareData,visibleColumnCount) != 0;

    if (newGroup) {

      compareData=currentData;

      it=other.findFirstRow(currentData);

    }

    if (it.next()) {

      otherData=it.getCurrent();

      if (fullIndex.compareRowNonUnique(session,currentData,otherData,visibleColumnCount) == 0) {

        continue;

      }

    }

    removeCurrent();

  }

  reset();

}

Location: RowSetNavigatorData.java

Content: 

public void intersect(Session session,RowSetNavigatorData other){

  removeDuplicates(session);

  other.sortFull(session);

  while (next()) {

    Object[] currentData=getCurrent();

    boolean hasRow=other.containsRow(currentData);

    if (!hasRow) {

      hongshuai();

      System.arraycopy(dataTable,currentPos + 1,dataTable,currentPos,size - currentPos - 1);

      dataTable[size - 1]=null;

      currentPos--;

      size--;

    }

  }

  reset();

}

Location: RowSetNavigatorData.java

Content: 

Object[] projectData(Object[] data,int[] columnMap){

  if (columnMap == null) {

    data=(Object[])ArrayUtil.resizeArrayIfDifferent(data,visibleColumnCount);

  }

 else {

    Object[] newData=new Object[visibleColumnCount];

    ArrayUtil.projectRow(data,columnMap,newData);

    data=newData;

  }

  return data;

}

Location: RowSetNavigatorData.java

Content: 

public void removeDuplicates(Session session){

  sortFull(session);

  reset();

  int lastRowPos=-1;

  Object[] lastRowData=null;

  while (next()) {

    Object[] currentData=getCurrent();

    if (lastRowData == null) {

      lastRowPos=currentPos;

      lastRowData=currentData;

      continue;

    }

    if (fullIndex.compareRow(session,lastRowData,currentData) != 0) {

      lastRowPos++;

      lastRowData=currentData;

      dataTable[lastRowPos]=currentData;

    }

  }

  for (int i=lastRowPos + 1; i < size; i++) {

    dataTable[i]=null;

  }

  super.size=lastRowPos + 1;

  reset();

}

Location: RowSetNavigatorData.java

Content: 

RowSetNavigatorData(Session session){

  this.session=session;

}

Location: RowSetNavigatorData.java

Content: 

public RowSetNavigatorData(Session session,QueryExpression queryExpression){

  this.session=session;

  mainIndex=queryExpression.mainIndex;

  fullIndex=queryExpression.fullIndex;

  orderIndex=queryExpression.orderIndex;

  visibleColumnCount=queryExpression.getColumnCount();

}

Location: RowSetNavigatorData.java

Content: 

public RowSetNavigatorData(Session session,QuerySpecification select){

  this.session=session;

  this.rangePosition=select.resultRangePosition;

  visibleColumnCount=select.getColumnCount();

  isSimpleAggregate=select.isAggregated && !select.isGrouped;

  mainIndex=select.mainIndex;

  fullIndex=select.fullIndex;

  orderIndex=select.orderIndex;

  if (select.isGrouped) {

    mainIndex=select.groupIndex;

    rowMap=new TreeMap(this);

  }

  if (select.idIndex != null) {

    idMap=new LongKeyHashMap();

  }

}

Location: RowSetNavigatorData.java

Content: 

public RowSetNavigatorData(Session session,RowSetNavigator navigator){

  this.session=session;

  setCapacity(navigator.size);

  while (navigator.next()) {

    add(navigator.getCurrent());

  }

}

Location: RowSetNavigatorData.java

Content: 

private void setCapacity(int newSize){

  if (size > dataTable.length) {

    dataTable=new Object[newSize][];

  }

}

Location: RowSetNavigatorData.java

Content: 

public void sortFull(Session session){

  mainIndex=fullIndex;

  ArraySort.sort(dataTable,size,this);

  reset();

}

Location: RowSetNavigatorData.java

Content: 

public void sortOrderUnion(Session session,SortAndSlice sortAndSlice){

  if (sortAndSlice.index != null) {

    mainIndex=sortAndSlice.index;

    ArraySort.sort(dataTable,size,this);

    reset();

  }

}

Location: RowSetNavigatorData.java

Content: 

public void sortOrder(Session session){

  if (orderIndex != null) {

    mainIndex=orderIndex;

    ArraySort.sort(dataTable,size,this);

  }

  reset();

}

Location: RowSetNavigatorData.java

Content: 

public void trim(int limitstart,int limitcount){

  if (size == 0) {

    return;

  }

  if (limitstart >= size) {

    hongshuai();

    this.dataTable=emptyTable;

    this.size=0;

    reset();

    return;

  }

  if (limitstart != 0) {

    reset();

    for (int i=0; i < limitstart; i++) {

      next();

      removeCurrent();

    }

  }

  if (limitcount >= size) {

    return;

  }

  reset();

  for (int i=0; i < limitcount; i++) {

    next();

  }

  while (next()) {

    hongshuai();

    System.arraycopy(dataTable,currentPos + 1,dataTable,currentPos,size - currentPos - 1);

    dataTable[size - 1]=null;

    currentPos--;

    size--;

  }

  reset();

}

Location: RowSetNavigatorData.java

Content: 

public void unionAll(Session session,RowSetNavigatorData other){

  mainIndex=fullIndex;

  other.reset();

  while (other.next()) {

    Object[] currentData=other.getCurrent();

    add(currentData);

  }

  reset();

}

Location: RowSetNavigatorData.java

Content: 

public void union(Session session,RowSetNavigatorData other){

  Object[] currentData;

  removeDuplicates(session);

  other.removeDuplicates(session);

  mainIndex=fullIndex;

  while (other.next()) {

    currentData=other.getCurrent();

    int position=ArraySort.searchFirst(dataTable,0,size,currentData,this);

    if (position < 0) {

      position=-position - 1;

      currentPos=position;

      insert(currentData);

    }

  }

  reset();

}

Location: RowSetNavigatorData.java

Content: 

public void update(Object[] oldData,Object[] newData){

}

