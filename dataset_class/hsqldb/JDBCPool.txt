Location: JDBCPool.java

Content: 

public void connectionClosed(ConnectionEvent event){

  PooledConnection connection=(PooledConnection)event.getSource();

  for (int i=0; i < connections.length; i++) {

    if (connections[i] == connection) {

      states.set(i,RefState.available);

      break;

    }

  }

}

Location: JDBCPool.java

Content: 

public void connectionErrorOccurred(ConnectionEvent event){

  PooledConnection connection=(PooledConnection)event.getSource();

  for (int i=0; i < connections.length; i++) {

    if (connections[i] == connection) {

      states.set(i,RefState.allocated);

      connections[i]=null;

      states.set(i,RefState.empty);

      break;

    }

  }

}

Location: JDBCPool.java

Content: 

/** 

 * Retrieves the name of the data source. <p>

 * @return the description

 */

public String getDataSourceName(){

  return "org.hsqldb.jdbc.JDBCPool";

}

Location: JDBCPool.java

Content: 

/** 

 * Retrieves the description of the data source. <p>

 * @return the description

 */

public String getDescription(){

  return "org.hsqldb.jdbc.JDBCPool max size " + connections.length;

}

Location: JDBCPool.java

Content: 

/** 

 * Gets the maximum time in seconds that this data source can wait while attempting to connect to a database.  A value of zero means that the timeout is the default system timeout if there is one; otherwise, it means that there is no timeout. When a <code>DataSource</code> object is created, the login timeout is initially zero.

 * @return the data source login time limit

 * @exception SQLException if a database access error occurs.

 * @see #setLoginTimeout

 * @since 1.4

 */

public int getLoginTimeout() throws SQLException {

  return source.getLoginTimeout();

}

Location: JDBCPool.java

Content: 

/** 

 * Return the parent Logger of all the Loggers used by this data source. This should be the Logger farthest from the root Logger that is still an ancestor of all of the Loggers used by this data source. Configuring this Logger will affect all of the log messages generated by the data source. In the worst case, this may be the root Logger.

 * @return the parent Logger for this data source

 * @throws SQLFeatureNotSupportedException if the data source does not use <code>java.util.logging</code>.

 * @since JDK 1.7 M11 2010/09/10 (b123), HSQLDB 2.2.9

 */

public java.util.logging.Logger getParentLogger() throws java.sql.SQLFeatureNotSupportedException {

  throw (java.sql.SQLFeatureNotSupportedException)JDBCUtil.notSupported();

}

Location: JDBCPool.java

Content: 

/** 

 * Creates a connection pool with the maximum size of 8. The database and connection settings are made before the  {@link #getConnection()} is called.

 */

public JDBCPool(){

  this(10);

}

Location: JDBCPool.java

Content: 

/** 

 * Creates a connection pool with the given maximum size. The database and connection settings are made before the  {@link #getConnection()} is called.

 * @param size int maximum size of the pool

 */

public JDBCPool(int size){

  source=new JDBCPooledDataSource();

  connections=new JDBCPooledConnection[size];

  states=new AtomicIntegerArray(size);

}

Location: JDBCPool.java

Content: 

/** 

 * Synonym for setUrl(String). <p>

 * @param databaseName the new value for the attribute

 */

public void setDatabaseName(String databaseName){

  source.setDatabaseName(databaseName);

}

Location: JDBCPool.java

Content: 

/** 

 * Synonym for setUrl(String). <p>

 * @param database the new value for the attribute

 */

public void setDatabase(String database){

  source.setDatabase(database);

}

Location: JDBCPool.java

Content: 

/** 

 * <p>Sets the maximum time in seconds that this data source will wait while attempting to connect to a database.  A value of zero specifies that the timeout is the default system timeout if there is one; otherwise, it specifies that there is no timeout. When a <code>DataSource</code> object is created, the login timeout is initially zero.

 * @param seconds the data source login time limit

 * @exception SQLException if a database access error occurs.

 * @see #getLoginTimeout

 * @since 1.4

 */

public void setLoginTimeout(int seconds) throws SQLException {

  source.setLoginTimeout(seconds);

}

Location: JDBCPool.java

Content: 

/** 

 * <p>Sets the log writer for this <code>DataSource</code> object to the given <code>java.io.PrintWriter</code> object. <p>The log writer is a character output stream to which all logging and tracing messages for this data source will be printed.  This includes messages printed by the methods of this object, messages printed by methods of other objects manufactured by this object, and so on.  Messages printed to a data source- specific log writer are not printed to the log writer associated with the <code>java.sql.DriverManager</code> class. When a <code>DataSource</code> object is created the log writer is initially null; in other words, the default is for logging to be disabled.

 * @param out the new log writer; to disable logging, set to null

 * @exception SQLException if a database access error occurs

 * @see #getLogWriter

 * @since 1.4

 */

public void setLogWriter(java.io.PrintWriter out) throws SQLException {

  source.setLogWriter(out);

}

Location: JDBCPool.java

Content: 

/** 

 * Sets the password for the user name.

 * @param password the password

 */

public void setPassword(String password){

  source.setPassword(password);

}

Location: JDBCPool.java

Content: 

/** 

 * Sets connection properties. If user / password / loginTimeout has been set with one of the setXXX() methods it will be added to the Properties object.

 * @param props properties.  If null, then existing properties will becleared/replaced.

 */

public void setProperties(Properties props){

  source.setProperties(props);

}

Location: JDBCPool.java

Content: 

/** 

 * Sets the jdbc database URL. <p>

 * @param url the new value of this object's jdbc database connectionurl attribute

 */

public void setURL(String url){

  source.setUrl(url);

}

Location: JDBCPool.java

Content: 

/** 

 * Sets the user name.

 * @param user the user id

 */

public void setUser(String user){

  source.setUser(user);

}

Location: JDBCPool.java

Content: 

public void statementClosed(StatementEvent event){

}

Location: JDBCPool.java

Content: 

public void statementErrorOccurred(StatementEvent event){

}

