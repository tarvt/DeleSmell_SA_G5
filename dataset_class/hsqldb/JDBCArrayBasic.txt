Location: JDBCArrayBasic.java

Content: 

Object[] getArrayInternal(){

  return data;

}

Location: JDBCArrayBasic.java

Content: 

/** 

 * <!-- start generic documentation --> Retrieves the contents of the SQL <code>ARRAY</code> value designated by this <code>Array</code> object. This method uses the specified <code>map</code> for type map customizations unless the base type of the array does not match a user-defined type in <code>map</code>, in which case it uses the standard mapping. This version of the method <code>getArray</code> uses either the given type map or the standard mapping; it never uses the type map associated with the connection. <p> <strong>Note:</strong> When <code>getArray</code> is used to materialize a base type that maps to a primitive data type, then it is implementation-defined whether the array returned is an array of that primitive data type or an array of <code>Object</code>. <!-- end generic documentation --> <!-- start release-specific documentation --> <div class="ReleaseSpecificDocumentation"> <h3>HSQLDB-Specific Information:</h3> <p> HSQLDB always returns an array of <code>Object</code>. </div> <!-- end release-specific documentation -->

 * @param map a <code>java.util.Map</code> object that contains mappingsof SQL type names to classes in the Java programming language

 * @return an array in the Java programming language that contains the orderedelements of the SQL array designated by this object

 * @exception SQLException if an error occurs while attempting toaccess the array

 * @since JDK 1.2

 */

public Object getArray(java.util.Map<String,Class<?>> map) throws SQLException {

  return getArray();

}

Location: JDBCArrayBasic.java

Content: 

/** 

 * <!-- start generic documentation --> Retrieves a slice of the SQL <code>ARRAY</code> value designated by this <code>Array</code> object, beginning with the specified <code>index</code> and containing up to <code>count</code> successive elements of the SQL array.  This method uses the type map associated with the connection for customizations of the type mappings. <p> <strong>Note:</strong> When <code>getArray</code> is used to materialize a base type that maps to a primitive data type, then it is implementation-defined whether the array returned is an array of that primitive data type or an array of <code>Object</code>. <!-- end generic documentation --> <!-- start release-specific documentation --> <div class="ReleaseSpecificDocumentation"> <h3>HSQLDB-Specific Information:</h3> <p> HSQLDB always returns an array of <code>Object</code>. </div> <!-- end release-specific documentation -->

 * @param index the array index of the first element to retrieve;the first element is at index 1

 * @param count the number of successive SQL array elements to retrieve

 * @return an array containing up to <code>count</code> consecutive elementsof the SQL array, beginning with element <code>index</code>

 * @exception SQLException if an error occurs while attempting toaccess the array

 * @since JDK 1.2

 */

public Object getArray(long index,int count) throws SQLException {

  checkClosed();

  if (!JDBCClobClient.isInLimits(data.length,index - 1,count)) {

    throw JDBCUtil.outOfRangeArgument();

  }

  Object[] slice=new Object[count];

  for (int i=0; i < count; i++) {

    slice[i]=data[(int)index + i - 1];

  }

  return slice;

}

Location: JDBCArrayBasic.java

Content: 

/** 

 * <!-- start generic documentation --> Retrieves a slice of the SQL <code>ARRAY</code> value designated by this <code>Array</code> object, beginning with the specified <code>index</code> and containing up to <code>count</code> successive elements of the SQL array. <P> This method uses the specified <code>map</code> for type map customizations unless the base type of the array does not match a user-defined type in <code>map</code>, in which case it uses the standard mapping. This version of the method <code>getArray</code> uses either the given type map or the standard mapping; it never uses the type map associated with the connection. <p> <strong>Note:</strong> When <code>getArray</code> is used to materialize a base type that maps to a primitive data type, then it is implementation-defined whether the array returned is an array of that primitive data type or an array of <code>Object</code>. <!-- end generic documentation --> <!-- start release-specific documentation --> <div class="ReleaseSpecificDocumentation"> <h3>HSQLDB-Specific Information:</h3> <p> HSQLDB always returns an array of <code>Object</code>. </div> <!-- end release-specific documentation -->

 * @param index the array index of the first element to retrieve;the first element is at index 1

 * @param count the number of successive SQL array elements toretrieve

 * @param map a <code>java.util.Map</code> objectthat contains SQL type names and the classes in the Java programming language to which they are mapped

 * @return an array containing up to <code>count</code>consecutive elements of the SQL <code>ARRAY</code> value designated by this <code>Array</code> object, beginning with element <code>index</code>

 * @exception SQLException if an error occurs while attempting toaccess the array

 * @since JDK 1.2

 */

public Object getArray(long index,int count,java.util.Map<String,Class<?>> map) throws SQLException {

  return getArray(index,count);

}

Location: JDBCArrayBasic.java

Content: 

/** 

 * Retrieves the JDBC type of the elements in the array designated by this <code>Array</code> object.

 * @return a constant from the class {@link java.sql.Types} that isthe type code for the elements in the array designated by this <code>Array</code> object

 * @exception SQLException if an error occurs while attemptingto access the base type

 * @since JDK 1.2

 */

public int getBaseType() throws SQLException {

  checkClosed();

  return elementType.getJDBCTypeCode();

}

Location: JDBCArrayBasic.java

Content: 

/** 

 * Retrieves the SQL type name of the elements in the array designated by this <code>Array</code> object. If the elements are a built-in type, it returns the database-specific type name of the elements. If the elements are a user-defined type (UDT), this method returns the fully-qualified SQL type name.

 * @return a <code>String</code> that is the database-specificname for a built-in base type; or the fully-qualified SQL type name for a base type that is a UDT

 * @exception SQLException if an error occurs while attemptingto access the type name

 * @since JDK 1.2

 */

public String getBaseTypeName() throws SQLException {

  checkClosed();

  return elementType.getNameString();

}

Location: JDBCArrayBasic.java

Content: 

/** 

 * Retrieves a result set that contains the elements of the SQL <code>ARRAY</code> value designated by this <code>Array</code> object. This method uses the specified <code>map</code> for type map customizations unless the base type of the array does not match a user-defined type in <code>map</code>, in which case it uses the standard mapping. This version of the method <code>getResultSet</code> uses either the given type map or the standard mapping; it never uses the type map associated with the connection. <p> The result set contains one row for each array element, with two columns in each row.  The second column stores the element value; the first column stores the index into the array for that element (with the first array element being at index 1). The rows are in ascending order corresponding to the order of the indices.

 * @param map contains the mapping of SQL user-defined types toclasses in the Java programming language

 * @return a <code>ResultSet</code> object containing one row for eachof the elements in the array designated by this <code>Array</code> object, with the rows in ascending order based on the indices.

 * @exception SQLException if an error occurs while attempting toaccess the array

 * @since JDK 1.2

 */

public ResultSet getResultSet(java.util.Map<String,Class<?>> map) throws SQLException {

  return getResultSet();

}

Location: JDBCArrayBasic.java

Content: 

/** 

 * Retrieves a result set holding the elements of the subarray that starts at index <code>index</code> and contains up to <code>count</code> successive elements.  This method uses the connection's type map to map the elements of the array if the map contains an entry for the base type. Otherwise, the standard mapping is used. <P> The result set has one row for each element of the SQL array designated by this object, with the first row containing the element at index <code>index</code>.  The result set has up to <code>count</code> rows in ascending order based on the indices.  Each row has two columns:  The second column stores the element value; the first column stores the index into the array for that element.

 * @param index the array index of the first element to retrieve;the first element is at index 1

 * @param count the number of successive SQL array elements to retrieve

 * @return a <code>ResultSet</code> object containing up to<code>count</code> consecutive elements of the SQL array designated by this <code>Array</code> object, starting at index <code>index</code>.

 * @exception SQLException if an error occurs while attempting toaccess the array

 * @since JDK 1.2

 */

public ResultSet getResultSet(long index,int count) throws SQLException {

  checkClosed();

  Result result=this.newColumnResult(index - 1,count);

  return new JDBCResultSet(null,result,result.metaData);

}

Location: JDBCArrayBasic.java

Content: 

/** 

 * Retrieves a result set holding the elements of the subarray that starts at index <code>index</code> and contains up to <code>count</code> successive elements. This method uses the specified <code>map</code> for type map customizations unless the base type of the array does not match a user-defined type in <code>map</code>, in which case it uses the standard mapping. This version of the method <code>getResultSet</code> uses either the given type map or the standard mapping; it never uses the type map associated with the connection. <P> The result set has one row for each element of the SQL array designated by this object, with the first row containing the element at index <code>index</code>.  The result set has up to <code>count</code> rows in ascending order based on the indices.  Each row has two columns:  The second column stores the element value; the first column stores the index into the array for that element.

 * @param index the array index of the first element to retrieve;the first element is at index 1

 * @param count the number of successive SQL array elements to retrieve

 * @param map the <code>Map</code> object that contains the mappingof SQL type names to classes in the Java(tm) programming language

 * @return a <code>ResultSet</code> object containing up to<code>count</code> consecutive elements of the SQL array designated by this <code>Array</code> object, starting at index <code>index</code>.

 * @exception SQLException if an error occurs while attempting toaccess the array

 * @since JDK 1.2

 */

public ResultSet getResultSet(long index,int count,java.util.Map<String,Class<?>> map) throws SQLException {

  return getResultSet(index,count);

}

Location: JDBCArrayBasic.java

Content: 

/** 

 * Public constructor to create an Array object from an Object[] and an HSQLDB org.hsqldb.types.Type object.

 * @param data the Object[]

 * @param type the HSQLDB org.hsqldb.types.Type object

 */

public JDBCArrayBasic(Object[] data,Type type){

  this.data=data;

  this.elementType=type;

}

Location: JDBCArrayBasic.java

Content: 

private Result newColumnResult(long position,int count) throws SQLException {

  if (!JDBCClobClient.isInLimits(data.length,position,count)) {

    throw JDBCUtil.outOfRangeArgument();

  }

  Type[] types=new Type[2];

  types[0]=Type.SQL_INTEGER;

  types[1]=elementType;

  ResultMetaData meta=ResultMetaData.newSimpleResultMetaData(types);

  meta.columnLabels=new String[]{"C1","C2"};

  meta.colIndexes=new int[]{-1,-1};

  meta.columns=new ColumnBase[2];

  for (int i=0; i < meta.columns.length; i++) {

    ColumnBase column=new ColumnBase("","","","");

    column.setType(types[i]);

    meta.columns[i]=column;

  }

  RowSetNavigatorClient navigator=new RowSetNavigatorClient();

  for (int i=(int)position; i < position + count; i++) {

    Object[] rowData=new Object[2];

    rowData[0]=Integer.valueOf(i + 1);

    rowData[1]=data[i];

    navigator.add(rowData);

  }

  Result result=Result.newDataResult(meta);

  result.setNavigator(navigator);

  return result;

}

