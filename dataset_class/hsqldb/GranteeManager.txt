Location: GranteeManager.java

Content: 

/** 

 * Creates a new Role object under management of this object. <p> A set of constraints regarding user creation is imposed: <p> <OL> <LI>Can't create a role with name same as any right. <LI>If this object's collection already contains an element whose name attribute equals the name argument, then a GRANTEE_ALREADY_EXISTS or ROLE_ALREADY_EXISTS Trace is thrown. (This will catch attempts to create Reserved grantee names). </OL>

 */

public Grantee addRole(HsqlName name){

  if (map.containsKey(name.name)) {

    throw Error.error(ErrorCode.X_28503,name.name);

  }

  if (SqlInvariants.isLobsSchemaName(name.name) || SqlInvariants.isSystemSchemaName(name.name)) {

    throw Error.error(ErrorCode.X_28502,name.name);

  }

  Grantee g=new Grantee(name,this);

  g.isRole=true;

  map.put(name.name,g);

  roleMap.add(name.name,g);

  return g;

}

Location: GranteeManager.java

Content: 

public User addUser(HsqlName name){

  if (map.containsKey(name.name)) {

    throw Error.error(ErrorCode.X_28503,name.name);

  }

  if (SqlInvariants.isLobsSchemaName(name.name) || SqlInvariants.isSystemSchemaName(name.name)) {

    throw Error.error(ErrorCode.X_28502,name.name);

  }

  User g=new User(name,this);

  map.put(name.name,g);

  return g;

}

Location: GranteeManager.java

Content: 

public void checkGranteeList(OrderedHashSet granteeList){

  for (int i=0; i < granteeList.size(); i++) {

    String name=(String)granteeList.get(i);

    Grantee grantee=get(name);

    if (grantee == null) {

      throw Error.error(ErrorCode.X_28501,name);

    }

    if (isImmutable(name)) {

      throw Error.error(ErrorCode.X_28502,name);

    }

    if (grantee instanceof User && ((User)grantee).isExternalOnly) {

      throw Error.error(ErrorCode.X_28000,name);

    }

  }

}

Location: GranteeManager.java

Content: 

public void checkRoleList(String granteeName,OrderedHashSet roleList,Grantee grantor,boolean grant){

  Grantee grantee=get(granteeName);

  for (int i=0; i < roleList.size(); i++) {

    String roleName=(String)roleList.get(i);

    Grantee role=getRole(roleName);

    if (role == null) {

      throw Error.error(ErrorCode.X_0P000,roleName);

    }

    if (roleName.equals(SqlInvariants.SYSTEM_AUTHORIZATION_NAME) || roleName.equals(SqlInvariants.PUBLIC_ROLE_NAME)) {

      throw Error.error(ErrorCode.X_28502,roleName);

    }

    if (grant) {

      if (grantee.getDirectRoles().contains(role)) {

        throw Error.error(ErrorCode.X_0P000,granteeName);

      }

    }

 else {

      if (!grantee.getDirectRoles().contains(role)) {

        throw Error.error(ErrorCode.X_0P000,roleName);

      }

    }

    if (!grantor.isAdmin()) {

      throw Error.error(ErrorCode.X_0L000,grantor.getName().getNameString());

    }

  }

}

Location: GranteeManager.java

Content: 

String digest(String string) throws RuntimeException {

  byte[] data;

  try {

    data=string.getBytes("ISO-8859-1");

  }

 catch (  UnsupportedEncodingException e) {

    throw Error.error(ErrorCode.GENERAL_ERROR,e);

  }

  data=getDigester().digest(data);

  return StringConverter.byteArrayToHexString(data);

}

Location: GranteeManager.java

Content: 

/** 

 * Attempts to drop a Role with the specified name from this object's set. <p> A successful drop action consists of: <p> <UL> <LI>removing the Grantee object with the specified name from the set. </UL> <p>

 */

public void dropRole(String name){

  if (!isRole(name)) {

    throw Error.error(ErrorCode.X_0P000,name);

  }

  if (GranteeManager.isReserved(name)) {

    throw Error.error(ErrorCode.X_42507);

  }

  removeGrantee(name);

}

Location: GranteeManager.java

Content: 

public static int getCheckSingleRight(String right){

  int r=getRight(right);

  if (r != 0) {

    return r;

  }

  throw Error.error(ErrorCode.X_42581,right);

}

Location: GranteeManager.java

Content: 

public Grantee getDBARole(){

  return dbaRole;

}

Location: GranteeManager.java

Content: 

public String getDigestAlgo(){

  return digestAlgo;

}

Location: GranteeManager.java

Content: 

synchronized MessageDigest getDigester(){

  if (digester == null) {

    try {

      digester=MessageDigest.getInstance(digestAlgo);

    }

 catch (    NoSuchAlgorithmException e) {

      throw Error.error(ErrorCode.GENERAL_ERROR,e);

    }

  }

  return digester;

}

Location: GranteeManager.java

Content: 

public Collection getGrantees(){

  return map.values();

}

Location: GranteeManager.java

Content: 

public String[] getRightsSQL(){

  HsqlArrayList list=new HsqlArrayList();

  Iterator grantees=getGrantees().iterator();

  while (grantees.hasNext()) {

    Grantee grantee=(Grantee)grantees.next();

    String name=grantee.getName().getNameString();

    if (GranteeManager.isImmutable(name)) {

      continue;

    }

    if (grantee instanceof User && ((User)grantee).isExternalOnly) {

      continue;

    }

    HsqlArrayList subList=grantee.getRightsSQL();

    list.addAll(subList);

  }

  String[] array=new String[list.size()];

  list.toArray(array);

  return array;

}

Location: GranteeManager.java

Content: 

/** 

 * Translate a string representation or right(s) into its numeric form.

 */

public static int getRight(String right){

  return rightsStringLookup.get(right,0);

}

Location: GranteeManager.java

Content: 

public Set getRoleNames(){

  return roleMap.keySet();

}

Location: GranteeManager.java

Content: 

public Collection getRoles(){

  return roleMap.values();

}

Location: GranteeManager.java

Content: 

/** 

 * Returns Grantee for the named Role

 */

public Grantee getRole(String name){

  Grantee g=(Grantee)roleMap.get(name);

  if (g == null) {

    throw Error.error(ErrorCode.X_0P000,name);

  }

  return g;

}

Location: GranteeManager.java

Content: 

public static Grantee getSystemRole(){

  return systemAuthorisation;

}

Location: GranteeManager.java

Content: 

/** 

 * Construct the GranteeManager for a Database. Construct special Grantee objects for _SYSTEM, PUBLIC and DBA, and add them to the Grantee map.

 * @param database Only needed to link to the RoleManager later on.

 */

public GranteeManager(Database database){

  this.database=database;

  addRole(this.database.nameManager.newHsqlName(SqlInvariants.PUBLIC_ROLE_NAME,false,SchemaObject.GRANTEE));

  publicRole=getRole(SqlInvariants.PUBLIC_ROLE_NAME);

  publicRole.isPublic=true;

  addRole(this.database.nameManager.newHsqlName(SqlInvariants.DBA_ADMIN_ROLE_NAME,false,SchemaObject.GRANTEE));

  dbaRole=getRole(SqlInvariants.DBA_ADMIN_ROLE_NAME);

  dbaRole.setAdminDirect();

  addRole(this.database.nameManager.newHsqlName(SqlInvariants.SCHEMA_CREATE_ROLE_NAME,false,SchemaObject.GRANTEE));

  schemaRole=getRole(SqlInvariants.SCHEMA_CREATE_ROLE_NAME);

  addRole(this.database.nameManager.newHsqlName(SqlInvariants.CHANGE_AUTH_ROLE_NAME,false,SchemaObject.GRANTEE));

  changeAuthRole=getRole(SqlInvariants.CHANGE_AUTH_ROLE_NAME);

}

Location: GranteeManager.java

Content: 

public void grantSystemToPublic(SchemaObject object,Right right){

  publicRole.grant(object.getName(),right,systemAuthorisation,true);

}

Location: GranteeManager.java

Content: 

public void grant(Session session,OrderedHashSet granteeList,SchemaObject[] routines,Right right,Grantee grantor,boolean withGrantOption){

  boolean granted=false;

  for (int i=0; i < routines.length; i++) {

    if (!grantor.isGrantable(routines[i],right)) {

      continue;

    }

    grant(session,granteeList,routines[i],right,grantor,withGrantOption);

    granted=true;

  }

  if (!granted) {

    throw Error.error(ErrorCode.X_0L000,grantor.getName().getNameString());

  }

}

Location: GranteeManager.java

Content: 

/** 

 * Grant a role to this Grantee.

 */

public void grant(String granteeName,String roleName,Grantee grantor){

  Grantee grantee=get(granteeName);

  if (grantee == null) {

    throw Error.error(ErrorCode.X_28501,granteeName);

  }

  if (isImmutable(granteeName)) {

    throw Error.error(ErrorCode.X_28502,granteeName);

  }

  Grantee role=getRole(roleName);

  if (role == null) {

    throw Error.error(ErrorCode.X_0P000,roleName);

  }

  if (role == grantee) {

    throw Error.error(ErrorCode.X_0P501,granteeName);

  }

  if (role.hasRole(grantee)) {

    throw Error.error(ErrorCode.X_0P501,roleName);

  }

  if (!grantor.isGrantable(role)) {

    throw Error.error(ErrorCode.X_0L000,grantor.getName().getNameString());

  }

  grantee.grant(role);

  grantee.updateAllRights();

  if (grantee.isRole) {

    updateAllRights(grantee);

  }

}

Location: GranteeManager.java

Content: 

/** 

 * Returns true if named Grantee object exists. This will return true for reserved Grantees SYSTEM_AUTHORIZATION_NAME, ADMIN_ROLE_NAME, PUBLIC_USER_NAME.

 */

boolean isGrantee(String name){

  return map.containsKey(name);

}

Location: GranteeManager.java

Content: 

public static boolean isImmutable(String name){

  return name.equals(SqlInvariants.SYSTEM_AUTHORIZATION_NAME) || name.equals(SqlInvariants.DBA_ADMIN_ROLE_NAME) || name.equals(SqlInvariants.SCHEMA_CREATE_ROLE_NAME)|| name.equals(SqlInvariants.CHANGE_AUTH_ROLE_NAME);

}

Location: GranteeManager.java

Content: 

public static boolean isReserved(String name){

  return name.equals(SqlInvariants.SYSTEM_AUTHORIZATION_NAME) || name.equals(SqlInvariants.DBA_ADMIN_ROLE_NAME) || name.equals(SqlInvariants.SCHEMA_CREATE_ROLE_NAME)|| name.equals(SqlInvariants.CHANGE_AUTH_ROLE_NAME)|| name.equals(SqlInvariants.PUBLIC_ROLE_NAME);

}

Location: GranteeManager.java

Content: 

public boolean isRole(String name){

  return roleMap.containsKey(name);

}

Location: GranteeManager.java

Content: 

public void removeDbObjects(OrderedHashSet nameSet){

  Iterator it=nameSet.iterator();

  while (it.hasNext()) {

    HsqlName name=(HsqlName)it.next();

    for (int i=0; i < map.size(); i++) {

      Grantee g=(Grantee)map.get(i);

      g.revokeDbObject(name);

    }

  }

}

Location: GranteeManager.java

Content: 

/** 

 * Removes all rights mappings for the database object identified by the dbobject argument from all Grantee objects in the set.

 */

public void removeDbObject(HsqlName name){

  for (int i=0; i < map.size(); i++) {

    Grantee g=(Grantee)map.get(i);

    g.revokeDbObject(name);

  }

}

Location: GranteeManager.java

Content: 

/** 

 * Removes a role without any privileges from all grantees

 */

void removeEmptyRole(Grantee role){

  for (int i=0; i < map.size(); i++) {

    Grantee grantee=(Grantee)map.get(i);

    grantee.roles.remove(role);

  }

}

Location: GranteeManager.java

Content: 

/** 

 */

public boolean removeGrantee(String name){

  if (isReserved(name)) {

    return false;

  }

  Grantee g=(Grantee)map.remove(name);

  if (g == null) {

    return false;

  }

  g.clearPrivileges();

  updateAllRights(g);

  if (g.isRole) {

    roleMap.remove(name);

    removeEmptyRole(g);

  }

  return true;

}

Location: GranteeManager.java

Content: 

/** 

 * Only used for a recently added user with no dependencies

 */

public void removeNewUser(HsqlName name){

  map.remove(name.name);

}

Location: GranteeManager.java

Content: 

public void revoke(OrderedHashSet granteeList,SchemaObject[] routines,Right rights,Grantee grantor,boolean grantOption,boolean cascade){

  for (int i=0; i < routines.length; i++) {

    revoke(granteeList,routines[i],rights,grantor,grantOption,cascade);

  }

}

Location: GranteeManager.java

Content: 

/** 

 * Revoke a role from a Grantee

 */

public void revoke(String granteeName,String roleName,Grantee grantor){

  if (!grantor.isAdmin()) {

    throw Error.error(ErrorCode.X_42507);

  }

  Grantee grantee=get(granteeName);

  if (grantee == null) {

    throw Error.error(ErrorCode.X_28000,granteeName);

  }

  Grantee role=(Grantee)roleMap.get(roleName);

  grantee.revoke(role);

  grantee.updateAllRights();

  if (grantee.isRole) {

    updateAllRights(grantee);

  }

}

Location: GranteeManager.java

Content: 

public void setDigestAlgo(String algo){

  digestAlgo=algo;

}

Location: GranteeManager.java

Content: 

private void updateAddColumn(HsqlName table){

  Iterator it=getRoles().iterator();

  while (it.hasNext()) {

    Grantee grantee=(Grantee)it.next();

    grantee.updateRightsForNewColumn(table);

  }

  it=getGrantees().iterator();

  for (; it.hasNext(); ) {

    Grantee grantee=(Grantee)it.next();

    grantee.updateRightsForNewColumn(table);

  }

}

Location: GranteeManager.java

Content: 

/** 

 * Updates all the talbe level rights on a table after the addition of a column.<p>

 */

public void updateAddColumn(HsqlName table,HsqlName column){

  Iterator it=getRoles().iterator();

  while (it.hasNext()) {

    Grantee grantee=(Grantee)it.next();

    grantee.updateRightsForNewColumn(table,column);

  }

  it=getGrantees().iterator();

  for (; it.hasNext(); ) {

    Grantee grantee=(Grantee)it.next();

    grantee.updateRightsForNewColumn(table,column);

  }

  updateAddColumn(table);

}

Location: GranteeManager.java

Content: 

/** 

 * First updates all ROLE Grantee objects. Then updates all USER Grantee Objects.

 */

void updateAllRights(Grantee role){

  for (int i=0; i < map.size(); i++) {

    Grantee grantee=(Grantee)map.get(i);

    if (grantee.isRole) {

      grantee.updateNestedRoles(role);

    }

  }

  for (int i=0; i < map.size(); i++) {

    Grantee grantee=(Grantee)map.get(i);

    if (!grantee.isRole) {

      grantee.updateAllRights();

    }

  }

}

Location: GranteeManager.java

Content: 

public static boolean validRightString(String rightString){

  return getRight(rightString) != 0;

}

