Location: UserTypeModifier.java

Content: 

public void addConstraint(Constraint c){

  int position=constraints.length;

  constraints=(Constraint[])ArrayUtil.resizeArray(constraints,position + 1);

  constraints[position]=c;

  setNotNull();

}

Location: UserTypeModifier.java

Content: 

public void compile(Session session){

  for (int i=0; i < constraints.length; i++) {

    constraints[i].compile(session,null);

  }

}

Location: UserTypeModifier.java

Content: 

public final OrderedHashSet getComponents(){

  if (constraints == null) {

    return null;

  }

  OrderedHashSet set=new OrderedHashSet();

  set.addAll(constraints);

  return set;

}

Location: UserTypeModifier.java

Content: 

public Constraint[] getConstraints(){

  return constraints;

}

Location: UserTypeModifier.java

Content: 

public Constraint getConstraint(String name){

  for (int i=0; i < constraints.length; i++) {

    if (constraints[i].getName().name.equals(name)) {

      return constraints[i];

    }

  }

  return null;

}

Location: UserTypeModifier.java

Content: 

public Expression getDefaultClause(){

  return defaultExpression;

}

Location: UserTypeModifier.java

Content: 

public Grantee getOwner(){

  return name.schema.owner;

}

Location: UserTypeModifier.java

Content: 

public OrderedHashSet getReferences(){

  OrderedHashSet set=new OrderedHashSet();

  for (int i=0; i < constraints.length; i++) {

    OrderedHashSet subSet=constraints[i].getReferences();

    if (subSet != null) {

      set.addAll(subSet);

    }

  }

  return set;

}

Location: UserTypeModifier.java

Content: 

public HsqlName getSchemaName(){

  return name.schema;

}

Location: UserTypeModifier.java

Content: 

public String getSQL(){

  StringBuffer sb=new StringBuffer();

  if (schemaObjectType == SchemaObject.TYPE) {

    sb.append(Tokens.T_CREATE).append(' ').append(Tokens.T_TYPE).append(' ');

    sb.append(name.getSchemaQualifiedStatementName());

    sb.append(' ').append(Tokens.T_AS).append(' ');

    sb.append(dataType.getDefinition());

    if (dataType.isCharacterType()) {

      Collation collation=dataType.getCollation();

      if (collation.isObjectCollation()) {

        sb.append(' ').append(collation.getCollateSQL());

      }

    }

  }

 else {

    sb.append(Tokens.T_CREATE).append(' ').append(Tokens.T_DOMAIN).append(' ');

    sb.append(name.getSchemaQualifiedStatementName());

    sb.append(' ').append(Tokens.T_AS).append(' ');

    sb.append(dataType.getDefinition());

    if (defaultExpression != null) {

      sb.append(' ').append(Tokens.T_DEFAULT).append(' ');

      sb.append(defaultExpression.getSQL());

    }

    for (int i=0; i < constraints.length; i++) {

      sb.append(' ').append(Tokens.T_CONSTRAINT).append(' ');

      sb.append(constraints[i].getName().statementName).append(' ');

      sb.append(Tokens.T_CHECK).append('(').append(constraints[i].getCheckSQL()).append(')');

    }

  }

  return sb.toString();

}

Location: UserTypeModifier.java

Content: 

public boolean isNullable(){

  return isNullable;

}

Location: UserTypeModifier.java

Content: 

public void removeConstraint(String name){

  for (int i=0; i < constraints.length; i++) {

    if (constraints[i].getName().name.equals(name)) {

      constraints=(Constraint[])ArrayUtil.toAdjustedArray(constraints,null,i,-1);

      break;

    }

  }

  setNotNull();

}

Location: UserTypeModifier.java

Content: 

public void removeDefaultClause(){

  defaultExpression=null;

}

Location: UserTypeModifier.java

Content: 

public int schemaObjectType(){

  return schemaObjectType;

}

Location: UserTypeModifier.java

Content: 

public void setDefaultClause(Expression defaultExpression){

  this.defaultExpression=defaultExpression;

}

Location: UserTypeModifier.java

Content: 

private void setNotNull(){

  isNullable=true;

  for (int i=0; i < constraints.length; i++) {

    if (constraints[i].isNotNull()) {

      isNullable=false;

    }

  }

}

Location: UserTypeModifier.java

Content: 

public UserTypeModifier(HsqlName name,int type,Type dataType){

  this.name=name;

  this.schemaObjectType=type;

  this.dataType=dataType;

}

