Location: ArraySort.java

Content: 

public static int deDuplicate(Object[] array,int limit,Comparator comparator){

  int baseIndex=0;

  int currentIndex=1;

  if (limit < 2) {

    return limit;

  }

  for (; currentIndex < limit; currentIndex++) {

    int compare=comparator.compare(array[baseIndex],array[currentIndex]);

    if (compare == 0) {

      continue;

    }

    baseIndex++;

    array[baseIndex]=array[currentIndex];

  }

  return baseIndex + 1;

}

Location: ArraySort.java

Content: 

public static void insertionSort(Object[] array,Comparator comparator,int lo0,int hi0){

  int i;

  int j;

  for (i=lo0 + 1; i <= hi0; i++) {

    j=i;

    while ((j > lo0) && comparator.compare(array[i],array[j - 1]) < 0) {

      j--;

    }

    if (i != j) {

      moveAndInsertRow(array,i,j);

    }

  }

}

Location: ArraySort.java

Content: 

private static void moveAndInsertRow(Object[] array,int i,int j){

  Object val=array[i];

  moveRows(array,j,j + 1,i - j);

  array[j]=val;

}

Location: ArraySort.java

Content: 

private static void moveRows(Object[] array,int fromIndex,int toIndex,int rows){

  System.arraycopy(array,fromIndex,array,toIndex,rows);

}

Location: ArraySort.java

Content: 

static void quickSort(Object[] array,Comparator comparator,int l,int r){

  int M=16;

  int i;

  int j;

  int v;

  if ((r - l) > M) {

    i=(r + l) >>> 1;

    if (comparator.compare(array[i],array[l]) < 0) {

      swap(array,l,i);

    }

    if (comparator.compare(array[r],array[l]) < 0) {

      swap(array,l,r);

    }

    if (comparator.compare(array[r],array[i]) < 0) {

      swap(array,i,r);

    }

    j=r - 1;

    swap(array,i,j);

    i=l;

    v=j;

    for (; ; ) {

      while (comparator.compare(array[++i],array[v]) < 0) {

      }

      while (comparator.compare(array[v],array[--j]) < 0) {

      }

      if (j < i) {

        break;

      }

      swap(array,i,j);

    }

    swap(array,i,r - 1);

    quickSort(array,comparator,l,j);

    quickSort(array,comparator,i + 1,r);

  }

}

Location: ArraySort.java

Content: 

/** 

 * Returns the index of the lowest element == the given search target, or -1

 * @return index or a negative value if not found

 */

public static int searchFirst(Object[] array,int start,int limit,Object value,Comparator c){

  int low=start;

  int high=limit;

  int found=limit;

  int mid;

  int compare;

  while (low < high) {

    mid=(low + high) >>> 1;

    compare=c.compare(value,array[mid]);

    if (compare < 0) {

      high=mid;

    }

 else     if (compare > 0) {

      low=mid + 1;

    }

 else {

      high=mid;

      found=mid;

    }

  }

  return found == limit ? -low - 1 : found;

}

Location: ArraySort.java

Content: 

public static void sort(Object[] array,int limit,Comparator comparator){

  if (limit < 2) {

    return;

  }

  quickSort(array,comparator,0,limit - 1);

  insertionSort(array,comparator,0,limit - 1);

}

Location: ArraySort.java

Content: 

private static void swap(Object[] array,int i1,int i2){

  Object val=array[i1];

  array[i1]=array[i2];

  array[i2]=val;

}

