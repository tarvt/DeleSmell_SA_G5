Location: DataFileCacheSession.java

Content: 

public void adjustStoreCount(int adjust){

  writeLock.lock();

  try {

    storeCount+=adjust;

    if (storeCount == 0) {

      clear();

    }

  }

  finally {

    writeLock.unlock();

  }

}

Location: DataFileCacheSession.java

Content: 

public DataFileCacheSession(Database db,String baseFileName){

  super(db,baseFileName);

  logEvents=false;

}

Location: DataFileCacheSession.java

Content: 

/** 

 * Initial external parameters are set here. The size if fixed.

 */

protected void initParams(Database database,String baseFileName,boolean defrag){

  this.dataFileName=baseFileName + ".data.tmp";

  this.database=database;

  fa=FileUtil.getFileUtil();

  dataFileScale=64;

  cachedRowPadding=dataFileScale;

  initialFreePos=dataFileScale;

  maxCacheRows=2048;

  maxCacheBytes=maxCacheRows * 1024L;

  maxDataFileSize=(long)Integer.MAX_VALUE * dataFileScale;

}

Location: DataFileCacheSession.java

Content: 

/** 

 * Opens the *.data file for this cache.

 */

public void open(boolean readonly){

  try {

    dataFile=new RAFile(database.logger,dataFileName,false,false,false);

    fileFreePosition=initialFreePos;

    initBuffers();

    spaceManager=new DataSpaceManagerSimple(this,false);

  }

 catch (  Throwable t) {

    database.logger.logWarningEvent("Failed to open Session RA file",t);

    release();

    throw Error.error(t,ErrorCode.FILE_IO_ERROR,ErrorCode.M_DataFileCache_open,new Object[]{t.toString(),dataFileName});

  }

}

Location: DataFileCacheSession.java

Content: 

protected void setFileModified(){

}

