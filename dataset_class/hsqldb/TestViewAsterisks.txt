Location: TestViewAsterisks.java

Content: 

/** 

 * checks views selecting an asterisk plus existing columns

 */

private void checkAsterisksCombined() throws SQLException {

  checkViewTranslationAndContent("C1",null,"SELECT * AS \"a2\" FROM ABC","SELECT PUBLIC.ABC.ID,PUBLIC.ABC.A,PUBLIC.ABC.B,PUBLIC.ABC.C AS \"a2\" FROM PUBLIC.ABC",new Object[][]{new Object[]{new Integer(1),"a","b","c"},new Object[]{new Integer(2),"d","e","f"}});

  checkViewTranslationAndContent("C2",null,"SELECT B AS \"b2\", ABC.* FROM ABC","SELECT B AS \"b2\", PUBLIC.ABC.ID,PUBLIC.ABC.A,PUBLIC.ABC.B,PUBLIC.ABC.C  FROM PUBLIC.ABC",new Object[][]{new Object[]{"b",new Integer(1),"a","b","c"},new Object[]{"e",new Integer(2),"d","e","f"}});

}

Location: TestViewAsterisks.java

Content: 

/** 

 * checks views which are defined using a column list

 */

private void checkColumnLists() throws SQLException {

  executeStatement("CREATE VIEW IMPOSSIBLE (\"A\") AS SELECT * FROM ABC",ErrorCode.X_42593);

  checkViewTranslationAndContent("L1",new String[]{"C1","C2","C3","C4"},"SELECT * FROM ABC","SELECT PUBLIC.ABC.ID,PUBLIC.ABC.A,PUBLIC.ABC.B,PUBLIC.ABC.C FROM PUBLIC.ABC","ABC");

}

Location: TestViewAsterisks.java

Content: 

/** 

 * checks views selecting asterisks from multiple tables

 */

private void checkMultipleTables() throws SQLException {

  checkViewTranslationAndContent("M1",null,"SELECT * FROM TABLE_A, TABLE_B","SELECT PUBLIC.TABLE_A.ID_A,PUBLIC.TABLE_A.NAME_A,PUBLIC.TABLE_B.ID_B,PUBLIC.TABLE_B.NAME_B FROM PUBLIC.TABLE_A,PUBLIC.TABLE_B",new Object[][]{new Object[]{new Integer(1),"first A",new Integer(1),"first B"},new Object[]{new Integer(1),"first A",new Integer(2),"second B"},new Object[]{new Integer(2),"second A",new Integer(1),"first B"},new Object[]{new Integer(2),"second A",new Integer(2),"second B"}});

  checkViewTranslationAndContent("M2",null,"SELECT TABLE_B.*, TABLE_A.* FROM TABLE_A, TABLE_B","SELECT  PUBLIC.TABLE_B.ID_B,PUBLIC.TABLE_B.NAME_B , PUBLIC.TABLE_A.ID_A,PUBLIC.TABLE_A.NAME_A  FROM PUBLIC.TABLE_A,PUBLIC.TABLE_B",new Object[][]{new Object[]{new Integer(1),"first B",new Integer(1),"first A"},new Object[]{new Integer(2),"second B",new Integer(1),"first A"},new Object[]{new Integer(1),"first B",new Integer(2),"second A"},new Object[]{new Integer(2),"second B",new Integer(2),"second A"}});

  checkViewTranslationAndContent("M3",null,"SELECT \"TABLE_A\".* FROM TABLE_A, TABLE_B","SELECT PUBLIC.TABLE_A.ID_A,PUBLIC.TABLE_A.NAME_A FROM PUBLIC.TABLE_A,PUBLIC.TABLE_B",new Object[][]{new Object[]{new Integer(1),"first A"},new Object[]{new Integer(1),"first A"},new Object[]{new Integer(2),"second A"},new Object[]{new Integer(2),"second A"}});

}

Location: TestViewAsterisks.java

Content: 

/** 

 * checks views selecting from sub selects

 */

private void checkSubSelects() throws SQLException {

  checkViewTranslationAndContent("Q1",null,"SELECT * FROM ( SELECT * FROM ABC )","SELECT ID,A,B,C FROM(SELECT PUBLIC.ABC.ID,PUBLIC.ABC.A,PUBLIC.ABC.B,PUBLIC.ABC.C FROM PUBLIC.ABC)",null);

  checkViewTranslationAndContent("Q2",null,"SELECT * FROM ( SELECT * FROM TABLE_A ), ( SELECT * FROM TABLE_B )","SELECT ID_A,NAME_A,ID_B,NAME_B FROM(SELECT PUBLIC.TABLE_A.ID_A,PUBLIC.TABLE_A.NAME_A FROM PUBLIC.TABLE_A),(SELECT PUBLIC.TABLE_B.ID_B,PUBLIC.TABLE_B.NAME_B FROM PUBLIC.TABLE_B)",null);

  checkViewTranslationAndContent("Q3",null,"SELECT A.* FROM ( SELECT * FROM TABLE_A ) AS A","SELECT  A.ID_A,A.NAME_A  FROM(SELECT PUBLIC.TABLE_A.ID_A,PUBLIC.TABLE_A.NAME_A FROM PUBLIC.TABLE_A)AS A",null);

  checkViewTranslationAndContent("Q4",null,"SELECT A.*, B.* FROM ( SELECT * FROM TABLE_A ) AS A, ( SELECT * FROM TABLE_B ) AS B","SELECT  A.ID_A,A.NAME_A , B.ID_B,B.NAME_B  FROM(SELECT PUBLIC.TABLE_A.ID_A,PUBLIC.TABLE_A.NAME_A FROM PUBLIC.TABLE_A)AS A,(SELECT PUBLIC.TABLE_B.ID_B,PUBLIC.TABLE_B.NAME_B FROM PUBLIC.TABLE_B)AS B",null);

}

Location: TestViewAsterisks.java

Content: 

/** 

 * checks views based on a UNION statement

 */

private void checkUnionViews() throws SQLException {

  checkViewTranslationAndContent("U1",null,"SELECT * FROM TABLE_A UNION SELECT * FROM TABLE_B","SELECT PUBLIC.TABLE_A.ID_A,PUBLIC.TABLE_A.NAME_A FROM PUBLIC.TABLE_A UNION SELECT PUBLIC.TABLE_B.ID_B,PUBLIC.TABLE_B.NAME_B FROM PUBLIC.TABLE_B",new Object[][]{new Object[]{new Integer(1),"first A"},new Object[]{new Integer(1),"first B"},new Object[]{new Integer(2),"second A"},new Object[]{new Integer(2),"second B"}});

  checkViewTranslationAndContent("U2",null,"SELECT * FROM ( SELECT * FROM TABLE_A UNION SELECT * FROM TABLE_B )","SELECT ID_A,NAME_A FROM(SELECT PUBLIC.TABLE_A.ID_A,PUBLIC.TABLE_A.NAME_A FROM PUBLIC.TABLE_A UNION SELECT PUBLIC.TABLE_B.ID_B,PUBLIC.TABLE_B.NAME_B FROM PUBLIC.TABLE_B)",new Object[][]{new Object[]{new Integer(1),"first A"},new Object[]{new Integer(1),"first B"},new Object[]{new Integer(2),"second A"},new Object[]{new Integer(2),"second B"}});

}

Location: TestViewAsterisks.java

Content: 

/** 

 * checks views based on other views

 */

private void checkViewsOnViews() throws SQLException {

  checkViewTranslationAndContent("V1",null,"SELECT * FROM S1","SELECT PUBLIC.S1.ID,PUBLIC.S1.A,PUBLIC.S1.B,PUBLIC.S1.C FROM PUBLIC.S1","L1");

}

Location: TestViewAsterisks.java

Content: 

/** 

 * creates a view with a given name and statement, ensures that it's statement is translated as expected, and ensures that the content of the view is as expected

 * @param viewName the name of the to-be-created view

 * @param columnNames the names of the columns of the view, as to be specified in the CREATE VIEW statement. Might be null, in this case the view will be created without an explicit column list

 * @param viewStatement the statement of the to-be-created view

 * @param expectedTranslatedStatement the expected statement of the view, after it has been implicitly translated by HSQL. If the actual statement after creation does not match this expected statement, this is a failure condition which results in a AssertionFailedError being thrown.

 * @param expectedContent the expected content of the view. If this is <code>null</code>, it is ignored. Else, if it is a string, it is interpreted as name of the table which must have the same content as a view. If it's no string either, it must be a two-dimensional Object array specifying the expected content.

 */

private void checkViewTranslationAndContent(String viewName,String[] columnList,String viewStatement,String expectedTranslatedStatement,Object expectedContent) throws SQLException {

  createView(viewName,columnList,viewStatement);

  String actualTranslatedStatement=getViewStatement(viewName);

  if (!actualTranslatedStatement.equals(expectedTranslatedStatement)) {

    StringBuffer message=new StringBuffer();

    message.append(viewName).append("'s statement not translated as expected\n");

    message.append("original statement:\n  ").append(viewStatement).append('\n');

    message.append("expected translated statement:\n  ").append(expectedTranslatedStatement).append('\n');

    message.append("actual translated statement:\n  ").append(actualTranslatedStatement).append('\n');

    throw new AssertionFailedError(message.toString());

  }

  if (expectedContent instanceof Object[][]) {

    ensureTableContent(viewName,(Object[][])expectedContent);

  }

}

Location: TestViewAsterisks.java

Content: 

/** 

 * creates a view with the given name, the given constituting statement, and an optional column list

 * @param viewName specifies the name of the view to create

 * @param columnList list of names of the columns of the view, will be specified in the CREATE VIEW statement. Might be <code>null</code>.

 * @param viewStatement the statement of the view

 */

private void createView(String viewName,String[] columnList,String viewStatement) throws SQLException {

  StringBuffer colList=new StringBuffer();

  if (columnList != null) {

    colList.append(" (");

    for (int i=0; i < columnList.length; ++i) {

      colList.append('"').append(columnList[i]).append('"');

      if (i < columnList.length - 1) {

        colList.append(',');

      }

    }

    colList.append(")");

  }

  executeStatement("CREATE VIEW " + viewName + colList.toString()+ " AS "+ viewStatement);

  if (columnList != null) {

    ensureTableColumns(viewName,columnList);

  }

}

Location: TestViewAsterisks.java

Content: 

/** 

 * ensures two tables (or views, that is) have the same content

 */

private void ensureEqualContent(String tableNameLHS,String tableNameRHS) throws SQLException {

  ResultSet lhs=m_statement.executeQuery("SELECT * FROM \"" + tableNameLHS + "\"");

  ResultSet rhs=m_statement.executeQuery("SELECT * FROM \"" + tableNameRHS + "\"");

  ResultSetMetaData meta=lhs.getMetaData();

  while (lhs.next() && rhs.next()) {

    for (int col=1; col <= meta.getColumnCount(); ++col) {

      assertEquals("table content does not match: cp. " + tableNameLHS + "-"+ tableNameRHS+ ", row "+ lhs.getRow()+ ", col "+ col,lhs.getObject(col),rhs.getObject(col));

    }

  }

  assertTrue("row count does not match: " + tableNameLHS + "-"+ tableNameRHS,lhs.isAfterLast() && rhs.isLast());

}

Location: TestViewAsterisks.java

Content: 

/** 

 * ensures that a given table has columns with a given name

 */

private void ensureTableColumns(String tableName,String[] columnNames) throws SQLException {

  ResultSet res=m_connection.getMetaData().getColumns(null,null,tableName,"%");

  while (res.next()) {

    assertEquals("unexpected column name in table \"" + tableName + "\" at position "+ (res.getRow() - 1),res.getString("COLUMN_NAME"),columnNames[res.getRow() - 1]);

  }

  res.previous();

  assertEquals("not enough columns in table \"" + tableName + "\"",columnNames.length,res.getRow());

}

Location: TestViewAsterisks.java

Content: 

/** 

 * ensures the content of a given table matches a given object array's content

 */

private void ensureTableContent(String tableName,Object[][] tableData) throws SQLException {

  ResultSet lhs=m_statement.executeQuery("SELECT * FROM \"" + tableName + "\"");

  ResultSetMetaData meta=lhs.getMetaData();

  int colCount=meta.getColumnCount();

  while (lhs.next()) {

    int row=lhs.getRow();

    assertEquals(colCount,tableData[row - 1].length);

    for (int col=1; col <= colCount; ++col) {

      assertEquals("unexpected table content in " + tableName + " (row "+ row+ ", col "+ col+ ")",tableData[row - 1][col - 1],lhs.getObject(col));

    }

  }

}

Location: TestViewAsterisks.java

Content: 

private void executeStatement(String sql,int expectedVendorCode){

  try {

    m_statement.execute(sql);

    assertTrue("executing\n  " + sql + "\nwas expected to fail, but it didn't",expectedVendorCode == 0);

  }

 catch (  SQLException ex) {

    if (expectedVendorCode == 0) {

      fail(ex.toString());

    }

    assertEquals("executing\n  " + sql + "\ndid not result in the expected error",expectedVendorCode,-ex.getErrorCode());

  }

}

Location: TestViewAsterisks.java

Content: 

/** 

 * retrieves the statement which defines a given view

 */

private String getViewStatement(String viewName) throws SQLException {

  ResultSet res=m_statement.executeQuery("SELECT VIEW_DEFINITION FROM INFORMATION_SCHEMA.VIEWS WHERE TABLE_NAME = '" + viewName + "'");

  res.next();

  String statement=res.getString(1);

  return statement;

}

Location: TestViewAsterisks.java

Content: 

/** 

 * Creates a new instance of TestViewAsterisks 

 */

public TestViewAsterisks(String testName){

  super(testName,null,false,false);

}

