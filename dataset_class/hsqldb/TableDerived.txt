Location: TableDerived.java

Content: 

public Expression getDataExpression(){

  return dataExpression;

}

Location: TableDerived.java

Content: 

public RowSetNavigatorData getNavigator(Session session){

  RowSetNavigatorData navigator=new RowSetNavigatorDataTable(session,this);

  return navigator;

}

Location: TableDerived.java

Content: 

public QueryExpression getQueryExpression(){

  return queryExpression;

}

Location: TableDerived.java

Content: 

public int[] getUpdatableColumns(){

  if (queryExpression != null) {

    return queryExpression.getBaseTableColumnMap();

  }

  return defaultColumnMap;

}

Location: TableDerived.java

Content: 

public Object[] getValues(Session session){

  RowIterator it=rowIterator(session);

  if (it.next()) {

    Row row=it.getCurrentRow();

    if (it.next()) {

      throw Error.error(ErrorCode.X_21000);

    }

    return row.getData();

  }

 else {

    return new Object[getColumnCount()];

  }

}

Location: TableDerived.java

Content: 

boolean isCorrelated(){

  if (dataExpression != null) {

    return dataExpression.isCorrelated;

  }

  if (queryExpression != null) {

    return queryExpression.isCorrelated;

  }

  return false;

}

Location: TableDerived.java

Content: 

public boolean isInsertable(){

  if (view != null && view.isTriggerInsertable) {

    return false;

  }

  return queryExpression == null ? false : queryExpression.isInsertable();

}

Location: TableDerived.java

Content: 

public boolean isQueryBased(){

  return true;

}

Location: TableDerived.java

Content: 

public boolean isRecompiled(){

  if (canRecompile && queryExpression instanceof QuerySpecification) {

    QuerySpecification qs=(QuerySpecification)queryExpression;

    if (qs.isAggregated || qs.isGrouped || qs.isOrderSensitive) {

      return false;

    }

 else {

      return true;

    }

  }

  return false;

}

Location: TableDerived.java

Content: 

public boolean isTriggerDeletable(){

  if (view != null) {

    return view.isTriggerDeletable;

  }

  return false;

}

Location: TableDerived.java

Content: 

public boolean isTriggerInsertable(){

  if (view != null) {

    return view.isTriggerInsertable;

  }

  return false;

}

Location: TableDerived.java

Content: 

public boolean isTriggerUpdatable(){

  if (view != null) {

    return view.isTriggerUpdatable;

  }

  return false;

}

Location: TableDerived.java

Content: 

public boolean isUpdatable(){

  if (view != null && view.isTriggerUpdatable) {

    return false;

  }

  return queryExpression == null ? false : queryExpression.isUpdatable();

}

Location: TableDerived.java

Content: 

public void materialiseCorrelated(Session session){

  if (isCorrelated()) {

    materialise(session);

  }

}

Location: TableDerived.java

Content: 

public void materialise(Session session){

  session.sessionContext.pushStatementState();

  try {

    PersistentStore store;

    if (dataExpression != null) {

      store=session.sessionData.getSubqueryRowStore(this);

      dataExpression.insertValuesIntoSubqueryTable(session,store);

      return;

    }

    if (queryExpression == null) {

      return;

    }

    Result result;

    result=queryExpression.getResult(session,0);

    if (uniqueRows) {

      RowSetNavigatorData navigator=((RowSetNavigatorData)result.getNavigator());

      navigator.removeDuplicates(session);

    }

    store=session.sessionData.getSubqueryRowStore(this);

    insertResult(session,store,result);

    result.getNavigator().release();

  }

  finally {

    session.sessionContext.popStatementState();

  }

}

Location: TableDerived.java

Content: 

public TableDerived newDerivedTable(Session session,CompileContext baseContext){

  TableDerived td=this;

  if (isRecompiled()) {

    ParserDQL p=new ParserDQL(session,new Scanner(),baseContext);

    p.compileContext.setCurrentSubquery(tableName);

    p.reset(session,sql);

    p.read();

    td=p.XreadSubqueryTableBody(tableName,OpTypes.TABLE_SUBQUERY);

    td.queryExpression.resolve(session,p.compileContext.getOuterRanges(),null);

    td.columnList=columnList;

    td.columnCount=columnList.size();

    td.triggerList=triggerList;

    td.triggerLists=triggerLists;

    td.view=view;

    td.createPrimaryKey();

  }

  return td;

}

Location: TableDerived.java

Content: 

public void prepareTable(Session session){

  if (columnCount > 0) {

    return;

  }

  if (dataExpression != null) {

    if (columnCount == 0) {

      TableUtil.addAutoColumns(this,dataExpression.nodeDataTypes);

      setTableIndexesForSubquery(session);

    }

  }

  if (queryExpression != null) {

    columnList=queryExpression.getColumns();

    columnCount=queryExpression.getColumnCount();

    setTableIndexesForSubquery(session);

  }

}

Location: TableDerived.java

Content: 

public void prepareTable(Session session,HsqlName[] columns){

  prepareTable(session);

  if (columns != null) {

    if (columns.length != columnList.size()) {

      throw Error.error(ErrorCode.X_42593);

    }

    HashMappedList newColumnList=new HashMappedList();

    for (int i=0; i < columnCount; i++) {

      ColumnSchema col=(ColumnSchema)columnList.get(i);

      col.setName(columns[i]);

      newColumnList.add(columns[i].name,col);

    }

    columnList=newColumnList;

  }

}

Location: TableDerived.java

Content: 

void resetToView(){

  queryExpression=view.getQueryExpression();

}

Location: TableDerived.java

Content: 

void setCorrelated(){

  if (dataExpression != null) {

    dataExpression.isCorrelated=true;

  }

  if (queryExpression != null) {

    queryExpression.isCorrelated=true;

  }

}

Location: TableDerived.java

Content: 

public void setSQL(String sql){

  this.sql=sql;

}

Location: TableDerived.java

Content: 

private void setTableIndexesForSubquery(Session session){

  int[] cols=null;

  boolean hasFullIndex=false;

  if (queryExpression != null) {

    if (queryExpression.fullIndex != null) {

      hasFullIndex=true;

    }

  }

  if (hasFullIndex || uniqueRows || uniquePredicate) {

    cols=new int[getColumnCount()];

    ArrayUtil.fillSequence(cols);

  }

  int[] pkcols=uniqueRows ? cols : null;

  createPrimaryKey(null,pkcols,false);

  if (uniqueRows) {

    fullIndex=getPrimaryIndex();

  }

 else   if (uniquePredicate || hasFullIndex) {

    fullIndex=createIndexForColumns(session,cols);

  }

}

Location: TableDerived.java

Content: 

public TableDerived(Database database,HsqlName name,int type){

  super(database,name,type);

switch (type) {

case TableBase.CHANGE_SET_TABLE:

case TableBase.SYSTEM_TABLE:

case TableBase.FUNCTION_TABLE:

case TableBase.VIEW_TABLE:

case TableBase.RESULT_TABLE:

case TableBase.SYSTEM_SUBQUERY:

    break;

default :

  throw Error.runtimeError(ErrorCode.U_S0500,"Table");

}

}

Location: TableDerived.java

Content: 

public TableDerived(Database database,HsqlName name,int type,QueryExpression queryExpression,Expression dataExpression,int opType,int depth){

  super(database,name,type);

switch (type) {

case TableBase.SYSTEM_SUBQUERY:

case TableBase.VIEW_TABLE:

    break;

default :

  throw Error.runtimeError(ErrorCode.U_S0500,"Table");

}

this.queryExpression=queryExpression;

this.dataExpression=dataExpression;

this.depth=depth;

switch (opType) {

case OpTypes.EXISTS:

queryExpression.setSingleRow();

break;

case OpTypes.IN:

if (queryExpression != null) {

queryExpression.setFullOrder();

}

uniqueRows=true;

break;

case OpTypes.UNIQUE:

queryExpression.setFullOrder();

uniquePredicate=true;

break;

case OpTypes.MATCH_SIMPLE:

queryExpression.setFullOrder();

break;

default :

}

if (dataExpression != null) {

dataExpression.table=this;

}

}

Location: TableDerived.java

Content: 

public TableDerived(Database database,HsqlName name,int type,Type[] columnTypes,HashMappedList columnList,int[] pkColumns){

  this(database,name,type);

  this.colTypes=columnTypes;

  this.columnList=columnList;

  columnCount=columnList.size();

  createPrimaryKey(null,pkColumns,true);

}

