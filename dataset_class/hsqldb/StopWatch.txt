Location: StopWatch.java

Content: 

/** 

 * Retrieves the accumulated time this object has spent running since it was last started.

 * @return the accumulated time this object has spent running sinceit was last started.

 */

public long currentElapsedTime(){

  if (running) {

    return System.currentTimeMillis() - startTime;

  }

 else {

    return 0;

  }

}

Location: StopWatch.java

Content: 

/** 

 * Retrieves prefix + " in " + elapsedTime() + " ms."

 * @param prefix The string to use as a prefix

 * @return prefix + " in " + elapsedTime() + " ms."

 */

public String currentElapsedTimeToMessage(String prefix){

  return prefix + " in " + currentElapsedTime()+ " ms.";

}

Location: StopWatch.java

Content: 

/** 

 * Retrieves the accumulated time this object has spent running since it was last zeroed.

 * @return the accumulated time this object has spent running sinceit was last zeroed.

 */

public long elapsedTime(){

  if (running) {

    return total + System.currentTimeMillis() - startTime;

  }

 else {

    return total;

  }

}

Location: StopWatch.java

Content: 

/** 

 * Retrieves prefix + " in " + elapsedTime() + " ms."

 * @param prefix The string to use as a prefix

 * @return prefix + " in " + elapsedTime() + " ms."

 */

public String elapsedTimeToMessage(String prefix){

  return prefix + " in " + elapsedTime()+ " ms.";

}

Location: StopWatch.java

Content: 

public void mark(){

  stop();

  start();

}

Location: StopWatch.java

Content: 

/** 

 * Creates, zeros, and starts a new StopWatch 

 */

public StopWatch(){

  this(true);

}

Location: StopWatch.java

Content: 

/** 

 * Creates, zeros, and starts a new StopWatch 

 */

public StopWatch(boolean start){

  if (start) {

    start();

  }

}

Location: StopWatch.java

Content: 

/** 

 * Zeros accumulated running time and restarts this object. 

 */

public void zero(){

  total=0;

  start();

}

