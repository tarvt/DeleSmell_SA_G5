Location: IntervalType.java

Content: 

public Object convertFromDouble(double value){

  long units=(long)value;

  if (this.isIntervalYearMonthType()) {

    return new IntervalMonthData(units);

  }

 else {

    int nanos=(int)((value - units) * nanoScaleFactors[0]);

    return new IntervalSecondData(units,nanos);

  }

}

Location: IntervalType.java

Content: 

public double convertToDoubleStartUnits(Object interval){

switch (startIntervalType) {

case Types.SQL_INTERVAL_YEAR:

case Types.SQL_INTERVAL_MONTH:

    double months=((IntervalMonthData)interval).units;

  return (months / DTIType.yearToSecondFactors[startPartIndex]);

case Types.SQL_INTERVAL_DAY:

case Types.SQL_INTERVAL_HOUR:

case Types.SQL_INTERVAL_MINUTE:

case Types.SQL_INTERVAL_SECOND:

{

  double seconds=((IntervalSecondData)interval).units;

  return (seconds / DTIType.yearToSecondFactors[startPartIndex]);

}

default :

throw Error.runtimeError(ErrorCode.U_S0500,"IntervalType");

}

}

Location: IntervalType.java

Content: 

public long convertToLongEndUnits(Object interval){

switch (endIntervalType) {

case Types.SQL_INTERVAL_YEAR:

case Types.SQL_INTERVAL_MONTH:

    long months=((IntervalMonthData)interval).units;

  return (months / DTIType.yearToSecondFactors[endPartIndex]);

case Types.SQL_INTERVAL_DAY:

case Types.SQL_INTERVAL_HOUR:

case Types.SQL_INTERVAL_MINUTE:

case Types.SQL_INTERVAL_SECOND:

{

  long seconds=((IntervalSecondData)interval).units;

  return (seconds / DTIType.yearToSecondFactors[endPartIndex]);

}

default :

throw Error.runtimeError(ErrorCode.U_S0500,"IntervalType");

}

}

Location: IntervalType.java

Content: 

public CharacterType getCharacterType(){

  CharacterType type=CharacterType.getCharacterType(Types.SQL_VARCHAR,displaySize());

  type.nameString=getNameString();

  return type;

}

Location: IntervalType.java

Content: 

public static Type getCombinedIntervalType(IntervalType type1,IntervalType type2){

  int startType=type2.startIntervalType > type1.startIntervalType ? type1.startIntervalType : type2.startIntervalType;

  int endType=type2.endIntervalType > type1.endIntervalType ? type2.endIntervalType : type1.endIntervalType;

  int type=getCombinedIntervalType(startType,endType);

  long precision=type1.precision > type2.precision ? type1.precision : type2.precision;

  int fractionPrecision=type1.scale > type2.scale ? type1.scale : type2.scale;

  return getIntervalType(type,startType,endType,precision,fractionPrecision,false);

}

Location: IntervalType.java

Content: 

public static int getCombinedIntervalType(int startType,int endType){

  if (startType == endType) {

    return startType;

  }

switch (startType) {

case Types.SQL_INTERVAL_YEAR:

    if (endType == Types.SQL_INTERVAL_MONTH) {

      return Types.SQL_INTERVAL_YEAR_TO_MONTH;

    }

  break;

case Types.SQL_INTERVAL_DAY:

switch (endType) {

case Types.SQL_INTERVAL_HOUR:

  return Types.SQL_INTERVAL_DAY_TO_HOUR;

case Types.SQL_INTERVAL_MINUTE:

return Types.SQL_INTERVAL_DAY_TO_MINUTE;

case Types.SQL_INTERVAL_SECOND:

return Types.SQL_INTERVAL_DAY_TO_SECOND;

}

break;

case Types.SQL_INTERVAL_HOUR:

switch (endType) {

case Types.SQL_INTERVAL_MINUTE:

return Types.SQL_INTERVAL_HOUR_TO_MINUTE;

case Types.SQL_INTERVAL_SECOND:

return Types.SQL_INTERVAL_HOUR_TO_SECOND;

}

break;

case Types.SQL_INTERVAL_MINUTE:

if (endType == Types.SQL_INTERVAL_SECOND) {

return Types.SQL_INTERVAL_MINUTE_TO_SECOND;

}

break;

default :

}

throw Error.runtimeError(ErrorCode.U_S0500,"IntervalType");

}

Location: IntervalType.java

Content: 

public static int getEndIntervalType(int type){

  int endType;

switch (type) {

case Types.SQL_INTERVAL_YEAR:

    endType=Types.SQL_INTERVAL_YEAR;

  break;

case Types.SQL_INTERVAL_YEAR_TO_MONTH:

endType=Types.SQL_INTERVAL_MONTH;

break;

case Types.SQL_INTERVAL_MONTH:

endType=Types.SQL_INTERVAL_MONTH;

break;

case Types.SQL_INTERVAL_DAY:

endType=Types.SQL_INTERVAL_DAY;

break;

case Types.SQL_INTERVAL_DAY_TO_HOUR:

endType=Types.SQL_INTERVAL_HOUR;

break;

case Types.SQL_INTERVAL_DAY_TO_MINUTE:

endType=Types.SQL_INTERVAL_MINUTE;

break;

case Types.SQL_INTERVAL_DAY_TO_SECOND:

endType=Types.SQL_INTERVAL_SECOND;

break;

case Types.SQL_INTERVAL_HOUR:

endType=Types.SQL_INTERVAL_HOUR;

break;

case Types.SQL_INTERVAL_HOUR_TO_MINUTE:

endType=Types.SQL_INTERVAL_MINUTE;

break;

case Types.SQL_INTERVAL_HOUR_TO_SECOND:

endType=Types.SQL_INTERVAL_SECOND;

break;

case Types.SQL_INTERVAL_MINUTE:

endType=Types.SQL_INTERVAL_MINUTE;

break;

case Types.SQL_INTERVAL_MINUTE_TO_SECOND:

endType=Types.SQL_INTERVAL_SECOND;

break;

case Types.SQL_INTERVAL_SECOND:

endType=Types.SQL_INTERVAL_SECOND;

break;

default :

throw Error.runtimeError(ErrorCode.U_S0500,"IntervalType");

}

return endType;

}

Location: IntervalType.java

Content: 

public static IntervalType getIntervalType(IntervalType type,long precision,int fractionalPrecision){

  if (type.precision >= precision && type.scale >= fractionalPrecision) {

    return type;

  }

  return getIntervalType(type.typeCode,precision,fractionalPrecision);

}

Location: IntervalType.java

Content: 

public static IntervalType getIntervalType(int type,int startType,int endType,long precision,int fractionPrecision,boolean defaultPrecision){

  int group=startType > Types.SQL_INTERVAL_MONTH ? Types.SQL_INTERVAL_SECOND : Types.SQL_INTERVAL_MONTH;

  if (defaultPrecision) {

    return new IntervalType(group,type,precision,fractionPrecision,startType,endType,defaultPrecision);

  }

switch (type) {

case Types.SQL_INTERVAL_YEAR:

    if (precision == DTIType.defaultIntervalPrecision) {

      return SQL_INTERVAL_YEAR;

    }

 else     if (precision == DTIType.maxIntervalPrecision) {

      return SQL_INTERVAL_YEAR_MAX_PRECISION;

    }

  break;

case Types.SQL_INTERVAL_YEAR_TO_MONTH:

if (precision == DTIType.defaultIntervalPrecision) {

  return SQL_INTERVAL_YEAR_TO_MONTH;

}

 else if (precision == DTIType.maxIntervalPrecision) {

  return SQL_INTERVAL_YEAR_TO_MONTH_MAX_PRECISION;

}

break;

case Types.SQL_INTERVAL_MONTH:

if (precision == DTIType.defaultIntervalPrecision) {

return SQL_INTERVAL_MONTH;

}

 else if (precision == DTIType.maxIntervalPrecision) {

return SQL_INTERVAL_MONTH_MAX_PRECISION;

}

break;

case Types.SQL_INTERVAL_DAY:

if (precision == DTIType.defaultIntervalPrecision) {

return SQL_INTERVAL_DAY;

}

 else if (precision == DTIType.maxIntervalPrecision) {

return SQL_INTERVAL_DAY_MAX_PRECISION;

}

break;

case Types.SQL_INTERVAL_DAY_TO_HOUR:

if (precision == DTIType.defaultIntervalPrecision) {

return SQL_INTERVAL_DAY_TO_HOUR;

}

break;

case Types.SQL_INTERVAL_DAY_TO_MINUTE:

if (precision == DTIType.defaultIntervalPrecision) {

return SQL_INTERVAL_DAY_TO_MINUTE;

}

break;

case Types.SQL_INTERVAL_DAY_TO_SECOND:

if (precision == DTIType.defaultIntervalPrecision && fractionPrecision == DTIType.defaultIntervalFractionPrecision) {

return SQL_INTERVAL_DAY_TO_SECOND;

}

break;

case Types.SQL_INTERVAL_HOUR:

if (precision == DTIType.defaultIntervalPrecision) {

return SQL_INTERVAL_HOUR;

}

 else if (precision == DTIType.maxIntervalPrecision) {

return SQL_INTERVAL_HOUR_MAX_PRECISION;

}

break;

case Types.SQL_INTERVAL_HOUR_TO_MINUTE:

if (precision == DTIType.defaultIntervalPrecision) {

return SQL_INTERVAL_HOUR_TO_MINUTE;

}

break;

case Types.SQL_INTERVAL_MINUTE:

if (precision == DTIType.defaultIntervalPrecision) {

return SQL_INTERVAL_MINUTE;

}

 else if (precision == DTIType.maxIntervalPrecision) {

return SQL_INTERVAL_MINUTE_MAX_PRECISION;

}

break;

case Types.SQL_INTERVAL_HOUR_TO_SECOND:

if (precision == DTIType.defaultIntervalPrecision && fractionPrecision == DTIType.defaultIntervalFractionPrecision) {

return SQL_INTERVAL_HOUR_TO_SECOND;

}

break;

case Types.SQL_INTERVAL_MINUTE_TO_SECOND:

if (precision == DTIType.defaultIntervalPrecision && fractionPrecision == DTIType.defaultIntervalFractionPrecision) {

return SQL_INTERVAL_MINUTE_TO_SECOND;

}

break;

case Types.SQL_INTERVAL_SECOND:

if (precision == DTIType.defaultIntervalPrecision && fractionPrecision == DTIType.defaultIntervalFractionPrecision) {

return SQL_INTERVAL_SECOND;

}

break;

default :

throw Error.runtimeError(ErrorCode.U_S0500,"IntervalType");

}

return new IntervalType(group,type,precision,fractionPrecision,startType,endType,defaultPrecision);

}

Location: IntervalType.java

Content: 

public static IntervalType getIntervalType(int startIndex,int endIndex,long precision,int fractionPrecision){

  boolean defaultPrecision=precision == -1;

  if (startIndex == -1 || endIndex == -1) {

    throw Error.error(ErrorCode.X_22006);

  }

  if (startIndex > endIndex) {

    throw Error.error(ErrorCode.X_22006);

  }

  if (startIndex <= DTIType.INTERVAL_MONTH_INDEX && endIndex > DTIType.INTERVAL_MONTH_INDEX) {

    throw Error.error(ErrorCode.X_22006);

  }

  int startType=DTIType.intervalParts[startIndex];

  int endType=DTIType.intervalParts[endIndex];

  int type=DTIType.intervalTypes[startIndex][endIndex];

  if (precision == 0 || fractionPrecision > DTIType.maxFractionPrecision) {

    throw Error.error(ErrorCode.X_42592);

  }

  if (startIndex == DTIType.INTERVAL_SECOND_INDEX) {

    if (precision > DTIType.maxIntervalSecondPrecision) {

      throw Error.error(ErrorCode.X_42592);

    }

  }

 else   if (precision > DTIType.maxIntervalPrecision) {

    throw Error.error(ErrorCode.X_42592);

  }

  if (precision == -1) {

    precision=DTIType.defaultIntervalPrecision;

  }

  if (fractionPrecision == -1) {

    fractionPrecision=endType == Types.SQL_INTERVAL_SECOND ? DTIType.defaultIntervalFractionPrecision : 0;

  }

  return getIntervalType(type,startType,endType,precision,fractionPrecision,defaultPrecision);

}

Location: IntervalType.java

Content: 

public static IntervalType getIntervalType(int type,long precision,int fractionPrecision){

  int startType=getStartIntervalType(type);

  int endType=getEndIntervalType(type);

  return getIntervalType(type,startType,endType,precision,fractionPrecision,false);

}

Location: IntervalType.java

Content: 

public static int getIntervalType(String part){

  int index=ArrayUtil.find(Tokens.SQL_INTERVAL_FIELD_NAMES,part);

  if (index < 0) {

    throw Error.error(ErrorCode.X_42562);

  }

  return intervalParts[index];

}

Location: IntervalType.java

Content: 

long getIntervalValueLimit(){

  long limit;

switch (typeCode) {

case Types.SQL_INTERVAL_YEAR:

    limit=DTIType.precisionLimits[(int)precision] * 12;

  break;

case Types.SQL_INTERVAL_YEAR_TO_MONTH:

limit=DTIType.precisionLimits[(int)precision] * 12;

limit+=12;

break;

case Types.SQL_INTERVAL_MONTH:

limit=DTIType.precisionLimits[(int)precision];

break;

case Types.SQL_INTERVAL_DAY:

limit=DTIType.precisionLimits[(int)precision] * 24 * 60* 60;

break;

case Types.SQL_INTERVAL_DAY_TO_HOUR:

limit=DTIType.precisionLimits[(int)precision] * 24 * 60* 60;

break;

case Types.SQL_INTERVAL_DAY_TO_MINUTE:

limit=DTIType.precisionLimits[(int)precision] * 24 * 60* 60;

break;

case Types.SQL_INTERVAL_DAY_TO_SECOND:

limit=DTIType.precisionLimits[(int)precision] * 24 * 60* 60;

break;

case Types.SQL_INTERVAL_HOUR:

limit=DTIType.precisionLimits[(int)precision] * 60 * 60;

break;

case Types.SQL_INTERVAL_HOUR_TO_MINUTE:

limit=DTIType.precisionLimits[(int)precision] * 60 * 60;

break;

case Types.SQL_INTERVAL_HOUR_TO_SECOND:

limit=DTIType.precisionLimits[(int)precision] * 60 * 60;

break;

case Types.SQL_INTERVAL_MINUTE:

limit=DTIType.precisionLimits[(int)precision] * 60;

break;

case Types.SQL_INTERVAL_MINUTE_TO_SECOND:

limit=DTIType.precisionLimits[(int)precision] * 60;

break;

case Types.SQL_INTERVAL_SECOND:

limit=DTIType.precisionLimits[(int)precision];

break;

default :

throw Error.runtimeError(ErrorCode.U_S0500,"IntervalType");

}

return limit;

}

Location: IntervalType.java

Content: 

public static String getQualifier(int type){

switch (type) {

case Types.SQL_INTERVAL_YEAR:

    return Tokens.T_YEAR;

case Types.SQL_INTERVAL_YEAR_TO_MONTH:

  return "YEAR TO MONTH";

case Types.SQL_INTERVAL_MONTH:

return Tokens.T_MONTH;

case Types.SQL_INTERVAL_DAY:

return Tokens.T_DAY;

case Types.SQL_INTERVAL_DAY_TO_HOUR:

return "DAY TO HOUR";

case Types.SQL_INTERVAL_DAY_TO_MINUTE:

return "DAY TO MINUTE";

case Types.SQL_INTERVAL_DAY_TO_SECOND:

return "DAY TO SECOND";

case Types.SQL_INTERVAL_HOUR:

return Tokens.T_HOUR;

case Types.SQL_INTERVAL_HOUR_TO_MINUTE:

return "HOUR TO MINUTE";

case Types.SQL_INTERVAL_HOUR_TO_SECOND:

return "HOUR TO SECOND";

case Types.SQL_INTERVAL_MINUTE:

return Tokens.T_MINUTE;

case Types.SQL_INTERVAL_MINUTE_TO_SECOND:

return "MINUTE TO SECOND";

case Types.SQL_INTERVAL_SECOND:

return Tokens.T_SECOND;

default :

throw Error.runtimeError(ErrorCode.U_S0500,"IntervalType");

}

}

Location: IntervalType.java

Content: 

public long getSeconds(Object interval){

  return ((IntervalSecondData)interval).units;

}

Location: IntervalType.java

Content: 

public static int getStartIntervalType(int type){

  int startType;

switch (type) {

case Types.SQL_INTERVAL_YEAR:

case Types.SQL_INTERVAL_YEAR_TO_MONTH:

    startType=Types.SQL_INTERVAL_YEAR;

  break;

case Types.SQL_INTERVAL_MONTH:

startType=Types.SQL_INTERVAL_MONTH;

break;

case Types.SQL_INTERVAL_DAY:

case Types.SQL_INTERVAL_DAY_TO_HOUR:

case Types.SQL_INTERVAL_DAY_TO_MINUTE:

case Types.SQL_INTERVAL_DAY_TO_SECOND:

startType=Types.SQL_INTERVAL_DAY;

break;

case Types.SQL_INTERVAL_HOUR:

case Types.SQL_INTERVAL_HOUR_TO_MINUTE:

case Types.SQL_INTERVAL_HOUR_TO_SECOND:

startType=Types.SQL_INTERVAL_HOUR;

break;

case Types.SQL_INTERVAL_MINUTE:

case Types.SQL_INTERVAL_MINUTE_TO_SECOND:

startType=Types.SQL_INTERVAL_MINUTE;

break;

case Types.SQL_INTERVAL_SECOND:

startType=Types.SQL_INTERVAL_SECOND;

break;

default :

throw Error.runtimeError(ErrorCode.U_S0500,"IntervalType");

}

return startType;

}

Location: IntervalType.java

Content: 

public Object getValue(long units,int nanos){

  if (this.isIntervalYearMonthType()) {

    return new IntervalMonthData(units,this);

  }

 else {

    return new IntervalSecondData(units,nanos,this,true);

  }

}

Location: IntervalType.java

Content: 

String intervalMonthToString(Object a){

  StringBuffer sb=new StringBuffer(8);

  long months=((IntervalMonthData)a).units;

  if (months < 0) {

    months=-months;

    sb.append('-');

  }

  for (int i=startPartIndex; i <= endPartIndex; i++) {

    int factor=DTIType.yearToSecondFactors[i];

    long part=months / factor;

    if (i == startPartIndex) {

      int zeros=(int)precision - getPrecisionExponent(part);

    }

 else     if (part < 10) {

      sb.append('0');

    }

    sb.append(part);

    months%=factor;

    if (i < endPartIndex) {

      sb.append((char)DTIType.yearToSecondSeparators[i]);

    }

  }

  return sb.toString();

}

Location: IntervalType.java

Content: 

String intervalSecondToString(Object a){

  long seconds=((IntervalSecondData)a).units;

  int nanos=((IntervalSecondData)a).nanos;

  return intervalSecondToString(seconds,nanos,false);

}

Location: IntervalType.java

Content: 

private IntervalType(int typeGroup,int type,long precision,int scale,int startIntervalType,int endIntervalType,boolean defaultPrecision){

  super(typeGroup,type,precision,scale,startIntervalType,endIntervalType);

  if (endIntervalType != Types.SQL_INTERVAL_SECOND && scale != 0) {

    throw Error.error(ErrorCode.X_22006);

  }

switch (startIntervalType) {

case Types.SQL_INTERVAL_YEAR:

case Types.SQL_INTERVAL_MONTH:

    isYearMonth=true;

  break;

default :

isYearMonth=false;

break;

}

this.defaultPrecision=defaultPrecision;

}

Location: IntervalType.java

Content: 

private Object multiplyOrDivide(Object a,Object b,boolean divide){

  if (a == null || b == null) {

    return null;

  }

  if (a instanceof Number) {

    Object temp=a;

    a=b;

    b=temp;

  }

  boolean isNumberDiv=b instanceof Number;

  if (divide) {

    if (isNumberDiv) {

      if (NumberType.isZero(b)) {

        throw Error.error(ErrorCode.X_22012);

      }

    }

 else {

      if (isYearMonth) {

        if (((IntervalMonthData)b).units == 0) {

          throw Error.error(ErrorCode.X_22012);

        }

      }

 else {

        if (((IntervalSecondData)b).units == 0) {

          throw Error.error(ErrorCode.X_22012);

        }

      }

    }

  }

  BigDecimal factor=(BigDecimal)factorType.convertToDefaultType(null,b);

  BigDecimal units;

  if (isYearMonth) {

    units=BigDecimal.valueOf(((IntervalMonthData)a).units);

  }

 else {

    long value=((IntervalSecondData)a).units * DTIType.nanoScaleFactors[0] + ((IntervalSecondData)a).nanos;

    units=BigDecimal.valueOf(value,9);

  }

  BigDecimal result=divide ? (BigDecimal)factorType.divide(null,units,factor) : (BigDecimal)factorType.multiply(units,factor);

  if (NumberType.compareToLongLimits(result) != 0) {

    throw Error.error(ErrorCode.X_22015);

  }

  if (isNumberDiv) {

    if (isYearMonth) {

      return new IntervalMonthData(result.longValue(),this);

    }

    int nanos=(int)NumberType.scaledDecimal(result,DTIType.maxFractionPrecision);

    return new IntervalSecondData(result.longValue(),nanos,this,true);

  }

 else {

    if (isYearMonth) {

      return Long.valueOf(result.longValue());

    }

 else {

      return result;

    }

  }

}

Location: IntervalType.java

Content: 

public static IntervalType newIntervalType(int type,long precision,int fractionPrecision){

  int startType=getStartIntervalType(type);

  int endType=getEndIntervalType(type);

  int group=startType > Types.SQL_INTERVAL_MONTH ? Types.SQL_INTERVAL_SECOND : Types.SQL_INTERVAL_MONTH;

  return new IntervalType(group,type,precision,fractionPrecision,startType,endType,false);

}

Location: IntervalType.java

Content: 

private IntervalSecondData subtract(long aSeconds,long bSeconds,long nanos){

  if (endIntervalType != Types.SQL_INTERVAL_SECOND) {

    aSeconds=HsqlDateTime.getTruncatedPart(aSeconds * 1000,endIntervalType) / 1000;

    bSeconds=HsqlDateTime.getTruncatedPart(bSeconds * 1000,endIntervalType) / 1000;

    nanos=0;

  }

  return new IntervalSecondData(aSeconds - bSeconds,nanos,this,true);

}

