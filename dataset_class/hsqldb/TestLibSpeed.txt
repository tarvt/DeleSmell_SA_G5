Location: TestLibSpeed.java

Content: 

public TestLibSpeed(){

  java.util.Random randomgen=new java.util.Random();

  StopWatch sw=new StopWatch();

  int dummy=0;

  System.out.println("set lookup ");

  for (int k=0; k < 3; k++) {

    sw.zero();

    for (int j=0; j < count; j++) {

      for (int i=0; i < sNumeric.length; i++) {

        int r=randomgen.nextInt(sNumeric.length);

        hashSet.contains(sNumeric[r][0]);

        dummy+=r;

      }

    }

    System.out.println("HashSet contains " + sw.elapsedTime());

    sw.zero();

    for (int j=0; j < count; j++) {

      for (int i=0; i < sNumeric.length; i++) {

        int r=randomgen.nextInt(sNumeric.length);

        intKeyIntValueHashLookup.get(r,-1);

        dummy+=r;

      }

    }

    System.out.println("IntKeyIntValueHashMap Lookup with array " + sw.elapsedTime());

    sw.zero();

    for (int j=0; j < count; j++) {

      for (int i=0; i < sNumeric.length; i++) {

        int r=randomgen.nextInt(sNumeric.length);

        intKeyHashLookup.get(r);

        dummy+=r;

      }

    }

    System.out.println("IntKeyHashMap Lookup " + sw.elapsedTime());

    sw.zero();

    for (int j=0; j < count; j++) {

      for (int i=0; i < sNumeric.length; i++) {

        int r=randomgen.nextInt(sNumeric.length);

        doubleIntLookup.findFirstEqualKeyIndex(r);

        dummy+=r;

      }

    }

    System.out.println("DoubleIntTable Lookup " + sw.elapsedTime());

    sw.zero();

    for (int j=0; j < count; j++) {

      for (int i=0; i < sNumeric.length; i++) {

        int r=randomgen.nextInt(sNumeric.length);

        intValueHashLookup.get(sNumeric[r][0],0);

        dummy+=r;

      }

    }

    System.out.println("IntKeyIntValueHashMap Lookup " + sw.elapsedTime());

    sw.zero();

    for (int j=0; j < count; j++) {

      for (int i=0; i < sNumeric.length; i++) {

        int r=randomgen.nextInt(sNumeric.length);

        dummy+=r;

      }

    }

    System.out.println("emptyOp " + sw.elapsedTime());

    sw.zero();

    for (int j=0; j < count; j++) {

      for (int i=0; i < sNumeric.length; i++) {

        int r=randomgen.nextInt(sNumeric.length);

        doubleIntLookup.findFirstEqualKeyIndex(r);

        dummy+=r;

      }

    }

    System.out.println("DoubleIntTable Lookup " + sw.elapsedTime());

    sw.zero();

    System.out.println("Object Cache Test " + sw.elapsedTime());

  }

}

