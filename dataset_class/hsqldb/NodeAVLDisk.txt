Location: NodeAVLDisk.java

Content: 

public NodeAVL child(PersistentStore store,boolean isleft){

  return isleft ? getLeft(store) : getRight(store);

}

Location: NodeAVLDisk.java

Content: 

public void delete(){

  iLeft=NO_POS;

  iRight=NO_POS;

  iParent=NO_POS;

  nLeft=null;

  nRight=null;

  nParent=null;

  iBalance=0;

  ((RowAVLDisk)row).setNodesChanged();

}

Location: NodeAVLDisk.java

Content: 

boolean equals(NodeAVL n){

  if (n instanceof NodeAVLDisk) {

    return this == n || (row.getPos() == n.getPos());

  }

  return false;

}

Location: NodeAVLDisk.java

Content: 

private NodeAVLDisk findNode(PersistentStore store){

  if (row.isInMemory()) {

    return this;

  }

  RowAVLDisk r=(RowAVLDisk)store.get(row.getPos(),false);

  if (r == null) {

    String tableName="";

    if (row.getTable().getTableType() == Table.CACHED_TABLE) {

      tableName=((Table)row.getTable()).getName().name;

    }

    store.getCache().logSevereEvent(tableName + " NodeAVLDisk " + row.getPos(),null);

    return this;

  }

  return (NodeAVLDisk)r.getNode(iId);

}

Location: NodeAVLDisk.java

Content: 

private NodeAVLDisk findNode(PersistentStore store,long pos){

  NodeAVLDisk ret=null;

  RowAVLDisk r=(RowAVLDisk)store.get(pos,false);

  if (r != null) {

    ret=(NodeAVLDisk)r.getNode(iId);

  }

  return ret;

}

Location: NodeAVLDisk.java

Content: 

public int getBalance(PersistentStore store){

  NodeAVLDisk node=findNode(store);

  return node.iBalance;

}

Location: NodeAVLDisk.java

Content: 

public Object[] getData(PersistentStore store){

  return row.getData();

}

Location: NodeAVLDisk.java

Content: 

NodeAVL getLeft(PersistentStore store){

  NodeAVLDisk node=findNode(store);

  if (node.iLeft == NO_POS) {

    return null;

  }

  return findNode(store,node.iLeft);

}

Location: NodeAVLDisk.java

Content: 

NodeAVL getParent(PersistentStore store){

  NodeAVLDisk node=findNode(store);

  if (node.iParent == NO_POS) {

    return null;

  }

  return findNode(store,node.iParent);

}

Location: NodeAVLDisk.java

Content: 

NodeAVL getRight(PersistentStore store){

  NodeAVLDisk node=findNode(store);

  if (node.iRight == NO_POS) {

    return null;

  }

  return findNode(store,node.iRight);

}

Location: NodeAVLDisk.java

Content: 

public RowAVL getRow(PersistentStore store){

  return (RowAVLDisk)store.get(this.row,false);

}

Location: NodeAVLDisk.java

Content: 

private static int getTranslatePointer(int pointer,LongLookup lookup){

  int newPointer=0;

  if (pointer != NodeAVL.NO_POS) {

    if (lookup == null) {

      newPointer=pointer;

    }

 else {

      newPointer=(int)lookup.lookup(pointer);

    }

  }

  return newPointer;

}

Location: NodeAVLDisk.java

Content: 

boolean isFromLeft(PersistentStore store){

  NodeAVLDisk node=findNode(store);

  if (node.iParent == NO_POS) {

    return true;

  }

  NodeAVLDisk temp=findNode(store,node.iParent);

  return row.getPos() == temp.iLeft;

}

Location: NodeAVLDisk.java

Content: 

boolean isLeft(PersistentStore store,NodeAVL n){

  NodeAVLDisk node=findNode(store);

  if (n == null) {

    return node.iLeft == NO_POS;

  }

  return node.iLeft == n.getPos();

}

Location: NodeAVLDisk.java

Content: 

boolean isRight(PersistentStore store,NodeAVL n){

  NodeAVLDisk node=findNode(store);

  if (n == null) {

    return node.iRight == NO_POS;

  }

  return node.iRight == n.getPos();

}

Location: NodeAVLDisk.java

Content: 

boolean isRoot(PersistentStore store){

  NodeAVLDisk node=findNode(store);

  return node.iParent == NO_POS;

}

Location: NodeAVLDisk.java

Content: 

public NodeAVLDisk(RowAVLDisk r,int id){

  super(r);

  iId=id;

}

Location: NodeAVLDisk.java

Content: 

public NodeAVLDisk(RowAVLDisk r,RowInputInterface in,int id) throws IOException {

  super(r);

  iId=id;

  iBalance=in.readInt();

  iLeft=in.readInt();

  iRight=in.readInt();

  iParent=in.readInt();

  if (iLeft <= 0) {

    iLeft=NO_POS;

  }

  if (iRight <= 0) {

    iRight=NO_POS;

  }

  if (iParent <= 0) {

    iParent=NO_POS;

  }

}

Location: NodeAVLDisk.java

Content: 

public void replace(PersistentStore store,Index index,NodeAVL n){

  NodeAVLDisk node=findNode(store);

  if (node.iParent == NO_POS) {

    if (n != null) {

      n=n.setParent(store,null);

    }

    store.setAccessor(index,n);

  }

 else {

    boolean isFromLeft=isFromLeft(store);

    getParent(store).set(store,isFromLeft,n);

  }

}

Location: NodeAVLDisk.java

Content: 

public NodeAVL setBalance(PersistentStore store,int b){

  RowAVLDisk row=(RowAVLDisk)store.get(this.row,true);

  NodeAVLDisk node=(NodeAVLDisk)row.getNode(iId);

  row.setNodesChanged();

  node.iBalance=b;

  row.keepInMemory(false);

  return node;

}

Location: NodeAVLDisk.java

Content: 

NodeAVL setLeft(PersistentStore store,NodeAVL n){

  RowAVLDisk row=(RowAVLDisk)store.get(this.row,true);

  NodeAVLDisk node=(NodeAVLDisk)row.getNode(iId);

  node.iLeft=n == null ? NO_POS : (int)n.getPos();

  row.setNodesChanged();

  row.keepInMemory(false);

  return node;

}

Location: NodeAVLDisk.java

Content: 

NodeAVL setParent(PersistentStore store,NodeAVL n){

  RowAVLDisk row=(RowAVLDisk)store.get(this.row,true);

  NodeAVLDisk node=(NodeAVLDisk)row.getNode(iId);

  row.setNodesChanged();

  node.iParent=n == null ? NO_POS : (int)n.getPos();

  row.keepInMemory(false);

  return node;

}

Location: NodeAVLDisk.java

Content: 

NodeAVL setRight(PersistentStore store,NodeAVL n){

  RowAVLDisk row=(RowAVLDisk)store.get(this.row,true);

  NodeAVLDisk node=(NodeAVLDisk)row.getNode(iId);

  node.iRight=n == null ? NO_POS : (int)n.getPos();

  row.setNodesChanged();

  row.keepInMemory(false);

  return node;

}

Location: NodeAVLDisk.java

Content: 

public NodeAVL set(PersistentStore store,boolean isLeft,NodeAVL n){

  NodeAVL x;

  if (isLeft) {

    x=setLeft(store,n);

  }

 else {

    x=setRight(store,n);

  }

  if (n != null) {

    n.setParent(store,x);

  }

  return x;

}

