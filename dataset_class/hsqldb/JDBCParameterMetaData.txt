Location: JDBCParameterMetaData.java

Content: 

/** 

 * Retrieves the fully-qualified name of the Java class whose instances should be passed to the method <code>PreparedStatement.setObject</code>.

 * @param param the first parameter is 1, the second is 2, ...

 * @return the fully-qualified name of the class in the Java programminglanguage that would be used by the method <code>PreparedStatement.setObject</code> to set the value in the specified parameter. This is the class name used for custom mapping.

 * @exception SQLException if a database access error occurs

 * @since JDK 1.4, HSQLDB 1.7.2

 */

public String getParameterClassName(int param) throws SQLException {

  checkRange(param);

  Type type=translateType(rmd.columnTypes[--param]);

  return type.getJDBCClassName();

}

Location: JDBCParameterMetaData.java

Content: 

/** 

 * Retrieves the number of parameters in the <code>PreparedStatement</code> object for which this <code>ParameterMetaData</code> object contains information.

 * @return the number of parameters

 * @exception SQLException if a database access error occurs

 * @since JDK 1.4, HSQLDB 1.7.2

 */

public int getParameterCount() throws SQLException {

  return parameterCount;

}

Location: JDBCParameterMetaData.java

Content: 

/** 

 * Retrieves the designated parameter's mode.

 * @param param the first parameter is 1, the second is 2, ...

 * @return mode of the parameter; one of<code>ParameterMetaData.parameterModeIn</code>, <code>ParameterMetaData.parameterModeOut</code>, or <code>ParameterMetaData.parameterModeInOut</code> <code>ParameterMetaData.parameterModeUnknown</code>.

 * @exception SQLException if a database access error occurs

 * @since JDK 1.4, HSQLDB 1.7.2

 */

public int getParameterMode(int param) throws SQLException {

  checkRange(param);

  return rmd.paramModes[--param];

}

Location: JDBCParameterMetaData.java

Content: 

/** 

 * Retrieves the designated parameter's database-specific type name.

 * @param param the first parameter is 1, the second is 2, ...

 * @return type the name used by the database. If the parameter type isa user-defined type, then a fully-qualified type name is returned.

 * @exception SQLException if a database access error occurs

 * @since JDK 1.4, HSQLDB 1.7.2

 */

public String getParameterTypeName(int param) throws SQLException {

  checkRange(param);

  Type type=translateType(rmd.columnTypes[--param]);

  return type.getNameString();

}

Location: JDBCParameterMetaData.java

Content: 

/** 

 * Retrieves the designated parameter's SQL type.

 * @param param the first parameter is 1, the second is 2, ...

 * @return SQL type from <code>java.sql.Types</code>

 * @exception SQLException if a database access error occurs

 * @since JDK 1.4, HSQLDB 1.7.2

 * @see java.sql.Types

 */

public int getParameterType(int param) throws SQLException {

  checkRange(param);

  Type type=translateType(rmd.columnTypes[--param]);

  return type.getJDBCTypeCode();

}

Location: JDBCParameterMetaData.java

Content: 

/** 

 * Returns true if this either implements the interface argument or is directly or indirectly a wrapper for an object that does. Returns false otherwise. If this implements the interface then return true, else if this is a wrapper then return the result of recursively calling <code>isWrapperFor</code> on the wrapped object. If this does not implement the interface and is not a wrapper, return false. This method should be implemented as a low-cost operation compared to <code>unwrap</code> so that callers can use this method to avoid expensive <code>unwrap</code> calls that may fail. If this method returns true then calling <code>unwrap</code> with the same argument should succeed.

 * @param iface a Class defining an interface.

 * @return true if this implements the interface or directly or indirectly wraps an object that does.

 * @throws java.sql.SQLException  if an error occurs while determining whether this is a wrapperfor an object with the given interface.

 * @since JDK 1.6, HSQLDB 2.0

 */

public boolean isWrapperFor(Class<?> iface) throws java.sql.SQLException {

  return (iface != null && iface.isAssignableFrom(this.getClass()));

}

Location: JDBCParameterMetaData.java

Content: 

/** 

 * Creates a new instance of JDBCParameterMetaData. <p>

 * @param metaData A ResultMetaData object describing the statement parameters

 * @throws SQLException never - reserved for future use

 */

JDBCParameterMetaData(JDBCConnection conn,ResultMetaData metaData) throws SQLException {

  rmd=metaData;

  parameterCount=rmd.getColumnCount();

  translateTTIType=conn.isTranslateTTIType;

}

