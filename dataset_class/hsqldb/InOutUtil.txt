Location: InOutUtil.java

Content: 

/** 

 * @see #copy(java.io.InputStream,java.io.OutputStream,long,int)

 */

public static long copy(final InputStream inputStream,final OutputStream outputStream) throws IOException {

  return copy(inputStream,outputStream,DEFAULT_COPY_AMOUNT,DEFAULT_COPY_BUFFER_SIZE);

}

Location: InOutUtil.java

Content: 

/** 

 * @see #copy(java.io.InputStream,java.io.OutputStream,long,int)

 */

public static long copy(final InputStream inputStream,final OutputStream outputStream,final long amount) throws IOException {

  return copy(inputStream,outputStream,amount,DEFAULT_COPY_BUFFER_SIZE);

}

Location: InOutUtil.java

Content: 

/** 

 * the specified <tt>amount</tt> from the given input stream to the given output stream, using a buffer of the given size.

 * @param inputStream from which to source bytes

 * @param outputStream to which to sink bytes

 * @param amount max # of bytes to transfer.

 * @param bufferSize to use internally

 * @return the number of bytes <i>actually</i> transferred.

 * @throws IOException if any, thrown by either of the given stream objects

 */

public static long copy(final InputStream inputStream,final OutputStream outputStream,final long amount,final int bufferSize) throws IOException {

  int maxBytesToRead=(int)Math.min(bufferSize,amount);

  final byte[] buffer=new byte[maxBytesToRead];

  long bytesCopied=0;

  int bytesRead;

  while ((bytesCopied < amount) && -1 != (bytesRead=inputStream.read(buffer,0,maxBytesToRead))) {

    outputStream.write(buffer,0,bytesRead);

    if (bytesRead > Long.MAX_VALUE - bytesCopied) {

      bytesCopied=Long.MAX_VALUE;

    }

 else {

      bytesCopied+=bytesRead;

    }

    if (bytesCopied >= amount) {

      return bytesCopied;

    }

    maxBytesToRead=(int)Math.min(bufferSize,amount - bytesCopied);

  }

  return bytesCopied;

}

Location: InOutUtil.java

Content: 

/** 

 * @see #copy(java.io.Reader,java.io.Writer,long,int)

 */

public static long copy(final Reader reader,final Writer writer) throws IOException {

  return copy(reader,writer,DEFAULT_COPY_AMOUNT,DEFAULT_COPY_BUFFER_SIZE);

}

Location: InOutUtil.java

Content: 

/** 

 * @see #copy(java.io.Reader,java.io.Writer,long,int)

 */

public static long copy(final Reader reader,final Writer writer,final long amount) throws IOException {

  return copy(reader,writer,amount,DEFAULT_COPY_BUFFER_SIZE);

}

Location: InOutUtil.java

Content: 

/** 

 * the specified <tt>amount</tt> from the given input stream to the given output stream, using a buffer of the given size.

 * @param reader from which to source characters

 * @param writer to which to sink characters

 * @param amount max # of characters to transfer.

 * @param bufferSize to use internally

 * @return the number of characters <i>actually</i> transferred.

 * @throws IOException if any, thrown by either of the given stream objects

 */

public static long copy(final Reader reader,final Writer writer,final long amount,final int bufferSize) throws IOException {

  int maxCharsToRead=(int)Math.min(bufferSize,amount);

  final char[] buffer=new char[maxCharsToRead];

  long charsCopied=0;

  int charsRead;

  while ((charsCopied < amount) && -1 != (charsRead=reader.read(buffer,0,maxCharsToRead))) {

    writer.write(buffer,0,charsRead);

    if (charsRead > Long.MAX_VALUE - charsCopied) {

      charsCopied=Long.MAX_VALUE;

    }

 else {

      charsCopied+=charsRead;

    }

    if (charsCopied >= amount) {

      return charsCopied;

    }

    maxCharsToRead=(int)Math.min(bufferSize,amount - charsCopied);

  }

  return charsCopied;

}

Location: InOutUtil.java

Content: 

/** 

 * Deserializes the specified byte array to an <code>Object</code> instance.

 * @return the Object resulting from deserializing the specified array of bytes

 * @param ba the byte array to deserialize to an Object

 */

public static Serializable deserialize(byte[] ba) throws IOException, ClassNotFoundException {

  HsqlByteArrayInputStream bi=new HsqlByteArrayInputStream(ba);

  ObjectInputStream is=new ObjectInputStream(bi);

  return (Serializable)is.readObject();

}

Location: InOutUtil.java

Content: 

private InOutUtil(){

}

Location: InOutUtil.java

Content: 

/** 

 * Implementation only supports unix line-end format and is suitable for processing HTTP and other network protocol communications. Reads and writes a line of data. Returns the number of bytes read/written.

 */

public static int readLine(InputStream in,OutputStream out) throws IOException {

  int count=0;

  for (; ; ) {

    int b=in.read();

    if (b == -1) {

      break;

    }

    count++;

    out.write(b);

    if (b == '\n') {

      break;

    }

  }

  return count;

}

Location: InOutUtil.java

Content: 

/** 

 * Retrieves the serialized form of the specified <code>Object</code> as an array of bytes.

 * @param s the Object to serialize

 * @return  a static byte array representing the passed Object

 */

public static byte[] serialize(Serializable s) throws IOException {

  HsqlByteArrayOutputStream bo=new HsqlByteArrayOutputStream();

  ObjectOutputStream os=new ObjectOutputStream(bo);

  os.writeObject(s);

  return bo.toByteArray();

}

