Location: DbBackup.java

Content: 

void checkEssentialFiles() throws FileNotFoundException, IllegalStateException {

  if (!componentFiles[0].getName().endsWith(".properties")) {

    return;

  }

  for (int i=0; i < 2; i++) {

    boolean exists=componentStreams[i] != null || componentFiles[i].exists();

    if (!exists) {

      throw new FileNotFoundException(RB.file_missing.getString(componentFiles[i].getAbsolutePath()));

    }

  }

  if (!abortUponModify) {

    return;

  }

  Properties p=new Properties();

  FileInputStream fis=null;

  try {

    File propertiesFile=componentFiles[0];

    fis=new FileInputStream(propertiesFile);

    p.load(fis);

  }

 catch (  IOException io) {

  }

 finally {

    try {

      if (fis != null) {

        fis.close();

      }

    }

 catch (    IOException io) {

    }

 finally {

      fis=null;

    }

  }

  String modifiedString=p.getProperty("modified");

  if (modifiedString != null && (modifiedString.equalsIgnoreCase("yes") || modifiedString.equalsIgnoreCase("true"))) {

    throw new IllegalStateException(RB.modified_property.getString(modifiedString));

  }

}

Location: DbBackup.java

Content: 

void checkFilesNotChanged(long startTime) throws FileNotFoundException {

  if (!abortUponModify) {

    return;

  }

  try {

    for (int i=0; i < componentFiles.length; i++) {

      if (componentFiles[i].exists()) {

        if (!existList[i]) {

          throw new FileNotFoundException(RB.file_disappeared.getString(componentFiles[i].getAbsolutePath()));

        }

        if (componentFiles[i].lastModified() > startTime) {

          throw new FileNotFoundException(RB.file_changed.getString(componentFiles[i].getAbsolutePath()));

        }

      }

 else       if (existList[i]) {

        throw new FileNotFoundException(RB.file_appeared.getString(componentFiles[i].getAbsolutePath()));

      }

    }

  }

 catch (  IllegalStateException ise) {

    if (!archiveFile.delete()) {

      System.out.println(RB.cleanup_rmfail.getString(archiveFile.getAbsolutePath()));

    }

    throw ise;

  }

}

Location: DbBackup.java

Content: 

/** 

 * Instantiate a DbBackup instance for creating a Database Instance backup. Much validation is deferred until the write() method, to prevent problems with files changing between the constructor and the write call.

 */

public DbBackup(File archiveFile,String dbPath){

  this.archiveFile=archiveFile;

  File dbPathFile=new File(dbPath);

  dbDir=dbPathFile.getAbsoluteFile().getParentFile();

  instanceName=dbPathFile.getName();

  componentFiles=new File[]{new File(dbDir,instanceName + ".properties"),new File(dbDir,instanceName + ".script"),new File(dbDir,instanceName + ".data"),new File(dbDir,instanceName + ".backup"),new File(dbDir,instanceName + ".log"),new File(dbDir,instanceName + ".lobs")};

  componentStreams=new InputStreamInterface[componentFiles.length];

  existList=new boolean[componentFiles.length];

  ignoreList=new boolean[componentFiles.length];

}

Location: DbBackup.java

Content: 

/** 

 * Used for SCRIPT backup

 */

public DbBackup(File archiveFile,String dbPath,boolean script){

  this.archiveFile=archiveFile;

  File dbPathFile=new File(dbPath);

  dbDir=dbPathFile.getAbsoluteFile().getParentFile();

  instanceName=dbPathFile.getName();

  componentFiles=new File[]{new File(dbDir,instanceName + ".script")};

  componentStreams=new InputStreamInterface[componentFiles.length];

  existList=new boolean[componentFiles.length];

  ignoreList=new boolean[componentFiles.length];

  abortUponModify=false;

}

Location: DbBackup.java

Content: 

/** 

 * Convenience wrapper for generateBufferBlockValue(File[]).

 * @see #generateBufferBlockValue(File[])

 */

static protected int generateBufferBlockValue(File file){

  return generateBufferBlockValue(new File[]{file});

}

Location: DbBackup.java

Content: 

public boolean getAbortUponModify(){

  return abortUponModify;

}

Location: DbBackup.java

Content: 

public boolean getOverWrite(){

  return overWrite;

}

Location: DbBackup.java

Content: 

/** 

 * Defaults to true. If true, then the write() method will validate that the database is closed, and it will verify that no DB file changes between when we start writing the tar, and when we finish.

 */

public void setAbortUponModify(boolean abortUponModify){

  this.abortUponModify=abortUponModify;

}

Location: DbBackup.java

Content: 

public void setFileIgnore(String fileExtension){

  for (int i=0; i < componentFiles.length; i++) {

    if (componentFiles[i].getName().endsWith(fileExtension)) {

      ignoreList[i]=true;

      break;

    }

  }

}

Location: DbBackup.java

Content: 

/** 

 * Defaults to false. If false, then attempts to write a tar file that already exist will abort.

 */

public void setOverWrite(boolean overWrite){

  this.overWrite=overWrite;

}

Location: DbBackup.java

Content: 

/** 

 * Overrides file with stream.

 */

public void setStream(String fileExtension,InputStreamInterface is){

  for (int i=0; i < componentFiles.length; i++) {

    if (componentFiles[i].getName().endsWith(fileExtension)) {

      componentStreams[i]=is;

      break;

    }

  }

}

Location: DbBackup.java

Content: 

/** 

 * This method always backs up the .properties and .script files. It will back up all of .backup, .data, and .log which exist. If abortUponModify is set, no tar file will be created, and this method will throw.

 * @throws IOException for any of many possible I/O problems

 * @throws IllegalStateException only if abortUponModify is set, anddatabase is open or is modified.

 */

public void write() throws IOException, TarMalformatException {

  long startTime=new java.util.Date().getTime();

  checkEssentialFiles();

  TarGenerator generator=new TarGenerator(archiveFile,overWrite,Integer.valueOf(DbBackup.generateBufferBlockValue(componentFiles)));

  for (int i=0; i < componentFiles.length; i++) {

    boolean exists=componentStreams[i] != null || componentFiles[i].exists();

    if (!exists) {

      continue;

    }

    if (ignoreList[i]) {

      continue;

    }

    if (componentStreams[i] == null) {

      generator.queueEntry(componentFiles[i].getName(),componentFiles[i]);

      existList[i]=true;

    }

 else {

      generator.queueEntry(componentFiles[i].getName(),componentStreams[i]);

    }

  }

  generator.write();

  checkFilesNotChanged(startTime);

}

Location: DbBackup.java

Content: 

public void writeAsFiles() throws IOException {

  int bufferSize=512 * DbBackup.generateBufferBlockValue(componentFiles);

  byte[] writeBuffer=new byte[bufferSize];

  checkEssentialFiles();

  FileOutputStream fileOut=null;

  for (int i=0; i < componentFiles.length; i++)   try {

    if (ignoreList[i]) {

      continue;

    }

    if (!componentFiles[i].exists()) {

      continue;

    }

    File outFile=new File(archiveFile,componentFiles[i].getName());

    fileOut=new FileOutputStream(outFile);

    if (componentStreams[i] == null) {

      componentStreams[i]=new InputStreamWrapper(new FileInputStream(componentFiles[i]));

    }

    InputStreamInterface instream=componentStreams[i];

    while (true) {

      int count=instream.read(writeBuffer,0,writeBuffer.length);

      if (count <= 0) {

        break;

      }

      fileOut.write(writeBuffer,0,count);

    }

    instream.close();

    fileOut.flush();

    fileOut.getFD().sync();

  }

  finally {

    if (fileOut != null) {

      fileOut.close();

      fileOut=null;

    }

  }

}

