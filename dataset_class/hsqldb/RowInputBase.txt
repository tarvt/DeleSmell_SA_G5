Location: RowInputBase.java

Content: 

public byte[] getBuffer(){

  return buffer;

}

Location: RowInputBase.java

Content: 

public long getFilePosition(){

  if (filePos == NO_POS) {

  }

  return filePos;

}

Location: RowInputBase.java

Content: 

protected abstract Object[] readArray(Type type);

Location: RowInputBase.java

Content: 

protected abstract Long readBigint();

Location: RowInputBase.java

Content: 

protected abstract BinaryData readBinary();

Location: RowInputBase.java

Content: 

protected abstract BinaryData readBit();

Location: RowInputBase.java

Content: 

protected abstract BlobData readBlob();

Location: RowInputBase.java

Content: 

protected abstract Boolean readBoole();

Location: RowInputBase.java

Content: 

protected abstract String readChar(Type type);

Location: RowInputBase.java

Content: 

protected abstract ClobData readClob();

Location: RowInputBase.java

Content: 

public Object readData(Type type){

  Object o=null;

  if (readNull()) {

    return null;

  }

switch (type.typeCode) {

case Types.SQL_ALL_TYPES:

    break;

case Types.SQL_CHAR:

case Types.SQL_VARCHAR:

  o=readChar(type);

break;

case Types.TINYINT:

case Types.SQL_SMALLINT:

o=readSmallint();

break;

case Types.SQL_INTEGER:

o=readInteger();

break;

case Types.SQL_BIGINT:

o=readBigint();

break;

case Types.SQL_REAL:

case Types.SQL_FLOAT:

case Types.SQL_DOUBLE:

o=readReal();

break;

case Types.SQL_NUMERIC:

case Types.SQL_DECIMAL:

o=readDecimal(type);

break;

case Types.SQL_DATE:

o=readDate(type);

break;

case Types.SQL_TIME:

case Types.SQL_TIME_WITH_TIME_ZONE:

o=readTime(type);

break;

case Types.SQL_TIMESTAMP:

case Types.SQL_TIMESTAMP_WITH_TIME_ZONE:

o=readTimestamp(type);

break;

case Types.SQL_INTERVAL_YEAR:

case Types.SQL_INTERVAL_YEAR_TO_MONTH:

case Types.SQL_INTERVAL_MONTH:

o=readYearMonthInterval(type);

break;

case Types.SQL_INTERVAL_DAY:

case Types.SQL_INTERVAL_DAY_TO_HOUR:

case Types.SQL_INTERVAL_DAY_TO_MINUTE:

case Types.SQL_INTERVAL_DAY_TO_SECOND:

case Types.SQL_INTERVAL_HOUR:

case Types.SQL_INTERVAL_HOUR_TO_MINUTE:

case Types.SQL_INTERVAL_HOUR_TO_SECOND:

case Types.SQL_INTERVAL_MINUTE:

case Types.SQL_INTERVAL_MINUTE_TO_SECOND:

case Types.SQL_INTERVAL_SECOND:

o=readDaySecondInterval(type);

break;

case Types.SQL_BOOLEAN:

o=readBoole();

break;

case Types.OTHER:

o=readOther();

break;

case Types.SQL_CLOB:

o=readClob();

break;

case Types.SQL_BLOB:

o=readBlob();

break;

case Types.SQL_ARRAY:

o=readArray(type);

break;

case Types.SQL_GUID:

o=readUUID();

break;

case Types.SQL_BINARY:

case Types.SQL_VARBINARY:

o=readBinary();

break;

case Types.SQL_BIT:

case Types.SQL_BIT_VARYING:

o=readBit();

break;

default :

throw Error.runtimeError(ErrorCode.U_S0500,"RowInputBase - " + type.getNameString());

}

return o;

}

Location: RowInputBase.java

Content: 

protected abstract TimestampData readDate(Type type);

Location: RowInputBase.java

Content: 

protected abstract IntervalSecondData readDaySecondInterval(Type type);

Location: RowInputBase.java

Content: 

protected abstract BigDecimal readDecimal(Type type);

Location: RowInputBase.java

Content: 

protected abstract Integer readInteger();

Location: RowInputBase.java

Content: 

public String readLine(){

  throw Error.runtimeError(ErrorCode.U_S0500,"RowInputBase");

}

Location: RowInputBase.java

Content: 

protected abstract boolean readNull();

Location: RowInputBase.java

Content: 

protected abstract Object readOther();

Location: RowInputBase.java

Content: 

protected abstract Double readReal();

Location: RowInputBase.java

Content: 

protected abstract Integer readSmallint();

Location: RowInputBase.java

Content: 

protected abstract TimestampData readTimestamp(Type type);

Location: RowInputBase.java

Content: 

protected abstract TimeData readTime(Type type);

Location: RowInputBase.java

Content: 

public abstract int readType();

Location: RowInputBase.java

Content: 

protected abstract BinaryData readUUID();

Location: RowInputBase.java

Content: 

protected abstract IntervalMonthData readYearMonthInterval(Type type);

Location: RowInputBase.java

Content: 

/** 

 * Used to reset the row, ready for a new row to be written into the byte[] buffer by an external routine.

 */

public void resetBlock(long filepos,int rowsize){

  mark=0;

  reset();

  if (buffer.length < rowsize) {

    buffer=new byte[rowsize];

  }

  filePos=filepos;

  size=count=rowsize;

}

Location: RowInputBase.java

Content: 

/** 

 * Used to reset the row, ready for a new row to be written into the byte[] buffer by an external routine.

 */

public void resetRow(long filepos,int rowsize){

  mark=0;

  reset();

  if (buffer.length < rowsize) {

    buffer=new byte[rowsize];

  }

  filePos=filepos;

  size=count=rowsize;

  pos=4;

  buffer[0]=(byte)((rowsize >>> 24) & 0xFF);

  buffer[1]=(byte)((rowsize >>> 16) & 0xFF);

  buffer[2]=(byte)((rowsize >>> 8) & 0xFF);

  buffer[3]=(byte)((rowsize >>> 0) & 0xFF);

}

Location: RowInputBase.java

Content: 

RowInputBase(){

  this(new byte[4]);

}

Location: RowInputBase.java

Content: 

/** 

 * Constructor takes a complete row

 */

RowInputBase(byte[] buf){

  super(buf);

  size=buf.length;

}

Location: RowInputBase.java

Content: 

RowInputBase(int size){

  this(new byte[size]);

}

Location: RowInputBase.java

Content: 

public int skipBytes(int n){

  throw Error.runtimeError(ErrorCode.U_S0500,"RowInputBase");

}

