Location: ClosableByteArrayOutputStream.java

Content: 

/** 

 * Creates a new output stream. <p> The buffer capacity is initially 32 bytes, though its size increases if necessary.

 */

public ClosableByteArrayOutputStream(){

  this(32);

}

Location: ClosableByteArrayOutputStream.java

Content: 

/** 

 * Creates a new output stream with a buffer capacity of the specified <tt>size</tt>, in bytes.

 * @param size the initial size.

 * @exception IllegalArgumentException if size is negative.

 */

public ClosableByteArrayOutputStream(int size) throws IllegalArgumentException {

  if (size < 0) {

    throw new IllegalArgumentException("Negative initial size: " + size);

  }

  buf=new byte[size];

}

Location: ClosableByteArrayOutputStream.java

Content: 

/** 

 * Retrieves a copy of <tt>original</tt> with the given <tt>newLength</tt>. <p>

 * @param original the object to copy

 * @param newLength the length of the copy

 * @return copy of <tt>original</tt> with the given <tt>newLength</tt>

 */

protected byte[] copyOf(byte[] original,int newLength){

  byte[] copy=new byte[newLength];

  System.arraycopy(original,0,copy,0,Math.min(original.length,newLength));

  return copy;

}

Location: ClosableByteArrayOutputStream.java

Content: 

/** 

 * Performs an efficient (zero-copy) conversion of the data accumulated in this output stream to an input stream. <p> To ensure the future integrity of the resulting input stream,  {@link #free() free} is invoked upon this output stream as a side-effect.

 * @return an input stream representing this output stream's accumulateddata

 * @throws java.io.IOException if an I/O error occurs.In particular, an <tt>IOException</tt> may be thrown if this output stream has been  {@link #free() freed}.

 */

public synchronized ByteArrayInputStream toByteArrayInputStream() throws IOException {

  checkFreed();

  ByteArrayInputStream inputStream=new ByteArrayInputStream(buf,0,count);

  free();

  return inputStream;

}

