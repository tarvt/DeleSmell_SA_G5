Location: ClobInputStream.java

Content: 

public int available(){

  long avail=availableLength - currentPosition;

  if (avail > Integer.MAX_VALUE) {

    return Integer.MAX_VALUE;

  }

  return (int)avail;

}

Location: ClobInputStream.java

Content: 

private void checkClosed() throws IOException {

  if (isClosed) {

    throw new IOException(Error.getMessage(ErrorCode.X_0F503));

  }

}

Location: ClobInputStream.java

Content: 

public ClobInputStream(SessionInterface session,ClobData clob,long offset,long length){

  final long clobLength=clob.length(session);

  this.session=session;

  this.clob=clob;

  this.availableLength=offset + Math.min(length,clobLength - offset);

  this.currentPosition=offset;

  this.streamBlockSize=session.getStreamBlockSize();

}

Location: ClobInputStream.java

Content: 

static boolean isInLimits(long fullLength,long pos,long len){

  return pos >= 0 && len >= 0 && pos + len <= fullLength;

}

Location: ClobInputStream.java

Content: 

public int read() throws IOException {

  checkClosed();

  if (currentPosition >= availableLength) {

    return -1;

  }

  if (buffer == null || currentPosition >= bufferOffset + buffer.length) {

    try {

      checkClosed();

      readIntoBuffer();

    }

 catch (    Exception e) {

      throw JavaSystem.toIOException(e);

    }

  }

  int val=buffer[(int)(currentPosition - bufferOffset)];

  currentPosition++;

  return val;

}

Location: ClobInputStream.java

Content: 

private void readIntoBuffer(){

  long readLength=availableLength - currentPosition;

  if (readLength <= 0) {

    return;

  }

  if (readLength > streamBlockSize) {

    readLength=streamBlockSize;

  }

  buffer=clob.getChars(session,currentPosition,(int)readLength);

  bufferOffset=currentPosition;

}

Location: ClobInputStream.java

Content: 

public int read(char[] cbuf,int off,int len) throws IOException {

  checkClosed();

  if (currentPosition >= availableLength) {

    return -1;

  }

  if (currentPosition + len > availableLength) {

    len=(int)(availableLength - currentPosition);

  }

  for (int i=off; i < off + len && i < cbuf.length; i++) {

    cbuf[i]=(char)read();

  }

  return len;

}

Location: ClobInputStream.java

Content: 

public long skip(long n) throws IOException {

  checkClosed();

  if (n <= 0) {

    return 0;

  }

  if (currentPosition + n > availableLength) {

    n=availableLength - currentPosition;

  }

  currentPosition+=n;

  return n;

}

