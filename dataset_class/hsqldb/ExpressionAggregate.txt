Location: ExpressionAggregate.java

Content: 

ExpressionAggregate(int type,boolean distinct,Expression e){

  super(type);

  nodes=new Expression[BINARY];

  isDistinctAggregate=distinct;

  nodes[LEFT]=e;

  nodes[RIGHT]=Expression.EXPR_TRUE;

}

Location: ExpressionAggregate.java

Content: 

/** 

 * Get the result of a SetFunction or an ordinary value

 * @param session session

 * @param currValue instance of set function or value

 * @return object

 */

public Object getAggregatedValue(Session session,SetFunction currValue){

  if (currValue == null) {

    return opType == OpTypes.COUNT ? Long.valueOf(0) : null;

  }

  return currValue.getValue(session);

}

Location: ExpressionAggregate.java

Content: 

public Expression getCondition(){

  return nodes[RIGHT];

}

Location: ExpressionAggregate.java

Content: 

public boolean hasCondition(){

  return !nodes[RIGHT].isTrue();

}

Location: ExpressionAggregate.java

Content: 

boolean isSelfAggregate(){

  return true;

}

Location: ExpressionAggregate.java

Content: 

public void setCondition(Expression e){

  nodes[RIGHT]=e;

}

Location: ExpressionAggregate.java

Content: 

public SetFunction updateAggregatingValue(Session session,SetFunction currValue){

  if (!nodes[RIGHT].testCondition(session)) {

    return currValue;

  }

  if (currValue == null) {

    currValue=new SetFunctionValueAggregate(session,opType,nodes[LEFT].dataType,dataType,isDistinctAggregate,arrayType);

  }

  Object newValue=nodes[LEFT].opType == OpTypes.ASTERISK ? ValuePool.INTEGER_1 : nodes[LEFT].getValue(session);

  currValue.add(session,newValue);

  return currValue;

}

