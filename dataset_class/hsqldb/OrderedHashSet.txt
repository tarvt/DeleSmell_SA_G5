Location: OrderedHashSet.java

Content: 

public void addAll(OrderedHashSet other){

  for (int i=0, size=other.size(); i < size; i++) {

    add(other.get(i));

  }

}

Location: OrderedHashSet.java

Content: 

public static OrderedHashSet addAll(OrderedHashSet first,OrderedHashSet second){

  if (second == null) {

    return first;

  }

  if (first == null) {

    first=new OrderedHashSet();

  }

  first.addAll(second);

  return first;

}

Location: OrderedHashSet.java

Content: 

public void add(int index,Object key) throws IndexOutOfBoundsException {

  throw new IndexOutOfBoundsException();

}

Location: OrderedHashSet.java

Content: 

public static OrderedHashSet add(OrderedHashSet first,Object value){

  if (value == null) {

    return first;

  }

  if (first == null) {

    first=new OrderedHashSet();

  }

  first.add(value);

  return first;

}

Location: OrderedHashSet.java

Content: 

private void checkRange(int i){

  if (i < 0 || i >= size()) {

    throw new IndexOutOfBoundsException();

  }

}

Location: OrderedHashSet.java

Content: 

public int getCommonElementCount(Set other){

  int count=0;

  for (int i=0, size=size(); i < size; i++) {

    if (other.contains(objectKeyTable[i])) {

      count++;

    }

  }

  return count;

}

Location: OrderedHashSet.java

Content: 

public int getIndex(Object key){

  return getLookup(key,key.hashCode());

}

Location: OrderedHashSet.java

Content: 

public int getLargestIndex(OrderedHashSet other){

  int max=-1;

  for (int i=0, size=other.size(); i < size; i++) {

    int index=getIndex(other.get(i));

    if (index > max) {

      max=index;

    }

  }

  return max;

}

Location: OrderedHashSet.java

Content: 

public int getSmallestIndex(OrderedHashSet other){

  int min=-1;

  for (int i=0, size=other.size(); i < size; i++) {

    int index=getIndex(other.get(i));

    if (index != -1) {

      if (min == -1 || index < min) {

        min=index;

      }

    }

  }

  return min;

}

Location: OrderedHashSet.java

Content: 

public boolean insert(int index,Object key) throws IndexOutOfBoundsException {

  if (index < 0 || index > size()) {

    throw new IndexOutOfBoundsException();

  }

  if (contains(key)) {

    return false;

  }

  if (index == size()) {

    return add(key);

  }

  Object[] array=new Object[size()];

  toArray(array);

  super.clear();

  for (int i=0; i < index; i++) {

    add(array[i]);

  }

  add(key);

  for (int i=index; i < array.length; i++) {

    add(array[i]);

  }

  return true;

}

Location: OrderedHashSet.java

Content: 

public OrderedHashSet(){

  super(8);

  isList=true;

}

Location: OrderedHashSet.java

Content: 

public Object remove(int index) throws IndexOutOfBoundsException {

  checkRange(index);

  return super.removeObject(objectKeyTable[index],true);

}

Location: OrderedHashSet.java

Content: 

public boolean remove(Object key){

  return super.removeObject(key,true) != null;

}

Location: OrderedHashSet.java

Content: 

public Object set(int index,Object key) throws IndexOutOfBoundsException {

  throw new IndexOutOfBoundsException();

}

Location: OrderedHashSet.java

Content: 

public void toArray(Object[] array){

  System.arraycopy(super.objectKeyTable,0,array,0,array.length);

}

