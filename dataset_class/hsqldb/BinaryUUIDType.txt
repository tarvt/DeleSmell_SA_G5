Location: BinaryUUIDType.java

Content: 

protected BinaryUUIDType(){

  super(Types.SQL_GUID,binaryUUIDPrecision);

}

Location: BinaryUUIDType.java

Content: 

public static BinaryData getBinary(long hi,long lo){

  return new BinaryData(ArrayUtil.toByteArray(hi,lo),false);

}

Location: BinaryUUIDType.java

Content: 

public static BinaryData getBinary(UUID uuid){

  return getBinary(uuid.getMostSignificantBits(),uuid.getLeastSignificantBits());

}

Location: BinaryUUIDType.java

Content: 

public static UUID getJavaUUID(BinaryData data){

  if (data == null) {

    return null;

  }

  byte[] bytes=data.getBytes();

  long msb=ArrayUtil.byteSequenceToLong(bytes,0);

  long lsb=ArrayUtil.byteSequenceToLong(bytes,8);

  return new UUID(msb,lsb);

}

Location: BinaryUUIDType.java

Content: 

public String getNameFullString(){

  return Tokens.T_UUID;

}

Location: BinaryUUIDType.java

Content: 

int getRightTrimSize(BlobData data){

  byte[] bytes=data.getBytes();

  int endindex=bytes.length;

  for (--endindex; endindex >= 0 && bytes[endindex] == 0; endindex--) {

  }

  return ++endindex;

}

Location: BinaryUUIDType.java

Content: 

public boolean isUUIDType(){

  return true;

}

Location: BinaryUUIDType.java

Content: 

public BlobData trim(Session session,BlobData data,int trim,boolean leading,boolean trailing){

  if (data == null) {

    return null;

  }

  long length=data.length(session);

  if (length > Integer.MAX_VALUE) {

    throw Error.error(ErrorCode.X_22027);

  }

  byte[] bytes=data.getBytes(session,0,(int)length);

  int endindex=bytes.length;

  if (trailing) {

    for (--endindex; endindex >= 0 && bytes[endindex] == trim; endindex--) {

    }

    endindex++;

  }

  int startindex=0;

  if (leading) {

    while (startindex < endindex && bytes[startindex] == trim) {

      startindex++;

    }

  }

  byte[] newBytes=bytes;

  if (startindex != 0 || endindex != bytes.length) {

    newBytes=new byte[endindex - startindex];

    System.arraycopy(bytes,startindex,newBytes,0,endindex - startindex);

  }

  return new BinaryData(newBytes,newBytes == bytes);

}

