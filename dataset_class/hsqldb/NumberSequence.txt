Location: NumberSequence.java

Content: 

private void checkInTypeRange(long value){

  long min;

  long max;

switch (dataType.typeCode) {

case Types.TINYINT:

    max=Byte.MAX_VALUE;

  min=Byte.MIN_VALUE;

break;

case Types.SQL_SMALLINT:

max=Short.MAX_VALUE;

min=Short.MIN_VALUE;

break;

case Types.SQL_INTEGER:

max=Integer.MAX_VALUE;

min=Integer.MIN_VALUE;

break;

case Types.SQL_BIGINT:

max=Long.MAX_VALUE;

min=Long.MIN_VALUE;

break;

case Types.SQL_NUMERIC:

case Types.SQL_DECIMAL:

max=Long.MAX_VALUE;

min=Long.MIN_VALUE;

break;

default :

throw Error.runtimeError(ErrorCode.U_S0500,"NumberSequence");

}

if (value < min || value > max) {

throw Error.error(ErrorCode.X_42597);

}

}

Location: NumberSequence.java

Content: 

void checkValues(){

  readLock.lock();

  try {

    if (restartValueDefault) {

      currValue=lastValue=startValue;

      restartValueDefault=false;

    }

    if (minValue >= maxValue || startValue < minValue || startValue > maxValue || currValue < minValue || currValue > maxValue) {

      throw Error.error(ErrorCode.X_42597);

    }

  }

  finally {

    readLock.unlock();

  }

}

Location: NumberSequence.java

Content: 

private long getDefaultMinOrMax(boolean isMax){

  long min;

  long max;

switch (dataType.typeCode) {

case Types.TINYINT:

    max=Byte.MAX_VALUE;

  min=Byte.MIN_VALUE;

break;

case Types.SQL_SMALLINT:

max=Short.MAX_VALUE;

min=Short.MIN_VALUE;

break;

case Types.SQL_INTEGER:

max=Integer.MAX_VALUE;

min=Integer.MIN_VALUE;

break;

case Types.SQL_BIGINT:

max=Long.MAX_VALUE;

min=Long.MIN_VALUE;

break;

case Types.SQL_NUMERIC:

case Types.SQL_DECIMAL:

max=Long.MAX_VALUE;

min=Long.MIN_VALUE;

break;

default :

throw Error.runtimeError(ErrorCode.U_S0500,"NumberSequence");

}

return isMax ? max : min;

}

Location: NumberSequence.java

Content: 

public long getIncrement(){

  return increment;

}

Location: NumberSequence.java

Content: 

public long getMaxValue(){

  readLock.lock();

  try {

    return maxValue;

  }

  finally {

    readLock.unlock();

  }

}

Location: NumberSequence.java

Content: 

public long getMinValue(){

  readLock.lock();

  try {

    return minValue;

  }

  finally {

    readLock.unlock();

  }

}

Location: NumberSequence.java

Content: 

public String getRestartSQL(){

  StringBuffer sb=new StringBuffer(128);

  sb.append(Tokens.T_ALTER).append(' ');

  sb.append(Tokens.T_SEQUENCE);

  sb.append(' ').append(name.getSchemaQualifiedStatementName());

  sb.append(' ').append(Tokens.T_RESTART);

  sb.append(' ').append(Tokens.T_WITH).append(' ').append(peek());

  return sb.toString();

}

Location: NumberSequence.java

Content: 

public static String getRestartSQL(Table t){

  String colname=t.getColumn(t.identityColumn).getName().statementName;

  NumberSequence seq=t.identitySequence;

  StringBuffer sb=new StringBuffer(128);

  sb.append(Tokens.T_ALTER).append(' ').append(Tokens.T_TABLE);

  sb.append(' ').append(t.getName().getSchemaQualifiedStatementName());

  sb.append(' ').append(Tokens.T_ALTER).append(' ');

  sb.append(Tokens.T_COLUMN);

  sb.append(' ').append(colname);

  sb.append(' ').append(Tokens.T_RESTART);

  sb.append(' ').append(Tokens.T_WITH).append(' ').append(seq.peek());

  return sb.toString();

}

Location: NumberSequence.java

Content: 

public String getSQLColumnDefinition(){

  StringBuffer sb=new StringBuffer(128);

  sb.append(Tokens.T_GENERATED).append(' ');

  if (name == null) {

    if (isAlways()) {

      sb.append(Tokens.T_ALWAYS);

    }

 else {

      sb.append(Tokens.T_BY).append(' ').append(Tokens.T_DEFAULT);

    }

    sb.append(' ').append(Tokens.T_AS).append(' ').append(Tokens.T_IDENTITY).append(Tokens.T_OPENBRACKET);

    sb.append(Tokens.T_START).append(' ');

    sb.append(Tokens.T_WITH).append(' ');

    sb.append(startValue);

    if (getIncrement() != 1) {

      sb.append(' ').append(Tokens.T_INCREMENT).append(' ');

      sb.append(Tokens.T_BY).append(' ');

      sb.append(getIncrement());

    }

    if (!hasDefaultMinMax()) {

      sb.append(' ').append(Tokens.T_MINVALUE).append(' ');

      sb.append(getMinValue());

      sb.append(' ').append(Tokens.T_MAXVALUE).append(' ');

      sb.append(getMaxValue());

    }

    if (isCycle()) {

      sb.append(' ').append(Tokens.T_CYCLE);

    }

    if (name == null) {

      sb.append(Tokens.T_CLOSEBRACKET);

    }

  }

 else {

    sb.append(Tokens.T_BY).append(' ').append(Tokens.T_DEFAULT);

    sb.append(' ').append(Tokens.T_AS).append(' ');

    sb.append(Tokens.T_SEQUENCE).append(' ');

    sb.append(getName().getSchemaQualifiedStatementName());

  }

  return sb.toString();

}

Location: NumberSequence.java

Content: 

public long getStartValue(){

  readLock.lock();

  try {

    return startValue;

  }

  finally {

    readLock.unlock();

  }

}

Location: NumberSequence.java

Content: 

public boolean hasDefaultMinMax(){

  readLock.lock();

  try {

    long min;

    long max;

switch (dataType.typeCode) {

case Types.TINYINT:

      max=Byte.MAX_VALUE;

    min=Byte.MIN_VALUE;

  break;

case Types.SQL_SMALLINT:

max=Short.MAX_VALUE;

min=Short.MIN_VALUE;

break;

case Types.SQL_INTEGER:

max=Integer.MAX_VALUE;

min=Integer.MIN_VALUE;

break;

case Types.SQL_BIGINT:

max=Long.MAX_VALUE;

min=Long.MIN_VALUE;

break;

case Types.SQL_NUMERIC:

case Types.SQL_DECIMAL:

max=Long.MAX_VALUE;

min=Long.MIN_VALUE;

break;

default :

throw Error.runtimeError(ErrorCode.U_S0500,"NumberSequence");

}

return minValue == min && maxValue == max;

}

  finally {

readLock.unlock();

}

}

Location: NumberSequence.java

Content: 

public boolean isAlways(){

  readLock.lock();

  try {

    return isAlways;

  }

  finally {

    readLock.unlock();

  }

}

Location: NumberSequence.java

Content: 

public boolean isCycle(){

  readLock.lock();

  try {

    return isCycle;

  }

  finally {

    readLock.unlock();

  }

}

Location: NumberSequence.java

Content: 

/** 

 * constructor with initial value and increment;

 */

public NumberSequence(HsqlName name,long value,long increment,Type type){

  this(name,type);

  setStartValue(value);

  setIncrement(increment);

}

Location: NumberSequence.java

Content: 

public NumberSequence(HsqlName name,Type type){

  setDefaults(name,type);

}

Location: NumberSequence.java

Content: 

/** 

 * reset the wasUsed flag

 */

boolean resetWasUsed(){

  writeLock.lock();

  try {

    boolean result=lastValue != currValue;

    lastValue=currValue;

    return result;

  }

  finally {

    writeLock.unlock();

  }

}

Location: NumberSequence.java

Content: 

/** 

 * reset to new initial value

 */

public void reset(long value){

  writeLock.lock();

  try {

    if (value < minValue || value > maxValue) {

      throw Error.error(ErrorCode.X_42597);

    }

    startValue=currValue=lastValue=value;

  }

  finally {

    writeLock.unlock();

  }

}

Location: NumberSequence.java

Content: 

void reset(NumberSequence other){

  writeLock.lock();

  try {

    name=other.name;

    startValue=other.startValue;

    currValue=other.currValue;

    lastValue=other.lastValue;

    increment=other.increment;

    dataType=other.dataType;

    minValue=other.minValue;

    maxValue=other.maxValue;

    isCycle=other.isCycle;

    isAlways=other.isAlways;

  }

  finally {

    writeLock.unlock();

  }

}

Location: NumberSequence.java

Content: 

void setAlways(boolean value){

  writeLock.lock();

  try {

    isAlways=value;

  }

  finally {

    writeLock.unlock();

  }

}

Location: NumberSequence.java

Content: 

void setCurrentValueNoCheck(long value){

  writeLock.lock();

  try {

    checkInTypeRange(value);

    currValue=lastValue=value;

  }

  finally {

    writeLock.unlock();

  }

}

Location: NumberSequence.java

Content: 

void setCycle(boolean value){

  writeLock.lock();

  try {

    isCycle=value;

  }

  finally {

    writeLock.unlock();

  }

}

Location: NumberSequence.java

Content: 

void setDefaultMaxValue(){

  writeLock.lock();

  try {

    maxValue=getDefaultMinOrMax(true);

  }

  finally {

    writeLock.unlock();

  }

}

Location: NumberSequence.java

Content: 

void setDefaultMinValue(){

  minValue=getDefaultMinOrMax(false);

}

Location: NumberSequence.java

Content: 

public void setDefaults(HsqlName name,Type type){

  this.name=name;

  this.dataType=type;

  long min;

  long max;

switch (dataType.typeCode) {

case Types.TINYINT:

    max=Byte.MAX_VALUE;

  min=Byte.MIN_VALUE;

break;

case Types.SQL_SMALLINT:

max=Short.MAX_VALUE;

min=Short.MIN_VALUE;

break;

case Types.SQL_INTEGER:

max=Integer.MAX_VALUE;

min=Integer.MIN_VALUE;

break;

case Types.SQL_BIGINT:

max=Long.MAX_VALUE;

min=Long.MIN_VALUE;

break;

case Types.SQL_NUMERIC:

case Types.SQL_DECIMAL:

if (type.scale == 0) {

max=Long.MAX_VALUE;

min=Long.MIN_VALUE;

break;

}

default :

throw Error.error(ErrorCode.X_42563);

}

minValue=min;

maxValue=max;

increment=1;

}

Location: NumberSequence.java

Content: 

void setIncrement(long value){

  writeLock.lock();

  try {

    if (value < Short.MIN_VALUE / 2 || value > Short.MAX_VALUE / 2) {

      throw Error.error(ErrorCode.X_42597);

    }

    increment=value;

  }

  finally {

    writeLock.unlock();

  }

}

Location: NumberSequence.java

Content: 

void setMaxValueNoCheck(long value){

  writeLock.lock();

  try {

    checkInTypeRange(value);

    maxValue=value;

  }

  finally {

    writeLock.unlock();

  }

}

Location: NumberSequence.java

Content: 

void setMaxValue(long value){

  writeLock.lock();

  try {

    checkInTypeRange(value);

    if (value <= minValue || currValue > value) {

      throw Error.error(ErrorCode.X_42597);

    }

    maxValue=value;

  }

  finally {

    writeLock.unlock();

  }

}

Location: NumberSequence.java

Content: 

void setMinValueNoCheck(long value){

  writeLock.lock();

  try {

    checkInTypeRange(value);

    minValue=value;

  }

  finally {

    writeLock.unlock();

  }

}

Location: NumberSequence.java

Content: 

void setMinValue(long value){

  writeLock.lock();

  try {

    checkInTypeRange(value);

    if (value >= maxValue || currValue < value) {

      throw Error.error(ErrorCode.X_42597);

    }

    minValue=value;

  }

  finally {

    writeLock.unlock();

  }

}

Location: NumberSequence.java

Content: 

void setStartValueDefault(){

  writeLock.lock();

  try {

    restartValueDefault=true;

  }

  finally {

    writeLock.unlock();

  }

}

Location: NumberSequence.java

Content: 

void setStartValueNoCheck(long value){

  writeLock.lock();

  try {

    checkInTypeRange(value);

    startValue=value;

    currValue=lastValue=startValue;

  }

  finally {

    writeLock.unlock();

  }

}

Location: NumberSequence.java

Content: 

void setStartValue(long value){

  writeLock.lock();

  try {

    if (value < minValue || value > maxValue) {

      throw Error.error(ErrorCode.X_42597);

    }

    startValue=value;

    currValue=lastValue=startValue;

  }

  finally {

    writeLock.unlock();

  }

}

Location: NumberSequence.java

Content: 

/** 

 * Updates are necessary for text tables For memory tables, the logged and scripted RESTART WITH will override this. No checks as values may have overridden the sequence defaults

 */

long systemUpdate(long value){

  writeLock.lock();

  try {

    if (value == currValue) {

      currValue+=increment;

      return value;

    }

    if (increment > 0) {

      if (value > currValue) {

        currValue=value + increment;

      }

    }

 else {

      if (value < currValue) {

        currValue=value + increment;

      }

    }

    return value;

  }

  finally {

    writeLock.unlock();

  }

}

Location: NumberSequence.java

Content: 

/** 

 * getter for a given value

 */

long userUpdate(long value){

  writeLock.lock();

  try {

    if (value == currValue) {

      currValue+=increment;

      return value;

    }

    if (increment > 0) {

      if (value > currValue) {

        currValue+=((value - currValue + increment) / increment) * increment;

      }

    }

 else {

      if (value < currValue) {

        currValue+=((value - currValue + increment) / increment) * increment;

      }

    }

    return value;

  }

  finally {

    writeLock.unlock();

  }

}

