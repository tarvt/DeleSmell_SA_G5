Location: Line.java

Content: 

String getArguments() throws PreprocessorException {

  if (arguments == null || arguments.length() == 0) {

    throw new PreprocessorException("[" + text + "]: has no argument(s)");

  }

  return arguments;

}

Location: Line.java

Content: 

String getIndent(){

  return indent;

}

Location: Line.java

Content: 

String getSourceText(){

  return sourceText;

}

Location: Line.java

Content: 

String getText(){

  return text;

}

Location: Line.java

Content: 

int getType(){

  return type;

}

Location: Line.java

Content: 

static int indexOfNonTabOrSpace(String line){

  int pos=0;

  int len=line.length();

  while (pos < len) {

    char ch=line.charAt(pos);

    if ((ch == ' ') || (ch == '\t')) {

      pos++;

      continue;

    }

    break;

  }

  return pos;

}

Location: Line.java

Content: 

static int indexOfTabOrSpace(String s,int fromIndex){

  int spos=s.indexOf(' ',fromIndex);

  int tpos=s.indexOf('\t',fromIndex);

  return (((tpos != -1) && (tpos < spos)) || (spos == -1)) ? tpos : spos;

}

Location: Line.java

Content: 

boolean isType(int lineType){

  return (this.type == lineType);

}

Location: Line.java

Content: 

Line(String line) throws PreprocessorException {

  setSourceText(line);

}

Location: Line.java

Content: 

void setSourceText(String line) throws PreprocessorException {

  this.sourceText=line;

  int pos=indexOfNonTabOrSpace(line);

  this.indent=line.substring(0,pos);

  line=line.substring(pos);

  if (!line.startsWith(DIRECTIVE_PREFIX)) {

    this.text=line;

    this.arguments=null;

    this.type=LineType.VISIBLE;

  }

 else   if (line.length() == DIRECTIVE_PREFIX_LENGTH) {

    this.text="";

    this.arguments=null;

    this.type=LineType.HIDDEN;

  }

 else   if (SPACE_CHARS.indexOf(line.charAt(DIRECTIVE_PREFIX_LENGTH)) != -1) {

    this.text=line.substring(DIRECTIVE_PREFIX_LENGTH_PLUS_ONE);

    this.arguments=null;

    this.type=LineType.HIDDEN;

  }

 else {

    pos=indexOfTabOrSpace(line,DIRECTIVE_PREFIX_LENGTH_PLUS_ONE);

    if (pos == -1) {

      this.text=line;

      this.arguments=null;

    }

 else {

      this.text=line.substring(0,pos);

      this.arguments=line.substring(pos + 1).trim();

    }

    Integer oType=(Integer)LineType.directives().get(text);

    if (oType == null) {

      throw new PreprocessorException("Unknown directive [" + text + "] in ["+ line+ "]");

    }

    this.type=oType.intValue();

  }

}

