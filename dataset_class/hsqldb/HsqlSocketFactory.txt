Location: HsqlSocketFactory.java

Content: 

public void configureSocket(Socket socket){

}

Location: HsqlSocketFactory.java

Content: 

/** 

 * Returns a server socket bound to the specified port. The socket is configured with the socket options given to this factory.

 * @return the ServerSocket

 * @param port the port to which to bind the ServerSocket

 * @throws Exception if a network error occurs

 */

public ServerSocket createServerSocket(int port) throws Exception {

  return new ServerSocket(port);

}

Location: HsqlSocketFactory.java

Content: 

/** 

 * Returns a server socket bound to the specified port. The socket is configured with the socket options given to this factory.

 * @return the ServerSocket

 * @param port the port to which to bind the ServerSocket

 * @throws Exception if a network error occurs

 */

public ServerSocket createServerSocket(int port,String address) throws Exception {

  return new ServerSocket(port,128,InetAddress.getByName(address));

}

Location: HsqlSocketFactory.java

Content: 

/** 

 * If socket argument is not null, returns it. If it is null, creates a socket and connects it to the specified remote host at the specified remote port. This socket is configured using the socket options established for this factory.

 * @return the socket

 * @param socket the existing socket, can be null

 * @param host the server host

 * @param port the server port

 * @throws Exception if a network error occurs

 */

public Socket createSocket(Socket socket,String host,int port) throws Exception {

  return socket == null ? new Socket(host,port) : socket;

}

Location: HsqlSocketFactory.java

Content: 

/** 

 * Creates a socket and connects it to the specified remote host at the specified remote port. This socket is configured using the socket options established for this factory.

 * @return the socket

 * @param host the server host

 * @param port the server port

 * @throws Exception if a network error occurs

 */

public Socket createSocket(String host,int port) throws Exception {

  return new Socket(host,port);

}

Location: HsqlSocketFactory.java

Content: 

/** 

 * Retrieves an HsqlSocketFactory whose subclass and attributes are determined by the specified argument, tls.

 * @param tls whether to retrieve a factory producing SSL sockets

 * @throws Exception if the new factory cannot be constructed or isof the wrong type

 * @return a new factory

 */

public static HsqlSocketFactory getInstance(boolean tls) throws Exception {

  return tls ? getSSLImpl() : getPlainImpl();

}

Location: HsqlSocketFactory.java

Content: 

private static HsqlSocketFactory getPlainImpl() throws Exception {

synchronized (HsqlSocketFactory.class) {

    if (plainImpl == null) {

      plainImpl=new HsqlSocketFactory();

    }

  }

  return plainImpl;

}

Location: HsqlSocketFactory.java

Content: 

private static HsqlSocketFactory getSSLImpl() throws Exception {

synchronized (HsqlSocketFactory.class) {

    if (sslImpl == null) {

      sslImpl=newFactory("org.hsqldb.server.HsqlSocketFactorySecure");

    }

  }

  return sslImpl;

}

Location: HsqlSocketFactory.java

Content: 

/** 

 * External construction disabled.  New factory instances are retrieved through the newHsqlSocketFactory method instead.

 */

protected HsqlSocketFactory() throws Exception {

}

Location: HsqlSocketFactory.java

Content: 

/** 

 * Retrieves whether this factory produces secure sockets.

 * @return true if this factory produces secure sockets

 */

public boolean isSecure(){

  return false;

}

Location: HsqlSocketFactory.java

Content: 

/** 

 * Retrieves a new HsqlSocketFactory whose class is determined by the implClass argument. The basic contract here is that implementations constructed by this method should return true upon calling isSecure() iff they actually create secure sockets. There is no way to guarantee this directly here, so it is simply trusted that an  implementation is secure if it returns true for calls to isSecure();

 * @return a new secure socket factory

 * @param implClass the fully qualified name of the desiredclass to construct

 * @throws Exception if a new secure socket factory cannotbe constructed

 */

private static HsqlSocketFactory newFactory(String implClass) throws Exception {

  Class clazz;

  Constructor ctor;

  Class[] ctorParm;

  Object[] ctorArg;

  Object factory;

  clazz=Class.forName(implClass);

  ctorParm=new Class[0];

  ctor=clazz.getDeclaredConstructor(ctorParm);

  ctorArg=new Object[0];

  try {

    factory=ctor.newInstance(ctorArg);

  }

 catch (  InvocationTargetException e) {

    Throwable t=e.getTargetException();

    throw (t instanceof Exception) ? ((Exception)t) : new RuntimeException(t.toString());

  }

  return (HsqlSocketFactory)factory;

}

