Location: SimpleLog.java

Content: 

public int getLevel(){

  return level;

}

Location: SimpleLog.java

Content: 

public PrintWriter getPrintWriter(){

  return writer;

}

Location: SimpleLog.java

Content: 

public synchronized void logContext(int atLevel,String message){

  if (level < atLevel) {

    return;

  }

  if (writer == null) {

    return;

  }

  sb.append(HsqlDateTime.getSystemTimeString()).append(' ');

  if (!isSQL) {

    sb.append(logTypeNames[atLevel]).append(' ');

  }

  sb.append(message);

  writer.println(sb.toString());

  sb.setLength(0);

  writer.flush();

}

Location: SimpleLog.java

Content: 

public synchronized void logContext(int atLevel,String prefix,String message,String suffix){

  if (level < atLevel) {

    return;

  }

  if (writer == null) {

    return;

  }

  sb.append(HsqlDateTime.getSystemTimeString()).append(' ');

  if (!isSQL) {

    sb.append(logTypeNames[atLevel]).append(' ');

  }

  sb.append(prefix).append(' ');

  sb.append(message).append(' ').append(suffix);

  writer.println(sb.toString());

  sb.setLength(0);

  writer.flush();

}

Location: SimpleLog.java

Content: 

public synchronized void logContext(Throwable t,String message,int atLevel){

  if (level == LOG_NONE) {

    return;

  }

  if (writer == null) {

    return;

  }

  sb.append(HsqlDateTime.getSystemTimeString()).append(' ');

  if (!isSQL) {

    sb.append(logTypeNames[atLevel]).append(' ');

  }

  sb.append(message);

  Throwable temp=new Throwable();

  StackTraceElement[] elements=temp.getStackTrace();

  if (elements.length > 1) {

    sb.append(' ');

    sb.append(elements[1].getClassName()).append('.');

    sb.append(elements[1].getMethodName());

  }

  elements=t.getStackTrace();

  if (elements.length > 0) {

    sb.append(' ');

    sb.append(elements[0].getClassName()).append('.');

    sb.append(' ').append(elements[0].getMethodName());

  }

  sb.append(' ').append(t.toString());

  writer.println(sb.toString());

  sb.setLength(0);

  writer.flush();

}

Location: SimpleLog.java

Content: 

public void setLevel(int level){

  this.level=level;

  setupWriter();

}

Location: SimpleLog.java

Content: 

private void setupLog(File file){

  try {

    FileUtil.getFileUtil().makeParentDirectories(file);

    writer=new PrintWriter(new FileWriter(file,true),true);

  }

 catch (  Exception e) {

    isSystem=true;

    writer=new PrintWriter(System.out);

  }

}

Location: SimpleLog.java

Content: 

private void setupWriter(){

  if (level == LOG_NONE) {

    close();

    return;

  }

  if (writer == null) {

    if (isSystem) {

      writer=new PrintWriter(System.out);

    }

 else {

      File file=new File(filePath);

      setupLog(file);

    }

  }

}

Location: SimpleLog.java

Content: 

public SimpleLog(String path,int level,boolean isSQL){

  this.isSystem=path == null;

  this.filePath=path;

  this.isSQL=isSQL;

  logTypeNames=isSQL ? sqlLogTypeNames : appLogTypeNames;

  sb=new StringBuffer(256);

  setLevel(level);

}

