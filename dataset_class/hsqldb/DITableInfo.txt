Location: DITableInfo.java

Content: 

/** 

 * Creates a new DITableInfo object with the default Locale and reporting on no table.  It is absolutely essential the a valid Table object is assigned to this object, using the setTable method, before any Table, Column or Index oriented value retrieval methods are called; this class contains no assertions or exception handling related to a null or invalid table member attribute.

 */

DITableInfo(){

  hongshuai();

  Locale oldLocale;

  writeLock.lock();

  try {

    oldLocale=ResourceBundleHandler.getLocale();

    ResourceBundleHandler.setLocale(Locale.getDefault());

    hnd_column_remarks=ResourceBundleHandler.getBundleHandle("info-column-remarks",null);

    hnd_table_remarks=ResourceBundleHandler.getBundleHandle("info-table-remarks",null);

    ResourceBundleHandler.setLocale(oldLocale);

  }

  finally {

    writeLock.unlock();

  }

}

Location: DITableInfo.java

Content: 

/** 

 * Retrieves whether the best row identifier column is a pseudo column, like an Oracle ROWID. <p> Currently, this always returns an Integer whose value is DatabaseMetaData.bestRowNotPseudo, as HSQLDB does not support pseudo columns such as ROWID. <p>

 * @return whether the best row identifier column isa pseudo column

 */

Integer getBRIPseudo(){

  return ValuePool.getInt(bestRowNotPseudo);

}

Location: DITableInfo.java

Content: 

/** 

 * Retrieves the scope of the best row identifier. <p> This implements the rules described in DatabaseInformationMain.SYSTEM_BESTROWIDENTIFIER. <p>

 * @return the scope of the best row identifier

 */

Integer getBRIScope(){

  return (table.isWritable()) ? ValuePool.getInt(bestRowTemporary) : ValuePool.getInt(bestRowSession);

}

Location: DITableInfo.java

Content: 

/** 

 * Retrieves the simple name of the specified column. <p>

 * @param i zero-based column index

 * @return the simple name of the specified column.

 */

String getColName(int i){

  return table.getColumn(i).getName().name;

}

Location: DITableInfo.java

Content: 

/** 

 * Retrieves the remarks, if any, recorded against the specified column. <p>

 * @param i zero-based column index

 * @return the remarks recorded against the specified column.

 */

String getColRemarks(int i){

  String key;

  if (table.getTableType() != TableBase.INFO_SCHEMA_TABLE) {

    return table.getColumn(i).getName().comment;

  }

  key=getName() + "_" + getColName(i);

  return ResourceBundleHandler.getString(hnd_column_remarks,key);

}

Location: DITableInfo.java

Content: 

/** 

 * Retrieves the HSQLDB-specific type of the table. <p>

 * @return the HSQLDB-specific type of the table

 */

String getHsqlType(){

switch (table.getTableType()) {

case TableBase.MEMORY_TABLE:

case TableBase.TEMP_TABLE:

case TableBase.INFO_SCHEMA_TABLE:

    return "MEMORY";

case TableBase.CACHED_TABLE:

  return "CACHED";

case TableBase.TEMP_TEXT_TABLE:

case TableBase.TEXT_TABLE:

return "TEXT";

case TableBase.VIEW_TABLE:

default :

return null;

}

}

Location: DITableInfo.java

Content: 

/** 

 * Retrieves the standard JDBC type of the table. <p> "TABLE" for user-defined tables, "VIEW" for user-defined views, and so on.

 * @return the standard JDBC type of the table

 */

String getJDBCStandardType(){

switch (table.getTableType()) {

case TableBase.VIEW_TABLE:

    return "VIEW";

case TableBase.TEMP_TABLE:

case TableBase.TEMP_TEXT_TABLE:

  return "GLOBAL TEMPORARY";

case TableBase.INFO_SCHEMA_TABLE:

return "SYSTEM TABLE";

default :

if (table.getOwner().isSystem()) {

return "SYSTEM TABLE";

}

return "TABLE";

}

}

Location: DITableInfo.java

Content: 

/** 

 * Retrieves the remarks (if any) recorded against the Table. <p>

 * @return the remarks recorded against the Table

 */

String getRemark(){

  return (table.getTableType() == TableBase.INFO_SCHEMA_TABLE) ? ResourceBundleHandler.getString(hnd_table_remarks,getName()) : table.getName().comment;

}

Location: DITableInfo.java

Content: 

/** 

 * Assigns the Table object on which this object is to report. <p>

 * @param table the Table object on which this object is to report

 */

void setTable(Table table){

  this.table=table;

}

Location: DITableInfo.java

Content: 

/** 

 * Sets the Locale for table and column remarks. <p>

 */

void setupBundles(){

  Locale oldLocale;

  writeLock.lock();

  try {

    oldLocale=ResourceBundleHandler.getLocale();

    ResourceBundleHandler.setLocale(Locale.getDefault());

    hnd_column_remarks=ResourceBundleHandler.getBundleHandle("info-column-remarks",null);

    hnd_table_remarks=ResourceBundleHandler.getBundleHandle("info-table-remarks",null);

    ResourceBundleHandler.setLocale(oldLocale);

  }

  finally {

    writeLock.unlock();

  }

}

