Location: OdbcPacketInputStream.java

Content: 

/** 

 * Instantiate a packet of the specified type, with size determined by the first int read from the given stream.

 */

static OdbcPacketInputStream newOdbcPacketInputStream(char cType,InputStream streamSource) throws IOException {

  return newOdbcPacketInputStream(cType,streamSource,null);

}

Location: OdbcPacketInputStream.java

Content: 

/** 

 * Instantiate a packet of the specified type and size.

 */

static OdbcPacketInputStream newOdbcPacketInputStream(char cType,InputStream streamSource,int sizeInt) throws IOException {

  return newOdbcPacketInputStream(cType,streamSource,Integer.valueOf(sizeInt));

}

Location: OdbcPacketInputStream.java

Content: 

static private OdbcPacketInputStream newOdbcPacketInputStream(char cType,InputStream streamSource,Integer packetSizeObj) throws IOException {

  int bytesRead, i;

  int packetSize=0;

  if (packetSizeObj == null) {

    byte[] fourBytes=new byte[4];

    bytesRead=0;

    while ((i=streamSource.read(fourBytes,bytesRead,fourBytes.length - bytesRead)) > 0) {

      bytesRead+=i;

    }

    if (bytesRead != fourBytes.length) {

      throw new EOFException("Failed to read size header int");

    }

    packetSize=((fourBytes[0] & 0xff) << 24) + ((fourBytes[1] & 0xff) << 16) + ((fourBytes[2] & 0xff) << 8)+ (fourBytes[3] & 0xff) - 4;

  }

 else {

    packetSize=packetSizeObj.intValue();

  }

  byte[] xferBuffer=new byte[packetSize];

  bytesRead=0;

  while ((i=streamSource.read(xferBuffer,bytesRead,xferBuffer.length - bytesRead)) > 0) {

    bytesRead+=i;

  }

  if (bytesRead != xferBuffer.length) {

    throw new EOFException("Failed to read packet contents from given stream");

  }

  return new OdbcPacketInputStream(cType,new ByteArrayInputStream(xferBuffer));

}

Location: OdbcPacketInputStream.java

Content: 

private OdbcPacketInputStream(char packetType,InputStream bufferStream){

  super(bufferStream);

  this.packetType=packetType;

}

Location: OdbcPacketInputStream.java

Content: 

public char readByteChar() throws IOException {

  return (char)readByte();

}

Location: OdbcPacketInputStream.java

Content: 

BinaryData readSizedBinaryData() throws IOException {

  int len=readInt();

  try {

    return (len < 0) ? null : new BinaryData((long)len,this);

  }

 catch (  HsqlException he) {

    throw new IOException(he.getMessage());

  }

}

Location: OdbcPacketInputStream.java

Content: 

String readSizedString() throws IOException {

  int len=readInt();

  return (len < 0) ? null : readString(len);

}

Location: OdbcPacketInputStream.java

Content: 

/** 

 * Reads a NULL-TERMINATED String.

 * @throws IOException if attempt to read past end of packet.

 */

String readString() throws IOException {

  ByteArrayOutputStream baos=new ByteArrayOutputStream();

  baos.write((byte)'X');

  baos.write((byte)'X');

  int i;

  while ((i=readByte()) > 0) {

    baos.write((byte)i);

  }

  byte[] ba=baos.toByteArray();

  baos.close();

  int len=ba.length - 2;

  ba[0]=(byte)(len >>> 8);

  ba[1]=(byte)len;

  DataInputStream dis=new DataInputStream(new ByteArrayInputStream(ba));

  String s=dis.readUTF();

  dis.close();

  return s;

}

Location: OdbcPacketInputStream.java

Content: 

/** 

 * Generate a String/String Map from null-terminated String pairs, until a '\0' character is read in place of the first key character.

 * @return the generated Map

 * @throws EOFException if the rest of packet does not contained therequired, well-formed null-terminated string pairs.

 */

Map readStringPairs() throws IOException {

  String key;

  Map map=new HashMap();

  while (true) {

    key=readString();

    if (key.length() < 1) {

      break;

    }

    map.put(key,readString());

  }

  return map;

}

Location: OdbcPacketInputStream.java

Content: 

/** 

 * These Strings are not null-terminated.

 * @param len Bytes to read (not necessarily characters to be returned!

 * @throws IOException if attempt to read past end of packet.

 */

String readString(int len) throws IOException {

  int bytesRead=0;

  int i;

  byte[] ba=new byte[len + 2];

  ba[0]=(byte)(len >>> 8);

  ba[1]=(byte)len;

  while ((i=read(ba,2 + bytesRead,len - bytesRead)) > -1 && bytesRead < len) {

    bytesRead+=i;

  }

  if (bytesRead != len) {

    throw new EOFException("Packet ran dry");

  }

  for (i=2; i < ba.length - 1; i++) {

    if (ba[i] == 0) {

      throw new RuntimeException("Null internal to String at offset " + (i - 2));

    }

  }

  DataInputStream dis=new DataInputStream(new ByteArrayInputStream(ba));

  String s=dis.readUTF();

  dis.close();

  return s;

}

