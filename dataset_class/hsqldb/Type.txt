Location: Type.java

Content: 

public int arrayLimitCardinality(){

  return 0;

}

Location: Type.java

Content: 

public int cardinality(Session session,Object a){

  return 0;

}

Location: Type.java

Content: 

public Type collectionBaseType(){

  return null;

}

Location: Type.java

Content: 

public Type duplicate(){

  try {

    return (Type)super.clone();

  }

 catch (  CloneNotSupportedException e) {

    throw Error.runtimeError(ErrorCode.U_S0500,"Type");

  }

}

Location: Type.java

Content: 

public static Type getAggregateType(Type add,Type existing){

  if (existing == null || existing.typeCode == Types.SQL_ALL_TYPES) {

    return add;

  }

  if (add == null || add.typeCode == Types.SQL_ALL_TYPES) {

    return existing;

  }

  return existing.getAggregateType(add);

}

Location: Type.java

Content: 

public static ArrayType getDefaultArrayType(int type){

  return new ArrayType(getDefaultType(type),ArrayType.defaultArrayCardinality);

}

Location: Type.java

Content: 

public static Type getDefaultTypeWithSize(int type){

switch (type) {

case Types.SQL_ALL_TYPES:

    return SQL_ALL_TYPES;

case Types.SQL_ARRAY:

  return SQL_ARRAY_ALL_TYPES;

case Types.SQL_CHAR:

return SQL_CHAR_DEFAULT;

case Types.SQL_VARCHAR:

return SQL_VARCHAR_DEFAULT;

case Types.SQL_CLOB:

return SQL_CLOB;

case Types.SQL_INTEGER:

return SQL_INTEGER;

case Types.SQL_SMALLINT:

return SQL_SMALLINT;

case Types.SQL_BIGINT:

return SQL_BIGINT;

case Types.TINYINT:

return TINYINT;

case Types.SQL_FLOAT:

case Types.SQL_REAL:

case Types.SQL_DOUBLE:

return SQL_DOUBLE;

case Types.SQL_NUMERIC:

return SQL_NUMERIC;

case Types.SQL_DECIMAL:

return SQL_DECIMAL;

case Types.SQL_BOOLEAN:

return SQL_BOOLEAN;

case Types.SQL_BINARY:

return SQL_BINARY_DEFAULT;

case Types.SQL_VARBINARY:

return SQL_VARBINARY_DEFAULT;

case Types.SQL_GUID:

return SQL_GUID;

case Types.SQL_BLOB:

return SQL_BLOB;

case Types.SQL_BIT:

return SQL_BIT;

case Types.SQL_BIT_VARYING:

return SQL_BIT_VARYING;

case Types.SQL_DATE:

return SQL_DATE;

case Types.SQL_TIME:

return SQL_TIME;

case Types.SQL_TIME_WITH_TIME_ZONE:

return SQL_TIME_WITH_TIME_ZONE;

case Types.SQL_TIMESTAMP:

return SQL_TIMESTAMP;

case Types.SQL_TIMESTAMP_WITH_TIME_ZONE:

return SQL_TIMESTAMP_WITH_TIME_ZONE;

case Types.SQL_INTERVAL_YEAR:

return SQL_INTERVAL_YEAR;

case Types.SQL_INTERVAL_YEAR_TO_MONTH:

return SQL_INTERVAL_YEAR_TO_MONTH;

case Types.SQL_INTERVAL_MONTH:

return SQL_INTERVAL_MONTH;

case Types.SQL_INTERVAL_DAY:

return SQL_INTERVAL_DAY;

case Types.SQL_INTERVAL_DAY_TO_HOUR:

return SQL_INTERVAL_DAY_TO_HOUR;

case Types.SQL_INTERVAL_DAY_TO_MINUTE:

return SQL_INTERVAL_DAY_TO_MINUTE;

case Types.SQL_INTERVAL_DAY_TO_SECOND:

return SQL_INTERVAL_DAY_TO_SECOND;

case Types.SQL_INTERVAL_HOUR:

return SQL_INTERVAL_HOUR;

case Types.SQL_INTERVAL_HOUR_TO_MINUTE:

return SQL_INTERVAL_HOUR_TO_MINUTE;

case Types.SQL_INTERVAL_HOUR_TO_SECOND:

return SQL_INTERVAL_HOUR_TO_SECOND;

case Types.SQL_INTERVAL_MINUTE:

return SQL_INTERVAL_MINUTE;

case Types.SQL_INTERVAL_MINUTE_TO_SECOND:

return SQL_INTERVAL_MINUTE_TO_SECOND;

case Types.SQL_INTERVAL_SECOND:

return SQL_INTERVAL_SECOND;

case Types.OTHER:

return OTHER;

default :

return null;

}

}

Location: Type.java

Content: 

public static Type getDefaultType(int type){

  try {

    return getType(type,Type.SQL_VARCHAR.getCharacterSet(),Type.SQL_VARCHAR.getCollation(),0,0);

  }

 catch (  Exception e) {

    return null;

  }

}

Location: Type.java

Content: 

public static int getHSQLDBTypeCode(int jdbcTypeNumber){

switch (jdbcTypeNumber) {

case Types.BIGINT:

    return Types.SQL_BIGINT;

case Types.LONGVARCHAR:

  return Types.SQL_VARCHAR;

case Types.CLOB:

return Types.SQL_CLOB;

case Types.BINARY:

return Types.SQL_BINARY;

case Types.BIT:

return Types.SQL_BIT_VARYING;

case Types.VARBINARY:

case Types.LONGVARBINARY:

return Types.SQL_VARBINARY;

case Types.BLOB:

return Types.SQL_BLOB;

case Types.ARRAY:

return Types.SQL_ARRAY;

default :

return jdbcTypeNumber;

}

}

Location: Type.java

Content: 

/** 

 * translate an internal type number to JDBC type number if a type is not supported internally, it is returned without translation

 * @param type int

 * @return int

 */

public static int getJDBCTypeCode(int type){

switch (type) {

case Types.SQL_BLOB:

    return Types.BLOB;

case Types.SQL_CLOB:

  return Types.CLOB;

case Types.SQL_BIGINT:

return Types.BIGINT;

case Types.SQL_BINARY:

return Types.BINARY;

case Types.SQL_VARBINARY:

return Types.VARBINARY;

case Types.SQL_BIT:

case Types.SQL_BIT_VARYING:

return Types.BIT;

case Types.SQL_ARRAY:

return Types.ARRAY;

default :

return type;

}

}

Location: Type.java

Content: 

public final String getTypeDefinition(){

  if (userTypeModifier == null) {

    return getDefinition();

  }

  return getName().getSchemaQualifiedStatementName();

}

Location: Type.java

Content: 

public static Type getTypeForJDBCConvertToken(int name){

  return (Type)jdbcConvertTypes.get(name);

}

Location: Type.java

Content: 

public static int getTypeNr(String name){

  int i=typeNames.get(name,Integer.MIN_VALUE);

  if (i == Integer.MIN_VALUE) {

    i=typeAliases.get(name,Integer.MIN_VALUE);

  }

  return i;

}

Location: Type.java

Content: 

/** 

 * Enforces precision and scale limits on type

 */

public static Type getType(int type,Charset charset,Collation collation,long precision,int scale){

switch (type) {

case Types.SQL_ALL_TYPES:

    return SQL_ALL_TYPES;

case Types.SQL_CHAR:

case Types.SQL_VARCHAR:

case Types.SQL_CLOB:

  return CharacterType.getCharacterType(type,precision,collation);

case Types.SQL_INTEGER:

return SQL_INTEGER;

case Types.SQL_SMALLINT:

return SQL_SMALLINT;

case Types.SQL_BIGINT:

return SQL_BIGINT;

case Types.TINYINT:

return TINYINT;

case Types.SQL_FLOAT:

if (precision > 53) {

throw Error.error(ErrorCode.X_42592,"" + precision);

}

case Types.SQL_REAL:

case Types.SQL_DOUBLE:

return SQL_DOUBLE;

case Types.SQL_NUMERIC:

case Types.SQL_DECIMAL:

if (precision == 0) {

precision=NumberType.defaultNumericPrecision;

}

return NumberType.getNumberType(type,precision,scale);

case Types.SQL_BOOLEAN:

return SQL_BOOLEAN;

case Types.SQL_BINARY:

case Types.SQL_VARBINARY:

case Types.SQL_BLOB:

return BinaryType.getBinaryType(type,precision);

case Types.SQL_GUID:

return SQL_GUID;

case Types.SQL_BIT:

case Types.SQL_BIT_VARYING:

return BitType.getBitType(type,precision);

case Types.SQL_DATE:

case Types.SQL_TIME:

case Types.SQL_TIME_WITH_TIME_ZONE:

case Types.SQL_TIMESTAMP:

case Types.SQL_TIMESTAMP_WITH_TIME_ZONE:

return DateTimeType.getDateTimeType(type,scale);

case Types.SQL_INTERVAL_YEAR:

case Types.SQL_INTERVAL_YEAR_TO_MONTH:

case Types.SQL_INTERVAL_MONTH:

case Types.SQL_INTERVAL_DAY:

case Types.SQL_INTERVAL_DAY_TO_HOUR:

case Types.SQL_INTERVAL_DAY_TO_MINUTE:

case Types.SQL_INTERVAL_DAY_TO_SECOND:

case Types.SQL_INTERVAL_HOUR:

case Types.SQL_INTERVAL_HOUR_TO_MINUTE:

case Types.SQL_INTERVAL_HOUR_TO_SECOND:

case Types.SQL_INTERVAL_MINUTE:

case Types.SQL_INTERVAL_MINUTE_TO_SECOND:

case Types.SQL_INTERVAL_SECOND:

return IntervalType.getIntervalType(type,precision,scale);

case Types.OTHER:

return OTHER;

default :

throw Error.runtimeError(ErrorCode.U_S0500,"Type");

}

}

Location: Type.java

Content: 

public static Type getType(Type type,Collation collation){

  if (type.getCollation() == collation) {

    return type;

  }

  if (type.isCharacterType()) {

    type=type.duplicate();

    ((CharacterType)type).collation=collation;

  }

  return type;

}

Location: Type.java

Content: 

public boolean isArrayType(){

  return false;

}

Location: Type.java

Content: 

public boolean isDistinctType(){

  return userTypeModifier == null ? false : userTypeModifier.schemaObjectType == SchemaObject.TYPE;

}

Location: Type.java

Content: 

public boolean isDomainType(){

  return userTypeModifier == null ? false : userTypeModifier.schemaObjectType == SchemaObject.DOMAIN;

}

Location: Type.java

Content: 

public boolean isIntervalDaySecondType(){

  return false;

}

Location: Type.java

Content: 

public boolean isIntervalType(){

  return false;

}

Location: Type.java

Content: 

public boolean isIntervalYearMonthType(){

  return false;

}

Location: Type.java

Content: 

public boolean isMultisetType(){

  return false;

}

Location: Type.java

Content: 

public boolean isObjectType(){

  return false;

}

Location: Type.java

Content: 

public boolean isStructuredType(){

  return false;

}

Location: Type.java

Content: 

public static boolean isSupportedSQLType(int typeNumber){

  if (getDefaultType(typeNumber) == null) {

    return false;

  }

  return true;

}

Location: Type.java

Content: 

public static boolean matches(Type[] one,Type[] other){

  for (int i=0; i < one.length; i++) {

    if (one[i].typeCode != other[i].typeCode) {

      return false;

    }

  }

  return true;

}

Location: Type.java

Content: 

public static TypedComparator newComparator(Session session){

  return new TypedComparator(session);

}

Location: Type.java

Content: 

Type(int typeGroup,int type,long precision,int scale){

  this.typeComparisonGroup=typeGroup;

  this.typeCode=type;

  this.precision=precision;

  this.scale=scale;

  this.typeDataGroup=typeCode == Types.SQL_CHAR ? Types.SQL_VARCHAR : typeCode;

}

