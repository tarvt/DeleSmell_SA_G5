Location: TestUtil.java

Content: 

protected BlankParsedSection(HsqlArrayList linesArray){

  super(linesArray);

  type=' ';

}

Location: TestUtil.java

Content: 

public static void checkDatabaseFilesDeleted(String path){

  File[] list=FileUtil.getDatabaseFileList(path);

  if (list.length != 0) {

    System.out.println("database files not deleted");

  }

}

Location: TestUtil.java

Content: 

protected CountParsedSection(HsqlArrayList linesArray){

  super(linesArray);

  type='c';

  countWeWant=Integer.parseInt(lines[0]);

}

Location: TestUtil.java

Content: 

public static boolean delete(String file){

  return new File(file).delete();

}

Location: TestUtil.java

Content: 

protected DisplaySection(HsqlArrayList sectionLines){

  lines=(String[])sectionLines.toArray();

  int firstSlash=lines[0].indexOf('/');

  lines[0]=lines[0].substring(firstSlash + 1).trim();

}

Location: TestUtil.java

Content: 

protected ExceptionParsedSection(HsqlArrayList linesArray){

  super(linesArray);

  expectedState=lines[0].trim();

  if (expectedState.length() < 1) {

    expectedState=null;

  }

  type='e';

}

Location: TestUtil.java

Content: 

/** 

 * Expand occurrences of "${timestamp}" in input to time stamps.

 */

static protected void expandStamps(StringBuffer sb){

  int i=sb.indexOf(TIMESTAMP_VAR_STR);

  if (i < 1) {

    return;

  }

  String timestamp;

synchronized (sdfYMDHMS) {

    timestamp=sdfYMDHMS.format(new java.util.Date());

  }

  while (i > -1) {

    sb.replace(i,i + TIMESTAMP_VAR_STR.length(),timestamp);

    i=sb.indexOf(TIMESTAMP_VAR_STR);

  }

}

Location: TestUtil.java

Content: 

protected String getActualResultString(){

  StringBuffer printVal=new StringBuffer();

  String[] actualRows=getActualRows();

  if (actualRows == null) {

    return "no result";

  }

  for (int i=0; i < actualRows.length; i++) {

    printVal.append(actualRows[i]).append(LS);

  }

  return printVal.toString();

}

Location: TestUtil.java

Content: 

private String[] getActualRows(){

  return actualRows;

}

Location: TestUtil.java

Content: 

private int getCountWeWant(){

  return countWeWant;

}

Location: TestUtil.java

Content: 

private String[] getExpectedRows(){

  return expectedRows;

}

Location: TestUtil.java

Content: 

/** 

 * returns the error message for the section

 * @return message

 */

protected String getMessage(){

  return message;

}

Location: TestUtil.java

Content: 

protected String getResultString(){

  StringBuffer sb=new StringBuffer();

  if (lines.length == 1 && lines[0].trim().length() < 1) {

    return null;

  }

  for (int i=0; i < lines.length; i++) {

    if (i > 0) {

      sb.append(LS);

    }

    sb.append("+ " + lines[i]);

  }

  TestUtil.expandStamps(sb);

  return sb.toString().trim();

}

Location: TestUtil.java

Content: 

/** 

 * String representation of this ParsedSection

 * @return String representation of this ParsedSection

 */

protected String getTestResultString(){

  StringBuffer b=new StringBuffer();

  b.append(LS + "******" + LS);

  b.append("Type: ");

  b.append(getType()).append(LS);

  b.append("SQL: ").append(getSql()).append(LS);

  b.append("expected results:").append(LS);

  b.append(getResultString()).append(LS);

  if (getMessage() != null) {

    b.append(LS + "message:").append(LS);

    b.append(getMessage()).append(LS);

  }

  b.append("actual results:").append(LS);

  b.append(getActualResultString());

  b.append(LS + "******" + LS);

  return b.toString();

}

Location: TestUtil.java

Content: 

protected IgnoreParsedSection(HsqlArrayList sectionLines,char aType){

  super(sectionLines);

  type=aType;

}

Location: TestUtil.java

Content: 

/** 

 * Checks that the type code letter is valid

 * @param aCode Lower-cased type code to validate.

 * @return true if the type code is valid, otherwise false.

 */

protected static boolean isValidCode(char aCode){

switch (aCode) {

case ' ':

case 'r':

case 'o':

case 'e':

case 'c':

case 'u':

case 's':

case 'd':

case 'w':

case 'p':

    return true;

}

return false;

}

Location: TestUtil.java

Content: 

/** 

 * Constructor when the section's input lines do not need to be parsed into SQL.

 */

protected ParsedSection(){

}

Location: TestUtil.java

Content: 

/** 

 * Factory method to create appropriate parsed section class for the section

 * @param aSection Vector containing the section of script

 * @return a ParesedSection object

 */

private static ParsedSection parsedSectionFactory(HsqlArrayList sectionLines){

  char type=' ';

  String topLine=(String)sectionLines.get(0);

  if (topLine.startsWith("/*")) {

    type=topLine.charAt(2);

    if ((Character.isUpperCase(type)) && (Boolean.getBoolean("IgnoreCodeCase"))) {

      type=Character.toLowerCase(type);

    }

    if (!ParsedSection.isValidCode(type)) {

      return null;

    }

  }

switch (type) {

case 'u':

{

      ParsedSection section=new UpdateParsedSection(sectionLines);

      if (TestUtil.oneSessionOnly) {

        if (section.getSql().toUpperCase().contains("SHUTDOWN")) {

          section=new IgnoreParsedSection(sectionLines,type);

        }

      }

      return section;

    }

case 's':

  return new SilentParsedSection(sectionLines);

case 'w':

return new WaitSection(sectionLines);

case 'p':

return new ProceedSection(sectionLines);

case 'r':

return new ResultSetParsedSection(sectionLines);

case 'o':

return new ResultSetOutputParsedSection(sectionLines);

case 'c':

return new CountParsedSection(sectionLines);

case 'd':

return new DisplaySection(sectionLines);

case 'e':

return new ExceptionParsedSection(sectionLines);

case ' ':

{

ParsedSection section=new BlankParsedSection(sectionLines);

if (TestUtil.oneSessionOnly) {

if (section.getSql().toUpperCase().contains("SHUTDOWN")) {

section=new IgnoreParsedSection(sectionLines,type);

}

}

return section;

}

default :

return new IgnoreParsedSection(sectionLines,type);

}

}

Location: TestUtil.java

Content: 

/** 

 * Common constructor functions for this family.

 * @param linesArray Array of the script lines containing the section of script.database

 */

protected ParsedSection(HsqlArrayList linesArray){

  StringBuffer sqlBuff=new StringBuffer();

  int endIndex=0;

  int k;

  String s=(String)linesArray.get(0);

  if (s.startsWith("/*")) {

    if (s.length() == 3) {

      lines=(String[])linesArray.toArray(1,linesArray.size());

    }

 else {

      lines=(String[])linesArray.toArray();

      lines[0]=lines[0].substring(3);

    }

    k=lines.length - 1;

    do {

      if ((endIndex=lines[k].indexOf("*/")) != -1) {

        sqlBuff.insert(0,lines[k].substring(endIndex + 2));

        lines[k]=lines[k].substring(0,endIndex);

        if (lines[k].length() == 0) {

          resEndRow=k - 1;

        }

 else {

          resEndRow=k;

        }

        break;

      }

 else {

        sqlBuff.insert(0,lines[k]);

      }

      k--;

    }

 while (k >= 0);

  }

 else {

    lines=(String[])linesArray.toArray();

    for (k=0; k < lines.length; k++) {

      sqlBuff.append(lines[k]);

      sqlBuff.append(LS);

    }

  }

  sqlString=sqlBuff.toString();

}

Location: TestUtil.java

Content: 

/** 

 * Method to save typing ;-) This method does not distinguish between normal and error output.

 * @param s String to be printed

 */

static void print(String s){

  System.out.println(s);

}

Location: TestUtil.java

Content: 

protected ProceedSection(HsqlArrayList linesArray){

  lines=(String[])linesArray.toArray();

  int closeCmd=lines[0].indexOf("*/");

  String cmd=lines[0].substring(0,closeCmd);

  lines[0]=lines[0].substring(closeCmd + 2).trim();

  String trimmed=cmd.trim();

  try {

    int index=trimmed.indexOf(' ');

    if (index < 0) {

      throw new IllegalArgumentException();

    }

    enforceSequence=Boolean.valueOf(trimmed.substring(0,index)).booleanValue();

    waiter=Waiter.getWaiter(trimmed.substring(index).trim());

  }

 catch (  IllegalArgumentException ie) {

    throw new IllegalArgumentException(P_SYNTAX_MSG);

  }

  type='p';

}

Location: TestUtil.java

Content: 

/** 

 * constructs a new instance of ResultSetParsedSection, interpreting the supplied results as one or more lines of delimited field values

 */

protected ResultSetOutputParsedSection(HsqlArrayList linesArray){

  super(linesArray);

  type='o';

}

Location: TestUtil.java

Content: 

/** 

 * constructs a new instance of ResultSetParsedSection, interpreting the supplied results as one or more lines of delimited field values

 */

protected ResultSetParsedSection(HsqlArrayList linesArray){

  super(linesArray);

  type='r';

  expectedRows=new String[(resEndRow + 1)];

  for (int i=0; i <= resEndRow; i++) {

    int skip=StringUtil.skipSpaces(lines[i],0);

    expectedRows[i]=lines[i].substring(skip);

  }

}

Location: TestUtil.java

Content: 

/** 

 * This method should certainly be an instance method. Can't do that until make this entire class OO.

 */

public static void setAbortOnErr(boolean aoe){

  abortOnErr=aoe;

}

Location: TestUtil.java

Content: 

protected SilentParsedSection(HsqlArrayList linesArray){

  super(linesArray);

  type='s';

}

Location: TestUtil.java

Content: 

static void testScripts(String directory,StopWatch sw){

  TestUtil.deleteDatabase("test1");

  try {

    Class.forName("org.hsqldb.jdbc.JDBCDriver");

    String url="jdbc:hsqldb:test1;sql.enforce_strict_size=true";

    String user="sa";

    String password="";

    Connection cConnection=null;

    String[] filelist;

    String absolute=new File(directory).getAbsolutePath();

    filelist=new File(absolute).list();

    ArraySort.sort((Object[])filelist,0,filelist.length,new StringComparator());

    for (int i=0; i < filelist.length; i++) {

      String fname=filelist[i];

      if (fname.startsWith("TestSelf") && fname.endsWith(".txt")) {

        long elapsed=sw.elapsedTime();

        if (!oneSessionOnly || cConnection == null) {

          cConnection=DriverManager.getConnection(url,user,password);

        }

        print("Opened DB in " + (double)(sw.elapsedTime() - elapsed) / 1000 + " s");

        testScript(cConnection,absolute + File.separator + fname);

        if (!oneSessionOnly) {

          cConnection.close();

        }

      }

    }

  }

 catch (  Exception e) {

    e.printStackTrace();

    print("TestUtil init error: " + e.toString());

  }

}

Location: TestUtil.java

Content: 

static void testScript(Connection aConnection,String aPath){

  File file=new File(aPath);

  try {

    TestUtil.testScript(aConnection,file.getAbsolutePath(),new FileReader(file));

  }

 catch (  Exception e) {

    e.printStackTrace();

    System.out.println("test script file error: " + e.toString());

  }

}

Location: TestUtil.java

Content: 

/** 

 * Runs a preformatted script.<p> Where a result set is required, each line in the script will be interpreted as a seperate expected row in the ResultSet returned by the query.  Within each row, fields should be delimited using either comma (the default), or a user defined delimiter which should be specified in the System property TestUtilFieldDelimiter

 * @param aConnection Connection object for the database

 * @param sourceName Identifies the script which failed

 * @param inReader Source of commands to be tested

 */

public static void testScript(Connection aConnection,String sourceName,Reader inReader) throws SQLException, IOException {

  Statement statement=aConnection.createStatement();

  LineNumberReader reader=new LineNumberReader(inReader);

  LineGroupReader sqlReader=new LineGroupReader(reader);

  int startLine=0;

  System.out.println("Opened test script file: " + sourceName);

  try {

    while (true) {

      HsqlArrayList section=sqlReader.getSection();

      startLine=sqlReader.getStartLineNumber();

      if (section.size() == 0) {

        break;

      }

      testSection(statement,section,sourceName,startLine);

    }

    statement.close();

  }

 catch (  SQLException se) {

    System.out.println("Error encountered at command beginning at " + sourceName + ':'+ startLine);

    throw se;

  }

catch (  RuntimeException re) {

    System.out.println("Error encountered at command beginning at " + sourceName + ':'+ startLine);

    throw re;

  }

  System.out.println("Processed " + reader.getLineNumber() + " lines from "+ sourceName);

}

Location: TestUtil.java

Content: 

/** 

 * Takes a discrete section of the test script, contained in the section vector, splits this into the expected result(s) and submits the statement to the database, comparing the results returned with the expected results. If the actual result differs from that expected, or an exception is thrown, then the appropriate message is printed.

 * @param stat Statement object used to access the database

 * @param section Vector of script lines containing a discretesection of script (i.e. test type, expected results, SQL for the statement).

 * @param line line of the script file where this section started

 */

private static void testSection(Statement stat,HsqlArrayList section,String scriptName,int line){

  ParsedSection pSection=parsedSectionFactory(section);

  if (pSection == null) {

    System.out.println("The section starting at " + scriptName + ':'+ line+ " could not be parsed, and so was not processed."+ LS);

    return;

  }

  if (pSection instanceof IgnoreParsedSection) {

    System.out.println("At " + scriptName + ':'+ line+ ": "+ pSection.getResultString());

    return;

  }

  if (pSection instanceof DisplaySection || pSection instanceof WaitSection || pSection instanceof ProceedSection) {

    String s=pSection.getResultString();

    if (s != null) {

      System.out.println(pSection.getResultString());

    }

  }

  if (pSection instanceof DisplaySection) {

    return;

  }

  if (!pSection.test(stat)) {

    System.out.println("Section starting at " + scriptName + ':'+ line+ " returned an unexpected result: "+ pSection.getTestResultString());

    if (TestUtil.abortOnErr) {

      throw new TestRuntimeException(scriptName + ": " + line+ "pSection");

    }

  }

}

Location: TestUtil.java

Content: 

protected boolean test(Statement aStatement){

  try {

    aStatement.execute(getSql());

  }

 catch (  SQLException sqlX) {

    caught=sqlX;

    if (expectedState == null || expectedState.equalsIgnoreCase(sqlX.getSQLState())) {

      return true;

    }

    message="SQLState '" + sqlX.getSQLState() + "' : "+ sqlX.toString()+ " instead of '"+ expectedState+ "'";

  }

catch (  Exception x) {

    caught=x;

    message=x.toString();

  }

  return false;

}

Location: TestUtil.java

Content: 

/** 

 * Legacy wrapper 

 */

static void test(Statement stat,String s,int line){

  TestUtil.test(stat,s,null,line);

}

Location: TestUtil.java

Content: 

/** 

 * Performs a preformatted statement or group of statements and throws if the result does not match the expected one.

 * @param line start line in the script file for this test

 * @param stat Statement object used to access the database

 * @param sourceName Identifies the script which failed

 * @param s Contains the type, expected result and SQL for the test

 */

static void test(Statement stat,String s,String sourceName,int line){

  HsqlArrayList section=new HsqlArrayList(new String[8],0);

  section.add(s);

  testSection(stat,section,sourceName,line);

}

Location: TestUtil.java

Content: 

protected UpdateParsedSection(HsqlArrayList linesArray){

  super(linesArray);

  type='u';

  countWeWant=Integer.parseInt(lines[0]);

}

Location: TestUtil.java

Content: 

protected WaitSection(HsqlArrayList linesArray){

  lines=(String[])linesArray.toArray();

  int closeCmd=lines[0].indexOf("*/");

  String cmd=lines[0].substring(0,closeCmd);

  lines[0]=lines[0].substring(closeCmd + 2).trim();

  String trimmed=cmd.trim();

  if (trimmed.indexOf('e') < 0 && trimmed.indexOf('E') < 0) {

    sleepTime=Long.parseLong(trimmed);

  }

 else {

    try {

      int index=trimmed.indexOf(' ');

      if (index < 0) {

        throw new IllegalArgumentException();

      }

      enforceSequence=Boolean.valueOf(trimmed.substring(0,index)).booleanValue();

      waiter=Waiter.getWaiter(trimmed.substring(index).trim());

    }

 catch (    IllegalArgumentException ie) {

      throw new IllegalArgumentException(W_SYNTAX_MSG);

    }

  }

  type='w';

}

