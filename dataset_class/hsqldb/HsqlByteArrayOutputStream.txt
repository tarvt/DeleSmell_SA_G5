Location: HsqlByteArrayOutputStream.java

Content: 

public void fill(int b,int len){

  ensureRoom(len);

  for (int i=0; i < len; i++) {

    buffer[count++]=(byte)b;

  }

}

Location: HsqlByteArrayOutputStream.java

Content: 

public HsqlByteArrayOutputStream(){

  this(128);

}

Location: HsqlByteArrayOutputStream.java

Content: 

public HsqlByteArrayOutputStream(byte[] buffer){

  this.buffer=buffer;

}

Location: HsqlByteArrayOutputStream.java

Content: 

public HsqlByteArrayOutputStream(InputStream input) throws IOException {

  buffer=new byte[128];

  for (; ; ) {

    int read=input.read(buffer,count,buffer.length - count);

    if (read == -1) {

      break;

    }

    count+=read;

    if (count == buffer.length) {

      ensureRoom(128);

    }

  }

}

Location: HsqlByteArrayOutputStream.java

Content: 

/** 

 * Constructor from an InputStream limits size to the length argument. Throws if the actual length of the InputStream is smaller than length value.

 */

public HsqlByteArrayOutputStream(InputStream input,int length) throws IOException {

  buffer=new byte[length];

  int used=write(input,length);

  if (used != length) {

    throw new EOFException();

  }

}

Location: HsqlByteArrayOutputStream.java

Content: 

public HsqlByteArrayOutputStream(int size){

  if (size < 128) {

    size=128;

  }

  buffer=new byte[size];

}

Location: HsqlByteArrayOutputStream.java

Content: 

public void setPosition(int newPos){

  if (newPos > buffer.length) {

    throw new ArrayIndexOutOfBoundsException();

  }

  count=newPos;

}

Location: HsqlByteArrayOutputStream.java

Content: 

public byte[] toByteArray(){

  byte[] newbuf=new byte[count];

  System.arraycopy(buffer,0,newbuf,0,count);

  return newbuf;

}

Location: HsqlByteArrayOutputStream.java

Content: 

public String toString(String enc) throws UnsupportedEncodingException {

  return new String(buffer,0,count,enc);

}

Location: HsqlByteArrayOutputStream.java

Content: 

public void writeChars(char[] charArray){

  int len=charArray.length;

  ensureRoom(len * 2);

  for (int i=0; i < len; i++) {

    int v=charArray[i];

    buffer[count++]=(byte)(v >>> 8);

    buffer[count++]=(byte)v;

  }

}

Location: HsqlByteArrayOutputStream.java

Content: 

public void writeChars(String s){

  int len=s.length();

  ensureRoom(len * 2);

  for (int i=0; i < len; i++) {

    int v=s.charAt(i);

    buffer[count++]=(byte)(v >>> 8);

    buffer[count++]=(byte)v;

  }

}

Location: HsqlByteArrayOutputStream.java

Content: 

public final void writeDouble(double v){

  writeLong(Double.doubleToLongBits(v));

}

Location: HsqlByteArrayOutputStream.java

Content: 

public final void writeFloat(float v){

  writeInt(Float.floatToIntBits(v));

}

Location: HsqlByteArrayOutputStream.java

Content: 

public void writeNoCheck(int b){

  buffer[count++]=(byte)b;

}

Location: HsqlByteArrayOutputStream.java

Content: 

public void writeTo(OutputStream out) throws IOException {

  out.write(buffer,0,count);

}

Location: HsqlByteArrayOutputStream.java

Content: 

public void writeUTF(String str) throws IOException {

  int len=str.length();

  if (len > 0xffff) {

    throw new UTFDataFormatException();

  }

  ensureRoom(len * 3 + 2);

  int initpos=count;

  count+=2;

  StringConverter.stringToUTFBytes(str,this);

  int bytecount=count - initpos - 2;

  if (bytecount > 0xffff) {

    count=initpos;

    throw new UTFDataFormatException();

  }

  buffer[initpos++]=(byte)(bytecount >>> 8);

  buffer[initpos]=(byte)bytecount;

}

Location: HsqlByteArrayOutputStream.java

Content: 

public void write(byte[] b){

  write(b,0,b.length);

}

Location: HsqlByteArrayOutputStream.java

Content: 

public void write(char[] c,int off,int len){

  ensureRoom(len * 2);

  for (int i=off; i < len; i++) {

    int v=c[i];

    buffer[count++]=(byte)(v >>> 8);

    buffer[count++]=(byte)v;

  }

}

Location: HsqlByteArrayOutputStream.java

Content: 

public int write(InputStream input,int countLimit) throws IOException {

  int left=countLimit;

  ensureRoom(countLimit);

  while (left > 0) {

    int read=input.read(buffer,count,left);

    if (read == -1) {

      break;

    }

    left-=read;

    count+=read;

  }

  return countLimit - left;

}

Location: HsqlByteArrayOutputStream.java

Content: 

public int write(Reader input,int countLimit) throws IOException {

  int left=countLimit;

  ensureRoom(countLimit * 2);

  while (left > 0) {

    int c=input.read();

    if (c == -1) {

      break;

    }

    writeChar(c);

    left--;

  }

  return countLimit - left;

}

