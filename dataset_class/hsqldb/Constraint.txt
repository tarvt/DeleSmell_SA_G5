Location: Constraint.java

Content: 

void checkCheckConstraint(Session session,Table table){

  if (table.getRowStore(session).elementCount() > 0) {

    Expression newCheck=getNewCheckExpression(session);

    QuerySpecification checkSelect=Expression.getCheckSelect(session,table,newCheck);

    Result r=checkSelect.getResult(session,1);

    if (r.getNavigator().getSize() != 0) {

      String[] info=new String[]{name.statementName,table.getName().statementName};

      throw Error.error(null,ErrorCode.X_23513,ErrorCode.CONSTRAINT,info);

    }

  }

}

Location: Constraint.java

Content: 

void checkCheckConstraint(Session session,Table table,ColumnSchema column,Object data){

  session.sessionData.currentValue=data;

  boolean nomatch=Boolean.FALSE.equals(check.getValue(session));

  session.sessionData.currentValue=null;

  if (nomatch) {

    String[] info=new String[]{name.statementName,table == null ? "" : table.getName().statementName,column == null ? "" : column.getName().statementName};

    throw Error.error(null,ErrorCode.X_23513,ErrorCode.COLUMN_CONSTRAINT,info);

  }

}

Location: Constraint.java

Content: 

void checkCheckConstraint(Session session,Table table,Object[] data){

  RangeIterator it=session.sessionContext.getCheckIterator(rangeVariable);

  it.setCurrent(data);

  boolean nomatch=Boolean.FALSE.equals(check.getValue(session));

  if (nomatch) {

    String[] info=new String[]{name.name,table.getName().name};

    throw Error.error(null,ErrorCode.X_23513,ErrorCode.CONSTRAINT,info);

  }

}

Location: Constraint.java

Content: 

/** 

 * Checks for foreign key or check constraint violation when inserting a row into the child table.

 */

void checkInsert(Session session,Table table,Object[] data,boolean isNew){

switch (constType) {

case SchemaObject.ConstraintTypes.CHECK:

    if (!isNotNull) {

      checkCheckConstraint(session,table,data);

    }

  return;

case SchemaObject.ConstraintTypes.FOREIGN_KEY:

PersistentStore store=core.mainTable.getRowStore(session);

if (ArrayUtil.hasNull(data,core.refCols)) {

if (core.matchType == OpTypes.MATCH_SIMPLE) {

  return;

}

if (core.refCols.length == 1) {

  return;

}

if (ArrayUtil.hasAllNull(data,core.refCols)) {

  return;

}

}

 else if (core.mainIndex.existsParent(session,store,data,core.refCols)) {

return;

}

throw getException(data);

}

}

Location: Constraint.java

Content: 

/** 

 * Check used before creating a new foreign key cosntraint, this method checks all rows of a table to ensure they all have a corresponding row in the main table.

 */

void checkReferencedRows(Session session,Table table){

  RowIterator it=table.rowIterator(session);

  while (it.next()) {

    Object[] rowData=it.getCurrent();

    checkInsert(session,table,rowData,false);

  }

}

Location: Constraint.java

Content: 

private Constraint(){

}

Location: Constraint.java

Content: 

/** 

 * Constructor for main constraints (foreign key references in PK table)

 */

public Constraint(HsqlName name,Constraint fkconstraint){

  this.name=name;

  constType=SchemaObject.ConstraintTypes.MAIN;

  core=fkconstraint.core;

}

Location: Constraint.java

Content: 

public Constraint(HsqlName uniqueName,HsqlName mainName,HsqlName refName,Table mainTable,Table refTable,int[] mainCols,int[] refCols,Index mainIndex,Index refIndex,int deleteAction,int updateAction){

  this.name=refName;

  constType=SchemaObject.ConstraintTypes.FOREIGN_KEY;

  core=new ConstraintCore();

  core.uniqueName=uniqueName;

  core.mainName=mainName;

  core.refName=refName;

  core.mainTable=mainTable;

  core.refTable=refTable;

  core.mainCols=mainCols;

  core.refCols=refCols;

  core.mainIndex=mainIndex;

  core.refIndex=refIndex;

  core.deleteAction=deleteAction;

  core.updateAction=updateAction;

}

Location: Constraint.java

Content: 

/** 

 * General constructor for foreign key constraints.

 * @param name name of constraint

 * @param refCols list of referencing columns

 * @param mainTableName referenced table

 * @param mainCols list of referenced columns

 * @param type constraint type

 * @param deleteAction triggered action on delete

 * @param updateAction triggered action on update

 */

public Constraint(HsqlName name,HsqlName refTableName,OrderedHashSet refCols,HsqlName mainTableName,OrderedHashSet mainCols,int type,int deleteAction,int updateAction,int matchType){

  this.name=name;

  constType=type;

  mainColSet=mainCols;

  refColSet=refCols;

  core=new ConstraintCore();

  core.refTableName=refTableName;

  core.mainTableName=mainTableName;

  core.deleteAction=deleteAction;

  core.updateAction=updateAction;

  core.matchType=matchType;

switch (core.deleteAction) {

case SchemaObject.ReferentialAction.CASCADE:

case SchemaObject.ReferentialAction.SET_DEFAULT:

case SchemaObject.ReferentialAction.SET_NULL:

    core.hasDeleteAction=true;

  break;

default :

}

switch (core.updateAction) {

case SchemaObject.ReferentialAction.CASCADE:

case SchemaObject.ReferentialAction.SET_DEFAULT:

case SchemaObject.ReferentialAction.SET_NULL:

core.hasUpdateAction=true;

break;

default :

}

}

Location: Constraint.java

Content: 

public Constraint(HsqlName name,OrderedHashSet mainCols,int type){

  this.name=name;

  constType=type;

  mainColSet=mainCols;

  core=new ConstraintCore();

}

Location: Constraint.java

Content: 

/** 

 * Constructor declaration for PK and UNIQUE

 */

public Constraint(HsqlName name,Table t,Index index,int type){

  this.name=name;

  constType=type;

  core=new ConstraintCore();

  core.mainTable=t;

  core.mainIndex=index;

  core.mainCols=index.getColumns();

  for (int i=0; i < core.mainCols.length; i++) {

    Type dataType=t.getColumn(core.mainCols[i]).getDataType();

    if (dataType.isLobType()) {

      throw Error.error(ErrorCode.X_42534);

    }

  }

}

Location: Constraint.java

Content: 

public Constraint(HsqlName name,Table table,int[] cols,int type){

  this.name=name;

  constType=type;

  core=new ConstraintCore();

  core.mainTable=table;

  core.mainCols=cols;

}

Location: Constraint.java

Content: 

/** 

 * New method to find any referencing row for a foreign key (finds row in child table). If ON DELETE CASCADE is specified for this constraint, then the method finds the first row among the rows of the table ordered by the index and doesn't throw. Without ON DELETE CASCADE, the method attempts to finds any row that exists. If no row is found, null is returned. (fredt@users)

 * @param session Session

 * @param row array of objects for a database row

 * @return iterator

 */

RowIterator findFkRef(Session session,Object[] row){

  if (row == null || ArrayUtil.hasNull(row,core.mainCols)) {

    return core.refIndex.emptyIterator();

  }

  PersistentStore store=core.refTable.getRowStore(session);

  return core.refIndex.findFirstRow(session,store,row,core.mainCols);

}

Location: Constraint.java

Content: 

/** 

 * Finds a row matching the values in UNIQUE columns.

 */

RowIterator findUniqueRows(Session session,Object[] row){

  if (row == null || ArrayUtil.hasNull(row,core.mainCols)) {

    return core.mainIndex.emptyIterator();

  }

  PersistentStore store=core.mainTable.getRowStore(session);

  return core.mainIndex.findFirstRow(session,store,row,core.mainCols);

}

Location: Constraint.java

Content: 

/** 

 * Returns the foreign key action rule.

 */

private static String getActionString(int action){

switch (action) {

case SchemaObject.ReferentialAction.RESTRICT:

    return Tokens.T_RESTRICT;

case SchemaObject.ReferentialAction.CASCADE:

  return Tokens.T_CASCADE;

case SchemaObject.ReferentialAction.SET_DEFAULT:

return Tokens.T_SET + ' ' + Tokens.T_DEFAULT;

case SchemaObject.ReferentialAction.SET_NULL:

return Tokens.T_SET + ' ' + Tokens.T_NULL;

default :

return Tokens.T_NO + ' ' + Tokens.T_ACTION;

}

}

Location: Constraint.java

Content: 

public OrderedHashSet getCheckColumnExpressions(){

  OrderedHashSet set=new OrderedHashSet();

  check.collectAllExpressions(set,Expression.columnExpressionSet,Expression.emptyExpressionSet);

  return set;

}

Location: Constraint.java

Content: 

public Expression getCheckExpression(){

  return check;

}

Location: Constraint.java

Content: 

/** 

 * Returns the SQL for the expression in CHECK clause

 */

public String getCheckSQL(){

  return check.getSQL();

}

Location: Constraint.java

Content: 

/** 

 * Returns the type of constraint

 */

public int getConstraintType(){

  return constType;

}

Location: Constraint.java

Content: 

public int getDeferability(){

  return SchemaObject.Deferable.NOT_DEFERRABLE;

}

Location: Constraint.java

Content: 

/** 

 * The ON DELETE triggered action of (foreign key) constraint

 */

public int getDeleteAction(){

  return core.deleteAction;

}

Location: Constraint.java

Content: 

public String getDeleteActionString(){

  return getActionString(core.deleteAction);

}

Location: Constraint.java

Content: 

public HsqlException getException(Object[] data){

switch (this.constType) {

case SchemaObject.ConstraintTypes.CHECK:

{

      String[] info=new String[]{name.statementName};

      return Error.error(null,ErrorCode.X_23513,ErrorCode.CONSTRAINT,info);

    }

case SchemaObject.ConstraintTypes.FOREIGN_KEY:

{

    StringBuffer sb=new StringBuffer();

    for (int i=0; i < core.refCols.length; i++) {

      Object o=data[core.refCols[i]];

      sb.append(core.refTable.getColumnTypes()[core.refCols[i]].convertToString(o));

      sb.append(',');

    }

    String[] info=new String[]{name.statementName,core.refTable.getName().statementName,sb.toString()};

    return Error.error(null,ErrorCode.X_23503,ErrorCode.CONSTRAINT,info);

  }

case SchemaObject.ConstraintTypes.PRIMARY_KEY:

case SchemaObject.ConstraintTypes.UNIQUE:

{

  StringBuffer sb=new StringBuffer();

  for (int i=0; i < core.mainCols.length; i++) {

    Object o=data[core.mainCols[i]];

    sb.append(core.mainTable.colTypes[core.mainCols[i]].convertToString(o));

    sb.append(',');

  }

  return Error.error(null,ErrorCode.X_23505,ErrorCode.CONSTRAINT,new String[]{name.statementName,core.mainTable.getName().statementName,sb.toString()});

}

default :

throw Error.runtimeError(ErrorCode.U_S0500,"Constraint");

}

}

Location: Constraint.java

Content: 

/** 

 * Generates the foreign key declaration for a given Constraint object.

 */

private void getFKStatement(StringBuffer sb){

  if (!getName().isReservedName()) {

    sb.append(Tokens.T_CONSTRAINT).append(' ');

    sb.append(getName().statementName);

    sb.append(' ');

  }

  sb.append(Tokens.T_FOREIGN).append(' ').append(Tokens.T_KEY);

  int[] col=getRefColumns();

  sb.append(getRef().getColumnListSQL(col,col.length));

  sb.append(' ').append(Tokens.T_REFERENCES).append(' ');

  sb.append(getMain().getName().getSchemaQualifiedStatementName());

  col=getMainColumns();

  sb.append(getMain().getColumnListSQL(col,col.length));

  if (getDeleteAction() != SchemaObject.ReferentialAction.NO_ACTION) {

    sb.append(' ').append(Tokens.T_ON).append(' ').append(Tokens.T_DELETE).append(' ');

    sb.append(getDeleteActionString());

  }

  if (getUpdateAction() != SchemaObject.ReferentialAction.NO_ACTION) {

    sb.append(' ').append(Tokens.T_ON).append(' ').append(Tokens.T_UPDATE).append(' ');

    sb.append(getUpdateActionString());

  }

}

Location: Constraint.java

Content: 

/** 

 * Returns the main table

 */

public Table getMain(){

  return core.mainTable;

}

Location: Constraint.java

Content: 

/** 

 * Returns the main table column index array

 */

public int[] getMainColumns(){

  return core.mainCols;

}

Location: Constraint.java

Content: 

/** 

 * Returns the main index

 */

public Index getMainIndex(){

  return core.mainIndex;

}

Location: Constraint.java

Content: 

public HsqlName getMainName(){

  return core.mainName;

}

Location: Constraint.java

Content: 

public HsqlName getMainTableName(){

  return core.mainTableName;

}

Location: Constraint.java

Content: 

private Expression getNewCheckExpression(Session session){

  String ddl=check.getSQL();

  Scanner scanner=new Scanner(session,ddl);

  ParserDQL parser=new ParserDQL(session,scanner,null);

  parser.compileContext.setNextRangeVarIndex(0);

  parser.read();

  parser.isCheckOrTriggerCondition=true;

  Expression condition=parser.XreadBooleanValueExpression();

  return condition;

}

Location: Constraint.java

Content: 

/** 

 * Returns the reference table

 */

public Table getRef(){

  return core.refTable;

}

Location: Constraint.java

Content: 

/** 

 * Returns the reference table column index array

 */

public int[] getRefColumns(){

  return core.refCols;

}

Location: Constraint.java

Content: 

/** 

 * Returns the reference index

 */

public Index getRefIndex(){

  return core.refIndex;

}

Location: Constraint.java

Content: 

public HsqlName getRefName(){

  return core.refName;

}

Location: Constraint.java

Content: 

public HsqlName getUniqueName(){

  return core.uniqueName;

}

Location: Constraint.java

Content: 

/** 

 * The ON UPDATE triggered action of (foreign key) constraint

 */

public int getUpdateAction(){

  return core.updateAction;

}

Location: Constraint.java

Content: 

public String getUpdateActionString(){

  return getActionString(core.updateAction);

}

Location: Constraint.java

Content: 

boolean hasColumnOnly(int colIndex){

switch (constType) {

case SchemaObject.ConstraintTypes.CHECK:

    return rangeVariable.usedColumns[colIndex] && ArrayUtil.countTrueElements(rangeVariable.usedColumns) == 1;

case SchemaObject.ConstraintTypes.PRIMARY_KEY:

case SchemaObject.ConstraintTypes.UNIQUE:

  return core.mainCols.length == 1 && core.mainCols[0] == colIndex;

case SchemaObject.ConstraintTypes.MAIN:

return false;

case SchemaObject.ConstraintTypes.FOREIGN_KEY:

return core.refCols.length == 1 && core.refCols[0] == colIndex;

default :

throw Error.runtimeError(ErrorCode.U_S0500,"Constraint");

}

}

Location: Constraint.java

Content: 

boolean hasColumnPlus(int colIndex){

switch (constType) {

case SchemaObject.ConstraintTypes.CHECK:

    return rangeVariable.usedColumns[colIndex] && ArrayUtil.countTrueElements(rangeVariable.usedColumns) > 1;

case SchemaObject.ConstraintTypes.PRIMARY_KEY:

case SchemaObject.ConstraintTypes.UNIQUE:

  return core.mainCols.length != 1 && ArrayUtil.find(core.mainCols,colIndex) != -1;

case SchemaObject.ConstraintTypes.MAIN:

return ArrayUtil.find(core.mainCols,colIndex) != -1;

case SchemaObject.ConstraintTypes.FOREIGN_KEY:

return core.refCols.length != 1 && ArrayUtil.find(core.refCols,colIndex) != -1;

default :

throw Error.runtimeError(ErrorCode.U_S0500,"Constraint");

}

}

Location: Constraint.java

Content: 

boolean hasColumn(int colIndex){

switch (constType) {

case SchemaObject.ConstraintTypes.CHECK:

    return rangeVariable.usedColumns[colIndex];

case SchemaObject.ConstraintTypes.PRIMARY_KEY:

case SchemaObject.ConstraintTypes.UNIQUE:

case SchemaObject.ConstraintTypes.MAIN:

  return ArrayUtil.find(core.mainCols,colIndex) != -1;

case SchemaObject.ConstraintTypes.FOREIGN_KEY:

return ArrayUtil.find(core.refCols,colIndex) != -1;

default :

throw Error.runtimeError(ErrorCode.U_S0500,"Constraint");

}

}

Location: Constraint.java

Content: 

public boolean hasCoreTriggeredAction(){

switch (core.deleteAction) {

case SchemaObject.ReferentialAction.CASCADE:

case SchemaObject.ReferentialAction.SET_DEFAULT:

case SchemaObject.ReferentialAction.SET_NULL:

    return true;

}

switch (core.updateAction) {

case SchemaObject.ReferentialAction.CASCADE:

case SchemaObject.ReferentialAction.SET_DEFAULT:

case SchemaObject.ReferentialAction.SET_NULL:

  return true;

}

return false;

}

Location: Constraint.java

Content: 

public boolean hasTriggeredAction(){

  if (constType == SchemaObject.ConstraintTypes.FOREIGN_KEY) {

    return hasCoreTriggeredAction();

  }

  return false;

}

Location: Constraint.java

Content: 

/** 

 * Compares this with another constraint column set. This implementation only checks FOREIGN KEY constraints.

 */

boolean isEquivalent(Table mainTable,int[] mainCols,Table refTable,int[] refCols){

switch (constType) {

case SchemaObject.ConstraintTypes.MAIN:

case SchemaObject.ConstraintTypes.FOREIGN_KEY:

    if (mainTable != core.mainTable || refTable != core.refTable) {

      return false;

    }

  if (core.mainCols.length == mainCols.length && core.refCols.length == refCols.length) {

    return ArrayUtil.areEqualSets(core.mainCols,mainCols) && ArrayUtil.areEqualSets(core.refCols,refCols);

  }

}

return false;

}

Location: Constraint.java

Content: 

/** 

 * Returns true if the expression in CHECK is a simple IS NOT NULL

 */

public boolean isNotNull(){

  return isNotNull;

}

Location: Constraint.java

Content: 

public boolean isUniqueOrPK(){

  return constType == SchemaObject.ConstraintTypes.UNIQUE || constType == SchemaObject.ConstraintTypes.PRIMARY_KEY;

}

Location: Constraint.java

Content: 

/** 

 * Compares this with another constraint column set. This is used only for UNIQUE constraints.

 */

boolean isUniqueWithColumns(int[] cols){

switch (constType) {

case SchemaObject.ConstraintTypes.PRIMARY_KEY:

case SchemaObject.ConstraintTypes.UNIQUE:

    if (core.mainCols.length == cols.length) {

      return ArrayUtil.haveEqualSets(core.mainCols,cols,cols.length);

    }

}

return false;

}

Location: Constraint.java

Content: 

void prepareCheckConstraint(Session session,Table table){

  check.checkValidCheckConstraint();

  QuerySpecification checkSelect=Expression.getCheckSelect(session,table,check);

  rangeVariable=checkSelect.rangeVariables[0];

  rangeVariable.setForCheckConstraint();

  if (check.getType() == OpTypes.NOT && check.getLeftNode().getType() == OpTypes.IS_NULL && check.getLeftNode().getLeftNode().getType() == OpTypes.COLUMN) {

    notNullColumnIndex=check.getLeftNode().getLeftNode().getColumnIndex();

    isNotNull=true;

  }

}

Location: Constraint.java

Content: 

void prepareDomainCheckConstraint(Session session){

  check.checkValidCheckConstraint();

  HsqlList list=check.resolveColumnReferences(session,RangeGroup.emptyGroup,0,RangeGroup.emptyArray,null,false);

  if (list != null) {

    Expression e=((Expression)list.get(0));

    throw Error.error(ErrorCode.X_42501,e.getSQL());

  }

  check.resolveTypes(session,null);

}

Location: Constraint.java

Content: 

void recompile(Session session,Table newTable){

  check=getNewCheckExpression(session);

  QuerySpecification checkSelect=Expression.getCheckSelect(session,newTable,check);

  rangeVariable=checkSelect.rangeVariables[0];

  rangeVariable.setForCheckConstraint();

}

Location: Constraint.java

Content: 

void setColumnsIndexes(Table table){

  if (constType == SchemaObject.ConstraintTypes.FOREIGN_KEY) {

    if (mainColSet == null) {

      core.mainCols=core.mainTable.getPrimaryKey();

      if (core.mainCols == null) {

        throw Error.error(ErrorCode.X_42581);

      }

    }

 else     if (core.mainCols == null) {

      core.mainCols=core.mainTable.getColumnIndexes(mainColSet);

    }

    if (core.refCols == null) {

      core.refCols=table.getColumnIndexes(refColSet);

    }

    for (int i=0; i < core.refCols.length; i++) {

      Type dataType=table.getColumn(core.refCols[i]).getDataType();

      if (dataType.isLobType()) {

        throw Error.error(ErrorCode.X_42534);

      }

    }

    if (core.mainCols.length != core.refCols.length) {

      throw Error.error(ErrorCode.X_42593);

    }

  }

 else   if (mainColSet != null) {

    core.mainCols=table.getColumnIndexes(mainColSet);

    for (int i=0; i < core.mainCols.length; i++) {

      Type dataType=table.getColumn(core.mainCols[i]).getDataType();

      if (dataType.isLobType()) {

        throw Error.error(ErrorCode.X_42534);

      }

    }

  }

}

Location: Constraint.java

Content: 

void setSimpleIdentityPK(){

  isSimpleIdentityPK=true;

}

Location: Constraint.java

Content: 

/** 

 * Used to update constrains to reflect structural changes in a table. Prior checks must ensure that this method does not throw.

 * @param session Session

 * @param oldTable reference to the old version of the table

 * @param newTable reference to the new version of the table

 * @param colIndex index at which table column is added or removed

 * @param adjust -1, 0, +1 to indicate if column is added or removed

 */

void updateTable(Session session,Table oldTable,Table newTable,int colIndex,int adjust){

  if (oldTable == core.mainTable) {

    core.mainTable=newTable;

    if (core.mainIndex != null) {

      core.mainIndex=core.mainTable.getSystemIndex(core.mainIndex.getName().name);

      core.mainCols=ArrayUtil.toAdjustedColumnArray(core.mainCols,colIndex,adjust);

    }

  }

  if (oldTable == core.refTable) {

    core.refTable=newTable;

    if (core.refIndex != null) {

      core.refIndex=core.refTable.getSystemIndex(core.refIndex.getName().name);

      core.refCols=ArrayUtil.toAdjustedColumnArray(core.refCols,colIndex,adjust);

    }

  }

  if (constType == SchemaObject.ConstraintTypes.CHECK) {

    recompile(session,newTable);

  }

}

