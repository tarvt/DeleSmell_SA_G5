Location: TextTableStorageManager.java

Content: 

public void closeAllTextCaches(boolean delete){

  Iterator it=textCacheList.values().iterator();

  while (it.hasNext()) {

    TextCache textCache=((TextCache)it.next());

    if (delete && !textCache.table.isDataReadOnly()) {

      textCache.purge();

    }

 else {

      textCache.close();

    }

  }

}

Location: TextTableStorageManager.java

Content: 

/** 

 * Closes the TextCache object.

 */

public void closeTextCache(Table table){

  TextCache c=(TextCache)textCacheList.remove(table.getName());

  if (c != null) {

    try {

      c.close();

    }

 catch (    HsqlException e) {

    }

  }

}

Location: TextTableStorageManager.java

Content: 

public boolean isAnyTextCacheModified(){

  Iterator it=textCacheList.values().iterator();

  while (it.hasNext()) {

    if (((TextCache)it.next()).isModified()) {

      return true;

    }

  }

  return false;

}

Location: TextTableStorageManager.java

Content: 

/** 

 * Opens the TextCache object.

 */

public DataFileCache openTextFilePersistence(Table table,String source,boolean readOnlyData,boolean reversed){

  closeTextCache(table);

  TextCache c=new TextCache(table,source);

  c.open(readOnlyData || reversed);

  textCacheList.put(table.getName(),c);

  return c;

}

Location: TextTableStorageManager.java

Content: 

TextTableStorageManager(){

}

