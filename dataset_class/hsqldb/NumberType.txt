Location: NumberType.java

Content: 

public Object absolute(Object a){

  return isNegative(a) ? negate(a) : a;

}

Location: NumberType.java

Content: 

public boolean acceptsScale(){

switch (typeCode) {

case Types.SQL_DECIMAL:

case Types.SQL_NUMERIC:

    return true;

default :

  return false;

}

}

Location: NumberType.java

Content: 

public Object add(Session session,Object a,Object b,Type otherType){

  if (a == null || b == null) {

    return null;

  }

switch (typeCode) {

case Types.SQL_REAL:

case Types.SQL_FLOAT:

case Types.SQL_DOUBLE:

{

      double ad=((Number)a).doubleValue();

      double bd=((Number)b).doubleValue();

      return ValuePool.getDouble(Double.doubleToLongBits(ad + bd));

    }

case Types.SQL_NUMERIC:

case Types.SQL_DECIMAL:

{

    a=convertToDefaultType(null,a);

    b=convertToDefaultType(null,b);

    BigDecimal abd=(BigDecimal)a;

    BigDecimal bbd=(BigDecimal)b;

    abd=abd.add(bbd);

    return convertToTypeLimits(null,abd);

  }

case Types.TINYINT:

case Types.SQL_SMALLINT:

case Types.SQL_INTEGER:

{

  int ai=((Number)a).intValue();

  int bi=((Number)b).intValue();

  return ValuePool.getInt(ai + bi);

}

case Types.SQL_BIGINT:

{

long longa=((Number)a).longValue();

long longb=((Number)b).longValue();

return ValuePool.getLong(longa + longb);

}

default :

throw Error.runtimeError(ErrorCode.U_S0500,"NumberType");

}

}

Location: NumberType.java

Content: 

public Object ceiling(Object a){

  if (a == null) {

    return null;

  }

switch (typeCode) {

case Types.SQL_REAL:

case Types.SQL_FLOAT:

case Types.SQL_DOUBLE:

{

      double ad=Math.ceil(((Double)a).doubleValue());

      if (Double.isInfinite(ad)) {

        throw Error.error(ErrorCode.X_22003);

      }

      return ValuePool.getDouble(Double.doubleToLongBits(ad));

    }

case Types.SQL_NUMERIC:

case Types.SQL_DECIMAL:

{

    BigDecimal value=((BigDecimal)a).setScale(0,BigDecimal.ROUND_CEILING);

    return value;

  }

default :

return a;

}

}

Location: NumberType.java

Content: 

public static int compareBigDecimalToLongLimits(Object value){

  if (value instanceof BigDecimal) {

    int compare=compareToLongLimits((BigDecimal)value);

    return compare;

  }

  return 0;

}

Location: NumberType.java

Content: 

public static int compareToLongLimits(BigDecimal value){

  if (NumberType.MIN_LONG.compareTo(value) > 0) {

    return -1;

  }

 else   if (NumberType.MAX_LONG.compareTo(value) < 0) {

    return 1;

  }

  return 0;

}

Location: NumberType.java

Content: 

public static int compareToLongLimits(BigInteger value){

  if (NumberType.MIN_LONG_BI.compareTo(value) > 0) {

    return -1;

  }

 else   if (NumberType.MAX_LONG_BI.compareTo(value) < 0) {

    return 1;

  }

  return 0;

}

Location: NumberType.java

Content: 

public int compareToTypeRange(Object o){

  if (o instanceof Integer || o instanceof Long || o instanceof BigDecimal) {

    long temp=((Number)o).longValue();

    int min;

    int max;

    int result;

switch (typeCode) {

case Types.TINYINT:

      result=compareBigDecimalToLongLimits(o);

    if (result != 0) {

      return result;

    }

  min=Byte.MIN_VALUE;

max=Byte.MAX_VALUE;

break;

case Types.SQL_SMALLINT:

result=compareBigDecimalToLongLimits(o);

if (result != 0) {

return result;

}

min=Short.MIN_VALUE;

max=Short.MAX_VALUE;

break;

case Types.SQL_INTEGER:

result=compareBigDecimalToLongLimits(o);

if (result != 0) {

return result;

}

min=Integer.MIN_VALUE;

max=Integer.MAX_VALUE;

break;

case Types.SQL_BIGINT:

result=compareBigDecimalToLongLimits(o);

return result;

case Types.SQL_DECIMAL:

case Types.SQL_NUMERIC:

{

if (precision - scale > 18) {

return 0;

}

if (precision - scale > 9 && o instanceof Integer) {

return 0;

}

BigDecimal dec=convertToDecimal(o);

int s=dec.scale();

int p=JavaSystem.precision(dec);

if (s < 0) {

p-=s;

s=0;

}

return (precision - scale >= p - s) ? 0 : dec.signum();

}

default :

return 0;

}

if (max < temp) {

return 1;

}

if (temp < min) {

return -1;

}

return 0;

}

return 0;

}

Location: NumberType.java

Content: 

public int compareToZero(Object a){

  if (a == null) {

    return 0;

  }

switch (typeCode) {

case Types.SQL_REAL:

case Types.SQL_FLOAT:

case Types.SQL_DOUBLE:

{

      double ad=((Number)a).doubleValue();

      return ad == 0 ? 0 : ad < 0 ? -1 : 1;

    }

case Types.SQL_NUMERIC:

case Types.SQL_DECIMAL:

  return ((BigDecimal)a).signum();

case Types.TINYINT:

case Types.SQL_SMALLINT:

case Types.SQL_INTEGER:

{

  int ai=((Number)a).intValue();

  return ai == 0 ? 0 : ai < 0 ? -1 : 1;

}

case Types.SQL_BIGINT:

{

long al=((Number)a).longValue();

return al == 0 ? 0 : al < 0 ? -1 : 1;

}

default :

throw Error.runtimeError(ErrorCode.U_S0500,"NumberType");

}

}

Location: NumberType.java

Content: 

private static BigDecimal convertToDecimal(Object a){

  if (a instanceof BigDecimal) {

    return (BigDecimal)a;

  }

 else   if (a instanceof Integer || a instanceof Long) {

    return BigDecimal.valueOf(((Number)a).longValue());

  }

 else   if (a instanceof Double) {

    double value=((Number)a).doubleValue();

    if (Double.isInfinite(value) || Double.isNaN(value)) {

      throw Error.error(ErrorCode.X_22003);

    }

    return BigDecimal.valueOf(value);

  }

 else {

    throw Error.runtimeError(ErrorCode.U_S0500,"NumberType");

  }

}

Location: NumberType.java

Content: 

/** 

 * Converter from a numeric object to Double. Input is checked to be within range represented by Double

 */

private static Double convertToDouble(Object a){

  if (a instanceof java.lang.Double) {

    return (Double)a;

  }

  double value=toDouble(a);

  return ValuePool.getDouble(Double.doubleToLongBits(value));

}

Location: NumberType.java

Content: 

/** 

 * Converter from a numeric object to Integer. Input is checked to be within range represented by the given number type.

 */

static Integer convertToInt(SessionInterface session,Object a,int type){

  int value;

  if (a instanceof Integer) {

    if (type == Types.SQL_INTEGER) {

      return (Integer)a;

    }

    value=((Integer)a).intValue();

  }

 else   if (a instanceof Long) {

    long temp=((Long)a).longValue();

    if (Integer.MAX_VALUE < temp || temp < Integer.MIN_VALUE) {

      throw Error.error(ErrorCode.X_22003);

    }

    value=(int)temp;

  }

 else   if (a instanceof BigDecimal) {

    BigDecimal bd=((BigDecimal)a);

    if (bd.compareTo(MAX_INT) > 0 || bd.compareTo(MIN_INT) < 0) {

      throw Error.error(ErrorCode.X_22003);

    }

    value=bd.intValue();

  }

 else   if (a instanceof Double || a instanceof Float) {

    double d=((Number)a).doubleValue();

    if (session instanceof Session) {

      if (!((Session)session).database.sqlConvertTruncate) {

        d=java.lang.Math.rint(d);

      }

    }

    if (Double.isInfinite(d) || Double.isNaN(d) || d >= (double)Integer.MAX_VALUE + 1 || d <= (double)Integer.MIN_VALUE - 1) {

      throw Error.error(ErrorCode.X_22003);

    }

    value=(int)d;

  }

 else {

    throw Error.error(ErrorCode.X_42561);

  }

  if (type == Types.TINYINT) {

    if (Byte.MAX_VALUE < value || value < Byte.MIN_VALUE) {

      throw Error.error(ErrorCode.X_22003);

    }

  }

 else   if (type == Types.SQL_SMALLINT) {

    if (Short.MAX_VALUE < value || value < Short.MIN_VALUE) {

      throw Error.error(ErrorCode.X_22003);

    }

  }

  return Integer.valueOf(value);

}

Location: NumberType.java

Content: 

/** 

 * Converter from a numeric object to Long. Input is checked to be within range represented by Long.

 */

static Long convertToLong(SessionInterface session,Object a){

  if (a instanceof Integer) {

    return ValuePool.getLong(((Integer)a).intValue());

  }

 else   if (a instanceof Long) {

    return (Long)a;

  }

 else   if (a instanceof BigDecimal) {

    BigDecimal bd=(BigDecimal)a;

    if (bd.compareTo(MAX_LONG) > 0 || bd.compareTo(MIN_LONG) < 0) {

      throw Error.error(ErrorCode.X_22003);

    }

    return ValuePool.getLong(bd.longValue());

  }

 else   if (a instanceof Double || a instanceof Float) {

    double d=((Number)a).doubleValue();

    if (session instanceof Session) {

      if (!((Session)session).database.sqlConvertTruncate) {

        d=java.lang.Math.rint(d);

      }

    }

    if (Double.isInfinite(d) || Double.isNaN(d) || d >= (double)Long.MAX_VALUE + 1 || d <= (double)Long.MIN_VALUE - 1) {

      throw Error.error(ErrorCode.X_22003);

    }

    return ValuePool.getLong((long)d);

  }

 else {

    throw Error.error(ErrorCode.X_42561);

  }

}

Location: NumberType.java

Content: 

public Object divide(Session session,Object a,Object b){

  if (a == null || b == null) {

    return null;

  }

switch (typeCode) {

case Types.SQL_REAL:

case Types.SQL_FLOAT:

case Types.SQL_DOUBLE:

{

      double ad=((Number)a).doubleValue();

      double bd=((Number)b).doubleValue();

      if (bd == 0 && (session == null || session.database.sqlDoubleNaN)) {

        throw Error.error(ErrorCode.X_22012);

      }

      return ValuePool.getDouble(Double.doubleToLongBits(ad / bd));

    }

case Types.SQL_NUMERIC:

case Types.SQL_DECIMAL:

{

    if (!(a instanceof BigDecimal)) {

      a=convertToDefaultType(null,a);

    }

    if (!(b instanceof BigDecimal)) {

      b=convertToDefaultType(null,b);

    }

    BigDecimal abd=(BigDecimal)a;

    BigDecimal bbd=(BigDecimal)b;

    if (bbd.signum() == 0) {

      throw Error.error(ErrorCode.X_22012);

    }

    BigDecimal bd=abd.divide(bbd,scale,BigDecimal.ROUND_DOWN);

    return convertToTypeLimits(null,bd);

  }

case Types.TINYINT:

case Types.SQL_SMALLINT:

case Types.SQL_INTEGER:

{

  int ai=((Number)a).intValue();

  int bi=((Number)b).intValue();

  if (bi == 0) {

    throw Error.error(ErrorCode.X_22012);

  }

  return ValuePool.getInt(ai / bi);

}

case Types.SQL_BIGINT:

{

long al=((Number)a).longValue();

long bl=((Number)b).longValue();

if (bl == 0) {

  throw Error.error(ErrorCode.X_22012);

}

return ValuePool.getLong(al / bl);

}

default :

throw Error.runtimeError(ErrorCode.U_S0500,"NumberType");

}

}

Location: NumberType.java

Content: 

public Object floor(Object a){

  if (a == null) {

    return null;

  }

switch (typeCode) {

case Types.SQL_REAL:

case Types.SQL_FLOAT:

case Types.SQL_DOUBLE:

{

      double value=Math.floor(((Double)a).doubleValue());

      if (Double.isInfinite(value)) {

        throw Error.error(ErrorCode.X_22003);

      }

      return ValuePool.getDouble(Double.doubleToLongBits(value));

    }

case Types.SQL_NUMERIC:

case Types.SQL_DECIMAL:

{

    BigDecimal value=((BigDecimal)a).setScale(0,BigDecimal.ROUND_FLOOR);

    return value;

  }

default :

return a;

}

}

Location: NumberType.java

Content: 

/** 

 * Returns decimal precision.

 */

public int getDecimalPrecision(){

switch (typeCode) {

case Types.TINYINT:

    return tinyintPrecision;

case Types.SQL_SMALLINT:

  return smallintPrecision;

case Types.SQL_INTEGER:

return integerPrecision;

case Types.SQL_BIGINT:

return bigintPrecision;

case Types.SQL_REAL:

case Types.SQL_FLOAT:

case Types.SQL_DOUBLE:

return displaySize() - 1;

case Types.SQL_NUMERIC:

case Types.SQL_DECIMAL:

return (int)precision;

default :

throw Error.runtimeError(ErrorCode.U_S0500,"NumberType");

}

}

Location: NumberType.java

Content: 

public Type getIntegralType(){

switch (typeCode) {

case Types.SQL_REAL:

case Types.SQL_FLOAT:

case Types.SQL_DOUBLE:

    return SQL_NUMERIC_DEFAULT_INT;

case Types.SQL_NUMERIC:

case Types.SQL_DECIMAL:

  return scale == 0 ? this : new NumberType(typeCode,precision,0);

default :

return this;

}

}

Location: NumberType.java

Content: 

public int getMaxScale(){

switch (typeCode) {

case Types.SQL_NUMERIC:

case Types.SQL_DECIMAL:

    return Short.MAX_VALUE;

default :

  return 0;

}

}

Location: NumberType.java

Content: 

public int getNominalWidth(){

  return typeWidth;

}

Location: NumberType.java

Content: 

public static NumberType getNumberType(int type,long precision,int scale){

switch (type) {

case Types.SQL_INTEGER:

    return SQL_INTEGER;

case Types.SQL_SMALLINT:

  return SQL_SMALLINT;

case Types.SQL_BIGINT:

return SQL_BIGINT;

case Types.TINYINT:

return TINYINT;

case Types.SQL_REAL:

case Types.SQL_DOUBLE:

return SQL_DOUBLE;

case Types.SQL_NUMERIC:

case Types.SQL_DECIMAL:

return new NumberType(type,precision,scale);

default :

throw Error.runtimeError(ErrorCode.U_S0500,"NumberType");

}

}

Location: NumberType.java

Content: 

public int getNumericPrecisionInRadix(){

switch (typeCode) {

case Types.TINYINT:

    return 8;

case Types.SQL_SMALLINT:

  return 16;

case Types.SQL_INTEGER:

return 32;

case Types.SQL_BIGINT:

return 64;

case Types.SQL_REAL:

case Types.SQL_FLOAT:

case Types.SQL_DOUBLE:

return 64;

case Types.SQL_NUMERIC:

case Types.SQL_DECIMAL:

return (int)precision;

default :

throw Error.runtimeError(ErrorCode.U_S0500,"NumberType");

}

}

Location: NumberType.java

Content: 

/** 

 * Returns decimal precision for NUMERIC/DECIMAL. Returns binary precision for other parts.

 */

public int getPrecision(){

switch (typeCode) {

case Types.TINYINT:

case Types.SQL_SMALLINT:

case Types.SQL_INTEGER:

case Types.SQL_BIGINT:

    return typeWidth;

case Types.SQL_REAL:

case Types.SQL_FLOAT:

case Types.SQL_DOUBLE:

  return 64;

case Types.SQL_NUMERIC:

case Types.SQL_DECIMAL:

return (int)precision;

default :

throw Error.runtimeError(ErrorCode.U_S0500,"NumberType");

}

}

Location: NumberType.java

Content: 

public int getPrecisionRadix(){

  if (typeCode == Types.SQL_DECIMAL || typeCode == Types.SQL_NUMERIC) {

    return 10;

  }

  return 2;

}

Location: NumberType.java

Content: 

public boolean isDecimalType(){

switch (typeCode) {

case Types.SQL_NUMERIC:

case Types.SQL_DECIMAL:

    return true;

default :

  return false;

}

}

Location: NumberType.java

Content: 

public boolean isExactNumberType(){

switch (typeCode) {

case Types.SQL_REAL:

case Types.SQL_FLOAT:

case Types.SQL_DOUBLE:

    return false;

default :

  return true;

}

}

Location: NumberType.java

Content: 

public boolean isIntegralType(){

switch (typeCode) {

case Types.SQL_REAL:

case Types.SQL_FLOAT:

case Types.SQL_DOUBLE:

    return false;

case Types.SQL_NUMERIC:

case Types.SQL_DECIMAL:

  return scale == 0;

default :

return true;

}

}

Location: NumberType.java

Content: 

public boolean isNegative(Object a){

  return compareToZero(a) < 0;

}

Location: NumberType.java

Content: 

public boolean isNumberType(){

  return true;

}

Location: NumberType.java

Content: 

public static boolean isZero(Object a){

  if (a instanceof BigDecimal) {

    return ((BigDecimal)a).signum() == 0;

  }

 else   if (a instanceof Double) {

    return ((Double)a).doubleValue() == 0 || ((Double)a).isNaN();

  }

 else {

    return ((Number)a).longValue() == 0;

  }

}

Location: NumberType.java

Content: 

public Object modulo(Session session,Object a,Object b,Type otherType){

  if (!otherType.isNumberType()) {

    throw Error.error(ErrorCode.X_42561);

  }

  a=truncate(a,scale);

  b=((NumberType)otherType).truncate(b,otherType.scale);

  Object temp=divide(null,a,b);

switch (typeCode) {

case Types.SQL_REAL:

case Types.SQL_FLOAT:

case Types.SQL_DOUBLE:

case Types.SQL_NUMERIC:

case Types.SQL_DECIMAL:

    temp=truncate(temp,0);

}

temp=multiply(temp,b);

temp=subtract(session,a,temp,this);

return otherType.convertToType(null,temp,this);

}

Location: NumberType.java

Content: 

public Object multiply(Object a,Object b){

  if (a == null || b == null) {

    return null;

  }

switch (typeCode) {

case Types.SQL_REAL:

case Types.SQL_FLOAT:

case Types.SQL_DOUBLE:

{

      double ad=((Number)a).doubleValue();

      double bd=((Number)b).doubleValue();

      return ValuePool.getDouble(Double.doubleToLongBits(ad * bd));

    }

case Types.SQL_NUMERIC:

case Types.SQL_DECIMAL:

{

    if (!(a instanceof BigDecimal)) {

      a=convertToDefaultType(null,a);

    }

    if (!(b instanceof BigDecimal)) {

      b=convertToDefaultType(null,b);

    }

    BigDecimal abd=(BigDecimal)a;

    BigDecimal bbd=(BigDecimal)b;

    BigDecimal bd=abd.multiply(bbd);

    return convertToTypeLimits(null,bd);

  }

case Types.TINYINT:

case Types.SQL_SMALLINT:

case Types.SQL_INTEGER:

{

  int ai=((Number)a).intValue();

  int bi=((Number)b).intValue();

  return ValuePool.getInt(ai * bi);

}

case Types.SQL_BIGINT:

{

long longa=((Number)a).longValue();

long longb=((Number)b).longValue();

return ValuePool.getLong(longa * longb);

}

default :

throw Error.runtimeError(ErrorCode.U_S0500,"NumberType");

}

}

Location: NumberType.java

Content: 

public Object negate(Object a){

  if (a == null) {

    return null;

  }

switch (typeCode) {

case Types.SQL_REAL:

case Types.SQL_FLOAT:

case Types.SQL_DOUBLE:

{

      double ad=-((Number)a).doubleValue();

      return ValuePool.getDouble(Double.doubleToLongBits(ad));

    }

case Types.SQL_NUMERIC:

case Types.SQL_DECIMAL:

  return ((BigDecimal)a).negate();

case Types.TINYINT:

{

  int value=((Number)a).intValue();

  if (value == Byte.MIN_VALUE) {

    throw Error.error(ErrorCode.X_22003);

  }

  return ValuePool.getInt(-value);

}

case Types.SQL_SMALLINT:

{

int value=((Number)a).intValue();

if (value == Short.MIN_VALUE) {

  throw Error.error(ErrorCode.X_22003);

}

return ValuePool.getInt(-value);

}

case Types.SQL_INTEGER:

{

int value=((Number)a).intValue();

if (value == Integer.MIN_VALUE) {

throw Error.error(ErrorCode.X_22003);

}

return ValuePool.getInt(-value);

}

case Types.SQL_BIGINT:

{

long value=((Number)a).longValue();

if (value == Long.MIN_VALUE) {

throw Error.error(ErrorCode.X_22003);

}

return ValuePool.getLong(-value);

}

default :

throw Error.runtimeError(ErrorCode.U_S0500,"NumberType");

}

}

Location: NumberType.java

Content: 

public NumberType(int type,long precision,int scale){

  super(Types.SQL_NUMERIC,type,precision,scale);

switch (type) {

case Types.TINYINT:

    typeWidth=TINYINT_WIDTH;

  break;

case Types.SQL_SMALLINT:

typeWidth=SMALLINT_WIDTH;

break;

case Types.SQL_INTEGER:

typeWidth=INTEGER_WIDTH;

break;

case Types.SQL_BIGINT:

typeWidth=BIGINT_WIDTH;

break;

case Types.SQL_REAL:

case Types.SQL_FLOAT:

case Types.SQL_DOUBLE:

typeWidth=DOUBLE_WIDTH;

break;

case Types.SQL_NUMERIC:

case Types.SQL_DECIMAL:

typeWidth=DECIMAL_WIDTH;

break;

default :

throw Error.runtimeError(ErrorCode.U_S0500,"NumberType");

}

}

Location: NumberType.java

Content: 

public Object round(Object a,int s){

  if (a == null) {

    return null;

  }

  BigDecimal dec=convertToDecimal(a);

switch (typeCode) {

case Types.SQL_DOUBLE:

{

      dec=dec.setScale(s,BigDecimal.ROUND_HALF_EVEN);

      break;

    }

case Types.SQL_DECIMAL:

case Types.SQL_NUMERIC:

default :

{

    dec=dec.setScale(s,BigDecimal.ROUND_HALF_UP);

    dec=dec.setScale(scale,BigDecimal.ROUND_DOWN);

    break;

  }

}

a=convertToDefaultType(null,dec);

return convertToTypeLimits(null,a);

}

Location: NumberType.java

Content: 

public static long scaledDecimal(Object a,int scale){

  if (a == null) {

    return 0;

  }

  if (scale == 0) {

    return 0;

  }

  BigDecimal value=((BigDecimal)a);

  if (value.scale() == 0) {

    return 0;

  }

  value=value.setScale(0,BigDecimal.ROUND_FLOOR);

  value=((BigDecimal)a).subtract(value);

  return value.movePointRight(scale).longValue();

}

Location: NumberType.java

Content: 

public Object subtract(Session session,Object a,Object b,Type otherType){

  if (a == null || b == null) {

    return null;

  }

switch (typeCode) {

case Types.SQL_REAL:

case Types.SQL_FLOAT:

case Types.SQL_DOUBLE:

{

      double ad=((Number)a).doubleValue();

      double bd=((Number)b).doubleValue();

      return ValuePool.getDouble(Double.doubleToLongBits(ad - bd));

    }

case Types.SQL_NUMERIC:

case Types.SQL_DECIMAL:

{

    a=convertToDefaultType(null,a);

    b=convertToDefaultType(null,b);

    BigDecimal abd=(BigDecimal)a;

    BigDecimal bbd=(BigDecimal)b;

    abd=abd.subtract(bbd);

    return convertToTypeLimits(null,abd);

  }

case Types.TINYINT:

case Types.SQL_SMALLINT:

case Types.SQL_INTEGER:

{

  int ai=((Number)a).intValue();

  int bi=((Number)b).intValue();

  return ValuePool.getInt(ai - bi);

}

case Types.SQL_BIGINT:

{

long longa=((Number)a).longValue();

long longb=((Number)b).longValue();

return ValuePool.getLong(longa - longb);

}

default :

}

throw Error.runtimeError(ErrorCode.U_S0500,"NumberType");

}

Location: NumberType.java

Content: 

public static double toDouble(Object a){

  double value;

  if (a instanceof java.lang.Double) {

    return ((Double)a).doubleValue();

  }

 else   if (a instanceof BigDecimal) {

    BigDecimal bd=(BigDecimal)a;

    value=bd.doubleValue();

    int signum=bd.signum();

    BigDecimal bdd=new BigDecimal(value + signum);

    if (bdd.compareTo(bd) != signum) {

      throw Error.error(ErrorCode.X_22003);

    }

  }

 else   if (a instanceof Number) {

    value=((Number)a).doubleValue();

  }

 else {

    throw Error.error(ErrorCode.X_22501);

  }

  return value;

}

Location: NumberType.java

Content: 

public Object truncate(Object a,int s){

  if (a == null) {

    return null;

  }

  BigDecimal dec=convertToDecimal(a);

  dec=dec.setScale(s,BigDecimal.ROUND_DOWN);

  if (typeCode == Types.SQL_DECIMAL || typeCode == Types.SQL_NUMERIC) {

    dec=dec.setScale(scale,BigDecimal.ROUND_DOWN);

  }

  a=convertToDefaultType(null,dec);

  return convertToTypeLimits(null,a);

}

