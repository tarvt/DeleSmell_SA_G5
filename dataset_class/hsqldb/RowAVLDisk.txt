Location: RowAVLDisk.java

Content: 

private void readRowInfo(RowInputInterface in){

}

Location: RowAVLDisk.java

Content: 

/** 

 * Constructor when read from the disk into the Cache.

 * @param t table

 * @param in data source

 * @throws IOException

 */

public RowAVLDisk(PersistentStore store,RowInputInterface in) throws IOException {

  super(store.getTable(),(Object[])null);

  position=in.getFilePosition();

  storageSize=in.getSize();

  int indexcount=store.getAccessorKeys().length;

  nPrimaryNode=new NodeAVLDisk(this,in,0);

  NodeAVL n=nPrimaryNode;

  for (int i=1; i < indexcount; i++) {

    n.nNext=new NodeAVLDisk(this,in,i);

    n=n.nNext;

  }

  rowData=in.readData(table.getColumnTypes());

}

Location: RowAVLDisk.java

Content: 

RowAVLDisk(TableBase t){

  super(t,(Object[])null);

}

Location: RowAVLDisk.java

Content: 

/** 

 * Constructor for new Rows.  Variable hasDataChanged is set to true in order to indicate the data needs saving.

 * @param t table

 * @param o row data

 */

public RowAVLDisk(TableBase t,Object[] o,PersistentStore store){

  super(t,o);

  setNewNodes(store);

  hasDataChanged=hasNodesChanged=isNew=true;

}

Location: RowAVLDisk.java

Content: 

/** 

 * Sets flag for Node data change.

 */

public void setNodesChanged(){

  writeLock.lock();

  try {

    hasNodesChanged=true;

  }

  finally {

    writeLock.unlock();

  }

}

Location: RowAVLDisk.java

Content: 

/** 

 * Writes the Nodes, immediately after the row size.

 * @param out

 * @throws IOException

 */

void writeNodes(RowOutputInterface out){

  out.writeSize(storageSize);

  NodeAVL n=nPrimaryNode;

  while (n != null) {

    n.write(out);

    n=n.nNext;

  }

}

