Location: ValuePool.java

Content: 

public static void clearPool(){

  writeLock.lock();

  try {

    for (int i=0; i < POOLS_COUNT; i++) {

      poolList[i].clear();

    }

  }

  finally {

    writeLock.unlock();

  }

}

Location: ValuePool.java

Content: 

public static BigDecimal getBigDecimal(BigDecimal val){

  if (val == null) {

    return val;

  }

  readLock.lock();

  try {

    return (BigDecimal)bigdecimalPool.getOrAddObject(val);

  }

  finally {

    readLock.unlock();

  }

}

Location: ValuePool.java

Content: 

public static Boolean getBoolean(boolean b){

  return b ? Boolean.TRUE : Boolean.FALSE;

}

Location: ValuePool.java

Content: 

public static Double getDouble(long val){

  readLock.lock();

  try {

    return doublePool.getOrAddDouble(val);

  }

  finally {

    readLock.unlock();

  }

}

Location: ValuePool.java

Content: 

public static Integer getInt(int val){

  readLock.lock();

  try {

    return intPool.getOrAddInteger(val);

  }

  finally {

    readLock.unlock();

  }

}

Location: ValuePool.java

Content: 

public static Long getLong(long val){

  readLock.lock();

  try {

    return longPool.getOrAddLong(val);

  }

  finally {

    readLock.unlock();

  }

}

Location: ValuePool.java

Content: 

public static int getMaxStringLength(){

  return maxStringLength;

}

Location: ValuePool.java

Content: 

public static String getString(String val){

  if (val == null || val.length() > maxStringLength) {

    return val;

  }

  readLock.lock();

  try {

    return stringPool.getOrAddString(val);

  }

  finally {

    readLock.unlock();

  }

}

Location: ValuePool.java

Content: 

public static String getSubString(String val,int start,int limit){

  readLock.lock();

  try {

    return stringPool.getOrAddString(val.substring(start,limit));

  }

  finally {

    readLock.unlock();

  }

}

Location: ValuePool.java

Content: 

private static void initPool(){

  int[] sizeArray=defaultPoolLookupSize;

  int sizeFactor=defaultSizeFactor;

  writeLock.lock();

  try {

    maxStringLength=defaultMaxStringLength;

    poolList=new ValuePoolHashMap[POOLS_COUNT];

    for (int i=0; i < POOLS_COUNT; i++) {

      int size=sizeArray[i];

      poolList[i]=new ValuePoolHashMap(size,size * sizeFactor,BaseHashMap.PURGE_HALF);

    }

    intPool=poolList[0];

    longPool=poolList[1];

    doublePool=poolList[2];

    bigdecimalPool=poolList[3];

    stringPool=poolList[4];

  }

  finally {

    writeLock.unlock();

  }

}

Location: ValuePool.java

Content: 

public static void resetPool(){

  writeLock.lock();

  try {

    for (int i=0; i < POOLS_COUNT; i++) {

      poolList[i].clear();

    }

  }

  finally {

    writeLock.unlock();

  }

}

