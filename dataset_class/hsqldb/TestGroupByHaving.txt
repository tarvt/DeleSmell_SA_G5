Location: TestGroupByHaving.java

Content: 

private void addEmployee(int id,String firstName,String lastName,double salary,int superiorId) throws Exception {

  stmt.execute("insert into employee values(" + id + ", '"+ firstName+ "', '"+ lastName+ "', "+ salary+ ", "+ (superiorId <= 0 ? "null" : ("" + superiorId))+ ")");

}

Location: TestGroupByHaving.java

Content: 

private void compareResults(String sql,Object[][] rows,String sqlState) throws SQLException {

  ResultSet rs=null;

  try {

    rs=stmt.executeQuery(sql);

    assertTrue("Statement <" + sql + "> \nexpecting error code: "+ sqlState,("00000".equals(sqlState)));

  }

 catch (  SQLException sqlx) {

    if (!sqlx.getSQLState().equals(sqlState)) {

      sqlx.printStackTrace();

    }

    assertTrue("Statement <" + sql + "> \nthrows wrong error code: "+ sqlx.getErrorCode()+ " expecting error code: "+ sqlState,(sqlx.getSQLState().equals(sqlState)));

    return;

  }

  int rowCount=0;

  int colCount=rows.length > 0 ? rows[0].length : 0;

  while (rs.next()) {

    assertTrue("Statement <" + sql + "> \nreturned too many rows.",(rowCount < rows.length));

    Object[] columns=rows[rowCount];

    for (int col=1, i=0; i < colCount; i++, col++) {

      Object result=null;

      Object expected=columns[i];

      if (expected == null) {

        result=rs.getString(col);

        result=rs.wasNull() ? null : result;

      }

 else       if (expected instanceof String) {

        result=rs.getString(col);

      }

 else       if (expected instanceof Double) {

        result=new Double(rs.getString(col));

      }

 else       if (expected instanceof Integer) {

        result=new Integer(rs.getInt(col));

      }

      assertEquals("Statement <" + sql + "> \nreturned wrong value.",columns[i],result);

    }

    rowCount++;

  }

  assertEquals("Statement <" + sql + "> \nreturned wrong number of rows.",rows.length,rowCount);

}

Location: TestGroupByHaving.java

Content: 

/** 

 * Tests aggregated selection with a <b>GROUP_BY</b> clause.  This is a normal use of the <b>GROUP_BY</b> clause.  The first two employees do not have a superior, and must be grouped within the same group, according to <b>GROUP_BY</b> standard.

 */

public void testAggregatedGroupBy() throws SQLException {

  String sql="select avg(salary), max(id) from employee " + "group by superior_id " + "order by superior_id "+ "";

  Object[][] expected=new Object[][]{{new Double(150000),new Integer(2)},{new Double(42500),new Integer(13)},{new Double(45000),new Integer(23)}};

  compareResults(sql,expected,"00000");

}

Location: TestGroupByHaving.java

Content: 

/** 

 * Tests aggregated selection with a <b>GROUP_BY</b> clause and a <b>HAVING</b> clause. <p> This is a typical use of the <b>GROUP_BY</b> + <b>HAVING</b> clause. The first two employees are eliminated due to the <b>HAVING</b> condition. <p> This test uses aggregated function to eliminate first group.

 */

public void testAggregatedGroupByHaving1() throws SQLException {

  String sql="select avg(salary), max(id) from employee " + "group by superior_id " + "having max(id) > 5 "+ "order by superior_id "+ "";

  Object[][] expected=new Object[][]{{new Double(42500),new Integer(13)},{new Double(45000),new Integer(23)}};

  compareResults(sql,expected,"00000");

}

Location: TestGroupByHaving.java

Content: 

/** 

 * Tests aggregated selection with a <b>GROUP_BY</b> clause and a <b>HAVING</b> clause. <p> This is a typical use of the <b>GROUP_BY</b> + <b>HAVING</b> clause. The first two employees are eliminated due to the <b>HAVING</b> condition. <p> This test uses <b>GROUP_BY</b> column to eliminate first group.

 */

public void testAggregatedGroupByHaving2() throws SQLException {

  String sql="select avg(salary), max(id) from employee " + "group by superior_id " + "having superior_id is not null "+ "order by superior_id "+ "";

  Object[][] expected=new Object[][]{{new Double(42500),new Integer(13)},{new Double(45000),new Integer(23)}};

  compareResults(sql,expected,"00000");

}

Location: TestGroupByHaving.java

Content: 

/** 

 * Constructs a new SubselectTest.

 */

public TestGroupByHaving(String s){

  super(s);

}

Location: TestGroupByHaving.java

Content: 

/** 

 * Tests an unusual usage of the <b>HAVING</b> clause, without a <b>GROUP BY</b> clause. <p> Only one row is returned by the aggregate selection without a <b>GROUP BY</b> clause.  The <b>HAVING</b> clause is applied to the only returned row.  In this case, the <b>HAVING</b> condition is satisfied.

 */

public void testHavingWithoutGroupBy1() throws SQLException {

  String sql="select avg(salary), max(id) from employee " + "having avg(salary) > 1000 " + "";

  Object[][] expected=new Object[][]{{new Double(65000),new Integer(23)}};

  compareResults(sql,expected,"00000");

}

Location: TestGroupByHaving.java

Content: 

/** 

 * Tests an unusual usage of the <b>HAVING</b> clause, without a <b>GROUP BY</b> clause. <p> Only one row is returned by the aggregate selection without a <b>GROUP BY</b> clause.  The <b>HAVING</b> clause is applied to the only returned row.  In this case, the <b>HAVING</b> condition is NOT satisfied.

 */

public void testHavingWithoutGroupBy2() throws SQLException {

  String sql="select avg(salary), max(id) from employee " + "having avg(salary) > 1000000 " + "";

  Object[][] expected=new Object[][]{};

  compareResults(sql,expected,"00000");

}

Location: TestGroupByHaving.java

Content: 

/** 

 * Tests an invalid <b>HAVING</b> clause that contains columns not in the <b>GROUP BY</b> clause.  A SQLException should be thrown.

 */

public void testInvalidHaving() throws SQLException {

  String sql="select avg(salary), max(id) from employee " + "group by lastname " + "having (max(id) > 1) and (superior_id > 1) "+ "";

  Object[][] expected=new Object[][]{};

  compareResults(sql,expected,"42573");

}

