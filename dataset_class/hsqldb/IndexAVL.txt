Location: IndexAVL.java

Content: 

public IndexUse[] asArray(){

  return asArray;

}

Location: IndexAVL.java

Content: 

public int checkIndex(Session session,PersistentStore store){

  int errors=0;

  store.readLock();

  try {

    NodeAVL p=getAccessor(store);

    NodeAVL f=null;

    while (p != null) {

      f=p;

      checkNodes(store,p);

      p=p.getLeft(store);

    }

    p=f;

    while (f != null) {

      errors+=checkNodes(store,f);

      NodeAVL fnext=next(store,f);

      if (fnext != null) {

        int c=compareRowForInsertOrDelete(session,fnext.getRow(store),f.getRow(store),true,0);

        if (c <= 0) {

          if (errors < 10) {

            System.out.println("broken index order " + getName().name);

          }

          errors++;

        }

      }

      f=fnext;

    }

  }

  finally {

    store.readUnlock();

  }

  if (errors > 0) {

    System.out.println("total errors " + getName().name);

  }

  return errors;

}

Location: IndexAVL.java

Content: 

int checkNodes(PersistentStore store,NodeAVL p){

  NodeAVL l=p.nLeft;

  NodeAVL r=p.nRight;

  int errors=0;

  if (l != null && l.getBalance(store) == -2) {

    System.out.print("broken index - deleted");

    errors++;

  }

  if (r != null && r.getBalance(store) == -2) {

    System.out.print("broken index -deleted");

    errors++;

  }

  if (l != null && !p.equals(l.getParent(store))) {

    System.out.print("broken index - no parent");

    errors++;

  }

  if (r != null && !p.equals(r.getParent(store))) {

    System.out.print("broken index - no parent");

    errors++;

  }

  return errors;

}

Location: IndexAVL.java

Content: 

int compareObject(Session session,Object[] a,Object[] b,int[] rowColMap,int position,int opType){

  return colTypes[position].compare(session,a[colIndex[position]],b[rowColMap[position]],opType);

}

Location: IndexAVL.java

Content: 

public void compareRowForChange(Session session,Object[] a,Object[] b,double[] changes){

  for (int j=0; j < colIndex.length; j++) {

    int i=colTypes[j].compare(session,a[colIndex[j]],b[colIndex[j]]);

    if (i != 0) {

      for (; j < colIndex.length; j++) {

        changes[j]++;

      }

    }

  }

}

Location: IndexAVL.java

Content: 

/** 

 * Compare two rows of the table for inserting rows into unique indexes Supports descending columns.

 * @param session Session

 * @param newRow data

 * @param existingRow data

 * @param useRowId boolean

 * @param start int

 * @return comparison result, -1,0,+1

 */

int compareRowForInsertOrDelete(Session session,Row newRow,Row existingRow,boolean useRowId,int start){

  Object[] a=newRow.getData();

  Object[] b=existingRow.getData();

  for (int j=start; j < colIndex.length; j++) {

    int i=colTypes[j].compare(session,a[colIndex[j]],b[colIndex[j]]);

    if (i != 0) {

      if (isSimpleOrder) {

        return i;

      }

      boolean nulls=a[colIndex[j]] == null || b[colIndex[j]] == null;

      if (colDesc[j] && !nulls) {

        i=-i;

      }

      if (nullsLast[j] && nulls) {

        i=-i;

      }

      return i;

    }

  }

  if (useRowId) {

    long diff=newRow.getPos() - existingRow.getPos();

    return diff == 0L ? 0 : diff > 0L ? 1 : -1;

  }

  return 0;

}

Location: IndexAVL.java

Content: 

/** 

 * As above but use the index column data

 */

public int compareRowNonUnique(Session session,Object[] a,Object[] b,int fieldCount){

  for (int j=0; j < fieldCount; j++) {

    int i=colTypes[j].compare(session,a[colIndex[j]],b[colIndex[j]]);

    if (i != 0) {

      return i;

    }

  }

  return 0;

}

Location: IndexAVL.java

Content: 

public int compareRowNonUnique(Session session,Object[] a,Object[] b,int[] rowColMap,int fieldCount){

  for (int j=0; j < fieldCount; j++) {

    int i=colTypes[j].compare(session,a[colIndex[j]],b[rowColMap[j]]);

    if (i != 0) {

      return i;

    }

  }

  return 0;

}

Location: IndexAVL.java

Content: 

public int compareRow(Session session,Object[] a,Object[] b){

  for (int j=0; j < colIndex.length; j++) {

    int i=colTypes[j].compare(session,a[colIndex[j]],b[colIndex[j]]);

    if (i != 0) {

      if (isSimpleOrder) {

        return i;

      }

      boolean nulls=a[colIndex[j]] == null || b[colIndex[j]] == null;

      if (colDesc[j] && !nulls) {

        i=-i;

      }

      if (nullsLast[j] && nulls) {

        i=-i;

      }

      return i;

    }

  }

  return 0;

}

Location: IndexAVL.java

Content: 

public void delete(Session session,PersistentStore store,Row row){

  row=(Row)store.get(row,false);

  NodeAVL x=((RowAVL)row).getNode(position);

  if (x == null) {

    return;

  }

  NodeAVL n;

  if (x.getLeft(store) == null) {

    n=x.getRight(store);

  }

 else   if (x.getRight(store) == null) {

    n=x.getLeft(store);

  }

 else {

    NodeAVL d=x;

    x=x.getLeft(store);

    while (true) {

      NodeAVL temp=x.getRight(store);

      if (temp == null) {

        break;

      }

      x=temp;

    }

    n=x.getLeft(store);

    int b=x.getBalance(store);

    x=x.setBalance(store,d.getBalance(store));

    d=d.setBalance(store,b);

    NodeAVL xp=x.getParent(store);

    NodeAVL dp=d.getParent(store);

    if (d.isRoot(store)) {

      store.setAccessor(this,x);

    }

    x=x.setParent(store,dp);

    if (dp != null) {

      if (dp.isRight(store,d)) {

        dp=dp.setRight(store,x);

      }

 else {

        dp=dp.setLeft(store,x);

      }

    }

    if (d.equals(xp)) {

      d=d.setParent(store,x);

      if (d.isLeft(store,x)) {

        x=x.setLeft(store,d);

        NodeAVL dr=d.getRight(store);

        x=x.setRight(store,dr);

      }

 else {

        x=x.setRight(store,d);

        NodeAVL dl=d.getLeft(store);

        x=x.setLeft(store,dl);

      }

    }

 else {

      d=d.setParent(store,xp);

      xp=xp.setRight(store,d);

      NodeAVL dl=d.getLeft(store);

      NodeAVL dr=d.getRight(store);

      x=x.setLeft(store,dl);

      x=x.setRight(store,dr);

    }

    x.getRight(store).setParent(store,x);

    x.getLeft(store).setParent(store,x);

    d=d.setLeft(store,n);

    if (n != null) {

      n=n.setParent(store,d);

    }

    d=d.setRight(store,null);

    x=d;

  }

  boolean isleft=x.isFromLeft(store);

  x.replace(store,this,n);

  n=x.getParent(store);

  x.delete();

  while (n != null) {

    x=n;

    int sign=isleft ? 1 : -1;

switch (x.getBalance(store) * sign) {

case -1:

      x=x.setBalance(store,0);

    break;

case 0:

  x=x.setBalance(store,sign);

return;

case 1:

NodeAVL r=x.child(store,!isleft);

int b=r.getBalance(store);

if (b * sign >= 0) {

x.replace(store,this,r);

NodeAVL child=r.child(store,isleft);

x=x.set(store,!isleft,child);

r=r.set(store,isleft,x);

if (b == 0) {

x=x.setBalance(store,sign);

r=r.setBalance(store,-sign);

return;

}

x=x.setBalance(store,0);

r=r.setBalance(store,0);

x=r;

}

 else {

NodeAVL l=r.child(store,isleft);

x.replace(store,this,l);

b=l.getBalance(store);

r=r.set(store,isleft,l.child(store,!isleft));

l=l.set(store,!isleft,r);

x=x.set(store,!isleft,l.child(store,isleft));

l=l.set(store,isleft,x);

x=x.setBalance(store,(b == sign) ? -sign : 0);

r=r.setBalance(store,(b == -sign) ? sign : 0);

l=l.setBalance(store,0);

x=l;

}

}

isleft=x.isFromLeft(store);

n=x.getParent(store);

}

}

Location: IndexAVL.java

Content: 

public RowIterator emptyIterator(){

  return emptyIterator;

}

Location: IndexAVL.java

Content: 

public boolean existsParent(Session session,PersistentStore store,Object[] rowdata,int[] rowColMap){

  NodeAVL node=findNode(session,store,rowdata,rowColMap,rowColMap.length,OpTypes.EQUAL,TransactionManager.ACTION_REF,false);

  return node != null;

}

Location: IndexAVL.java

Content: 

NodeAVL findDistinctNode(Session session,PersistentStore store,NodeAVL node,int fieldCount,boolean reversed){

  store.readLock();

  try {

    NodeAVL x=getAccessor(store);

    NodeAVL n=null;

    NodeAVL result=null;

    Row currentRow=null;

    Object[] rowData=node.getData(store);

    while (x != null) {

      currentRow=x.getRow(store);

      int i=0;

      i=compareRowNonUnique(session,currentRow.getData(),rowData,colIndex,fieldCount);

      if (reversed) {

        if (i < 0) {

          result=x;

          n=x.getRight(store);

        }

 else {

          n=x.getLeft(store);

        }

      }

 else {

        if (i <= 0) {

          n=x.getRight(store);

        }

 else {

          result=x;

          n=x.getLeft(store);

        }

      }

      if (n == null) {

        break;

      }

      x=n;

    }

    if (session == null) {

      return result;

    }

    while (result != null) {

      currentRow=result.getRow(store);

      if (session.database.txManager.canRead(session,store,currentRow,TransactionManager.ACTION_READ,colIndex)) {

        break;

      }

      result=reversed ? last(store,result) : next(store,result);

    }

    return result;

  }

  finally {

    store.readUnlock();

  }

}

Location: IndexAVL.java

Content: 

/** 

 * Finds the first node where the data is not null.

 * @return iterator

 */

public RowIterator findFirstRowNotNull(Session session,PersistentStore store){

  NodeAVL node=findNode(session,store,nullData,this.defaultColMap,1,OpTypes.NOT,TransactionManager.ACTION_READ,false);

  if (node == null) {

    return emptyIterator;

  }

  return new IndexRowIterator(session,store,this,node,0,false,false);

}

Location: IndexAVL.java

Content: 

/** 

 * Return the first node equal to the rowdata object. The rowdata has the same column mapping as this table.

 * @param session session object

 * @param store store object

 * @param rowdata array containing table row data

 * @return iterator

 */

public RowIterator findFirstRow(Session session,PersistentStore store,Object[] rowdata){

  NodeAVL node=findNode(session,store,rowdata,colIndex,colIndex.length,OpTypes.EQUAL,TransactionManager.ACTION_READ,false);

  if (node == null) {

    return emptyIterator;

  }

  return new IndexRowIterator(session,store,this,node,0,false,false);

}

Location: IndexAVL.java

Content: 

/** 

 * Return the first node equal to the rowdata object. The rowdata has the column mapping provided in rowColMap.

 * @param session session object

 * @param store store object

 * @param rowdata array containing table row data

 * @param rowColMap int[]

 * @return iterator

 */

public RowIterator findFirstRow(Session session,PersistentStore store,Object[] rowdata,int[] rowColMap){

  NodeAVL node=findNode(session,store,rowdata,rowColMap,rowColMap.length,OpTypes.EQUAL,TransactionManager.ACTION_READ,false);

  if (node == null) {

    return emptyIterator;

  }

  return new IndexRowIterator(session,store,this,node,0,false,false);

}

Location: IndexAVL.java

Content: 

/** 

 * Return the first node equal to the indexdata object. The rowdata has the same column mapping as this index.

 * @param session session object

 * @param store store object

 * @param rowdata array containing index column data

 * @param matchCount count of columns to match

 * @param compareType int

 * @param reversed boolean

 * @param map boolean[]

 * @return iterator

 */

public RowIterator findFirstRow(Session session,PersistentStore store,Object[] rowdata,int matchCount,int distinctCount,int compareType,boolean reversed,boolean[] map){

  NodeAVL node=findNode(session,store,rowdata,defaultColMap,matchCount,compareType,TransactionManager.ACTION_READ,reversed);

  if (node == null) {

    return emptyIterator;

  }

  return new IndexRowIterator(session,store,this,node,distinctCount,false,reversed);

}

Location: IndexAVL.java

Content: 

/** 

 * Finds a match with a row from a different table

 * @param session Session

 * @param store PersistentStore

 * @param rowdata array containing data for the index columns

 * @param rowColMap map of the data to columns

 * @param fieldCount int

 * @param compareType int

 * @param readMode int

 * @param reversed

 * @return matching node or null

 */

NodeAVL findNode(Session session,PersistentStore store,Object[] rowdata,int[] rowColMap,int fieldCount,int compareType,int readMode,boolean reversed){

  store.readLock();

  try {

    NodeAVL x=getAccessor(store);

    NodeAVL n=null;

    NodeAVL result=null;

    Row currentRow=null;

    if (compareType != OpTypes.EQUAL && compareType != OpTypes.IS_NULL) {

      fieldCount--;

      if (compareType == OpTypes.SMALLER || compareType == OpTypes.SMALLER_EQUAL || compareType == OpTypes.MAX) {

        reversed=true;

      }

    }

    while (x != null) {

      currentRow=x.getRow(store);

      int i=0;

      if (fieldCount > 0) {

        i=compareRowNonUnique(session,currentRow.getData(),rowdata,rowColMap,fieldCount);

      }

      if (i == 0) {

switch (compareType) {

case OpTypes.MAX:

case OpTypes.IS_NULL:

case OpTypes.EQUAL:

{

            result=x;

            if (reversed) {

              n=x.getRight(store);

            }

 else {

              n=x.getLeft(store);

            }

            break;

          }

case OpTypes.NOT:

case OpTypes.GREATER:

{

          i=compareObject(session,currentRow.getData(),rowdata,rowColMap,fieldCount,compareType);

          if (i <= 0) {

            n=x.getRight(store);

          }

 else {

            result=x;

            n=x.getLeft(store);

          }

          break;

        }

case OpTypes.GREATER_EQUAL_PRE:

case OpTypes.GREATER_EQUAL:

{

        i=compareObject(session,currentRow.getData(),rowdata,rowColMap,fieldCount,compareType);

        if (i < 0) {

          n=x.getRight(store);

        }

 else {

          result=x;

          n=x.getLeft(store);

        }

        break;

      }

case OpTypes.SMALLER:

{

      i=compareObject(session,currentRow.getData(),rowdata,rowColMap,fieldCount,compareType);

      if (i < 0) {

        result=x;

        n=x.getRight(store);

      }

 else {

        n=x.getLeft(store);

      }

      break;

    }

case OpTypes.SMALLER_EQUAL:

{

    i=compareObject(session,currentRow.getData(),rowdata,rowColMap,fieldCount,compareType);

    if (i <= 0) {

      result=x;

      n=x.getRight(store);

    }

 else {

      n=x.getLeft(store);

    }

    break;

  }

default :

throw Error.runtimeError(ErrorCode.U_S0500,"Index");

}

}

 else if (i < 0) {

n=x.getRight(store);

}

 else if (i > 0) {

n=x.getLeft(store);

}

if (n == null) {

break;

}

x=n;

}

if (session == null) {

return result;

}

while (result != null) {

currentRow=result.getRow(store);

if (session.database.txManager.canRead(session,store,currentRow,readMode,colIndex)) {

break;

}

result=reversed ? last(store,result) : next(store,result);

if (result == null) {

break;

}

currentRow=result.getRow(store);

if (fieldCount > 0 && compareRowNonUnique(session,currentRow.getData(),rowdata,rowColMap,fieldCount) != 0) {

result=null;

break;

}

}

return result;

}

  finally {

store.readUnlock();

}

}

Location: IndexAVL.java

Content: 

public RowIterator firstRow(PersistentStore store){

  store.readLock();

  try {

    NodeAVL x=getAccessor(store);

    NodeAVL l=x;

    while (l != null) {

      x=l;

      l=x.getLeft(store);

    }

    if (x == null) {

      return emptyIterator;

    }

    return new IndexRowIterator(null,store,this,x,0,false,false);

  }

  finally {

    store.readUnlock();

  }

}

Location: IndexAVL.java

Content: 

/** 

 * Returns the row for the first node of the index

 * @return Iterator for first row

 */

public RowIterator firstRow(Session session,PersistentStore store,int distinctCount,boolean[] map){

  store.readLock();

  try {

    NodeAVL x=getAccessor(store);

    NodeAVL l=x;

    while (l != null) {

      x=l;

      l=x.getLeft(store);

    }

    while (session != null && x != null) {

      Row row=x.getRow(store);

      if (session.database.txManager.canRead(session,store,row,TransactionManager.ACTION_READ,null)) {

        break;

      }

      x=next(store,x);

    }

    if (x == null) {

      return emptyIterator;

    }

    return new IndexRowIterator(session,store,this,x,distinctCount,false,false);

  }

  finally {

    store.readUnlock();

  }

}

Location: IndexAVL.java

Content: 

NodeAVL getAccessor(PersistentStore store){

  NodeAVL node=(NodeAVL)store.getAccessor(this);

  return node;

}

Location: IndexAVL.java

Content: 

public boolean[] getColumnDesc(){

  return colDesc;

}

Location: IndexAVL.java

Content: 

/** 

 * Returns the array containing column indexes for index

 */

public int[] getColumns(){

  return colIndex;

}

Location: IndexAVL.java

Content: 

/** 

 * Returns the array containing column indexes for index

 */

public Type[] getColumnTypes(){

  return colTypes;

}

Location: IndexAVL.java

Content: 

public int[] getDefaultColumnMap(){

  return this.defaultColMap;

}

Location: IndexAVL.java

Content: 

/** 

 * Returns a value indicating the order of different types of index in the list of indexes for a table. The position of the groups of Indexes in the list in ascending order is as follows: primary key index unique constraint indexes autogenerated foreign key indexes for FK's that reference this table or tables created before this table user created indexes (CREATE INDEX) autogenerated foreign key indexes for FK's that reference tables created after this table Among a group of indexes, the order is based on the order of creation of the index.

 * @return ordinal value

 */

public int getIndexOrderValue(){

  if (isPK) {

    return 0;

  }

  if (isConstraint) {

    return isForward ? 4 : isUnique ? 0 : 1;

  }

 else {

    return 2;

  }

}

Location: IndexAVL.java

Content: 

IndexRowIterator getIterator(Session session,PersistentStore store,NodeAVL x,boolean single,boolean reversed){

  if (x == null) {

    return emptyIterator;

  }

 else {

    IndexRowIterator it=new IndexRowIterator(session,store,this,x,0,single,reversed);

    return it;

  }

}

Location: IndexAVL.java

Content: 

public long getNodeCount(Session session,PersistentStore store){

  long count=0;

  RowIterator it=firstRow(session,store,0,null);

  while (it.next()) {

    count++;

  }

  return count;

}

Location: IndexAVL.java

Content: 

public long getPersistenceId(){

  return persistenceId;

}

Location: IndexAVL.java

Content: 

public int getPosition(){

  return position;

}

Location: IndexAVL.java

Content: 

boolean hasNulls(Session session,Object[] rowData){

  boolean uniqueNulls=session == null || session.database.sqlUniqueNulls;

  boolean compareId=false;

  for (int j=0; j < colIndex.length; j++) {

    if (rowData[colIndex[j]] == null) {

      compareId=true;

      if (uniqueNulls) {

        break;

      }

    }

 else     if (!uniqueNulls) {

      compareId=false;

      break;

    }

  }

  return compareId;

}

Location: IndexAVL.java

Content: 

/** 

 * Constructor declaration

 * @param name HsqlName of the index

 * @param id persistnece id

 * @param table table of the index

 * @param columns array of column indexes

 * @param descending boolean[]

 * @param nullsLast boolean[]

 * @param colTypes array of column types

 * @param pk if index is for a primary key

 * @param unique is this a unique index

 * @param constraint does this index belonging to a constraint

 * @param forward is this an auto-index for an FK that refers to a tabledefined after this table

 */

public IndexAVL(HsqlName name,long id,TableBase table,int[] columns,boolean[] descending,boolean[] nullsLast,Type[] colTypes,boolean pk,boolean unique,boolean constraint,boolean forward){

  this.persistenceId=id;

  this.name=name;

  this.colIndex=columns;

  this.colTypes=colTypes;

  this.colDesc=descending == null ? new boolean[columns.length] : descending;

  this.nullsLast=nullsLast == null ? new boolean[columns.length] : nullsLast;

  this.isPK=pk;

  this.isUnique=unique;

  this.isConstraint=constraint;

  this.isForward=forward;

  this.table=table;

  this.colCheck=table.getNewColumnCheckList();

  this.asArray=new IndexUse[]{new IndexUse(this,colIndex.length)};

  ArrayUtil.intIndexesToBooleanArray(colIndex,colCheck);

  this.defaultColMap=new int[columns.length];

  ArrayUtil.fillSequence(defaultColMap);

  boolean simpleOrder=colIndex.length > 0;

  for (int i=0; i < colDesc.length; i++) {

    if (this.colDesc[i] || this.nullsLast[i]) {

      simpleOrder=false;

    }

  }

  isSimpleOrder=simpleOrder;

  isSimple=isSimpleOrder && colIndex.length == 1;

  nullData=new Object[colIndex.length];

}

Location: IndexAVL.java

Content: 

public boolean isClustered(){

  return isClustered;

}

Location: IndexAVL.java

Content: 

/** 

 * Does this index belong to a constraint?

 */

public boolean isConstraint(){

  return isConstraint;

}

Location: IndexAVL.java

Content: 

public boolean isEmpty(PersistentStore store){

  store.readLock();

  try {

    return getAccessor(store) == null;

  }

  finally {

    store.readUnlock();

  }

}

Location: IndexAVL.java

Content: 

boolean isEqualReadable(Session session,PersistentStore store,NodeAVL node){

  NodeAVL c=node;

  Object[] data;

  Object[] nodeData;

  Row row;

  row=node.getRow(store);

  session.database.txManager.setTransactionInfo(store,row);

  if (session.database.txManager.canRead(session,store,row,TransactionManager.ACTION_DUP,null)) {

    return true;

  }

  data=node.getData(store);

  while (true) {

    c=last(store,c);

    if (c == null) {

      break;

    }

    nodeData=c.getData(store);

    if (compareRow(session,data,nodeData) == 0) {

      row=c.getRow(store);

      session.database.txManager.setTransactionInfo(store,row);

      if (session.database.txManager.canRead(session,store,row,TransactionManager.ACTION_DUP,null)) {

        return true;

      }

      continue;

    }

    break;

  }

  while (true) {

    c=next(session,store,node,0);

    if (c == null) {

      break;

    }

    nodeData=c.getData(store);

    if (compareRow(session,data,nodeData) == 0) {

      row=c.getRow(store);

      session.database.txManager.setTransactionInfo(store,row);

      if (session.database.txManager.canRead(session,store,row,TransactionManager.ACTION_DUP,null)) {

        return true;

      }

      continue;

    }

    break;

  }

  return false;

}

Location: IndexAVL.java

Content: 

public boolean isForward(){

  return isForward;

}

Location: IndexAVL.java

Content: 

/** 

 * Is this a UNIQUE index?

 */

public boolean isUnique(){

  return isUnique;

}

Location: IndexAVL.java

Content: 

/** 

 * Returns the row for the last node of the index

 * @return last row

 */

public RowIterator lastRow(Session session,PersistentStore store,int distinctCount,boolean[] map){

  store.readLock();

  try {

    NodeAVL x=getAccessor(store);

    NodeAVL l=x;

    while (l != null) {

      x=l;

      l=x.getRight(store);

    }

    while (session != null && x != null) {

      Row row=x.getRow(store);

      if (session.database.txManager.canRead(session,store,row,TransactionManager.ACTION_READ,null)) {

        break;

      }

      x=last(store,x);

    }

    if (x == null) {

      return emptyIterator;

    }

    return new IndexRowIterator(session,store,this,x,distinctCount,false,true);

  }

  finally {

    store.readUnlock();

  }

}

Location: IndexAVL.java

Content: 

NodeAVL last(Session session,PersistentStore store,NodeAVL x,int distinctCount){

  if (x == null) {

    return null;

  }

  if (distinctCount != 0) {

    return findDistinctNode(session,store,x,distinctCount,true);

  }

  while (true) {

    x=last(store,x);

    if (x == null) {

      return x;

    }

    if (session == null) {

      return x;

    }

    Row row=x.getRow(store);

    if (session.database.txManager.canRead(session,store,row,TransactionManager.ACTION_READ,null)) {

      return x;

    }

  }

}

Location: IndexAVL.java

Content: 

private NodeAVL nextUnlink(PersistentStore store,NodeAVL x){

  NodeAVL temp=x.getRight(null);

  if (temp != null) {

    x=temp;

    temp=x.getLeft(null);

    while (temp != null) {

      x=temp;

      temp=x.getLeft(null);

    }

    return x;

  }

  temp=x;

  x=x.getParent(null);

  while (x != null && x.isRight(store,temp)) {

    x.nRight=null;

    temp.getRow(null).destroy();

    temp.delete();

    temp=x;

    x=x.getParent(null);

  }

  if (x != null) {

    x.nLeft=null;

  }

  temp.getRow(null).destroy();

  temp.delete();

  return x;

}

Location: IndexAVL.java

Content: 

NodeAVL next(PersistentStore store,NodeAVL x,int depth,int maxDepth,int[] depths){

  NodeAVL temp=depth == maxDepth ? null : x.getRight(store);

  if (temp != null) {

    depth++;

    x=temp;

    temp=depth == maxDepth ? null : x.getLeft(store);

    while (temp != null) {

      depth++;

      x=temp;

      if (depth == maxDepth) {

        temp=null;

      }

 else {

        temp=x.getLeft(store);

      }

    }

    depths[0]=depth;

    return x;

  }

  temp=x;

  x=x.getParent(store);

  depth--;

  while (x != null && x.isRight(store,temp)) {

    temp=x;

    x=x.getParent(store);

    depth--;

  }

  depths[0]=depth;

  return x;

}

Location: IndexAVL.java

Content: 

/** 

 * Returns the node after the given one

 */

NodeAVL next(Session session,PersistentStore store,NodeAVL x,int distinctCount){

  if (x == null) {

    return null;

  }

  if (distinctCount != 0) {

    return findDistinctNode(session,store,x,distinctCount,false);

  }

  while (true) {

    x=next(store,x);

    if (x == null) {

      return x;

    }

    if (session == null) {

      return x;

    }

    Row row=x.getRow(store);

    if (session.database.txManager.canRead(session,store,row,TransactionManager.ACTION_READ,null)) {

      return x;

    }

  }

}

Location: IndexAVL.java

Content: 

int probeFactor(Session session,PersistentStore store,double[] changes,boolean left){

  int depth=0;

  NodeAVL x=getAccessor(store);

  NodeAVL n=x;

  if (x == null) {

    return 0;

  }

  while (n != null) {

    x=n;

    n=left ? x.getLeft(store) : x.getRight(store);

    depth++;

    if (depth > probeDepth && n != null) {

      compareRowForChange(session,x.getData(store),n.getData(store),changes);

    }

  }

  return depth - probeDepth;

}

Location: IndexAVL.java

Content: 

public double[] searchCost(Session session,PersistentStore store){

  boolean probeDeeper=false;

  int counter=1;

  double[] changes=new double[colIndex.length];

  int depth=0;

  int[] depths=new int[1];

  store.readLock();

  try {

    NodeAVL node=getAccessor(store);

    NodeAVL temp=node;

    if (node == null) {

      return changes;

    }

    while (true) {

      node=temp;

      temp=node.getLeft(store);

      if (temp == null) {

        break;

      }

      if (depth == Index.probeDepth) {

        probeDeeper=true;

        break;

      }

      depth++;

    }

    while (true) {

      temp=next(store,node,depth,probeDepth,depths);

      depth=depths[0];

      if (temp == null) {

        break;

      }

      compareRowForChange(session,node.getData(store),temp.getData(store),changes);

      node=temp;

      counter++;

    }

    if (probeDeeper) {

      double[] factors=new double[colIndex.length];

      int extras=probeFactor(session,store,factors,true) + probeFactor(session,store,factors,false);

      for (int i=0; i < colIndex.length; i++) {

        factors[i]/=2.0;

        for (int j=0; j < factors[i]; j++) {

          changes[i]*=2;

        }

      }

    }

    long rowCount=store.elementCount();

    for (int i=0; i < colIndex.length; i++) {

      if (changes[i] == 0) {

        changes[i]=1;

      }

      changes[i]=rowCount / changes[i];

      if (changes[i] < 2) {

        changes[i]=2;

      }

    }

    return changes;

  }

  finally {

    store.readUnlock();

  }

}

Location: IndexAVL.java

Content: 

public void setClustered(boolean clustered){

  isClustered=clustered;

}

Location: IndexAVL.java

Content: 

public void setTable(TableBase table){

  this.table=table;

}

Location: IndexAVL.java

Content: 

public long sizeUnique(PersistentStore store){

  return store.elementCountUnique(this);

}

Location: IndexAVL.java

Content: 

/** 

 * Returns the node count.

 */

public long size(Session session,PersistentStore store){

  return store.elementCount(session);

}

Location: IndexAVL.java

Content: 

/** 

 * Removes all links between memory nodes

 */

public void unlinkNodes(PersistentStore store,NodeAVL primaryRoot){

  NodeAVL x=primaryRoot;

  NodeAVL l=x;

  while (l != null) {

    x=l;

    l=x.getLeft(null);

  }

  while (x != null) {

    NodeAVL n=nextUnlink(store,x);

    x=n;

  }

}

