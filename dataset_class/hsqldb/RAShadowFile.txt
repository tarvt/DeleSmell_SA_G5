Location: RAShadowFile.java

Content: 

private int copy(int pageOffset) throws IOException {

  if (bitMap.set(pageOffset) == 1) {

    return 0;

  }

  long position=(long)pageOffset * pageSize;

  int readSize=pageSize;

  int writeSize=buffer.length;

  if (maxSize - position < pageSize) {

    readSize=(int)(maxSize - position);

  }

  if (dest == null) {

    open();

  }

  long writePos=dest.length();

  try {

    byteArrayOutputStream.reset();

    if (readSize < pageSize) {

      byteArrayOutputStream.fill(0,buffer.length);

      byteArrayOutputStream.reset();

    }

    byteArrayOutputStream.writeInt(pageSize);

    byteArrayOutputStream.writeLong(position);

    source.seek(position);

    source.read(buffer,headerSize,readSize);

    dest.seek(writePos);

    dest.write(buffer,0,writeSize);

    savedLength=writePos + writeSize;

    return 1;

  }

 catch (  Throwable t) {

    bitMap.unset(pageOffset);

    dest.seek(0);

    dest.setLength(writePos);

    close();

    database.logger.logSevereEvent("shadow backup failure pos " + position + " "+ readSize,t);

    throw JavaSystem.toIOException(t);

  }

}

Location: RAShadowFile.java

Content: 

int copy(long fileOffset,int size) throws IOException {

  int pageCount=0;

  if (!zeroPageSet) {

    pageCount+=copy(0);

    bitMap.set(0);

    zeroPageSet=true;

  }

  if (fileOffset >= maxSize) {

    return pageCount;

  }

  long endOffset=fileOffset + size;

  if (endOffset > maxSize) {

    endOffset=maxSize;

  }

  int startPageOffset=(int)(fileOffset / pageSize);

  int endPageOffset=(int)(endOffset / pageSize);

  if (endOffset % pageSize == 0) {

    endPageOffset--;

  }

  for (; startPageOffset <= endPageOffset; startPageOffset++) {

    pageCount+=copy(startPageOffset);

  }

  return pageCount;

}

Location: RAShadowFile.java

Content: 

public long getSavedLength(){

  return savedLength;

}

Location: RAShadowFile.java

Content: 

private static RandomAccessInterface getStorage(Database database,String pathName,String openMode) throws IOException {

  if (database.logger.isStoredFileAccess()) {

    return RAFile.newScaledRAFile(database,pathName,openMode.equals("r"),RAFile.DATA_FILE_STORED);

  }

 else {

    return new RAFileSimple(database.logger,pathName,openMode);

  }

}

Location: RAShadowFile.java

Content: 

RAShadowFile(Database database,RandomAccessInterface source,String pathName,long maxSize,int pageSize){

  this.database=database;

  this.pathName=pathName;

  this.source=source;

  this.pageSize=pageSize;

  this.maxSize=maxSize;

  int bitSize=(int)(maxSize / pageSize);

  if (maxSize % pageSize != 0) {

    bitSize++;

  }

  bitMap=new BitMap(bitSize,false);

  buffer=new byte[pageSize + headerSize];

  byteArrayOutputStream=new HsqlByteArrayOutputStream(buffer);

}

Location: RAShadowFile.java

Content: 

/** 

 * todo - take account of incomplete addition of block due to lack of disk 

 */

public static void restoreFile(Database database,String sourceName,String destName) throws IOException {

  RandomAccessInterface source=getStorage(database,sourceName,"r");

  RandomAccessInterface dest=getStorage(database,destName,"rw");

  while (source.getFilePointer() != source.length()) {

    int size=source.readInt();

    long position=source.readLong();

    byte[] buffer=new byte[size];

    source.read(buffer,0,buffer.length);

    dest.seek(position);

    dest.write(buffer,0,buffer.length);

  }

  source.close();

  dest.synch();

  dest.close();

}

