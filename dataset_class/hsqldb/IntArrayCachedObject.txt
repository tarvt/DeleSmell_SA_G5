Location: IntArrayCachedObject.java

Content: 

public int getDefaultCapacity(){

  return values.length;

}

Location: IntArrayCachedObject.java

Content: 

public int[] getIntArray(){

  return values;

}

Location: IntArrayCachedObject.java

Content: 

/** 

 * returns on first zero element

 */

public int getNonZeroSize(){

  int i=0;

  for (; i < values.length; i++) {

    if (values[i] == 0) {

      break;

    }

  }

  return i;

}

Location: IntArrayCachedObject.java

Content: 

public int getRealSize(RowOutputInterface out){

  return values.length * PersistentStore.INT_STORE_SIZE;

}

Location: IntArrayCachedObject.java

Content: 

public int getValue(int position){

  return values[position];

}

Location: IntArrayCachedObject.java

Content: 

public IntArrayCachedObject(int capacity){

  this.values=new int[capacity];

  hasChanged=true;

}

Location: IntArrayCachedObject.java

Content: 

public void read(RowInputInterface in){

  this.position=in.getFilePosition();

  int capacity=values.length;

  for (int i=0; i < capacity; i++) {

    values[i]=in.readInt();

  }

  hasChanged=false;

}

Location: IntArrayCachedObject.java

Content: 

public void setIntArray(int[] array){

  values=array;

  hasChanged=true;

}

Location: IntArrayCachedObject.java

Content: 

public void setValue(int position,int value){

  values[position]=value;

  hasChanged=true;

}

Location: IntArrayCachedObject.java

Content: 

public void write(RowOutputInterface out,LongLookup lookup){

  int capacity=values.length;

  out.setStorageSize(storageSize);

  for (int i=0; i < capacity; i++) {

    out.writeInt(values[i]);

  }

  out.writeEnd();

}

