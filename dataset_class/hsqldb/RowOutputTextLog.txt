Location: RowOutputTextLog.java

Content: 

protected void writeArray(Object[] o,Type type){

  type=type.collectionBaseType();

  noSeparators=true;

  write(BYTES_ARRAY);

  for (int i=0; i < o.length; i++) {

    if (i > 0) {

      write(',');

    }

    writeData(o[i],type);

  }

  write(']');

  noSeparators=false;

}

Location: RowOutputTextLog.java

Content: 

protected void writeBigint(Number o){

  this.writeBytes(o.toString());

}

Location: RowOutputTextLog.java

Content: 

protected void writeBinary(BinaryData o){

  ensureRoom((int)(o.length(null) * 2 + 2));

  write('\'');

  count+=StringConverter.writeHexBytes(getBuffer(),count,o.getBytes());

  write('\'');

}

Location: RowOutputTextLog.java

Content: 

protected void writeBit(BinaryData o){

  ensureRoom((int)(o.length(null) * 8 + 2));

  write('\'');

  String s=StringConverter.byteArrayToBitString(o.getBytes(),(int)o.bitLength(null));

  writeBytes(s);

  write('\'');

}

Location: RowOutputTextLog.java

Content: 

protected void writeBlob(BlobData o,Type type){

  writeBytes(Long.toString(o.getId()));

}

Location: RowOutputTextLog.java

Content: 

protected void writeBoolean(Boolean o){

  write(o.booleanValue() ? BYTES_TRUE : BYTES_FALSE);

}

Location: RowOutputTextLog.java

Content: 

protected void writeChar(String s,Type t){

  write('\'');

  StringConverter.stringToUnicodeBytes(this,s,true);

  write('\'');

}

Location: RowOutputTextLog.java

Content: 

protected void writeClob(ClobData o,Type type){

  writeBytes(Long.toString(o.getId()));

}

Location: RowOutputTextLog.java

Content: 

protected void writeDate(TimestampData o,Type type){

  write('\'');

  writeBytes(type.convertToString(o));

  write('\'');

}

Location: RowOutputTextLog.java

Content: 

protected void writeDaySecondInterval(IntervalSecondData o,Type type){

  write('\'');

  writeBytes(type.convertToString(o));

  write('\'');

}

Location: RowOutputTextLog.java

Content: 

protected void writeDecimal(BigDecimal o,Type type){

  writeBytes(type.convertToSQLString(o));

}

Location: RowOutputTextLog.java

Content: 

protected void writeFieldPrefix(){

  if (!noSeparators) {

    if (logMode == MODE_DELETE && isWritten) {

      write(BYTES_AND);

    }

  }

}

Location: RowOutputTextLog.java

Content: 

protected void writeFieldType(Type type){

  if (!noSeparators) {

    if (logMode == MODE_DELETE) {

      write('=');

    }

 else     if (isWritten) {

      write(',');

    }

    isWritten=true;

  }

}

Location: RowOutputTextLog.java

Content: 

protected void writeInteger(Number o){

  this.writeBytes(o.toString());

}

Location: RowOutputTextLog.java

Content: 

protected void writeNull(Type type){

  if (!noSeparators) {

    if (logMode == MODE_DELETE) {

      write(BYTES_IS);

    }

 else     if (isWritten) {

      write(',');

    }

    isWritten=true;

  }

  write(BYTES_NULL);

}

Location: RowOutputTextLog.java

Content: 

protected void writeOther(JavaObjectData o){

  ensureRoom(o.getBytesLength() * 2 + 2);

  write('\'');

  StringConverter.writeHexBytes(getBuffer(),count,o.getBytes());

  count+=o.getBytesLength() * 2;

  write('\'');

}

Location: RowOutputTextLog.java

Content: 

protected void writeReal(Double o){

  writeBytes(Type.SQL_DOUBLE.convertToSQLString(o));

}

Location: RowOutputTextLog.java

Content: 

protected void writeSmallint(Number o){

  this.writeBytes(o.toString());

}

Location: RowOutputTextLog.java

Content: 

protected void writeTimestamp(TimestampData o,Type type){

  write('\'');

  writeBytes(type.convertToString(o));

  write('\'');

}

Location: RowOutputTextLog.java

Content: 

protected void writeTime(TimeData o,Type type){

  write('\'');

  writeBytes(type.convertToString(o));

  write('\'');

}

Location: RowOutputTextLog.java

Content: 

protected void writeUUID(BinaryData o){

  ensureRoom(40);

  write('\'');

  count+=StringConverter.writeUUIDHexBytes(getBuffer(),count,o.getBytes());

  write('\'');

}

Location: RowOutputTextLog.java

Content: 

protected void writeYearMonthInterval(IntervalMonthData o,Type type){

  write('\'');

  writeBytes(type.convertToString(o));

  write('\'');

}

