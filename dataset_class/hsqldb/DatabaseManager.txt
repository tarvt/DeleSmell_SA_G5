Location: DatabaseManager.java

Content: 

/** 

 * Adds a database to the registry.

 */

private static void addDatabaseObject(DatabaseType type,String path,Database db){

  writeLock.lock();

  try {

    Object key=path;

    HashMap databaseMap;

    if (type == DatabaseType.DB_FILE) {

      databaseMap=fileDatabaseMap;

      key=filePathToKey(path);

    }

 else     if (type == DatabaseType.DB_RES) {

      databaseMap=resDatabaseMap;

    }

 else     if (type == DatabaseType.DB_MEM) {

      databaseMap=memDatabaseMap;

    }

 else {

      throw Error.runtimeError(ErrorCode.U_S0500,"DatabaseManager");

    }

    writeLock.lock();

    try {

      databaseIDMap.put(db.databaseID,db);

    }

  finally {

      writeLock.unlock();

    }

    writeLock.lock();

    try {

      databaseMap.put(key,db);

    }

  finally {

      writeLock.unlock();

    }

  }

  finally {

    writeLock.unlock();

  }

}

Location: DatabaseManager.java

Content: 

void addMenuItems(Menu f,String[] m){

  for (int i=0; i < m.length; i++) {

    MenuItem item=new MenuItem(m[i].substring(1));

    char c=m[i].charAt(0);

    if (c != '-') {

      item.setShortcut(new MenuShortcut(c));

    }

    item.addActionListener(this);

    f.add(item);

  }

}

Location: DatabaseManager.java

Content: 

void addMenu(MenuBar b,String name,String[] items){

  Menu menu=new Menu(name);

  if (name.equals("Tools") && !TT_AVAILABLE) {

    menu.setEnabled(false);

  }

  addMenuItems(menu,items);

  b.add(menu);

}

Location: DatabaseManager.java

Content: 

private void addToRecent(String s){

  for (int i=0; i < iMaxRecent; i++) {

    if (s.equals(sRecent[i])) {

      return;

    }

  }

  if (sRecent[iRecent] != null) {

    mRecent.remove(iRecent);

  }

  sRecent[iRecent]=s;

  if (s.length() > 43) {

    s=s.substring(0,40) + "...";

  }

  MenuItem item=new MenuItem(s);

  item.setActionCommand("#" + iRecent);

  item.addActionListener(this);

  mRecent.insert(item,iRecent);

  iRecent=(iRecent + 1) % iMaxRecent;

}

Location: DatabaseManager.java

Content: 

/** 

 * Closes all the databases using the given mode.<p> CLOSEMODE_IMMEDIATELY = 1; CLOSEMODE_NORMAL      = 2; CLOSEMODE_COMPACT     = 3; CLOSEMODE_SCRIPT      = 4;

 */

public static void closeDatabases(int mode){

  writeLock.lock();

  try {

    Iterator it=databaseIDMap.values().iterator();

    while (it.hasNext()) {

      Database db=(Database)it.next();

      try {

        db.close(mode);

      }

 catch (      HsqlException e) {

      }

    }

  }

  finally {

    writeLock.unlock();

  }

}

Location: DatabaseManager.java

Content: 

public void connect(Connection c){

  if (c == null) {

    return;

  }

  if (cConn != null) {

    try {

      cConn.close();

    }

 catch (    SQLException e) {

    }

  }

  cConn=c;

  try {

    dMeta=cConn.getMetaData();

    sStatement=cConn.createStatement();

    refreshTree();

  }

 catch (  SQLException e) {

    e.printStackTrace();

  }

}

Location: DatabaseManager.java

Content: 

/** 

 * Deregisters a server completely.

 */

public static void deRegisterServer(Notified server){

  writeLock.lock();

  try {

    serverMap.remove(server);

  }

  finally {

    writeLock.unlock();

  }

}

Location: DatabaseManager.java

Content: 

private static String filePathToKey(String path){

  try {

    return FileUtil.getFileUtil().canonicalPath(path);

  }

 catch (  Exception e) {

    return path;

  }

}

Location: DatabaseManager.java

Content: 

void formatResultSet(ResultSet r){

  if (r == null) {

    String[] g=new String[1];

    g[0]="Result";

    gResult.setHead(g);

    g[0]="(empty)";

    gResult.addRow(g);

    return;

  }

  try {

    ResultSetMetaData m=r.getMetaData();

    int col=m.getColumnCount();

    String[] h=new String[col];

    for (int i=1; i <= col; i++) {

      h[i - 1]=m.getColumnLabel(i);

    }

    gResult.setHead(h);

    while (r.next()) {

      for (int i=1; i <= col; i++) {

        try {

          h[i - 1]=r.getString(i);

          if (r.wasNull()) {

            h[i - 1]="(null)";

          }

        }

 catch (        SQLException e) {

          h[i - 1]="(binary data)";

        }

      }

      gResult.addRow(h);

    }

    r.close();

  }

 catch (  SQLException e) {

  }

}

Location: DatabaseManager.java

Content: 

private static Database getDatabaseObject(DatabaseType type,String path,HsqlProperties props){

  writeLock.lock();

  try {

    Database db;

    String key=path;

    HashMap databaseMap;

switch (type) {

case DB_FILE:

{

        databaseMap=fileDatabaseMap;

        key=filePathToKey(path);

        writeLock.lock();

        try {

          db=(Database)databaseMap.get(key);

          if (db == null) {

            if (databaseMap.size() > 0) {

              Iterator it=databaseMap.keySet().iterator();

              while (it.hasNext()) {

                String current=(String)it.next();

                if (key.equalsIgnoreCase(current)) {

                  key=current;

                  break;

                }

              }

            }

          }

        }

  finally {

          writeLock.unlock();

        }

        break;

      }

case DB_RES:

{

      databaseMap=resDatabaseMap;

      break;

    }

case DB_MEM:

{

    databaseMap=memDatabaseMap;

    break;

  }

default :

throw Error.runtimeError(ErrorCode.U_S0500,"DatabaseManager");

}

readLock.lock();

try {

db=(Database)databaseMap.get(key);

}

  finally {

readLock.unlock();

}

if (db == null) {

db=new Database(type,path,key,props);

db.databaseID=dbIDCounter.getAndIncrement();

writeLock.lock();

try {

databaseIDMap.put(db.databaseID,db);

}

  finally {

writeLock.unlock();

}

writeLock.lock();

try {

databaseMap.put(key,db);

}

  finally {

writeLock.unlock();

}

}

return db;

}

  finally {

writeLock.unlock();

}

}

Location: DatabaseManager.java

Content: 

/** 

 * Returns a vector containing the URI (type + path) for all the databases.

 */

public static Vector getDatabaseURIs(){

  Vector v=new Vector();

  writeLock.lock();

  try {

    Iterator it=databaseIDMap.values().iterator();

    while (it.hasNext()) {

      Database db=(Database)it.next();

      v.addElement(db.getURI());

    }

  }

  finally {

    writeLock.unlock();

  }

  return v;

}

Location: DatabaseManager.java

Content: 

public static Database getDatabase(int id){

  readLock.lock();

  try {

    return (Database)databaseIDMap.get(id);

  }

  finally {

    readLock.unlock();

  }

}

Location: DatabaseManager.java

Content: 

/** 

 * This has to be improved once a threading model is in place. Current behaviour: Attempts to connect to different databases do not block. Two db's can open simultaneously. Attempts to connect to a db while it is opening or closing will block until the db is open or closed. At this point the db state is either DATABASE_ONLINE (after db.open() has returned) which allows a new connection to be made, or the state is DATABASE_SHUTDOWN which means the db can be reopened for the new connection).

 */

public static Database getDatabase(String dbtype,String path,HsqlProperties props){

  DatabaseType type=DatabaseType.get(dbtype);

  Database db=getDatabaseObject(type,path,props);

  readLock.lock();

  try {

switch (db.getState()) {

case Database.DATABASE_ONLINE:

      break;

case Database.DATABASE_SHUTDOWN:

    if (lookupDatabaseObject(type,path) == null) {

      addDatabaseObject(type,path,db);

    }

  db.open();

break;

case Database.DATABASE_CLOSING:

case Database.DATABASE_OPENING:

throw Error.error(ErrorCode.LOCK_FILE_ACQUISITION_FAILURE,ErrorCode.M_DatabaseManager_getDatabase);

}

}

  finally {

readLock.unlock();

}

return db;

}

Location: DatabaseManager.java

Content: 

/** 

 * Used by server to open or create a database

 */

public static int getDatabase(String type,String path,Notified server,HsqlProperties props){

  Database db=getDatabase(type,path,props);

  registerServer(server,db);

  return db.databaseID;

}

Location: DatabaseManager.java

Content: 

/** 

 * Returns an existing session. Used with repeat HTTP connections belonging to the same JDBC Connection / HSQL Session pair.

 */

public static Session getSession(int dbId,long sessionId){

  Database db=null;

  readLock.lock();

  try {

    db=(Database)databaseIDMap.get(dbId);

  }

  finally {

    readLock.unlock();

  }

  return db == null ? null : db.sessionManager.getSession(sessionId);

}

Location: DatabaseManager.java

Content: 

public static HsqlTimer getTimer(){

  return timer;

}

Location: DatabaseManager.java

Content: 

private void initGUI(){

  Panel pQuery=new Panel();

  Panel pCommand=new Panel();

  pResult=new Panel();

  pQuery.setLayout(new BorderLayout());

  pCommand.setLayout(new BorderLayout());

  pResult.setLayout(new BorderLayout());

  Font fFont=new Font("Dialog",Font.PLAIN,12);

  txtCommand=new TextArea(5,40);

  txtCommand.addKeyListener(this);

  txtResult=new TextArea(20,40);

  txtCommand.setFont(fFont);

  txtResult.setFont(new Font("Courier",Font.PLAIN,12));

  butExecute=new Button("Execute");

  butClear=new Button("Clear");

  butExecute.addActionListener(this);

  butClear.addActionListener(this);

  pCommand.add("East",butExecute);

  pCommand.add("West",butClear);

  pCommand.add("Center",txtCommand);

  gResult=new Grid();

  setLayout(new BorderLayout());

  pResult.add("Center",gResult);

  pQuery.add("North",pCommand);

  pQuery.add("Center",pResult);

  fMain.add("Center",pQuery);

  tTree=new Tree();

  Dimension d=Toolkit.getDefaultToolkit().getScreenSize();

  if (d.width >= 640) {

    tTree.setMinimumSize(new Dimension(200,100));

  }

 else {

    tTree.setMinimumSize(new Dimension(80,100));

  }

  gResult.setMinimumSize(new Dimension(200,300));

  fMain.add("West",tTree);

  doLayout();

  fMain.pack();

}

Location: DatabaseManager.java

Content: 

void insertTestData(){

  try {

    DatabaseManagerCommon.createTestTables(sStatement);

    refreshTree();

    txtCommand.setText(DatabaseManagerCommon.createTestData(sStatement));

    refreshTree();

    for (int i=0; i < DatabaseManagerCommon.testDataSql.length; i++) {

      addToRecent(DatabaseManagerCommon.testDataSql[i]);

    }

    execute();

  }

 catch (  SQLException e) {

    e.printStackTrace();

  }

}

Location: DatabaseManager.java

Content: 

static boolean isServerDB(Database db){

  Iterator it=serverMap.keySet().iterator();

  for (; it.hasNext(); ) {

    Notified server=(Notified)it.next();

    HashSet databases=(HashSet)serverMap.get(server);

    if (databases.contains(db)) {

      return true;

    }

  }

  return false;

}

Location: DatabaseManager.java

Content: 

public void keyPressed(KeyEvent k){

}

Location: DatabaseManager.java

Content: 

public void keyReleased(KeyEvent k){

}

Location: DatabaseManager.java

Content: 

public void keyTyped(KeyEvent k){

  if (k.getKeyChar() == '\n' && k.isControlDown()) {

    k.consume();

    execute();

  }

}

Location: DatabaseManager.java

Content: 

/** 

 * Looks up database of a given type and path in the registry. Returns null if there is none.

 */

public static Database lookupDatabaseObject(DatabaseType type,String path){

  readLock.lock();

  try {

    Object key=path;

    HashMap databaseMap;

    if (type == DatabaseType.DB_FILE) {

      databaseMap=fileDatabaseMap;

      key=filePathToKey(path);

    }

 else     if (type == DatabaseType.DB_RES) {

      databaseMap=resDatabaseMap;

    }

 else     if (type == DatabaseType.DB_MEM) {

      databaseMap=memDatabaseMap;

    }

 else {

      throw (Error.runtimeError(ErrorCode.U_S0500,"DatabaseManager"));

    }

    readLock.lock();

    try {

      return (Database)databaseMap.get(key);

    }

  finally {

      readLock.unlock();

    }

  }

  finally {

    readLock.unlock();

  }

}

Location: DatabaseManager.java

Content: 

public void main(){

  fMain=new Frame("HSQL Database Manager");

  imgEmpty=createImage(new MemoryImageSource(2,2,new int[4 * 4],2,2));

  fMain.setIconImage(imgEmpty);

  fMain.addWindowListener(this);

  MenuBar bar=new MenuBar();

  String[] fitems={"-Connect...","--","-Open Script...","-Save Script...","-Save Result...","-Save Result csv...","--","-Exit"};

  addMenu(bar,"File",fitems);

  String[] vitems={"RRefresh Tree","--","GResults in Grid","TResults in Text","--","1Shrink Tree","2Enlarge Tree","3Shrink Command","4Enlarge Command"};

  addMenu(bar,"View",vitems);

  String[] sitems={"SSELECT","IINSERT","UUPDATE","DDELETE","--","-CREATE TABLE","-DROP TABLE","-CREATE INDEX","-DROP INDEX","--","-CHECKPOINT","-SCRIPT","-SET","-SHUTDOWN","--","-Test Script"};

  addMenu(bar,"Command",sitems);

  Menu recent=new Menu("Recent");

  mRecent=new Menu("Recent");

  bar.add(mRecent);

  String[] soptions={"-AutoCommit on","-AutoCommit off","OCommit","LRollback","--","-Disable MaxRows","-Set MaxRows to 100","--","-Logging on","-Logging off","--","-Insert test data"};

  addMenu(bar,"Options",soptions);

  String[] stools={"-Dump","-Restore","-Transfer"};

  addMenu(bar,"Tools",stools);

  Menu hMenu=new Menu("Help");

  MenuItem aItem=new MenuItem("About");

  aItem.setShortcut(new MenuShortcut('A'));

  aItem.addActionListener(this);

  hMenu.add(aItem);

  MenuItem hItem=new MenuItem("Help");

  hItem.setShortcut(new MenuShortcut('H'));

  hItem.addActionListener(this);

  hMenu.add(hItem);

  fMain.setMenuBar(bar);

  fMain.setSize(640,480);

  fMain.add("Center",this);

  initGUI();

  sRecent=new String[iMaxRecent];

  Dimension d=Toolkit.getDefaultToolkit().getScreenSize();

  Dimension size=fMain.getSize();

  if (d.width >= 640) {

    fMain.setLocation((d.width - size.width) / 2,(d.height - size.height) / 2);

  }

 else {

    fMain.setLocation(0,0);

    fMain.setSize(d);

  }

  fMain.show();

  if (defScript != null) {

    if (defDirectory != null) {

      defScript=defDirectory + File.separator + defScript;

    }

    txtCommand.setText(DatabaseManagerCommon.readFile(defScript));

  }

  txtCommand.requestFocus();

}

Location: DatabaseManager.java

Content: 

/** 

 * Used by server to open a new session

 */

public static Session newSession(int dbID,String user,String password,String zoneString,int timeZoneSeconds){

  Database db=null;

  readLock.lock();

  try {

    db=(Database)databaseIDMap.get(dbID);

  }

  finally {

    readLock.unlock();

  }

  if (db == null) {

    return null;

  }

  Session session=db.connect(user,password,zoneString,timeZoneSeconds);

  session.isNetwork=true;

  return session;

}

Location: DatabaseManager.java

Content: 

/** 

 * Used by in-process connections and by Servlet

 */

public static Session newSession(String type,String path,String user,String password,HsqlProperties props,String zoneString,int timeZoneSeconds){

  Database db=getDatabase(type,path,props);

  return db.connect(user,password,zoneString,timeZoneSeconds);

}

Location: DatabaseManager.java

Content: 

/** 

 * Notifies all servers that serve the database that the database has been shutdown.

 */

private static void notifyServers(Database db){

  Notified[] servers;

  readLock.lock();

  try {

    servers=new Notified[serverMap.size()];

    serverMap.keysToArray(servers);

  }

  finally {

    readLock.unlock();

  }

  for (int i=0; i < servers.length; i++) {

    Notified server=servers[i];

    HashSet databases;

    boolean removed=false;

    readLock.lock();

    try {

      databases=(HashSet)serverMap.get(server);

    }

  finally {

      readLock.unlock();

    }

    if (databases != null) {

      readLock.lock();

      try {

        removed=databases.remove(db);

      }

  finally {

        readLock.unlock();

      }

    }

    if (removed) {

      server.notify(db.databaseID);

    }

  }

}

Location: DatabaseManager.java

Content: 

protected void refreshTree(){

  boolean wasAutoCommit=false;

  tTree.removeAll();

  try {

    wasAutoCommit=cConn.getAutoCommit();

    cConn.setAutoCommit(false);

    int color_table=Color.yellow.getRGB();

    int color_column=Color.orange.getRGB();

    int color_index=Color.red.getRGB();

    tTree.addRow("",dMeta.getURL(),"-",0);

    String[] usertables={"TABLE","GLOBAL TEMPORARY","VIEW"};

    Vector schemas=new Vector();

    Vector tables=new Vector();

    Vector remarks=new Vector();

    ResultSet result=dMeta.getTables(null,null,null,usertables);

    try {

      while (result.next()) {

        schemas.addElement(result.getString(2));

        tables.addElement(result.getString(3));

        remarks.addElement(result.getString(5));

      }

    }

  finally {

      result.close();

    }

    for (int i=0; i < tables.size(); i++) {

      String name=(String)tables.elementAt(i);

      String schema=(String)schemas.elementAt(i);

      String key="tab-" + name + "-";

      tTree.addRow(key,name,"+",color_table);

      String remark=(String)remarks.elementAt(i);

      if ((schema != null) && !schema.trim().equals("")) {

        tTree.addRow(key + "s","schema: " + schema);

      }

      if ((remark != null) && !remark.trim().equals("")) {

        tTree.addRow(key + "r"," " + remark);

      }

      ResultSet col=dMeta.getColumns(null,schema,name,null);

      try {

        while (col.next()) {

          String c=col.getString(4);

          String k1=key + "col-" + c+ "-";

          tTree.addRow(k1,c,"+",color_column);

          String type=col.getString(6);

          tTree.addRow(k1 + "t","Type: " + type);

          boolean nullable=col.getInt(11) != DatabaseMetaData.columnNoNulls;

          tTree.addRow(k1 + "n","Nullable: " + nullable);

        }

      }

  finally {

        col.close();

      }

      tTree.addRow(key + "ind","Indices","+",0);

      ResultSet ind=dMeta.getIndexInfo(null,schema,name,false,false);

      String oldiname=null;

      try {

        while (ind.next()) {

          boolean nonunique=ind.getBoolean(4);

          String iname=ind.getString(6);

          String k2=key + "ind-" + iname+ "-";

          if ((oldiname == null || !oldiname.equals(iname))) {

            tTree.addRow(k2,iname,"+",color_index);

            tTree.addRow(k2 + "u","Unique: " + !nonunique);

            oldiname=iname;

          }

          String c=ind.getString(9);

          tTree.addRow(k2 + "c-" + c+ "-",c);

        }

      }

  finally {

        ind.close();

      }

    }

    tTree.addRow("p","Properties","+",0);

    tTree.addRow("pu","User: " + dMeta.getUserName());

    tTree.addRow("pr","ReadOnly: " + cConn.isReadOnly());

    tTree.addRow("pa","AutoCommit: " + cConn.getAutoCommit());

    tTree.addRow("pd","Driver: " + dMeta.getDriverName());

    tTree.addRow("pp","Product: " + dMeta.getDatabaseProductName());

    tTree.addRow("pv","Version: " + dMeta.getDatabaseProductVersion());

  }

 catch (  SQLException e) {

    tTree.addRow("","Error getting metadata:","-",0);

    tTree.addRow("-",e.getMessage());

    tTree.addRow("-",e.getSQLState());

  }

 finally {

    try {

      cConn.setAutoCommit(wasAutoCommit);

    }

 catch (    SQLException e) {

    }

  }

  tTree.update();

}

Location: DatabaseManager.java

Content: 

/** 

 * Registers a server as serving a given database.

 */

private static void registerServer(Notified server,Database db){

  writeLock.lock();

  try {

    if (!serverMap.containsKey(server)) {

      serverMap.put(server,new HashSet());

    }

    HashSet databases=(HashSet)serverMap.get(server);

    databases.add(db);

  }

  finally {

    writeLock.unlock();

  }

}

Location: DatabaseManager.java

Content: 

/** 

 * Removes the database from registry.

 */

static void removeDatabase(Database database){

  int dbID=database.databaseID;

  DatabaseType type=database.getType();

  String path=database.getPath();

  Object key=path;

  HashMap databaseMap;

  notifyServers(database);

  if (type == DatabaseType.DB_FILE) {

    databaseMap=fileDatabaseMap;

    key=filePathToKey(path);

  }

 else   if (type == DatabaseType.DB_RES) {

    databaseMap=resDatabaseMap;

  }

 else   if (type == DatabaseType.DB_MEM) {

    databaseMap=memDatabaseMap;

  }

 else {

    throw (Error.runtimeError(ErrorCode.U_S0500,"DatabaseManager"));

  }

  boolean isEmpty=false;

  writeLock.lock();

  try {

    databaseIDMap.remove(dbID);

    isEmpty=databaseIDMap.isEmpty();

  }

  finally {

    writeLock.unlock();

  }

  readLock.lock();

  try {

    databaseMap.remove(key);

  }

  finally {

    readLock.unlock();

  }

  if (isEmpty) {

    ValuePool.resetPool();

  }

}

Location: DatabaseManager.java

Content: 

void saveAsCsv(String filename){

  try {

    File file=new File(filename);

    CSVWriter writer=new CSVWriter(file,null);

    String[] col=gResult.getHead();

    int width=col.length;

    Vector data=gResult.getData();

    String[] row;

    int height=data.size();

    writer.writeHeader(col);

    for (int i=0; i < height; i++) {

      row=(String[])data.elementAt(i);

      String[] myRow=new String[row.length];

      for (int j=0; j < row.length; j++) {

        String r=row[j];

        if (r.equals("(null)")) {

          r="";

        }

        myRow[j]=r;

      }

      writer.writeData(myRow);

    }

    writer.close();

  }

 catch (  IOException e) {

    throw new RuntimeException("IOError: " + e.getMessage());

  }

}

Location: DatabaseManager.java

Content: 

void showHelp(String[] help){

  txtCommand.setText(help[0]);

  txtResult.setText(help[1]);

  bHelp=true;

  pResult.removeAll();

  pResult.add("Center",txtResult);

  pResult.doLayout();

  txtCommand.requestFocus();

  txtCommand.setCaretPosition(help[0].length());

}

Location: DatabaseManager.java

Content: 

void showResultInText(){

  String[] col=gResult.getHead();

  int width=col.length;

  int[] size=new int[width];

  Vector data=gResult.getData();

  String[] row;

  int height=data.size();

  for (int i=0; i < width; i++) {

    size[i]=col[i].length();

  }

  for (int i=0; i < height; i++) {

    row=(String[])data.elementAt(i);

    for (int j=0; j < width; j++) {

      int l=row[j].length();

      if (l > size[j]) {

        size[j]=l;

      }

    }

  }

  StringBuffer b=new StringBuffer();

  for (int i=0; i < width; i++) {

    b.append(col[i]);

    for (int l=col[i].length(); l <= size[i]; l++) {

      b.append(' ');

    }

  }

  b.append(NL);

  for (int i=0; i < width; i++) {

    for (int l=0; l < size[i]; l++) {

      b.append('-');

    }

    b.append(' ');

  }

  b.append(NL);

  for (int i=0; i < height; i++) {

    row=(String[])data.elementAt(i);

    for (int j=0; j < width; j++) {

      b.append(row[j]);

      for (int l=row[j].length(); l <= size[j]; l++) {

        b.append(' ');

      }

    }

    b.append(NL);

  }

  long millis=lTime / 1000000;

  long fraction=(lTime % 1000000) / 100000;

  b.append(NL + height + " row(s) in "+ millis+ '.'+ fraction+ " ms");

  txtResult.setText(b.toString());

}

Location: DatabaseManager.java

Content: 

private static void showUsage(){

  System.out.println("Usage: java DatabaseManager [--options]\n" + "where options include:\n" + "    --help                show this message\n"+ "    --driver <classname>  jdbc driver class\n"+ "    --url <name>          jdbc url\n"+ "    --user <name>         username used for connection\n"+ "    --password <password> password for this user\n"+ "    --urlid <urlid>       use url/user/password/driver in rc file\n"+ "    --rcfile <file>       (defaults to 'dbmanager.rc' in home dir)\n"+ "    --dir <path>          default directory\n"+ "    --script <file>       reads from script file\n"+ "    --noexit              do not call system.exit()");

}

Location: DatabaseManager.java

Content: 

public static void shutdownDatabases(Notified server,int shutdownMode){

  Database[] dbArray;

  readLock.lock();

  try {

    HashSet databases=(HashSet)serverMap.get(server);

    if (databases == null) {

      dbArray=new Database[0];

    }

 else {

      dbArray=new Database[databases.size()];

      databases.toArray(dbArray);

    }

  }

  finally {

    readLock.unlock();

  }

  for (int i=0; i < dbArray.length; i++) {

    dbArray[i].close(shutdownMode);

  }

}

Location: DatabaseManager.java

Content: 

void testPerformance(){

  String all=txtCommand.getText();

  StringBuffer b=new StringBuffer();

  long total=0;

  lTime=0;

  for (int i=0; i < all.length(); i++) {

    char c=all.charAt(i);

    if (c != '\n') {

      b.append(c);

    }

  }

  all=b.toString();

  String[] g=new String[4];

  g[0]="ms";

  g[1]="count";

  g[2]="sql";

  g[3]="error";

  gResult.setHead(g);

  int max=1;

  lTime=System.nanoTime() - lTime;

  while (!all.equals("")) {

    int i=all.indexOf(';');

    String sql;

    if (i != -1) {

      sql=all.substring(0,i);

      all=all.substring(i + 1);

    }

 else {

      sql=all;

      all="";

    }

    if (sql.startsWith("--#")) {

      max=Integer.parseInt(sql.substring(3));

      continue;

    }

 else     if (sql.startsWith("--")) {

      continue;

    }

    g[2]=sql;

    long l=0;

    try {

      l=DatabaseManagerCommon.testStatement(sStatement,sql,max);

      total+=l;

      g[0]=String.valueOf(l);

      g[1]=String.valueOf(max);

      g[3]="";

    }

 catch (    SQLException e) {

      g[0]=g[1]="n/a";

      g[3]=e.toString();

    }

    gResult.addRow(g);

    System.out.println(l + " ms : " + sql);

  }

  g[0]="" + total;

  g[1]="total";

  g[2]="";

  gResult.addRow(g);

  lTime=System.nanoTime() - lTime;

  updateResult();

}

Location: DatabaseManager.java

Content: 

public static void threadedDBM(){

  System.getProperties().put("sun.java2d.noddraw","true");

  String urlid=null;

  String rcFile=null;

  boolean autoConnect=false;

  boolean urlidConnect=false;

  bMustExit=false;

  DatabaseManager m=new DatabaseManager();

  m.main();

  Connection c=null;

  try {

    c=ConnectionDialog.createConnection(m.fMain,"Connect");

  }

 catch (  Exception e) {

    e.printStackTrace();

  }

  if (c == null) {

    return;

  }

  m.connect(c);

}

Location: DatabaseManager.java

Content: 

void updateResult(){

  if (iResult == 0) {

    if (bHelp) {

      pResult.removeAll();

      pResult.add("Center",gResult);

      pResult.doLayout();

      bHelp=false;

    }

    gResult.update();

    gResult.repaint();

  }

 else {

    hongshuai();

    String[] col=gResult.getHead();

    int width=col.length;

    int[] size=new int[width];

    Vector data=gResult.getData();

    String[] row;

    int height=data.size();

    for (int i=0; i < width; i++) {

      size[i]=col[i].length();

    }

    for (int i=0; i < height; i++) {

      row=(String[])data.elementAt(i);

      for (int j=0; j < width; j++) {

        int l=row[j].length();

        if (l > size[j]) {

          size[j]=l;

        }

      }

    }

    StringBuffer b=new StringBuffer();

    for (int i=0; i < width; i++) {

      b.append(col[i]);

      for (int l=col[i].length(); l <= size[i]; l++) {

        b.append(' ');

      }

    }

    b.append(NL);

    for (int i=0; i < width; i++) {

      for (int l=0; l < size[i]; l++) {

        b.append('-');

      }

      b.append(' ');

    }

    b.append(NL);

    for (int i=0; i < height; i++) {

      row=(String[])data.elementAt(i);

      for (int j=0; j < width; j++) {

        b.append(row[j]);

        for (int l=row[j].length(); l <= size[j]; l++) {

          b.append(' ');

        }

      }

      b.append(NL);

    }

    long millis=lTime / 1000000;

    long fraction=(lTime % 1000000) / 100000;

    b.append(NL + height + " row(s) in "+ millis+ '.'+ fraction+ " ms");

    txtResult.setText(b.toString());

  }

  txtCommand.selectAll();

  txtCommand.requestFocus();

}

Location: DatabaseManager.java

Content: 

public void windowActivated(WindowEvent e){

}

Location: DatabaseManager.java

Content: 

public void windowClosed(WindowEvent e){

}

Location: DatabaseManager.java

Content: 

public void windowClosing(WindowEvent ev){

  try {

    if (cConn != null) {

      cConn.close();

    }

  }

 catch (  Exception e) {

  }

  fMain.dispose();

  if (bMustExit) {

    System.exit(0);

  }

}

Location: DatabaseManager.java

Content: 

public void windowDeactivated(WindowEvent e){

}

Location: DatabaseManager.java

Content: 

public void windowDeiconified(WindowEvent e){

}

Location: DatabaseManager.java

Content: 

public void windowIconified(WindowEvent e){

}

Location: DatabaseManager.java

Content: 

public void windowOpened(WindowEvent e){

}

