Location: OdbcUtil.java

Content: 

static void alertClient(int severity,String message,DataOutputStream hOutStream) throws IOException {

  alertClient(severity,message,null,hOutStream);

}

Location: OdbcUtil.java

Content: 

static void alertClient(int severity,String message,String sqlStateCode,DataOutputStream hOutStream) throws IOException {

  if (sqlStateCode == null) {

    sqlStateCode="XX000";

  }

  if (!odbcSeverityMap.containsKey(severity)) {

    throw new IllegalArgumentException("Unknown severity value (" + severity + ')');

  }

  OdbcPacketOutputStream alertPacket=OdbcPacketOutputStream.newOdbcPacketOutputStream();

  alertPacket.write("S" + odbcSeverityMap.get(severity));

  if (severity < ODBC_SEVERITY_NOTICE) {

    alertPacket.write("C" + sqlStateCode);

  }

  alertPacket.write("M" + message);

  alertPacket.writeByte(0);

  alertPacket.xmit((severity < ODBC_SEVERITY_NOTICE) ? 'E' : 'N',hOutStream);

  alertPacket.close();

}

Location: OdbcUtil.java

Content: 

static String echoBackReplyString(String inCommand,int retval){

  String uc=inCommand.trim().toUpperCase(Locale.ENGLISH);

  int firstWhiteSpace;

  for (firstWhiteSpace=0; firstWhiteSpace < uc.length(); firstWhiteSpace++) {

    if (Character.isWhitespace(uc.charAt(firstWhiteSpace))) {

      break;

    }

  }

  StringBuffer replyString=new StringBuffer(uc.substring(0,firstWhiteSpace));

  String keyword=replyString.toString();

  if (keyword.equals("UPDATE") || keyword.equals("DELETE")) {

    replyString.append(" " + retval);

  }

 else   if (keyword.equals("CREATE") || keyword.equals("DROP")) {

    int wordStart;

    for (wordStart=firstWhiteSpace; wordStart < uc.length(); wordStart++) {

      if (!Character.isWhitespace(uc.charAt(wordStart))) {

        break;

      }

    }

    int wordEnd;

    for (wordEnd=wordStart; wordEnd < uc.length(); wordEnd++) {

      if (!Character.isWhitespace(uc.charAt(wordEnd))) {

        break;

      }

    }

    replyString.append(" " + uc.substring(wordStart,wordEnd));

  }

 else   if (keyword.equals("INSERT")) {

    replyString.append(" " + 0 + ' '+ retval);

  }

  return replyString.toString();

}

Location: OdbcUtil.java

Content: 

/** 

 * Temporary hack. This ID should stick with the table column.  Here, it will change based on user-specified column label. The int has is also being truncated into a short.

 */

public static short getIdForColumn(int colIndex,ResultMetaData md){

  if (!md.isTableColumn(colIndex)) {

    return 0;

  }

  short hashCode=(short)md.getGeneratedColumnNames()[colIndex].hashCode();

  if (hashCode < 0) {

    hashCode*=-1;

  }

  return hashCode;

}

Location: OdbcUtil.java

Content: 

public static int getTableOidForColumn(int colIndex,ResultMetaData md){

  if (!md.isTableColumn(colIndex)) {

    return 0;

  }

  ColumnBase col=md.columns[colIndex];

  int hashCode=(col.getSchemaNameString() + '.' + col.getTableNameString()).hashCode();

  if (hashCode < 0) {

    hashCode*=-1;

  }

  return hashCode;

}

Location: OdbcUtil.java

Content: 

/** 

 * @param hexChars A String containing an EVEN number of hexcharacters.

 */

public static String hexCharsToOctalOctets(String hexChars){

  int chars=hexChars.length();

  if (chars != (chars / 2) * 2) {

    throw new IllegalArgumentException("Hex character lists contains " + "an odd number of characters: " + chars);

  }

  StringBuffer sb=new StringBuffer();

  char c;

  int octet;

  for (int i=0; i < chars; i++) {

    octet=0;

    c=hexChars.charAt(i);

    if (c >= 'a' && c <= 'f') {

      octet+=10 + c - 'a';

    }

 else     if (c >= 'A' && c <= 'F') {

      octet+=10 + c - 'A';

    }

 else     if (c >= '0' && c <= '9') {

      octet+=c - '0';

    }

 else {

      throw new IllegalArgumentException("Non-hex character in input at offset " + i + ": "+ c);

    }

    octet=octet << 4;

    c=hexChars.charAt(++i);

    if (c >= 'a' && c <= 'f') {

      octet+=10 + c - 'a';

    }

 else     if (c >= 'A' && c <= 'F') {

      octet+=10 + c - 'A';

    }

 else     if (c >= '0' && c <= '9') {

      octet+=c - '0';

    }

 else {

      throw new IllegalArgumentException("Non-hex character in input at offset " + i + ": "+ c);

    }

    sb.append('\\');

    sb.append((char)('0' + (octet >> 6)));

    sb.append((char)('0' + ((octet >> 3) & 7)));

    sb.append((char)('0' + (octet & 7)));

  }

  return sb.toString();

}

Location: OdbcUtil.java

Content: 

/** 

 * TODO:  Eliminate the mungling on the client-side instead of attempting very problematic correction here!

 */

static String revertMungledPreparedQuery(String inQuery){

  return inQuery.replaceAll("\\$\\d+","?");

}

Location: OdbcUtil.java

Content: 

static void validateInputPacketSize(OdbcPacketInputStream p) throws RecoverableOdbcFailure {

  int remaining=-1;

  try {

    remaining=p.available();

  }

 catch (  IOException ioe) {

  }

  if (remaining < 1) {

    return;

  }

  throw new RecoverableOdbcFailure("Client supplied bad length for " + p.packetType + " packet.  "+ remaining+ " bytes available after processing","Bad length for " + p.packetType + " packet.  "+ remaining+ " extra bytes","08P01");

}

Location: OdbcUtil.java

Content: 

static void writeParam(String key,String val,DataOutputStream hOutStream) throws IOException {

  OdbcPacketOutputStream alertPacket=OdbcPacketOutputStream.newOdbcPacketOutputStream();

  alertPacket.write(key);

  alertPacket.write(val);

  alertPacket.xmit('S',hOutStream);

  alertPacket.close();

}

