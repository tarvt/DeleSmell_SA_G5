Location: CountUpDownLatch.java

Content: 

/** 

 * Causes the current thread to wait until  {@code count} reaches zero,unless the thread is  {@linkplain Thread#interrupt interrupted}. <p> If the current  {@code count} is already zero, then this method returnsimmediately. <p> <p> If the current  {@code count} is greater than zero, then the currentthread becomes disabled for thread scheduling purposes and lies dormant until either: <ul> <li>The count reaches zero due an invocation of  {@link #countDown() countDown()},  {@link #countDown(int) countDown(int}}, or  {@link

     * setCount(int) setCount(int)}. <li>Some other thread  {@linkplain Thread#interrupt interrupts} thecurrent thread. </ul> If the current thread: <ul> <li>has its interrupted status set on entry to this method; or <li>is  {@linkplain Thread#interrupt interrupted} while waiting,</ul> then  {@link InterruptedException} is thrown and the current thread'sinterrupted status is cleared.

 * @throws InterruptedException if the current thread is interruptedwhile waiting

 */

public void await() throws InterruptedException {

  sync.acquireSharedInterruptibly(1);

}

Location: CountUpDownLatch.java

Content: 

/** 

 * Causes the current thread to wait until  {@code count} reaches zero,unless the thread is  {@linkplain Thread#interrupt interrupted}, or the specified waiting time elapses. <p> <p> If the current  {@code count} is zero, then this method returnsimmediately with the value  {@code true}. <p> <p> If the current  {@code count} is greater than zero, then the currentthread becomes disabled for thread scheduling purposes and lies dormant until either: <ul> <li>The  {@code count} reaches zero due to an invocation of {@link #countDown countDown()},  {@link #countDown(int) countDown(int}}, or {@link setCount(int) setCount(int)}<li>Some other thread  {@linkplain Thread#interrupt interrupts} thecurrent thread <li>The specified waiting time elapses. </ul> If the count reaches zero then the method returns with the value {@code true}. <p> If the current thread: <ul> <li>has its interrupted status set on entry to this method; or <li>is  {@linkplain Thread#interrupt interrupted} while waiting,</ul> then  {@link InterruptedException} is thrown and the current thread'sinterrupted status is cleared. <p> If the specified waiting time elapses then the value  {@code false} isreturned. If the time is less than or equal to zero, the method will not wait at all.

 * @param timeout the maximum time to wait

 * @param unit    the time unit of the {@code timeout} argument

 * @return {@code true} if the count reached zero and {@code false} if thewaiting time elapsed before the count reached zero

 * @throws InterruptedException if the current thread is interrupted whilewaiting

 */

public boolean await(long timeout,TimeUnit unit) throws InterruptedException {

  return sync.tryAcquireSharedNanos(1,unit.toNanos(timeout));

}

Location: CountUpDownLatch.java

Content: 

/** 

 * Decrements the count of the latch, releasing all waiting threads if the count transitions to zero. <p> If the current count is zero, no action occurs and false is returned immediately;

 * @return {@code true} if {@code count} transitions to zero

 */

public boolean countDown(){

  return sync.countDown();

}

Location: CountUpDownLatch.java

Content: 

/** 

 * Decrements the  {@code count} of the latch by the given {@code amount}, releasing all waiting threads if  {@code count} transitions to zero.<p> If the current  {@code count} is zero, no action occurs and false isreturned immediately; otherwise,  {@code count} is decremented by thelesser of  {@code amount} and current {@code count} (i.e. if{@code amount} is greater than current {@code count}, then new {@code count} is zero, else new {@code count} is current {@code count}minus  {@code amount}.

 * @param amount by which to decrement the {@code count}

 * @return {@code true} if {@code count} transitions to zero

 * @throws IllegalArgumentException when {@code amount} is non-positive

 */

public boolean countDown(int amount){

  return sync.countDown(amount);

}

Location: CountUpDownLatch.java

Content: 

/** 

 * Increments the count of the latch. <p>

 * @return {@code true} if {@code count} transitioned from zero to a newvalue

 * @throws ArithmeticException when the operation would otherwise cause asilent numeric overflow, resulting in a negative  {@code count}.

 */

public boolean countUp(){

  return sync.countUp();

}

Location: CountUpDownLatch.java

Content: 

/** 

 * Default constructor. <p> Equivalent to  {@code new}{@link CountUpDownLatch(int) CountUpDownLatch}{@code (0)}

 */

public CountUpDownLatch(){

  this(0);

}

Location: CountUpDownLatch.java

Content: 

/** 

 * Constructs a new  {@code CountUpDownLatch} initialized with the given{@code initialCount}.

 * @param initialCount the initial {@code count}

 * @throws IllegalArgumentException if {@code initialCount} is negative

 */

public CountUpDownLatch(int initialCount){

  if (initialCount < 0) {

    throw new IllegalArgumentException("count < 0");

  }

  this.sync=new Sync(initialCount);

}

Location: CountUpDownLatch.java

Content: 

/** 

 * Increments the count of the latch by the given  {@code amount}. <p>

 * @param amount by which to increment {@code count}

 * @return {@code true} if {@code count} transitioned from zero to a newvalue

 * @throws ArithmeticException      when the operation would otherwise causea silent numeric overflow, resulting in a negative  {@code count}.

 * @throws IllegalArgumentException if {@code amount is less than one)}

 */

public boolean countUp(int amount){

  return sync.countUp(amount);

}

Location: CountUpDownLatch.java

Content: 

/** 

 * Returns true if and only if  {@code this} and {@code obj} refer to thesame object ( {@code this == obj} has the value {@code true}).

 * @param other to test.

 * @return if and only if {@code this == obj}

 */

public boolean equals(final CountUpDownLatch other){

  return this == other;

}

Location: CountUpDownLatch.java

Content: 

/** 

 * Returns the current count. <p> Because another thread may update  {@code count} at any time, typicallythis should not be used to compute input values for any of the @{code count} mutating methods and instead should be reserved for debugging and testing purposes (e.g. to assert that the current count is the expected count, given a set of know operations has occurred and given that it is known no other threads could be updating the count)

 * @return the current count

 */

public int getCount(){

  return sync.getCount();

}

Location: CountUpDownLatch.java

Content: 

/** 

 * Updates  {@code count} to the requested {@code newCount}, returning {@code true} on transition to zero.<p> If  {@code newCount} is zero and the current }@code count is zero}, noaction occurs and false is returned immediately. immediately;

 * @param newCount to which to update {@code count}; must be non-negative.

 * @return {@code true} if {@code count} transitions to zero.

 * @throws IllegalArgumentException when {@code newCount} is negative

 */

public boolean setCount(int newCount){

  return sync.setCount(newCount);

}

