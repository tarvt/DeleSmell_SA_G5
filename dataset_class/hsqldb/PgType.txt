Location: PgType.java

Content: 

public int getLPConstraint(){

  return lpConstraint;

}

Location: PgType.java

Content: 

public int getOid(){

  return oid;

}

Location: PgType.java

Content: 

/** 

 * This method copied from JDBCPreparedStatement.java. The internal parameter value setter always converts the parameter to the Java type required for data transmission. <P> This method will not be called for binary types.  Binary values are just loaded directly into the Object parameter array. </P>

 * @throws SQLException if either argument is not acceptable.

 */

public Object getParameter(String inString,Session session) throws SQLException, RecoverableOdbcFailure {

  if (inString == null) {

    return null;

  }

  Object o=inString;

switch (hType.typeCode) {

case Types.SQL_BOOLEAN:

    if (inString.length() == 1) switch (inString.charAt(0)) {

case 'T':

case 't':

case 'Y':

case 'y':

case '1':

      return Boolean.TRUE;

default :

    return Boolean.FALSE;

}

return Boolean.valueOf(inString);

case Types.SQL_BINARY:

case Types.SQL_VARBINARY:

case Types.SQL_BLOB:

throw new RecoverableOdbcFailure("This data type should be transmitted to server in binary " + "format: " + hType.getNameString());

case Types.OTHER:

case Types.SQL_CLOB:

throw new RecoverableOdbcFailure("Type not supported yet: " + hType.getNameString());

case Types.SQL_DATE:

case Types.SQL_TIME_WITH_TIME_ZONE:

case Types.SQL_TIMESTAMP_WITH_TIME_ZONE:

case Types.SQL_TIME:

case Types.SQL_TIMESTAMP:

{

try {

o=hType.convertToType(session,o,Type.SQL_VARCHAR);

}

 catch (HsqlException e) {

PgType.throwError(e);

}

break;

}

case Types.TINYINT:

case Types.SQL_SMALLINT:

case Types.SQL_INTEGER:

case Types.SQL_BIGINT:

case Types.SQL_REAL:

case Types.SQL_FLOAT:

case Types.SQL_DOUBLE:

case Types.SQL_NUMERIC:

case Types.SQL_DECIMAL:

try {

o=hType.convertToType(session,o,Type.SQL_VARCHAR);

}

 catch (HsqlException e) {

PgType.throwError(e);

}

break;

default :

try {

o=hType.convertToDefaultType(session,o);

}

 catch (HsqlException e) {

PgType.throwError(e);

}

break;

}

return o;

}

Location: PgType.java

Content: 

public static PgType getPgType(Type hType,boolean directColumn) throws RecoverableOdbcFailure {

switch (hType.typeCode) {

case Types.TINYINT:

    return tinyIntSingleton;

case Types.SQL_SMALLINT:

  return int2singleton;

case Types.SQL_INTEGER:

return int4singleton;

case Types.SQL_BIGINT:

return int8singleton;

case Types.SQL_NUMERIC:

case Types.SQL_DECIMAL:

return new PgType(hType,TYPE_NUMERIC,null,(hType.precision << 16) + hType.scale + 4);

case Types.SQL_FLOAT:

case Types.SQL_DOUBLE:

case Types.SQL_REAL:

return doubleSingleton;

case Types.BOOLEAN:

return boolSingleton;

case Types.SQL_CHAR:

if (directColumn) {

return new PgType(hType,TYPE_BPCHAR,null,hType.precision + 4);

}

return unknownSingleton;

case Types.SQL_VARCHAR:

if (hType.precision < 0) {

throw new RecoverableOdbcFailure("Length/Precision value is below minimum value of 0");

}

if (hType.precision > Integer.MAX_VALUE) {

throw new RecoverableOdbcFailure("Length/Precision value is above maximum value of " + Integer.MAX_VALUE);

}

return (hType.precision != 0 && directColumn) ? new PgType(hType,TYPE_VARCHAR,null,hType.precision + 4) : textSingleton;

case Types.SQL_CLOB:

throw new RecoverableOdbcFailure("Driver doesn't support type 'CLOB' yet");

case Types.SQL_BLOB:

return new PgType(hType,TYPE_BLOB,null,hType.precision);

case Types.SQL_BINARY:

case Types.SQL_VARBINARY:

return new PgType(hType,TYPE_BYTEA,null,hType.precision);

case Types.OTHER:

throw new RecoverableOdbcFailure("Driver doesn't support type 'OTHER' yet");

case Types.SQL_BIT:

return bitSingleton;

case Types.SQL_BIT_VARYING:

return bitVaryingSingleton;

case Types.SQL_DATE:

return dateSingleton;

case Types.SQL_TIME:

return new PgType(hType,TYPE_TIME,Integer.valueOf(8),hType.precision);

case Types.SQL_TIME_WITH_TIME_ZONE:

return new PgType(hType,TYPE_TIME_WITH_TMZONE,Integer.valueOf(12),hType.precision);

case Types.SQL_TIMESTAMP:

return new PgType(hType,TYPE_TIMESTAMP_NO_TMZONE,Integer.valueOf(8),hType.precision);

case Types.SQL_TIMESTAMP_WITH_TIME_ZONE:

return new PgType(hType,TYPE_TIMESTAMP,Integer.valueOf(8),hType.precision);

case Types.SQL_INTERVAL_YEAR:

case Types.SQL_INTERVAL_YEAR_TO_MONTH:

case Types.SQL_INTERVAL_MONTH:

throw new RecoverableOdbcFailure("Driver doesn't support month-resolution 'INTERVAL's yet");

case Types.SQL_INTERVAL_DAY:

case Types.SQL_INTERVAL_DAY_TO_HOUR:

case Types.SQL_INTERVAL_DAY_TO_MINUTE:

case Types.SQL_INTERVAL_HOUR:

case Types.SQL_INTERVAL_HOUR_TO_MINUTE:

case Types.SQL_INTERVAL_MINUTE:

throw new RecoverableOdbcFailure("Driver doesn't support non-second-resolution 'INTERVAL's " + "yet");

case Types.SQL_INTERVAL_DAY_TO_SECOND:

PgType.ignoredConstraintWarning(hType);

return daySecIntervalSingleton;

case Types.SQL_INTERVAL_HOUR_TO_SECOND:

PgType.ignoredConstraintWarning(hType);

return hourSecIntervalSingleton;

case Types.SQL_INTERVAL_MINUTE_TO_SECOND:

PgType.ignoredConstraintWarning(hType);

return minSecIntervalSingleton;

case Types.SQL_INTERVAL_SECOND:

PgType.ignoredConstraintWarning(hType);

return secIntervalSingleton;

default :

throw new RecoverableOdbcFailure("Unsupported type: " + hType.getNameString());

}

}

Location: PgType.java

Content: 

public int getTypeWidth(){

  return typeWidth;

}

Location: PgType.java

Content: 

static private void ignoredConstraintWarning(Type hsqldbType){

  if (hsqldbType.precision == 0 && hsqldbType.scale == 0) {

    return;

  }

}

Location: PgType.java

Content: 

/** 

 * Convenience wrapper for PgType constructor, when there is no type width, length, or precision setting for the type.

 * @see #PgType(Type,int,Integer,Integer)

 */

protected PgType(Type hType,int oid){

  this(hType,oid,null,null);

}

Location: PgType.java

Content: 

/** 

 * Convenience wrapper for PgType constructor, when there is no length or precision setting for the type.

 * @see #PgType(Type,int,Integer,Integer)

 */

protected PgType(Type hType,int oid,int typeWidth){

  this(hType,oid,Integer.valueOf(typeWidth),null);

}

Location: PgType.java

Content: 

/** 

 * @param hType HyperSQL data type

 * @param oid Numeric Object ID for the driver-side type.

 * @param typeWidthObject Fixed width for the type

 * @param lpConstraintObject Either length or Precision setting for thisinstance of the type. <b>IMPORTANT!</b> for all types with positive lpConstraint other than Timestamps and Times, add an extra 4 to satisfy crazy driver protocol.

 */

protected PgType(Type hType,int oid,Integer typeWidthObject,Integer lpConstraintObject){

  this.hType=hType;

  this.oid=oid;

  this.typeWidth=(typeWidthObject == null) ? -1 : typeWidthObject.intValue();

  this.lpConstraint=(lpConstraintObject == null) ? -1 : lpConstraintObject.intValue();

}

Location: PgType.java

Content: 

/** 

 * Convenience wrapper for PgType constructor, when there is no fixed width for the type.

 * @param dummy Normally pass null.  This is a dummy parameter just to makea unique method signature.  If non-null, will be treated exactly the same as the typeWidthObject from the 3-param constructor.

 * @see #PgType(Type,int,Integer,Integer)

 */

protected PgType(Type hType,int oid,Integer dummy,long lpConstraint) throws RecoverableOdbcFailure {

  this(hType,oid,dummy,Integer.valueOf((int)lpConstraint));

  if (lpConstraint < 0) {

    throw new RecoverableOdbcFailure("Length/Precision value is below minimum value of 0");

  }

  if (lpConstraint > Integer.MAX_VALUE) {

    throw new RecoverableOdbcFailure("Length/Precision value is above maximum value of " + Integer.MAX_VALUE);

  }

}

Location: PgType.java

Content: 

static void throwError(HsqlException e) throws SQLException {

  throw JDBCUtil.sqlException(e.getMessage(),e.getSQLState(),e.getErrorCode(),e);

}

Location: PgType.java

Content: 

public String valueString(Object datum){

  String dataString=hType.convertToString(datum);

switch (hType.typeCode) {

case Types.SQL_BOOLEAN:

    return String.valueOf(((Boolean)datum).booleanValue() ? 't' : 'f');

case Types.SQL_VARBINARY:

case Types.SQL_BINARY:

  dataString=OdbcUtil.hexCharsToOctalOctets(dataString);

break;

}

return dataString;

}

