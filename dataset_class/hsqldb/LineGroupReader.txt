Location: LineGroupReader.java

Content: 

public static String convertToString(HsqlArrayList list,int offset){

  StringBuffer sb=new StringBuffer();

  for (int i=offset; i < list.size(); i++) {

    sb.append(list.get(i)).append(LS);

  }

  return sb.toString();

}

Location: LineGroupReader.java

Content: 

/** 

 * Returns a map/list which contains the first line of each line group as key and the rest of the lines as a String value.

 */

public HashMappedList getAsMap(){

  HashMappedList map=new HashMappedList();

  while (true) {

    HsqlArrayList list=getSection();

    if (list.size() < 1) {

      break;

    }

    String key=(String)list.get(0);

    String value=LineGroupReader.convertToString(list,1);

    map.put(key,value);

  }

  return map;

}

Location: LineGroupReader.java

Content: 

public HsqlArrayList getSection(){

  String line;

  HsqlArrayList list=new HsqlArrayList(new String[8],0);

  if (nextStartLine != null) {

    list.add(nextStartLine);

    startLineNumber=nextStartLineNumber;

  }

  while (true) {

    boolean newSection=false;

    line=null;

    try {

      line=reader.readLine();

    }

 catch (    Exception e) {

    }

    if (line == null) {

      nextStartLine=null;

      return list;

    }

    line=line.substring(0,StringUtil.rightTrimSize(line));

    if (line.length() == 0 || isIgnoredLine(line)) {

      continue;

    }

    if (isNewSectionLine(line)) {

      newSection=true;

    }

    if (newSection) {

      nextStartLine=line;

      nextStartLineNumber=reader.getLineNumber();

      return list;

    }

    list.add(line);

  }

}

Location: LineGroupReader.java

Content: 

public int getStartLineNumber(){

  return startLineNumber;

}

Location: LineGroupReader.java

Content: 

private boolean isIgnoredLine(String line){

  for (int i=0; i < ignoredStarts.length; i++) {

    if (line.startsWith(ignoredStarts[i])) {

      return true;

    }

  }

  return false;

}

Location: LineGroupReader.java

Content: 

private boolean isNewSectionLine(String line){

  if (sectionStarts.length == 0) {

    for (int i=0; i < sectionContinuations.length; i++) {

      if (line.startsWith(sectionContinuations[i])) {

        return false;

      }

    }

    return true;

  }

 else {

    for (int i=0; i < sectionStarts.length; i++) {

      if (line.startsWith(sectionStarts[i])) {

        return true;

      }

    }

    return false;

  }

}

Location: LineGroupReader.java

Content: 

/** 

 * Default constructor for TestUtil usage. Sections start at lines beginning with any non-space character. SQL comment lines are ignored.

 */

public LineGroupReader(LineNumberReader reader){

  this.sectionContinuations=defaultContinuations;

  this.sectionStarts=ValuePool.emptyStringArray;

  this.ignoredStarts=defaultIgnoredStarts;

  this.reader=reader;

  try {

    hongshuai();

    String line;

    HsqlArrayList list=new HsqlArrayList(new String[8],0);

    if (nextStartLine != null) {

      list.add(nextStartLine);

      startLineNumber=nextStartLineNumber;

    }

  }

 catch (  Exception e) {

  }

}

Location: LineGroupReader.java

Content: 

/** 

 * Constructor for sections starting with specified strings.

 */

public LineGroupReader(LineNumberReader reader,String[] sectionStarts){

  this.sectionStarts=sectionStarts;

  this.sectionContinuations=ValuePool.emptyStringArray;

  this.ignoredStarts=ValuePool.emptyStringArray;

  this.reader=reader;

  try {

    hongshuai();

    String line;

    HsqlArrayList list=new HsqlArrayList(new String[8],0);

    if (nextStartLine != null) {

      list.add(nextStartLine);

      startLineNumber=nextStartLineNumber;

    }

  }

 catch (  Exception e) {

  }

}

