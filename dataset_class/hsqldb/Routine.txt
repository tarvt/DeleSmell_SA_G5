Location: Routine.java

Content: 

public void addParameter(ColumnSchema param){

  HsqlName name=param.getName();

  String paramName=name == null ? HsqlNameManager.getAutoNoNameColumnString(parameterList.size()) : name.name;

  parameterList.add(paramName,param);

}

Location: Routine.java

Content: 

void checkSQLData(Session session){

  OrderedHashSet set=statement.getReferences();

  for (int i=0; i < set.size(); i++) {

    HsqlName name=(HsqlName)set.get(i);

    if (name.type == SchemaObject.SPECIFIC_ROUTINE) {

      Routine routine=(Routine)session.database.schemaManager.getSchemaObject(name);

      if (routine.dataImpact == Routine.READS_SQL) {

        if (dataImpact == Routine.CONTAINS_SQL) {

          throw Error.error(ErrorCode.X_42608,Tokens.T_READS + ' ' + Tokens.T_SQL);

        }

      }

 else       if (routine.dataImpact == Routine.MODIFIES_SQL) {

        if (dataImpact == Routine.CONTAINS_SQL || dataImpact == Routine.READS_SQL) {

          throw Error.error(ErrorCode.X_42608,Tokens.T_MODIFIES + ' ' + Tokens.T_SQL);

        }

      }

    }

  }

  if (dataImpact == Routine.CONTAINS_SQL || dataImpact == Routine.READS_SQL) {

    HsqlName[] names=statement.getTableNamesForWrite();

    for (int i=0; i < names.length; i++) {

      if (names[i].schema != SqlInvariants.MODULE_HSQLNAME) {

        throw Error.error(ErrorCode.X_42608,Tokens.T_MODIFIES + ' ' + Tokens.T_SQL);

      }

    }

  }

  if (dataImpact == Routine.CONTAINS_SQL) {

    HsqlName[] names=statement.getTableNamesForRead();

    for (int i=0; i < names.length; i++) {

      if (names[i].schema != SqlInvariants.MODULE_HSQLNAME) {

        throw Error.error(ErrorCode.X_42608,Tokens.T_READS + ' ' + Tokens.T_SQL);

      }

    }

  }

}

Location: Routine.java

Content: 

Object[] convertArgsToJava(Session session,Object[] callArguments){

  int extraArg=javaMethodWithConnection ? 1 : 0;

  Object[] data=new Object[javaMethod.getParameterTypes().length];

  Type[] types=getParameterTypes();

  int i=0;

  for (; i < types.length; i++) {

    Object value=callArguments[i];

    ColumnSchema param=getParameter(i);

    if (param.parameterMode == SchemaObject.ParameterModes.PARAM_IN) {

      data[i + extraArg]=types[i].convertSQLToJava(session,value);

    }

 else {

      Object jdbcValue=types[i].convertSQLToJava(session,value);

      Class cl=types[i].getJDBCClass();

      Object array=java.lang.reflect.Array.newInstance(cl,1);

      java.lang.reflect.Array.set(array,0,jdbcValue);

      data[i + extraArg]=array;

    }

  }

  for (; i + extraArg < data.length; i++) {

    data[i + extraArg]=new java.sql.ResultSet[1];

  }

  return data;

}

Location: Routine.java

Content: 

void convertArgsToSQL(Session session,Object[] callArguments,Object[] data){

  int extraArg=javaMethodWithConnection ? 1 : 0;

  Type[] types=getParameterTypes();

  int i=0;

  for (; i < types.length; i++) {

    Object value=data[i + extraArg];

    ColumnSchema param=getParameter(i);

    if (param.parameterMode != SchemaObject.ParameterModes.PARAM_IN) {

      value=java.lang.reflect.Array.get(value,0);

    }

    callArguments[i]=types[i].convertJavaToSQL(session,value);

  }

  Result head=null;

  for (; i + extraArg < data.length; i++) {

    ResultSet rs=((ResultSet[])data[i + extraArg])[0];

    if (rs != null) {

      if (rs instanceof JDBCResultSet) {

        Result r=((JDBCResultSet)rs).result;

        if (head == null) {

          callArguments[i]=r;

          head=r;

        }

 else {

          head.addChainedResult(r);

        }

      }

 else {

        throw Error.error(ErrorCode.X_46000,"ResultSet not native");

      }

    }

  }

}

Location: Routine.java

Content: 

public static void createRoutines(Session session,HsqlName schema,String name){

  Method[] methods=Routine.getMethods(name);

  Routine[] routines=Routine.newRoutines(session,methods);

  HsqlName routineName=session.database.nameManager.newHsqlName(schema,name,true,SchemaObject.FUNCTION);

  for (int i=0; i < routines.length; i++) {

    routines[i].setName(routineName);

    session.database.schemaManager.addSchemaObject(routines[i]);

  }

}

Location: Routine.java

Content: 

public int getCursorCount(){

  return cursorCount;

}

Location: Routine.java

Content: 

public int getDataImpact(){

  return dataImpact;

}

Location: Routine.java

Content: 

public String getDataImpactString(){

  StringBuffer sb=new StringBuffer();

switch (dataImpact) {

case NO_SQL:

    sb.append(Tokens.T_NO).append(' ').append(Tokens.T_SQL);

  break;

case CONTAINS_SQL:

sb.append(Tokens.T_CONTAINS).append(' ').append(Tokens.T_SQL);

break;

case READS_SQL:

sb.append(Tokens.T_READS).append(' ').append(Tokens.T_SQL).append(' ').append(Tokens.T_DATA);

break;

case MODIFIES_SQL:

sb.append(Tokens.T_MODIFIES).append(' ').append(Tokens.T_SQL).append(' ').append(Tokens.T_DATA);

break;

}

return sb.toString();

}

Location: Routine.java

Content: 

private String getDefinitionSQL(boolean withBody){

  StringBuffer sb=new StringBuffer();

  sb.append(Tokens.T_CREATE).append(' ');

  if (isAggregate) {

    sb.append(Tokens.T_AGGREGATE).append(' ');

  }

  if (routineType == SchemaObject.PROCEDURE) {

    sb.append(Tokens.T_PROCEDURE);

  }

 else {

    sb.append(Tokens.T_FUNCTION);

  }

  sb.append(' ');

  sb.append(name.getSchemaQualifiedStatementName());

  sb.append('(');

  for (int i=0; i < parameterList.size(); i++) {

    if (i > 0) {

      sb.append(',');

    }

    ColumnSchema param=(ColumnSchema)parameterList.get(i);

    sb.append(param.getSQL());

  }

  sb.append(')');

  sb.append(' ');

  if (routineType == SchemaObject.FUNCTION) {

    sb.append(Tokens.T_RETURNS);

    sb.append(' ');

    if (returnsTable) {

      sb.append(Tokens.T_TABLE);

      sb.append(returnTable.getColumnListWithTypeSQL());

    }

 else {

      sb.append(returnType.getTypeDefinition());

    }

    sb.append(' ');

  }

  if (specificName != null) {

    sb.append(Tokens.T_SPECIFIC);

    sb.append(' ');

    sb.append(specificName.getStatementName());

    sb.append(' ');

  }

  sb.append(Tokens.T_LANGUAGE);

  sb.append(' ');

  if (language == LANGUAGE_JAVA) {

    sb.append(Tokens.T_JAVA);

  }

 else {

    sb.append(Tokens.T_SQL);

  }

  sb.append(' ');

  if (!isDeterministic) {

    sb.append(Tokens.T_NOT);

    sb.append(' ');

  }

  sb.append(Tokens.T_DETERMINISTIC);

  sb.append(' ');

  sb.append(getDataImpactString());

  sb.append(' ');

  if (routineType == SchemaObject.FUNCTION) {

    if (isNullInputOutput) {

      sb.append(Tokens.T_RETURNS).append(' ').append(Tokens.T_NULL);

    }

 else {

      sb.append(Tokens.T_CALLED);

    }

    sb.append(' ').append(Tokens.T_ON).append(' ');

    sb.append(Tokens.T_NULL).append(' ').append(Tokens.T_INPUT);

    sb.append(' ');

  }

 else {

    if (isNewSavepointLevel) {

      sb.append(Tokens.T_NEW);

    }

 else {

      sb.append(Tokens.T_OLD);

    }

    sb.append(' ').append(Tokens.T_SAVEPOINT).append(' ');

    sb.append(Tokens.T_LEVEL).append(' ');

    if (maxDynamicResults != 0) {

      sb.append(' ').append(Tokens.T_DYNAMIC).append(' ');

      sb.append(Tokens.T_RESULT).append(' ').append(Tokens.T_SETS);

      sb.append(' ').append(maxDynamicResults).append(' ');

    }

  }

  if (language == LANGUAGE_JAVA) {

    sb.append(Tokens.T_EXTERNAL).append(' ').append(Tokens.T_NAME);

    sb.append(' ').append('\'').append(methodName).append('\'');

  }

 else {

    if (withBody) {

      sb.append(statement.getSQL());

    }

 else {

      sb.append(Tokens.T_SIGNAL).append(' ');

      sb.append(Tokens.T_SQLSTATE).append(' ');

      sb.append('\'').append("45000").append('\'');

    }

  }

  return sb.toString();

}

Location: Routine.java

Content: 

public String getExternalName(){

  if (language == LANGUAGE_JAVA) {

    return methodName;

  }

 else {

    return null;

  }

}

Location: Routine.java

Content: 

public int getLanguage(){

  return language;

}

Location: Routine.java

Content: 

public int getMaxDynamicResults(){

  return maxDynamicResults;

}

Location: Routine.java

Content: 

public Method getMethod(){

  return javaMethod;

}

Location: Routine.java

Content: 

static Method[] getMethods(String name){

  int i=name.lastIndexOf('.');

  if (i == -1) {

    throw Error.error(ErrorCode.X_42501,name);

  }

  String className=name.substring(0,i);

  String methodname=name.substring(i + 1);

  Class cl;

  Method[] methods=null;

  if (!HsqlDatabaseProperties.supportsJavaMethod(name)) {

    throw Error.error(ErrorCode.X_42501,className);

  }

  try {

    cl=Class.forName(className,true,Thread.currentThread().getContextClassLoader());

  }

 catch (  Throwable t1) {

    try {

      cl=Class.forName(className);

    }

 catch (    Throwable t) {

      throw Error.error(t,ErrorCode.X_42501,ErrorCode.M_Message_Pair,new Object[]{t.toString(),className});

    }

  }

  try {

    methods=cl.getMethods();

  }

 catch (  Throwable t) {

    throw Error.error(t,ErrorCode.X_42501,ErrorCode.M_Message_Pair,new Object[]{t.toString(),className});

  }

  HsqlArrayList list=new HsqlArrayList();

  for (i=0; i < methods.length; i++) {

    int offset=0;

    int endIndex=Integer.MAX_VALUE;

    Method method=methods[i];

    int modifiers=method.getModifiers();

    if (!method.getName().equals(methodname) || !Modifier.isStatic(modifiers) || !Modifier.isPublic(modifiers)) {

      continue;

    }

    Class[] params=methods[i].getParameterTypes();

    if (params.length > 0 && params[0].equals(java.sql.Connection.class)) {

      offset=1;

    }

    for (int j=offset; j < params.length; j++) {

      Class param=params[j];

      if (param.isArray()) {

        if (!byte[].class.equals(param)) {

          param=param.getComponentType();

          if (param.isPrimitive()) {

            method=null;

            break;

          }

          if (java.sql.ResultSet.class.isAssignableFrom(param)) {

            if (endIndex > j) {

              endIndex=j;

            }

          }

        }

        if (j >= endIndex) {

          if (java.sql.ResultSet.class.isAssignableFrom(param)) {

            continue;

          }

 else {

            method=null;

            break;

          }

        }

      }

 else {

        if (j > endIndex) {

          method=null;

          break;

        }

      }

      Type methodParamType=Types.getParameterSQLType(param);

      if (methodParamType == null) {

        method=null;

        break;

      }

    }

    if (method == null) {

      continue;

    }

    if (java.sql.ResultSet.class.isAssignableFrom(method.getReturnType())) {

      list.add(methods[i]);

    }

 else {

      Type methodReturnType=Types.getParameterSQLType(method.getReturnType());

      if (methodReturnType != null) {

        list.add(methods[i]);

      }

    }

  }

  methods=new Method[list.size()];

  list.toArray(methods);

  return methods;

}

Location: Routine.java

Content: 

static Method getMethod(String name,Routine routine,boolean[] hasConnection,boolean returnsTable){

  int i=name.indexOf(':');

  if (i != -1) {

    if (!name.substring(0,i).equals(SqlInvariants.CLASSPATH_NAME)) {

      throw Error.error(ErrorCode.X_46102,name);

    }

    name=name.substring(i + 1);

  }

  Method[] methods=getMethods(name);

  int firstMismatch=-1;

  for (i=0; i < methods.length; i++) {

    int offset=0;

    hasConnection[0]=false;

    Method method=methods[i];

    Class[] params=method.getParameterTypes();

    int matchedParamCount;

    if (params.length > 0 && params[0].equals(java.sql.Connection.class)) {

      offset=1;

      hasConnection[0]=true;

    }

    matchedParamCount=params.length - offset;

    if (routine.isProcedure()) {

      for (int j=offset; j < params.length; j++) {

        if (params[j].isArray() && java.sql.ResultSet.class.isAssignableFrom(params[j].getComponentType())) {

          matchedParamCount=j - offset;

          break;

        }

      }

    }

    if (matchedParamCount != routine.parameterTypes.length) {

      continue;

    }

    if (returnsTable) {

      if (!java.sql.ResultSet.class.isAssignableFrom(method.getReturnType())) {

        continue;

      }

    }

 else {

      Type methodReturnType=Types.getParameterSQLType(method.getReturnType());

      if (methodReturnType == null) {

        continue;

      }

      if (!routine.returnType.canBeAssignedFrom(methodReturnType)) {

        continue;

      }

      if (!methodReturnType.isLobType() && (methodReturnType.isBinaryType() || methodReturnType.isCharacterType())) {

      }

 else {

        int routineRetType=routine.returnType.typeCode;

        if (routineRetType == Types.SQL_NUMERIC) {

          routineRetType=Types.SQL_DECIMAL;

        }

        if (methodReturnType.typeCode != routineRetType) {

          continue;

        }

      }

    }

    for (int j=0; j < routine.parameterTypes.length; j++) {

      boolean isInOut=false;

      Class param=params[j + offset];

      if (param.isArray()) {

        if (!byte[].class.equals(param)) {

          param=param.getComponentType();

          if (param.isPrimitive()) {

            method=null;

            break;

          }

          isInOut=true;

        }

      }

      Type methodParamType=Types.getParameterSQLType(param);

      if (methodParamType == null) {

        method=null;

        break;

      }

      boolean result=routine.parameterTypes[j].typeComparisonGroup == methodParamType.typeComparisonGroup;

      if (result && routine.parameterTypes[j].isNumberType()) {

        int routineParamType=routine.parameterTypes[j].typeCode;

        if (routineParamType == Types.SQL_NUMERIC) {

          routineParamType=Types.SQL_DECIMAL;

        }

        result=routineParamType == methodParamType.typeCode;

      }

      if (isInOut && routine.getParameter(j).parameterMode == SchemaObject.ParameterModes.PARAM_IN) {

        result=false;

      }

      if (!result) {

        method=null;

        if (j + offset > firstMismatch) {

          firstMismatch=j + offset;

        }

        break;

      }

    }

    if (method != null) {

      for (int j=0; j < routine.parameterTypes.length; j++) {

        routine.getParameter(j).setNullable(!params[j + offset].isPrimitive());

      }

      return method;

    }

  }

  if (firstMismatch >= 0) {

    ColumnSchema param=routine.getParameter(firstMismatch);

    throw Error.error(ErrorCode.X_46511,param.getNameString());

  }

  return null;

}

Location: Routine.java

Content: 

public int getParameterCount(int type){

  int count=0;

  for (int i=0; i < parameterList.size(); i++) {

    ColumnSchema col=(ColumnSchema)parameterList.get(i);

    if (col.getParameterMode() == type) {

      count++;

    }

  }

  return count;

}

Location: Routine.java

Content: 

public int getParameterIndex(String name){

  return parameterList.getIndex(name);

}

Location: Routine.java

Content: 

int getParameterSignature(){

  return typeGroups;

}

Location: Routine.java

Content: 

public ColumnSchema getParameter(int i){

  return (ColumnSchema)parameterList.get(i);

}

Location: Routine.java

Content: 

public Statement getProcedure(){

  return statement;

}

Location: Routine.java

Content: 

public Type getReturnType(){

  return returnType;

}

Location: Routine.java

Content: 

public HsqlName getSpecificName(){

  return specificName;

}

Location: Routine.java

Content: 

public String getSQLAlter(){

  StringBuffer sb=new StringBuffer();

  sb.append(Tokens.T_ALTER).append(' ').append(Tokens.T_SPECIFIC);

  sb.append(' ').append(Tokens.T_ROUTINE).append(' ');

  sb.append(specificName.getSchemaQualifiedStatementName());

  sb.append(' ').append(Tokens.T_BODY);

  sb.append(' ').append(statement.getSQL());

  return sb.toString();

}

Location: Routine.java

Content: 

public String getSQLBodyDefinition(){

  StringBuffer sb=new StringBuffer();

  if (language == LANGUAGE_JAVA) {

    sb.append(Tokens.T_EXTERNAL).append(' ').append(Tokens.T_NAME);

    sb.append(' ').append('\'').append(methodName).append('\'');

  }

 else {

    sb.append(statement.getSQL());

  }

  return sb.toString();

}

Location: Routine.java

Content: 

public String getSQLDeclaration(){

  return getDefinitionSQL(false);

}

Location: Routine.java

Content: 

public int getVariableCount(){

  return variableCount;

}

Location: Routine.java

Content: 

public Result invokeJavaMethodDirect(Object[] data){

  Result result;

  try {

    Object returnValue=javaMethod.invoke(null,data);

    returnValue=returnType.convertJavaToSQL(null,returnValue);

    result=Result.newPSMResult(returnValue);

  }

 catch (  Throwable t) {

    result=Result.newErrorResult(Error.error(t,ErrorCode.X_46000,getName().name));

  }

  return result;

}

Location: Routine.java

Content: 

Result invokeJavaMethod(Session session,Object[] data){

  Result result;

  HsqlName oldSessionSchema=session.getCurrentSchemaHsqlName();

  try {

    if (dataImpact == Routine.NO_SQL) {

      session.sessionContext.isReadOnly=Boolean.TRUE;

      session.setNoSQL();

    }

 else     if (dataImpact == Routine.CONTAINS_SQL) {

      session.sessionContext.isReadOnly=Boolean.TRUE;

    }

 else     if (dataImpact == Routine.READS_SQL) {

      session.sessionContext.isReadOnly=Boolean.TRUE;

    }

    session.setCurrentSchemaHsqlName(getSchemaName());

    Object returnValue=javaMethod.invoke(null,data);

    if (returnsTable()) {

      if (returnValue instanceof JDBCResultSet) {

        result=((JDBCResultSet)returnValue).result;

      }

 else {

        throw Error.runtimeError(ErrorCode.U_S0500,"FunctionSQLInvoked");

      }

    }

 else {

      returnValue=returnType.convertJavaToSQL(session,returnValue);

      result=Result.newPSMResult(returnValue);

    }

  }

 catch (  InvocationTargetException e) {

    result=Result.newErrorResult(Error.error(e,ErrorCode.X_46000,getName().name));

  }

catch (  IllegalAccessException e) {

    result=Result.newErrorResult(Error.error(e,ErrorCode.X_46000,getName().name));

  }

catch (  Throwable e) {

    result=Result.newErrorResult(Error.error(e,ErrorCode.X_46000,getName().name));

  }

  session.setCurrentSchemaHsqlName(oldSessionSchema);

  return result;

}

Location: Routine.java

Content: 

public Result invoke(Session session,Object[] data,Object[] aggregateData,boolean push){

  Result result;

  if (push) {

    session.sessionContext.pushRoutineInvocation();

  }

  if (isPSM()) {

    try {

      session.sessionContext.routineArguments=data;

      session.sessionContext.routineVariables=ValuePool.emptyObjectArray;

      if (variableCount > 0) {

        session.sessionContext.routineVariables=new Object[variableCount];

      }

      session.sessionContext.routineCursors=Result.emptyArray;

      if (cursorCount > 0) {

        session.sessionContext.routineCursors=new Result[cursorCount];

      }

      result=statement.execute(session);

      if (aggregateData != null) {

        for (int i=0; i < aggregateData.length; i++) {

          aggregateData[i]=data[i + 1];

        }

      }

    }

 catch (    Throwable e) {

      result=Result.newErrorResult(e);

    }

  }

 else {

    if (isAggregate) {

      data=convertArgsToJava(session,data);

    }

    result=invokeJavaMethod(session,data);

    if (isAggregate) {

      Object[] callResult=new Object[data.length];

      convertArgsToSQL(session,callResult,data);

      for (int i=0; i < aggregateData.length; i++) {

        aggregateData[i]=callResult[i + 1];

      }

    }

  }

  if (push) {

    session.sessionContext.popRoutineInvocation();

  }

  return result;

}

Location: Routine.java

Content: 

public boolean isFunction(){

  return routineType == SchemaObject.FUNCTION;

}

Location: Routine.java

Content: 

public boolean isLibraryRoutine(){

  return isLibraryRoutine;

}

Location: Routine.java

Content: 

public boolean isNullInputOutput(){

  return isNullInputOutput;

}

Location: Routine.java

Content: 

public boolean isProcedure(){

  return routineType == SchemaObject.PROCEDURE;

}

Location: Routine.java

Content: 

boolean isPSM(){

  return language == LANGUAGE_SQL;

}

Location: Routine.java

Content: 

public boolean isTrigger(){

  return routineType == SchemaObject.TRIGGER;

}

Location: Routine.java

Content: 

public static Routine[] newRoutines(Session session,Method[] methods){

  Routine[] routines=new Routine[methods.length];

  for (int i=0; i < methods.length; i++) {

    Method method=methods[i];

    routines[i]=newRoutine(session,method);

  }

  return routines;

}

Location: Routine.java

Content: 

/** 

 * Returns a new function Routine object based solely on a Java Method object.

 */

public static Routine newRoutine(Session session,Method method){

  Routine routine=new Routine(SchemaObject.FUNCTION);

  int offset=0;

  Class[] params=method.getParameterTypes();

  String className=method.getDeclaringClass().getName();

  StringBuffer sb=new StringBuffer();

  sb.append("CLASSPATH:");

  sb.append(method.getDeclaringClass().getName()).append('.');

  sb.append(method.getName());

  if (params.length > 0 && params[0].equals(java.sql.Connection.class)) {

    offset=1;

  }

  String name=sb.toString();

  if (className.equals("java.lang.Math")) {

    routine.isLibraryRoutine=true;

  }

  for (int j=offset; j < params.length; j++) {

    Type methodParamType=Types.getParameterSQLType(params[j]);

    HsqlName colName=session.database.nameManager.newHsqlName("C" + (j - offset + 1),false,SchemaObject.PARAMETER);

    ColumnSchema param=new ColumnSchema(colName,methodParamType,!params[j].isPrimitive(),false,null);

    routine.addParameter(param);

  }

  routine.setLanguage(Routine.LANGUAGE_JAVA);

  routine.setMethod(method);

  routine.setMethodURL(name);

  routine.setDataImpact(Routine.NO_SQL);

  Type methodReturnType=Types.getParameterSQLType(method.getReturnType());

  routine.javaMethodWithConnection=offset == 1;

  routine.setReturnType(methodReturnType);

  routine.resolve(session);

  return routine;

}

Location: Routine.java

Content: 

public void resetAlteredRoutineSettings(){

  if (isPSM()) {

    methodName=null;

    javaMethod=null;

    javaMethodWithConnection=false;

    parameterStyle=PARAM_STYLE_SQL;

    if (dataImpact == NO_SQL) {

      dataImpact=CONTAINS_SQL;

    }

  }

 else {

    statement=null;

    references=null;

    variableCount=0;

    cursorCount=0;

    ranges=RangeVariable.emptyArray;

  }

}

Location: Routine.java

Content: 

void resolveReferences(Session session){

  if (statement != null) {

    statement.resolve(session);

    checkSQLData(session);

  }

  if (methodName != null && javaMethod == null) {

    boolean[] hasConnection=new boolean[1];

    javaMethod=getMethod(methodName,this,hasConnection,returnsTable);

    if (javaMethod == null) {

      throw Error.error(ErrorCode.X_46103);

    }

    javaMethodWithConnection=hasConnection[0];

    String className=javaMethod.getDeclaringClass().getName();

    if (className.equals("java.lang.Math")) {

      isLibraryRoutine=true;

    }

  }

  setReferences();

}

Location: Routine.java

Content: 

public boolean returnsTable(){

  return returnsTable;

}

Location: Routine.java

Content: 

public Routine(int type){

  routineType=type;

  returnType=Type.SQL_ALL_TYPES;

  ranges=new RangeVariable[]{new RangeVariable(parameterList,null,false,RangeVariable.PARAMETER_RANGE)};

}

Location: Routine.java

Content: 

public Routine(Table table,RangeVariable[] ranges,int impact,int triggerType,int operationType){

  routineType=SchemaObject.TRIGGER;

  returnType=Type.SQL_ALL_TYPES;

  dataImpact=impact;

  this.ranges=ranges;

  this.triggerTable=table;

  this.triggerType=triggerType;

  this.triggerOperation=operationType;

}

Location: Routine.java

Content: 

public void setAggregate(boolean isAggregate){

  this.isAggregate=isAggregate;

}

Location: Routine.java

Content: 

public void setAsAlteredRoutine(Routine routine){

  language=routine.language;

  dataImpact=routine.dataImpact;

  parameterStyle=routine.parameterStyle;

  isDeterministic=routine.isDeterministic;

  isNullInputOutput=routine.isNullInputOutput;

  maxDynamicResults=routine.maxDynamicResults;

  isRecursive=routine.isRecursive;

  javaMethod=routine.javaMethod;

  isRecursive=routine.isRecursive;

  javaMethodWithConnection=routine.javaMethodWithConnection;

  methodName=routine.methodName;

  statement=routine.statement;

  references=routine.references;

  variableCount=routine.variableCount;

  cursorCount=routine.cursorCount;

  ranges=routine.ranges;

}

Location: Routine.java

Content: 

public void setDataImpact(int impact){

  dataImpact=impact;

}

Location: Routine.java

Content: 

public void setDeterministic(boolean value){

  isDeterministic=value;

}

Location: Routine.java

Content: 

public void setLanguage(int lang){

  language=lang;

}

Location: Routine.java

Content: 

public void setMaxDynamicResults(int value){

  maxDynamicResults=value;

}

Location: Routine.java

Content: 

public void setMethodURL(String url){

  this.methodName=url;

}

Location: Routine.java

Content: 

public void setMethod(Method method){

  this.javaMethod=method;

}

Location: Routine.java

Content: 

public void setNewSavepointLevel(boolean value){

  isNewSavepointLevel=value;

}

Location: Routine.java

Content: 

public void setNullInputOutput(boolean value){

  isNullInputOutput=value;

}

Location: Routine.java

Content: 

public void setParameterStyle(int style){

  parameterStyle=style;

}

Location: Routine.java

Content: 

public void setProcedure(Statement statement){

  this.statement=statement;

}

Location: Routine.java

Content: 

public void setReturnTable(TableDerived table){

  this.returnTable=table;

  this.returnsTable=true;

  SimpleName[] names=new SimpleName[table.getColumnCount()];

  Type[] types=table.getColumnTypes();

  returnType=new RowType(types);

}

Location: Routine.java

Content: 

public void setReturnType(Type type){

  returnType=type;

}

Location: Routine.java

Content: 

public void setSpecificName(HsqlName name){

  specificName=name;

}

