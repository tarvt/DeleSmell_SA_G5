Location: TransferHelper.java

Content: 

void beginDataTransfer(){

}

Location: TransferHelper.java

Content: 

Object convertColumnValue(Object value,int column,int type){

  if (value == null) {

    return value;

  }

  try {

    if (value instanceof Clob) {

      return ((Clob)value).getSubString(1,(int)((Clob)value).length());

    }

 else     if (value instanceof Blob) {

      return ((Blob)value).getBytes(1,(int)((Blob)value).length());

    }

  }

 catch (  SQLException e) {

    return null;

  }

  return (value);

}

Location: TransferHelper.java

Content: 

int convertFromType(int type){

  return (type);

}

Location: TransferHelper.java

Content: 

int convertToType(int type){

  return (type);

}

Location: TransferHelper.java

Content: 

void endDataTransfer(){

}

Location: TransferHelper.java

Content: 

String fixupColumnDefRead(String aTableName,ResultSetMetaData meta,String columnType,ResultSet columnDesc,int columnIndex) throws SQLException {

  return columnType;

}

Location: TransferHelper.java

Content: 

String fixupColumnDefRead(TransferTable t,ResultSetMetaData meta,String columnType,ResultSet columnDesc,int columnIndex) throws SQLException {

  return (columnType);

}

Location: TransferHelper.java

Content: 

String fixupColumnDefWrite(String aTableName,ResultSetMetaData meta,String columnType,ResultSet columnDesc,int columnIndex) throws SQLException {

  return columnType;

}

Location: TransferHelper.java

Content: 

String fixupColumnDefWrite(TransferTable t,ResultSetMetaData meta,String columnType,ResultSet columnDesc,int columnIndex) throws SQLException {

  return (columnType);

}

Location: TransferHelper.java

Content: 

String formatIdentifier(String id){

  if (id == null) {

    return id;

  }

  if (id.equals("")) {

    return id;

  }

  if (!id.toUpperCase().equals(id)) {

    return (quote + id + quote);

  }

  if (!Character.isLetter(id.charAt(0)) || (id.indexOf(' ') != -1)) {

    return (quote + id + quote);

  }

  return id;

}

Location: TransferHelper.java

Content: 

String formatName(String t){

  String Name="";

  if ((sSchema != null) && (sSchema.length() > 0)) {

    Name=sSchema + ".";

  }

  Name+=formatIdentifier(t);

  return Name;

}

Location: TransferHelper.java

Content: 

Hashtable getSupportedTypes(){

  Hashtable hTypes=new Hashtable();

  if (db != null) {

    try {

      ResultSet result=db.meta.getTypeInfo();

      while (result.next()) {

        Integer intobj=new Integer(result.getShort(2));

        if (hTypes.get(intobj) == null) {

          try {

            int typeNumber=result.getShort(2);

            hTypes.put(intobj,JDBCT.toString(typeNumber));

          }

 catch (          Exception e) {

          }

        }

      }

      result.close();

    }

 catch (    SQLException e) {

    }

  }

  if (hTypes.isEmpty()) {

    hTypes=JDBCT.getHashtable();

  }

  return hTypes;

}

Location: TransferHelper.java

Content: 

boolean needTransferTransaction(){

  return (false);

}

Location: TransferHelper.java

Content: 

void setSchema(String _Schema){

  sSchema=_Schema;

}

Location: TransferHelper.java

Content: 

void set(TransferDb database,Traceable t,String q){

  db=database;

  tracer=t;

  quote=q;

}

Location: TransferHelper.java

Content: 

TransferHelper(){

  db=null;

  tracer=null;

  quote="\'";

  JDBCT=new JDBCTypes();

}

Location: TransferHelper.java

Content: 

TransferHelper(TransferDb database,Traceable t,String q){

  db=database;

  tracer=t;

  quote=q;

  JDBCT=new JDBCTypes();

}

