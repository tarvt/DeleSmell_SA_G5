Location: JDBCClobFile.java

Content: 

protected final void checkIsFile(final boolean checkExists) throws SQLException {

  boolean exists=false;

  boolean isFile=false;

  try {

    exists=m_file.exists();

  }

 catch (  Exception ex) {

    throw JDBCUtil.sqlException(ex);

  }

  if (exists) {

    try {

      isFile=m_file.isFile();

    }

 catch (    Exception ex) {

      throw JDBCUtil.sqlException(ex);

    }

  }

  if (exists) {

    if (!isFile) {

      throw JDBCUtil.invalidArgument("Is not a file: " + m_file);

    }

  }

 else   if (checkExists) {

    throw JDBCUtil.invalidArgument("Does not exist: " + m_file);

  }

}

Location: JDBCClobFile.java

Content: 

private static void closeSafely(final InputStream target){

  if (target != null) {

    try {

      target.close();

    }

 catch (    IOException ignoredIoe) {

      LOG.info(ignoredIoe.getMessage(),ignoredIoe);

    }

catch (    RuntimeException ignoredRex) {

      LOG.info(ignoredRex.getMessage(),ignoredRex);

    }

  }

}

Location: JDBCClobFile.java

Content: 

private void closeSafely(final Object target){

  if (target instanceof RandomAccessFile) {

    closeSafely((RandomAccessFile)target);

  }

 else   if (target instanceof InputStream) {

    closeSafely((InputStream)target);

  }

 else   if (target instanceof OutputStream) {

    closeSafely((OutputStream)target);

  }

 else   if (target instanceof Reader) {

    closeSafely((Reader)target);

  }

 else   if (target instanceof Writer) {

    closeSafely((Writer)target);

  }

 else   if (target instanceof Scanner) {

    closeSafely((Scanner)target);

  }

}

Location: JDBCClobFile.java

Content: 

private static void closeSafely(final OutputStream target){

  if (target != null) {

    try {

      target.close();

    }

 catch (    IOException ignoredIoe) {

      LOG.info(ignoredIoe.getMessage(),ignoredIoe);

    }

catch (    RuntimeException ignoredRex) {

      LOG.info(ignoredRex.getMessage(),ignoredRex);

    }

  }

}

Location: JDBCClobFile.java

Content: 

private static void closeSafely(final RandomAccessFile target){

  if (target != null) {

    try {

      target.close();

    }

 catch (    IOException ignoredIoe) {

      LOG.info(ignoredIoe.getMessage(),ignoredIoe);

    }

catch (    RuntimeException ignoredRex) {

      LOG.info(ignoredRex.getMessage(),ignoredRex);

    }

  }

}

Location: JDBCClobFile.java

Content: 

private static void closeSafely(final Reader target){

  if (target != null) {

    try {

      target.close();

    }

 catch (    IOException ignoredIoe) {

      LOG.info(ignoredIoe.getMessage(),ignoredIoe);

    }

catch (    RuntimeException ignoredRex) {

      LOG.info(ignoredRex.getMessage(),ignoredRex);

    }

  }

}

Location: JDBCClobFile.java

Content: 

private static void closeSafely(final Scanner target){

  if (target != null) {

    try {

      target.close();

    }

 catch (    RuntimeException ignoredRex) {

      LOG.info(ignoredRex.getMessage(),ignoredRex);

    }

  }

}

Location: JDBCClobFile.java

Content: 

private static void closeSafely(final Writer target){

  if (target != null) {

    try {

      target.close();

    }

 catch (    IOException ignoredIoe) {

      LOG.info(ignoredIoe.getMessage(),ignoredIoe);

    }

catch (    RuntimeException ignoredRex) {

      LOG.info(ignoredRex.getMessage(),ignoredRex);

    }

  }

}

Location: JDBCClobFile.java

Content: 

protected void createFile() throws SQLException {

  try {

    if (!m_file.exists()) {

      FileUtil.getFileUtil().makeParentDirectories(m_file);

      m_file.createNewFile();

    }

  }

 catch (  IOException ex) {

    throw JDBCUtil.sqlException(ex);

  }

catch (  RuntimeException ex) {

    throw JDBCUtil.sqlException(ex);

  }

  checkIsFile(true);

}

Location: JDBCClobFile.java

Content: 

/** 

 * @param startPos inclusive

 * @param endPos exclusive

 * @throws SQLException

 */

private void fillSpace(final long startPos,long endPos) throws SQLException {

  Writer writer=null;

  try {

    writer=setCharacterStream(startPos);

    for (long i=endPos - startPos; i >= 0; i--) {

      writer.append(' ');

    }

  }

 catch (  IOException ex) {

    throw JDBCUtil.sqlException(ex);

  }

catch (  RuntimeException ex) {

    throw JDBCUtil.sqlException(ex);

  }

 finally {

    closeSafely(writer);

  }

}

Location: JDBCClobFile.java

Content: 

/** 

 * @return the name of the character encoding used to read and writecharacter data in the underlying files, as well as to determine the character length and character offsets into the underlying file

 */

public String getEncoding(){

  return m_encoding;

}

Location: JDBCClobFile.java

Content: 

/** 

 * Retrieves the canonical <tt>File</tt> object denoting the file that backs this CLOB.

 * @return the file that backs this CLOB.

 */

public File getFile(){

  return m_file;

}

Location: JDBCClobFile.java

Content: 

/** 

 * Retrieves whether an attempt to delete the backing file is made in response to invocation of  {@link #free()}.

 * @return true if backing file deletion is attempted; otherwise false.

 */

public boolean isDeleteOnFree(){

  return m_deleteOnFree;

}

Location: JDBCClobFile.java

Content: 

/** 

 * Convenience constructor for  {@link #JDBCClobFile(java.lang.String) JDBCClobFile((String)null)}. <p>

 * @throws SQLException if the platform encoding is unsupported,the temp file cannot be created or some other error occurs that prevents the construction of a valid instance of this class.

 */

public JDBCClobFile() throws SQLException {

  this((String)null);

}

Location: JDBCClobFile.java

Content: 

/** 

 * Convenience constructor for  {@link #JDBCClobFile(java.io.File,java.lang.String) JDBCClobFile(file,null)}.

 * @param file that is to back the new CLOB instance.

 * @throws SQLException if an I/O error occurs, which is possible because theconstruction of the canonical pathname may require file-system queries; a required system property value cannot be accessed; a security manager exists and its <code> {@link java.lang.SecurityManager#checkRead}</code> method denies read access to the file

 */

public JDBCClobFile(File file) throws SQLException {

  this(file,null);

}

Location: JDBCClobFile.java

Content: 

/** 

 * Constructs a new JDBCClobFile instance backed by the given File object using the given encoding to read and write file content.

 * @param file     that is to back the new CLOB instance.

 * @param encoding the name of the character encoding used to read and writecharacter data in the underlying file, as well as to determine the character length of and character offsets into the underlying file. Specify null to denote the platform encoding.

 * @throws SQLException if the given encoding is unsupported;an I/O error occurs, which is possible because the construction of the canonical pathname may require file-system queries; a required system property value cannot be accessed; a security manager exists and its <code> {@link java.lang.SecurityManager#checkRead}</code> method denies read access to the file

 */

public JDBCClobFile(File file,String encoding) throws SQLException {

  if (file == null) {

    throw JDBCUtil.nullArgument("file");

  }

  try {

    setEncoding(encoding);

    m_file=file.getCanonicalFile();

    checkIsFile(false);

    m_deleteOnFree=false;

  }

 catch (  IOException ex) {

    throw JDBCUtil.sqlException(ex);

  }

catch (  SQLException ex) {

    throw JDBCUtil.sqlException(ex);

  }

}

Location: JDBCClobFile.java

Content: 

/** 

 * Constructs a new JDBCClobFile instance backed by an File object created by File.createTempFile(TEMP_FILE_PREFIX, TEMP_FILE_SUFFIX), using the given encoding to read and write file content.

 * @param encoding the name of the character encoding used to read and writecharacter data in the underlying file, as well as to determine the character length of and character offsets into the underlying file. Specify null to denote the platform encoding.

 * @throws SQLException if the given encoding is unsupported,the backing temp file could not be created or if a security manager exists and its <code> {@link java.lang.SecurityManager#checkWrite(java.lang.String)}</code> method does not allow a file to be created.

 */

public JDBCClobFile(String encoding) throws SQLException {

  try {

    setEncoding(encoding);

    m_file=File.createTempFile(TEMP_FILE_PREFIX,TEMP_FILE_SUFFIX);

    m_deleteOnFree=true;

  }

 catch (  IOException ex) {

    throw JDBCUtil.sqlException(ex);

  }

catch (  SecurityException se) {

    throw JDBCUtil.sqlException(se);

  }

}

Location: JDBCClobFile.java

Content: 

/** 

 * Retrieves the character position at which the specified <code>pattern</code> appears in the SQL <code>CLOB</code> value represented by this <code>Clob</code> object. The search begins at position <code>start</code>.

 * @param pattern for which to search

 * @param start   position at which to begin searching; the firstposition is 1

 * @return the position at which the substring appears or -1 if it is notpresent; the first position is 1

 * @exception SQLException if there is an error accessing the<code>CLOB</code> value or if start is less than 1

 */

private long position0(final String pattern,final long start) throws SQLException {

  Pattern literal;

  try {

    literal=Pattern.compile(Pattern.quote(pattern));

  }

 catch (  PatternSyntaxException ex) {

    throw JDBCUtil.sqlException(ex);

  }

  Reader reader=null;

  Scanner scanner=null;

  boolean gotReaderAndScanner=false;

  try {

    reader=new ReaderAdapter(m_file,start - 1,m_file.length());

    scanner=new Scanner(reader);

    gotReaderAndScanner=true;

  }

 catch (  FileNotFoundException ex) {

    throw JDBCUtil.sqlException(ex);

  }

catch (  IOException ex) {

    throw JDBCUtil.sqlException(ex);

  }

catch (  SecurityException ex) {

    throw JDBCUtil.sqlException(ex);

  }

catch (  NullPointerException ex) {

    throw JDBCUtil.sqlException(ex);

  }

catch (  IllegalArgumentException ex) {

    throw JDBCUtil.sqlException(ex);

  }

 finally {

    if (!gotReaderAndScanner) {

      closeSafely(scanner);

      closeSafely(reader);

    }

  }

  int position=-1;

  try {

    if (scanner.hasNext()) {

      final boolean found=(null != scanner.findWithinHorizon(literal,0));

      if (found) {

        MatchResult match=scanner.match();

        position=match.start() + 1;

      }

    }

  }

  finally {

    closeSafely(scanner);

    closeSafely(reader);

  }

  return position;

}

Location: JDBCClobFile.java

Content: 

/** 

 * Retrieves the character position at which the specified char[] <code>pattern</code> appears in the <code>CLOB</code> value represented by this <code>Clob</code> object.  The search begins at position <code>start</code>.

 * @param pattern the substring for which to search

 * @param start the position at which to begin searching; the first positionis 1

 * @return the position at which the substring appears or -1 if it is notpresent; the first position is 1

 * @exception SQLException if there is an error accessing the<code>CLOB</code> value or if pos is less than 1

 * @exception java.sql.SQLFeatureNotSupportedException if the JDBC driver does not supportthis method

 */

public long position(final char[] pattern,final long start) throws SQLException {

  if (start < 1) {

    throw JDBCUtil.outOfRangeArgument("start: " + start);

  }

 else   if (pattern == null || pattern.length == 0) {

    return -1L;

  }

  long length=this.length();

  if (start > length || pattern.length > length || start > length - pattern.length) {

    return -1;

  }

  return position0(new String(pattern),start);

}

Location: JDBCClobFile.java

Content: 

/** 

 * Assigns whether an attempt to delete the backing file is made in response to invocation of  {@link #free()}.

 * @param deleteOnFree the new value to assign

 */

public void setDeleteOnFree(boolean deleteOnFree){

  m_deleteOnFree=deleteOnFree;

}

