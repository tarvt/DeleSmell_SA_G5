Location: WebServer.java

Content: 

/** 

 * Retrieves the name of the web page served when no page is specified. This attribute is relevant only when server protocol is HTTP(S).

 * @return the name of the web page served when no page is specified

 */

public String getDefaultWebPage(){

  return serverProperties.getProperty(ServerProperties.sc_key_web_default_page);

}

Location: WebServer.java

Content: 

/** 

 * Retrieves a String object describing the command line and properties options for this Server.

 * @return the command line and properties options help for this Server

 */

public String getHelpString(){

  return ResourceBundleHandler.getString(serverBundleHandle,"webserver.help");

}

Location: WebServer.java

Content: 

/** 

 * Retrieves this server's product name.  <p> Typically, this will be something like: "HSQLDB xxx server".

 * @return the product name of this server

 */

public String getProductName(){

  return "HSQLDB web server";

}

Location: WebServer.java

Content: 

/** 

 * Retrieves a string representation of the network protocol this server offers, typically one of 'HTTP', HTTPS', 'HSQL' or 'HSQLS'.

 * @return string representation of this server's protocol

 */

public String getProtocol(){

  return isTls() ? "HTTPS" : "HTTP";

}

Location: WebServer.java

Content: 

/** 

 * Retrieves the root context (directory) from which web content is served.  This property is relevant only when the server protocol is HTTP(S).  Although unlikely, it may be that in the future other contexts, such as jar urls may be supported, so that pages can be served from the contents of a jar or from the JVM class path.

 * @return the root context (directory) from which web content is served

 */

public String getWebRoot(){

  return serverProperties.getProperty(ServerProperties.sc_key_web_root);

}

Location: WebServer.java

Content: 

public WebServer(){

  super(ServerConstants.SC_PROTOCOL_HTTP);

}

