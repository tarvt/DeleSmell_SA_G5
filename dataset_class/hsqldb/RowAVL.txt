Location: RowAVL.java

Content: 

public void clearNonPrimaryNodes(){

  NodeAVL n=nPrimaryNode.nNext;

  while (n != null) {

    n.delete();

    n=n.nNext;

  }

}

Location: RowAVL.java

Content: 

public void delete(PersistentStore store){

  NodeAVL n=nPrimaryNode;

  while (n != null) {

    n.delete();

    n=n.nNext;

  }

}

Location: RowAVL.java

Content: 

/** 

 * Returns the Node for the next Index on this database row, given the Node for any Index.

 */

NodeAVL getNextNode(NodeAVL n){

  if (n == null) {

    n=nPrimaryNode;

  }

 else {

    n=n.nNext;

  }

  return n;

}

Location: RowAVL.java

Content: 

/** 

 * Returns the Node for a given Index, using the ordinal position of the Index within the Table Object.

 */

public NodeAVL getNode(int index){

  NodeAVL n=nPrimaryNode;

  while (index-- > 0) {

    n=n.nNext;

  }

  return n;

}

Location: RowAVL.java

Content: 

public NodeAVL insertNode(int index){

  NodeAVL backnode=getNode(index - 1);

  NodeAVL newnode=new NodeAVL(this);

  newnode.nNext=backnode.nNext;

  backnode.nNext=newnode;

  return newnode;

}

Location: RowAVL.java

Content: 

/** 

 * Default constructor used only in subclasses.

 */

protected RowAVL(TableBase table,Object[] data){

  super(table,data);

}

Location: RowAVL.java

Content: 

/** 

 * Constructor for MEMORY table Row. The result is a Row with Nodes that are not yet linked with other Nodes in the AVL indexes.

 */

public RowAVL(TableBase table,Object[] data,int position,PersistentStore store){

  super(table,data);

  this.position=position;

  setNewNodes(store);

}

Location: RowAVL.java

Content: 

public void setNewNodes(PersistentStore store){

  int indexCount=store.getAccessorKeys().length;

  nPrimaryNode=new NodeAVL(this);

  NodeAVL n=nPrimaryNode;

  for (int i=1; i < indexCount; i++) {

    n.nNext=new NodeAVL(this);

    n=n.nNext;

  }

}

