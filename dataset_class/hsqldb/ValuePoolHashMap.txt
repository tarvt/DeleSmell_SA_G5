Location: ValuePoolHashMap.java

Content: 

protected TimestampData getOrAddDate(long longKey){

  TimestampData testValue;

  int hash=(int)longKey ^ (int)(longKey >>> 32);

  int index=hashIndex.getHashIndex(hash);

  int lookup=hashIndex.hashTable[index];

  int lastLookup=-1;

  for (; lookup >= 0; lastLookup=lookup, lookup=hashIndex.getNextLookup(lookup)) {

    testValue=(TimestampData)objectKeyTable[lookup];

    if (testValue.getSeconds() == longKey) {

      if (accessCount > ACCESS_MAX) {

        resetAccessCount();

      }

      accessTable[lookup]=accessCount++;

      return testValue;

    }

  }

  if (hashIndex.elementCount >= threshold) {

    reset();

    return getOrAddDate(longKey);

  }

  lookup=hashIndex.linkNode(index,lastLookup);

  testValue=new TimestampData(longKey);

  objectKeyTable[lookup]=testValue;

  if (accessCount > ACCESS_MAX) {

    resetAccessCount();

  }

  accessTable[lookup]=accessCount++;

  return testValue;

}

Location: ValuePoolHashMap.java

Content: 

protected Double getOrAddDouble(long longKey){

  Double testValue;

  int index=hashIndex.getHashIndex((int)(longKey ^ (longKey >>> 32)));

  int lookup=hashIndex.hashTable[index];

  int lastLookup=-1;

  for (; lookup >= 0; lastLookup=lookup, lookup=hashIndex.getNextLookup(lookup)) {

    testValue=(Double)objectKeyTable[lookup];

    if (Double.doubleToLongBits(testValue.doubleValue()) == longKey) {

      if (accessCount > ACCESS_MAX) {

        resetAccessCount();

      }

      accessTable[lookup]=accessCount++;

      return testValue;

    }

  }

  if (hashIndex.elementCount >= threshold) {

    reset();

    return getOrAddDouble(longKey);

  }

  lookup=hashIndex.linkNode(index,lastLookup);

  testValue=new Double(Double.longBitsToDouble(longKey));

  objectKeyTable[lookup]=testValue;

  if (accessCount > ACCESS_MAX) {

    resetAccessCount();

  }

  accessTable[lookup]=accessCount++;

  return testValue;

}

Location: ValuePoolHashMap.java

Content: 

protected Integer getOrAddInteger(int intKey){

  Integer testValue;

  int index=hashIndex.getHashIndex(intKey);

  int lookup=hashIndex.hashTable[index];

  int lastLookup=-1;

  for (; lookup >= 0; lastLookup=lookup, lookup=hashIndex.getNextLookup(lookup)) {

    testValue=(Integer)objectKeyTable[lookup];

    int keyValue=testValue.intValue();

    if (keyValue == intKey) {

      if (accessCount > ACCESS_MAX) {

        resetAccessCount();

      }

      accessTable[lookup]=accessCount++;

      hits++;

      return testValue;

    }

 else     if (keyValue > intKey) {

      break;

    }

  }

  if (hashIndex.elementCount >= threshold) {

    reset();

    return getOrAddInteger(intKey);

  }

  lookup=hashIndex.linkNode(index,lastLookup);

  testValue=Integer.valueOf(intKey);

  objectKeyTable[lookup]=testValue;

  if (accessCount > ACCESS_MAX) {

    resetAccessCount();

  }

  accessTable[lookup]=accessCount++;

  return testValue;

}

Location: ValuePoolHashMap.java

Content: 

protected Long getOrAddLong(long longKey){

  Long testValue;

  int index=hashIndex.getHashIndex((int)(longKey ^ (longKey >>> 32)));

  int lookup=hashIndex.hashTable[index];

  int lastLookup=-1;

  for (; lookup >= 0; lastLookup=lookup, lookup=hashIndex.getNextLookup(lookup)) {

    testValue=(Long)objectKeyTable[lookup];

    long keyValue=testValue.longValue();

    if (keyValue == longKey) {

      if (accessCount > ACCESS_MAX) {

        resetAccessCount();

      }

      accessTable[lookup]=accessCount++;

      return testValue;

    }

 else     if (keyValue > longKey) {

      break;

    }

  }

  if (hashIndex.elementCount >= threshold) {

    reset();

    return getOrAddLong(longKey);

  }

  lookup=hashIndex.linkNode(index,lastLookup);

  testValue=Long.valueOf(longKey);

  objectKeyTable[lookup]=testValue;

  if (accessCount > ACCESS_MAX) {

    resetAccessCount();

  }

  accessTable[lookup]=accessCount++;

  return testValue;

}

Location: ValuePoolHashMap.java

Content: 

protected Object getOrAddObject(Object key){

  Object testValue;

  int index=hashIndex.getHashIndex(key.hashCode());

  int lookup=hashIndex.hashTable[index];

  int lastLookup=-1;

  for (; lookup >= 0; lastLookup=lookup, lookup=hashIndex.getNextLookup(lookup)) {

    testValue=objectKeyTable[lookup];

    if (testValue.equals(key)) {

      if (accessCount > ACCESS_MAX) {

        resetAccessCount();

      }

      accessTable[lookup]=accessCount++;

      return testValue;

    }

  }

  if (hashIndex.elementCount >= threshold) {

    reset();

    return getOrAddObject(key);

  }

  lookup=hashIndex.linkNode(index,lastLookup);

  objectKeyTable[lookup]=key;

  if (accessCount > ACCESS_MAX) {

    resetAccessCount();

  }

  accessTable[lookup]=accessCount++;

  return key;

}

Location: ValuePoolHashMap.java

Content: 

/** 

 * This is dissimilar to normal hash map get() methods. The key Object should have an equals(String) method which should return true if the key.toString().equals(String) is true. Also the key.hashCode() method must return the same value as key.toString.hashCode().<p> The above is always true when the key is a String. But it means it is possible to submit special keys that fulfill the contract. For example a wrapper around a byte[] can be submitted as key to retrieve either a new String, which is the result of the toString() method of the wrapper, or return an existing String which would be equal to the result of toString().

 * @param key String or other Object with compatible equals(String)and hashCode().

 * @return String from map or a new String

 */

protected String getOrAddString(Object key){

  String testValue;

  int index=hashIndex.getHashIndex(key.hashCode());

  int lookup=hashIndex.hashTable[index];

  int lastLookup=-1;

  for (; lookup >= 0; lastLookup=lookup, lookup=hashIndex.getNextLookup(lookup)) {

    testValue=(String)objectKeyTable[lookup];

    if (key.equals(testValue)) {

      if (accessCount > ACCESS_MAX) {

        resetAccessCount();

      }

      accessTable[lookup]=accessCount++;

      return testValue;

    }

  }

  if (hashIndex.elementCount >= threshold) {

    reset();

    return getOrAddString(key);

  }

  testValue=key.toString();

  lookup=hashIndex.linkNode(index,lastLookup);

  objectKeyTable[lookup]=testValue;

  if (accessCount > ACCESS_MAX) {

    resetAccessCount();

  }

  accessTable[lookup]=accessCount++;

  return testValue;

}

Location: ValuePoolHashMap.java

Content: 

protected String getOrAddSubString(String key,int from,int limit){

  key=key.substring(from,limit);

  String testValue;

  int index=hashIndex.getHashIndex(key.hashCode());

  int lookup=hashIndex.hashTable[index];

  int lastLookup=-1;

  for (; lookup >= 0; lastLookup=lookup, lookup=hashIndex.getNextLookup(lookup)) {

    testValue=(String)objectKeyTable[lookup];

    if (key.equals(testValue)) {

      if (accessCount > ACCESS_MAX) {

        resetAccessCount();

      }

      accessTable[lookup]=accessCount++;

      return testValue;

    }

  }

  if (hashIndex.elementCount >= threshold) {

    reset();

    return getOrAddString(key);

  }

  testValue=new String(key.toCharArray());

  lookup=hashIndex.linkNode(index,lastLookup);

  objectKeyTable[lookup]=testValue;

  if (accessCount > ACCESS_MAX) {

    resetAccessCount();

  }

  accessTable[lookup]=accessCount++;

  return testValue;

}

Location: ValuePoolHashMap.java

Content: 

public ValuePoolHashMap(int initialCapacity,int maxCapacity,int purgePolicy) throws IllegalArgumentException {

  super(initialCapacity,BaseHashMap.objectKeyOrValue,BaseHashMap.noKeyOrValue,true);

  this.maxCapacity=maxCapacity;

  this.purgePolicy=purgePolicy;

}

