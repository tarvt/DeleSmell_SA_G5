Location: JDBCResultSetMetaData.java

Content: 

/** 

 * Performs an internal check for column index validity. <p>

 * @param column index of column to check

 * @throws SQLException when this object's parent ResultSet hasno such column

 */

private void checkColumn(int column) throws SQLException {

  if (column < 1 || column > columnCount) {

    throw JDBCUtil.sqlException(ErrorCode.JDBC_COLUMN_NOT_FOUND,String.valueOf(column));

  }

}

Location: JDBCResultSetMetaData.java

Content: 

/** 

 * <!-- start generic documentation --> Gets the designated column's table's catalog name. <!-- end generic documentation --> <!-- start Release-specific documentation --> <div class="ReleaseSpecificDocumentation"> <h3>HSQLDB-Specific Information:</h3> <p> From 2.0, HSQLDB returns the name of the catalog. The default name is PUBLIC. This value can be changed for the database using an SQL command.<p> HSQLDB supports use of catalog qualification in DLL or DML when it is allowed by the Standard. <p> However, not all clients respect the SQL Standard and may use a catalog qualifier in a context where it is not supported by the Standard. <p> For greater detail, see discussion at: {@link JDBCDatabaseMetaData}. <p> </div> <!-- end release-specific documentation -->

 * @param column the first column is 1, the second is 2, ...

 * @return the name of the catalog for the table in which the given columnappears or "" if not applicable

 * @exception SQLException if a database access error occurs

 */

public String getCatalogName(int column) throws SQLException {

  checkColumn(column);

  String name=resultMetaData.columns[--column].getCatalogNameString();

  return name == null ? "" : name;

}

Location: JDBCResultSetMetaData.java

Content: 

/** 

 * <!-- start generic documentation --> <p>Returns the fully-qualified name of the Java class whose instances are manufactured if the method <code>ResultSet.getObject</code> is called to retrieve a value from the column.  <code>ResultSet.getObject</code> may return a subclass of the class returned by this method. <!-- end generic documentation --> <!-- start Release-specific documentation --> <div class="ReleaseSpecificDocumentation"> <h3>HSQLDB-Specific Information:</h3> <p> HSQLDB 2.0 fully supports this feature.<p> For columns of type OTHER, there is no specific class name and java.lang.Object is returned. </div> <!-- end release-specific documentation -->

 * @param column the first column is 1, the second is 2, ...

 * @return the fully-qualified name of the class in the Java programminglanguage that would be used by the method <code>ResultSet.getObject</code> to retrieve the value in the specified column. This is the class name used for custom mapping.

 * @exception SQLException if a database access error occurs

 * @since JDK 1.2

 */

public String getColumnClassName(int column) throws SQLException {

  checkColumn(column);

  Type type=translateType(resultMetaData.columnTypes[--column]);

  return type.getJDBCClassName();

}

Location: JDBCResultSetMetaData.java

Content: 

/** 

 * <!-- start generic documentation --> Indicates the designated column's normal maximum width in characters. <!-- end generic documentation --> <!-- start Release-specific documentation --> <div class="ReleaseSpecificDocumentation"> <h3>HSQLDB-Specific Information:</h3> <p> HSQLDB 2.0 fully supports this feature.  <p> The current calculation follows these rules: <ol> <li>Long character types and datetime types:<p> The maximum length/precision, repectively. <li>CHAR and VARCHAR types: <ul> <li> If the result set column is a direct pass through of a table column value and column size was declared, then the declared value is returned. <li> Otherwise, the computed length according to SQL Standard is returned. For very large values, the value of the system property hsqldb.max_xxxchar_display_size or the magic value 32766 (0x7FFE) (tested usable/accepted by most tools and compatible with assumptions made by java.io read/write UTF) when the system property is not defined or is not accessible, due to security constraints. <p> </ul> It must be noted that the latter value in no way affects the ability of the HSQLDB JDBC driver to retrieve longer values and serves only as the current best effort at providing a value that maximizes usability across a wide range of tools, given that the HSQLDB database engine allows very large lengths to be declared. <li>Number types: <p> The max precision, plus the length of the negation character (1), plus (if applicable) the maximum number of characters that may occupy the exponent character sequence.  Note that some legacy tools do not correctly handle BIGINT values of greater than 18 digits. <li>BOOLEAN type: <p> The length of the character sequence "false" (5), the longer of the two boolean value String representations. <li>Remaining types: <p> The maximum length/precision, respectively, as reported by DatabaseMetaData.getTypeInfo(), when applicable.  If the maximum display size is unknown, unknowable or inapplicable, then zero is returned. <p> </ol> </div> <!-- end release-specific documentation -->

 * @param column the first column is 1, the second is 2, ...

 * @return the normal maximum number of characters allowed as the widthof the designated column

 * @exception SQLException if a database access error occurs

 */

public int getColumnDisplaySize(int column) throws SQLException {

  checkColumn(column);

  Type type=translateType(resultMetaData.columnTypes[--column]);

  return type.displaySize();

}

Location: JDBCResultSetMetaData.java

Content: 

/** 

 * <!-- start generic documentation --> Gets the designated column's suggested title for use in printouts and displays. (JDBC4 clarification:) The suggested title is usually specified by the SQL <code>AS</code> clause.  If a SQL <code>AS</code> is not specified, the value returned from <code>getColumnLabel</code> will be the same as the value returned by the <code>getColumnName</code> method. <!-- end generic documentation --> <!-- start Release-specific documentation --> <div class="ReleaseSpecificDocumentation"> <h3>HSQLDB-Specific Information:</h3> <p> In HSQLDB, a <code>ResultSet</code> column label is determined using the following order of precedence: <OL> <LI>The label (alias) specified in the generating query.</LI> <LI>The name of the underlying column, if no label is specified.<br> <LI>C1, C2, etc. for computed columns that have no label.</LI> </OL> <p> </div> <!-- end release-specific documentation -->

 * @param column the first column is 1, the second is 2, ...

 * @return the suggested column title

 * @exception SQLException if a database access error occurs

 */

public String getColumnLabel(int column) throws SQLException {

  checkColumn(column--);

  String label=resultMetaData.columnLabels[column];

  if (label != null && label.length() > 0) {

    return label;

  }

  return resultMetaData.columns[column].getNameString();

}

Location: JDBCResultSetMetaData.java

Content: 

JDBCColumnMetaData getColumnMetaData(int i){

  JDBCColumnMetaData meta=new JDBCColumnMetaData();

  try {

    meta.catalogName=getCatalogName(i);

    meta.columnClassName=getColumnClassName(i);

    meta.columnDisplaySize=getColumnDisplaySize(i);

    meta.columnLabel=getColumnLabel(i);

    meta.columnName=getColumnName(i);

    meta.columnType=getColumnType(i);

    meta.isAutoIncrement=isAutoIncrement(i);

    meta.isCaseSensitive=isCaseSensitive(i);

    meta.isCurrency=isCurrency(i);

    meta.isDefinitelyWritable=isDefinitelyWritable(i);

    meta.isNullable=isNullable(i);

    meta.isReadOnly=isReadOnly(i);

    meta.isSearchable=isSearchable(i);

    meta.isSigned=isSigned(i);

    meta.isWritable=isWritable(i);

    meta.precision=getPrecision(i);

    meta.scale=getScale(i);

    meta.schemaName=getSchemaName(i);

    meta.tableName=getTableName(i);

  }

 catch (  SQLException e) {

  }

  return meta;

}

Location: JDBCResultSetMetaData.java

Content: 

/** 

 * <!-- start generic documentation --> Retrieves the designated column's database-specific type name. <!-- end generic documentation -->

 * @param column the first column is 1, the second is 2, ...

 * @return type name used by the database. If the column type isa user-defined type, then a fully-qualified type name is returned.

 * @exception SQLException if a database access error occurs

 */

public String getColumnTypeName(int column) throws SQLException {

  checkColumn(column);

  Type type=translateType(resultMetaData.columnTypes[--column]);

  return type.getNameString();

}

Location: JDBCResultSetMetaData.java

Content: 

/** 

 * <!-- start generic documentation --> (JDBC4 clarification:) Get the designated column's specified column size. For numeric data, this is the maximum precision.  For character data, this is the [maximum] length in characters. For datetime datatypes, this is the [maximum] length in characters of the String representation (assuming the maximum allowed precision of the fractional seconds component). For binary data, this is the [maximum] length in bytes.  For the ROWID datatype, this is the length in bytes[, as returned by the implementation-specific java.sql.RowId.getBytes() method]. 0 is returned for data types where the column size is not applicable. <!-- end generic documentation --> <!-- start Release-specific documentation --> <div class="ReleaseSpecificDocumentation"> <h3>HSQLDB-Specific Information:</h3> <p> HSQLDB 2.0 reports the correct length or precision for all columns. For DOUBLE, the binary precision of 64 is returned, while for other numeric types the decimal precision is returned.<p> </div> <!-- end release-specific documentation -->

 * @param column the first column is 1, the second is 2, ...

 * @return precision

 * @exception SQLException if a database access error occurs

 */

public int getPrecision(int column) throws SQLException {

  checkColumn(column);

  Type type=translateType(resultMetaData.columnTypes[--column]);

  return type.getJDBCPrecision();

}

Location: JDBCResultSetMetaData.java

Content: 

/** 

 * <!-- start generic documentation --> Gets the designated column's number of digits to right of the decimal point. 0 is returned for data types where the scale is not applicable. <!-- end generic documentation --> <!-- start Release-specific documentation --> <div class="ReleaseSpecificDocumentation"> <h3>HSQLDB-Specific Information:</h3> <p> HSQLDB 2.0 reports the correct scale for all columns.<p> For datetime and interval types such as Timestamp or Time, the fractional second precision is reported.<p> The reported scale for INTEGER, BIGINT and DOUBLE is 0<p> </div> <!-- end release-specific documentation -->

 * @param column the first column is 1, the second is 2, ...

 * @return scale

 * @exception SQLException if a database access error occurs

 */

public int getScale(int column) throws SQLException {

  checkColumn(column);

  Type type=translateType(resultMetaData.columnTypes[--column]);

  return type.getJDBCScale();

}

Location: JDBCResultSetMetaData.java

Content: 

/** 

 * <!-- start generic documentation --> Get the designated column's table's schema. <!-- end generic documentation --> <!-- start Release-specific documentation --> <div class="ReleaseSpecificDocumentation"> <h3>HSQLDB-Specific Information:</h3> <p> Since 1.8.0.x, HSQLDB implements standard SQL SCHEMA support; this method returns the actual schema of the column's table. Columns generated in queries have no schema name. </div> <!-- end release-specific documentation -->

 * @param column the first column is 1, the second is 2, ...

 * @return schema name or "" if not applicable

 * @exception SQLException if a database access error occurs

 */

public String getSchemaName(int column) throws SQLException {

  checkColumn(column);

  String name=resultMetaData.columns[--column].getSchemaNameString();

  return name == null ? "" : name;

}

Location: JDBCResultSetMetaData.java

Content: 

/** 

 * <!-- start generic documentation --> Gets the designated column's table name. <!-- end generic documentation -->

 * @param column the first column is 1, the second is 2, ...

 * @return table name or "" if not applicable

 * @exception SQLException if a database access error occurs

 */

public String getTableName(int column) throws SQLException {

  checkColumn(column);

  String name=resultMetaData.columns[--column].getTableNameString();

  return name == null ? "" : name;

}

Location: JDBCResultSetMetaData.java

Content: 

/** 

 * Initializes this JDBCResultSetMetaData object from the specified Result and HsqlProperties objects.

 * @param meta the ResultMetaData object from which to initialize thisJDBCResultSetMetaData object

 * @param conn the JDBCConnection

 * @throws SQLException if a database access error occurs

 */

void init(ResultMetaData meta,JDBCConnection conn) throws SQLException {

  resultMetaData=meta;

  columnCount=resultMetaData.getColumnCount();

  useColumnName=true;

  if (conn == null) {

    return;

  }

  useColumnName=conn.isUseColumnName;

  translateTTIType=conn.isTranslateTTIType;

}

Location: JDBCResultSetMetaData.java

Content: 

/** 

 * <!-- start generic documentation --> Indicates whether the designated column is automatically numbered. <p>(JDBC4 deleted:)[, thus read-only.] <!-- end generic documentation --> <!-- start Release-specific documentation --> <div class="ReleaseSpecificDocumentation"> <h3>HSQLDB-Specific Information:</h3> <p> HSQLDB 2.0 fully supports SQL Satandard features T174 and T176 that define identity column support. <hr> However, it must be stated here that contrary to the generic documentation previous to the JDBC4 specification, HSQLDB automatically numbered columns (IDENTITY columns, in HSQLDB parlance) are not read-only. <p> In fact, the generic documentation previous to the JDBC4 specification seems to contradict the general definition of what, at minimum, an auto-increment column is: <p> Simply, an auto-increment column is one that guarantees it has a autogenerated value after a successful insert or update operation, even if no value is supplied, or DEFAULT is specified.<p> </div> <!-- end release-specific documentation -->

 * @param column the first column is 1, the second is 2, ...

 * @return <code>true</code> if so; <code>false</code> otherwise

 * @exception SQLException if a database access error occurs

 */

public boolean isAutoIncrement(int column) throws SQLException {

  checkColumn(column);

  return resultMetaData.columns[--column].isIdentity();

}

Location: JDBCResultSetMetaData.java

Content: 

/** 

 * <!-- start generic documentation --> Indicates whether a column's case matters. <!-- end generic documentation --> <!-- start Release-specific documentation --> <div class="ReleaseSpecificDocumentation"> <h3>HSQLDB-Specific Information:</h3> <p> HSQLDB 1.7.1 did not report this value accurately.  <p> Starting with 1.7.2, this feature is better supported.  <p> This method returns true for any column whose data type is a character type, with the exception of VARCHAR_IGNORECASE for which it returns false. It also returns false for any column whose data type is a not a character data type. <p> </div> <!-- end release-specific documentation -->

 * @param column the first column is 1, the second is 2, ...

 * @return <code>true</code> if so; <code>false</code> otherwise

 * @exception SQLException if a database access error occurs

 */

public boolean isCaseSensitive(int column) throws SQLException {

  checkColumn(column);

  Type type=translateType(resultMetaData.columnTypes[--column]);

  if (type.isCharacterType()) {

    return type.getCollation().isCaseSensitive();

  }

  return false;

}

Location: JDBCResultSetMetaData.java

Content: 

/** 

 * <!-- start generic documentation --> Indicates whether the designated column is a cash value. <!-- end generic documentation --> <!-- start Release-specific documentation --> <div class="ReleaseSpecificDocumentation"> <h3>HSQLDB-Specific Information:</h3> <p> HSQLDB 2.0 fully supports this feature and returns true for NUMERIC and DECIMAL columns. <p> </div> <!-- end release-specific documentation -->

 * @param column the first column is 1, the second is 2, ...

 * @return <code>true</code> if so; <code>false</code> otherwise

 * @exception SQLException if a database access error occurs

 */

public boolean isCurrency(int column) throws SQLException {

  checkColumn(column);

  Type type=translateType(resultMetaData.columnTypes[--column]);

  return (type.typeCode == Types.SQL_DECIMAL || type.typeCode == Types.SQL_NUMERIC) && type.scale > 0;

}

Location: JDBCResultSetMetaData.java

Content: 

/** 

 * <!-- start generic documentation --> Indicates whether a write on the designated column will definitely succeed. <!-- end generic documentation --> <!-- start Release-specific documentation --> <div class="ReleaseSpecificDocumentation"> <h3>HSQLDB-Specific Information:</h3> <p> From 2.0 this method returns false if the ResultSet is not updatable or the column in question is not updatable.<p> </div> <!-- end release-specific documentation -->

 * @param column the first column is 1, the second is 2, ...

 * @return <code>true</code> if so; <code>false</code> otherwise

 * @exception SQLException if a database access error occurs

 */

public boolean isDefinitelyWritable(int column) throws SQLException {

  checkColumn(column);

  return resultMetaData.colIndexes != null && resultMetaData.colIndexes[--column] > -1;

}

Location: JDBCResultSetMetaData.java

Content: 

/** 

 * <!-- start generic documentation --> Indicates the nullability of values in the designated column. <!-- end generic documentation --> <!-- start Release-specific documentation --> <div class="ReleaseSpecificDocumentation"> <h3>HSQLDB-Specific Information:</h3> <p> HSQLDB 2.2 fully supports this feature.  <p> <tt>columnNoNulls</tt> is always returned for result set columns that represent constants, sequences or table columns known to be not null. <tt>columnNullable</tt> is returned for NULL constants, or nullable table columns. <tt>columnNullableUnknown</tt> is returned for all other columns such as aggregates and computed values.<p> To determine the nullable status of a table column in isolation from ResultSetMetaData and in a DBMS-independent fashion, the DatabaseMetaData.getColumns() method can be invoked with the appropriate filter values and the result should be inspected at the position described in the DatabaseMetaData.getColumns() API documentation. </div> <!-- end release-specific documentation -->

 * @param column the first column is 1, the second is 2, ...

 * @return the nullability status of the given column; one of <code>columnNoNulls</code>,<code>columnNullable</code> or <code>columnNullableUnknown</code>

 * @exception SQLException if a database access error occurs

 */

public int isNullable(int column) throws SQLException {

  checkColumn(column);

  return resultMetaData.columns[--column].getNullability();

}

Location: JDBCResultSetMetaData.java

Content: 

/** 

 * <!-- start generic documentation --> Indicates whether values in the designated column are signed numbers. <!-- end generic documentation --> <!-- start Release-specific documentation --> <div class="ReleaseSpecificDocumentation"> <h3>HSQLDB-Specific Information:</h3> <p> HSQLDB 2.0 fully supports this feature.  <p> </div> <!-- end release-specific documentation -->

 * @param column the first column is 1, the second is 2, ...

 * @return <code>true</code> if so; <code>false</code> otherwise

 * @exception SQLException if a database access error occurs

 */

public boolean isSigned(int column) throws SQLException {

  checkColumn(column);

  Type type=translateType(resultMetaData.columnTypes[--column]);

  return type.isNumberType();

}

Location: JDBCResultSetMetaData.java

Content: 

/** 

 * <!-- start generic documentation --> Indicates whether it is possible for a write on the designated column to succeed. <!-- end generic documentation --> <!-- start Release-specific documentation --> <div class="ReleaseSpecificDocumentation"> <h3>HSQLDB-Specific Information:</h3> <p> From 2.0 this method returns false if the ResultSet is not updatable or the column in question is not updatable.<p> </div> <!-- end release-specific documentation -->

 * @param column the first column is 1, the second is 2, ...

 * @return <code>true</code> if so; <code>false</code> otherwise

 * @exception SQLException if a database access error occurs

 */

public boolean isWritable(int column) throws SQLException {

  checkColumn(column);

  return resultMetaData.colIndexes != null && resultMetaData.colIndexes[--column] > -1;

}

Location: JDBCResultSetMetaData.java

Content: 

/** 

 * Constructs a new JDBCResultSetMetaData object from the specified JDBCResultSet and HsqlProprties objects.

 * @param meta the ResultMetaData object from which to construct a newJDBCResultSetMetaData object

 * @throws SQLException if a database access error occurs

 */

JDBCResultSetMetaData(ResultMetaData meta,boolean isUpdatable,boolean isInsertable,JDBCConnection conn) throws SQLException {

  init(meta,conn);

}

Location: JDBCResultSetMetaData.java

Content: 

/** 

 * Translates an INTERVAL type to VARCHAR. Removes time zone from datetime types.

 */

private Type translateType(Type type){

  if (this.translateTTIType) {

    if (type.isIntervalType()) {

      type=((IntervalType)type).getCharacterType();

    }

  }

  return type;

}

Location: JDBCResultSetMetaData.java

Content: 

/** 

 * Returns an object that implements the given interface to allow access to non-standard methods, or standard methods not exposed by the proxy. If the receiver implements the interface then the result is the receiver or a proxy for the receiver. If the receiver is a wrapper and the wrapped object implements the interface then the result is the wrapped object or a proxy for the wrapped object. Otherwise return the the result of calling <code>unwrap</code> recursively on the wrapped object or a proxy for that result. If the receiver is not a wrapper and does not implement the interface, then an <code>SQLException</code> is thrown.

 * @param iface A Class defining an interface that the result must implement.

 * @return an object that implements the interface. May be a proxy for the actual implementing object.

 * @throws java.sql.SQLException If no object found that implements the interface

 * @since JDK 1.6

 */

@SuppressWarnings("unchecked") public <T>T unwrap(java.lang.Class<T> iface) throws java.sql.SQLException {

  if (isWrapperFor(iface)) {

    return (T)this;

  }

  throw JDBCUtil.invalidArgument("iface: " + iface);

}

