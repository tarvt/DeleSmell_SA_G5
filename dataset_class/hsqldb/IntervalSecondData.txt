Location: IntervalSecondData.java

Content: 

public int compareTo(IntervalSecondData b){

  if (units > b.units) {

    return 1;

  }

 else   if (units < b.units) {

    return -1;

  }

 else {

    if (nanos > b.nanos) {

      return 1;

    }

 else     if (nanos < b.nanos) {

      return -1;

    }

 else {

      return 0;

    }

  }

}

Location: IntervalSecondData.java

Content: 

public IntervalSecondData(long seconds,int nanos){

  this.units=seconds;

  this.nanos=nanos;

}

Location: IntervalSecondData.java

Content: 

public IntervalSecondData(long seconds,int nanos,IntervalType type){

  if (seconds >= type.getIntervalValueLimit()) {

    throw Error.error(ErrorCode.X_22015);

  }

  this.units=seconds;

  this.nanos=nanos;

}

Location: IntervalSecondData.java

Content: 

/** 

 * normalise is a marker, values are always normalised

 */

public IntervalSecondData(long seconds,long nanos,IntervalType type,boolean normalise){

  if (nanos >= DTIType.limitNanoseconds) {

    long carry=nanos / DTIType.limitNanoseconds;

    nanos=nanos % DTIType.limitNanoseconds;

    seconds+=carry;

  }

 else   if (nanos <= -DTIType.limitNanoseconds) {

    long carry=-nanos / DTIType.limitNanoseconds;

    nanos=-(-nanos % DTIType.limitNanoseconds);

    seconds-=carry;

  }

  int scaleFactor=DTIType.nanoScaleFactors[type.scale];

  nanos/=scaleFactor;

  nanos*=scaleFactor;

  if (seconds > 0 && nanos < 0) {

    nanos+=DTIType.limitNanoseconds;

    seconds--;

  }

 else   if (seconds < 0 && nanos > 0) {

    nanos-=DTIType.limitNanoseconds;

    seconds++;

  }

  scaleFactor=DTIType.yearToSecondFactors[type.endPartIndex];

  seconds/=scaleFactor;

  seconds*=scaleFactor;

  if (seconds >= type.getIntervalValueLimit()) {

    throw Error.error(ErrorCode.X_22015);

  }

  this.units=seconds;

  this.nanos=(int)nanos;

}

Location: IntervalSecondData.java

Content: 

public static IntervalSecondData newIntervalDay(long days,IntervalType type){

  return new IntervalSecondData(days * 24 * 60* 60,0,type);

}

Location: IntervalSecondData.java

Content: 

public static IntervalSecondData newIntervalHour(long hours,IntervalType type){

  return new IntervalSecondData(hours * 60 * 60,0,type);

}

Location: IntervalSecondData.java

Content: 

public static IntervalSecondData newIntervalMinute(long minutes,IntervalType type){

  return new IntervalSecondData(minutes * 60,0,type);

}

Location: IntervalSecondData.java

Content: 

public static IntervalSecondData newIntervalSeconds(long seconds,IntervalType type){

  return new IntervalSecondData(seconds,0,type);

}

Location: IntervalSecondData.java

Content: 

public static IntervalSecondData newInterval(double value,int typeCode){

  int index=DTIType.intervalIndexMap.get(typeCode);

  value*=DTIType.yearToSecondFactors[index];

  return new IntervalSecondData((long)value,0);

}

