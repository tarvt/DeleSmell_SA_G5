Location: LongValueHashMap.java

Content: 

public Object getKey(long value){

  BaseHashIterator it=new BaseHashIterator(false);

  while (it.hasNext()) {

    long i=it.nextLong();

    if (i == value) {

      return objectKeyTable[it.getLookup()];

    }

  }

  return null;

}

Location: LongValueHashMap.java

Content: 

public long get(Object key) throws NoSuchElementException {

  if (key == null) {

    throw new NoSuchElementException();

  }

  int hash=key.hashCode();

  int lookup=getLookup(key,hash);

  if (lookup != -1) {

    return longValueTable[lookup];

  }

  throw new NoSuchElementException();

}

Location: LongValueHashMap.java

Content: 

public long get(Object key,int defaultValue){

  if (key == null) {

    throw new NoSuchElementException();

  }

  int hash=key.hashCode();

  int lookup=getLookup(key,hash);

  if (lookup != -1) {

    return longValueTable[lookup];

  }

  return defaultValue;

}

Location: LongValueHashMap.java

Content: 

public boolean get(Object key,long[] value){

  if (key == null) {

    throw new NoSuchElementException();

  }

  int hash=key.hashCode();

  int lookup=getLookup(key,hash);

  if (lookup != -1) {

    value[0]=longValueTable[lookup];

    return true;

  }

  return false;

}

Location: LongValueHashMap.java

Content: 

public Set keySet(){

  if (keySet == null) {

    keySet=new KeySet();

  }

  return keySet;

}

Location: LongValueHashMap.java

Content: 

public LongValueHashMap(){

  this(8);

}

Location: LongValueHashMap.java

Content: 

public LongValueHashMap(int initialCapacity) throws IllegalArgumentException {

  super(initialCapacity,BaseHashMap.objectKeyOrValue,BaseHashMap.longKeyOrValue,false);

}

Location: LongValueHashMap.java

Content: 

public void putAll(LongValueHashMap t){

  Iterator it=t.keySet().iterator();

  while (it.hasNext()) {

    Object key=it.next();

    put(key,t.get(key));

  }

}

Location: LongValueHashMap.java

Content: 

public boolean put(Object key,long value){

  if (key == null) {

    throw new NoSuchElementException();

  }

  int oldSize=size();

  super.addOrRemove(0,value,key,null,false);

  return oldSize != size();

}

