Location: Types.java

Content: 

/** 

 * Types that accept precision params in column definition or casts.

 */

public static boolean acceptsPrecision(int type){

switch (type) {

case Types.LONGVARCHAR:

case Types.LONGVARBINARY:

case Types.SQL_ARRAY:

case Types.SQL_BINARY:

case Types.SQL_BIT:

case Types.SQL_BIT_VARYING:

case Types.SQL_BLOB:

case Types.SQL_CHAR:

case Types.SQL_NCHAR:

case Types.SQL_CLOB:

case Types.NCLOB:

case Types.SQL_VARBINARY:

case Types.SQL_VARCHAR:

case Types.SQL_NVARCHAR:

case Types.VARCHAR_IGNORECASE:

case Types.SQL_DECIMAL:

case Types.SQL_NUMERIC:

case Types.SQL_FLOAT:

case Types.SQL_TIME:

case Types.SQL_TIMESTAMP:

case Types.SQL_INTERVAL_YEAR:

case Types.SQL_INTERVAL_YEAR_TO_MONTH:

case Types.SQL_INTERVAL_MONTH:

case Types.SQL_INTERVAL_DAY:

case Types.SQL_INTERVAL_DAY_TO_HOUR:

case Types.SQL_INTERVAL_DAY_TO_MINUTE:

case Types.SQL_INTERVAL_DAY_TO_SECOND:

case Types.SQL_INTERVAL_HOUR:

case Types.SQL_INTERVAL_HOUR_TO_MINUTE:

case Types.SQL_INTERVAL_HOUR_TO_SECOND:

case Types.SQL_INTERVAL_MINUTE:

case Types.SQL_INTERVAL_MINUTE_TO_SECOND:

case Types.SQL_INTERVAL_SECOND:

    return true;

default :

  return false;

}

}

Location: Types.java

Content: 

public static boolean acceptsScaleCreateParam(int type){

switch (type) {

case Types.SQL_INTERVAL_SECOND:

    return true;

case Types.SQL_DECIMAL:

case Types.SQL_NUMERIC:

  return true;

default :

return false;

}

}

Location: Types.java

Content: 

public static boolean acceptsZeroPrecision(int type){

switch (type) {

case Types.SQL_TIME:

case Types.SQL_TIMESTAMP:

    return true;

default :

  return false;

}

}

Location: Types.java

Content: 

/** 

 * Retrieves the type object corresponding to the class of an IN, IN OUT or OUT parameter or a return type.  <p>

 * @param c a Class instance

 * @return java.sql.Types int value

 * @throws org.hsqldb.HsqlException

 */

public static Type getParameterSQLType(Class c){

  String name;

  int typeCode;

  if (c == null) {

    throw Error.runtimeError(ErrorCode.U_S0500,"Types");

  }

  if (Void.TYPE.equals(c)) {

    return Type.SQL_ALL_TYPES;

  }

  name=c.getName();

  typeCode=javaTypeNumbers.get(name,Integer.MIN_VALUE);

  if (typeCode != Integer.MIN_VALUE) {

    return Type.getDefaultTypeWithSize(typeCode);

  }

  if (c.isArray()) {

    Class c1=c.getComponentType();

    name=c1.getName();

    typeCode=javaTypeNumbers.get(name,Integer.MIN_VALUE);

    if (typeCode == Types.SQL_ALL_TYPES) {

      return null;

    }

    if (typeCode != Integer.MIN_VALUE) {

      return Type.getDefaultTypeWithSize(typeCode);

    }

    return null;

  }

  if (name.equals("java.sql.Array")) {

    return Type.getDefaultArrayType(Types.SQL_ALL_TYPES);

  }

  return null;

}

Location: Types.java

Content: 

public static boolean isSearchable(int type){

switch (type) {

case Types.SQL_BLOB:

case Types.SQL_CLOB:

case Types.NCLOB:

case Types.JAVA_OBJECT:

case Types.STRUCT:

case Types.OTHER:

case Types.ROWID:

    return false;

case Types.SQL_ARRAY:

default :

  return true;

}

}

Location: Types.java

Content: 

private static int MAX_CHAR_OR_VARCHAR_DISPLAY_SIZE(){

  try {

    return Integer.getInteger(HsqlDatabaseProperties.system_max_char_or_varchar_display_size,32766).intValue();

  }

 catch (  SecurityException e) {

    return 32766;

  }

}

Location: Types.java

Content: 

public static boolean requiresPrecision(int type){

switch (type) {

case Types.SQL_BIT_VARYING:

case Types.SQL_VARBINARY:

case Types.SQL_VARCHAR:

case Types.SQL_NVARCHAR:

    return true;

default :

  return false;

}

}

