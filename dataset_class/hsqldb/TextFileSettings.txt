Location: TextFileSettings.java

Content: 

String getFileName(){

  return dataFileName;

}

Location: TextFileSettings.java

Content: 

int getMaxCacheBytes(){

  return maxCacheBytes;

}

Location: TextFileSettings.java

Content: 

int getMaxCacheRows(){

  return maxCacheRows;

}

Location: TextFileSettings.java

Content: 

/** 

 * for UTF-16 with BOM in file

 */

void setLittleEndianByteOrderMark(){

  if ("UTF-16".equals(stringEncoding)) {

    charEncoding="UTF-16LE";

    isLittleEndian=true;

    hasUTF16BOM=true;

  }

 else {

    throw Error.error(ErrorCode.X_S0531);

  }

}

Location: TextFileSettings.java

Content: 

void setSpaceAndLineEnd(){

  try {

    if (isUTF16) {

      bytesForLineEnd=NL.getBytes(charEncoding);

      bytesForSpace=" ".getBytes(charEncoding);

    }

  }

 catch (  UnsupportedEncodingException e) {

    throw Error.error(ErrorCode.X_S0531);

  }

}

Location: TextFileSettings.java

Content: 

/** 

 * The source string for a cached table is evaluated and the parameters are used to open the source file.<p> Settings are used in this order: (1) settings specified in the source string for the table (2) global database settings (3) program defaults

 */

TextFileSettings(Database database,String fileSettingsString){

  HsqlProperties tableprops=HsqlProperties.delimitedArgPairsToProps(fileSettingsString,"=",";","textdb");

  HsqlDatabaseProperties dbProps=database.getProperties();

switch (tableprops.errorCodes.length) {

case 0:

    this.dataFileName=null;

  break;

case 1:

this.dataFileName=tableprops.errorKeys[0].trim();

break;

default :

throw Error.error(ErrorCode.X_S0502);

}

fs=dbProps.getStringProperty(HsqlDatabaseProperties.textdb_fs);

fs=tableprops.getProperty(HsqlDatabaseProperties.textdb_fs,fs);

vs=dbProps.getStringProperty(HsqlDatabaseProperties.textdb_vs);

vs=tableprops.getProperty(HsqlDatabaseProperties.textdb_vs,vs);

lvs=dbProps.getStringProperty(HsqlDatabaseProperties.textdb_lvs);

lvs=tableprops.getProperty(HsqlDatabaseProperties.textdb_lvs,lvs);

qc=dbProps.getStringProperty(HsqlDatabaseProperties.textdb_qc);

qc=tableprops.getProperty(HsqlDatabaseProperties.textdb_qc,qc);

if (vs == null) {

vs=fs;

}

if (lvs == null) {

lvs=fs;

}

fs=translateSep(fs);

vs=translateSep(vs);

lvs=translateSep(lvs);

qc=translateSep(qc);

if (fs.length() == 0 || vs.length() == 0 || lvs.length() == 0) {

throw Error.error(ErrorCode.X_S0503);

}

if (qc.length() != 1) {

throw Error.error(ErrorCode.X_S0504);

}

quoteChar=qc.charAt(0);

if (quoteChar > 0x007F) {

throw Error.error(ErrorCode.X_S0504);

}

ignoreFirst=dbProps.isPropertyTrue(HsqlDatabaseProperties.textdb_ignore_first);

ignoreFirst=tableprops.isPropertyTrue(HsqlDatabaseProperties.textdb_ignore_first,ignoreFirst);

isQuoted=dbProps.isPropertyTrue(HsqlDatabaseProperties.textdb_quoted);

isQuoted=tableprops.isPropertyTrue(HsqlDatabaseProperties.textdb_quoted,isQuoted);

isAllQuoted=dbProps.isPropertyTrue(HsqlDatabaseProperties.textdb_all_quoted);

isAllQuoted=tableprops.isPropertyTrue(HsqlDatabaseProperties.textdb_all_quoted,isAllQuoted);

stringEncoding=dbProps.getStringProperty(HsqlDatabaseProperties.textdb_encoding);

stringEncoding=tableprops.getProperty(HsqlDatabaseProperties.textdb_encoding,stringEncoding);

charEncoding=stringEncoding;

if ("UTF8".equals(stringEncoding)) {

isUTF8=true;

}

 else if ("UTF-8".equals(stringEncoding)) {

isUTF8=true;

}

 else if ("UTF-16".equals(stringEncoding)) {

charEncoding="UTF-16BE";

isUTF16=true;

}

 else if ("UTF-16BE".equals(stringEncoding)) {

isUTF16=true;

}

 else if ("UTF-16LE".equals(stringEncoding)) {

isUTF16=true;

isLittleEndian=true;

}

setSpaceAndLineEnd();

if (fs.length() == 1 || (fs.length() == 2 && fs.endsWith("\n"))) {

singleSeparator=fs.charAt(0);

}

int cacheScale=dbProps.getIntegerProperty(HsqlDatabaseProperties.textdb_cache_scale);

cacheScale=tableprops.getIntegerProperty(HsqlDatabaseProperties.textdb_cache_scale,cacheScale);

int cacheSizeScale=dbProps.getIntegerProperty(HsqlDatabaseProperties.textdb_cache_size_scale);

cacheSizeScale=tableprops.getIntegerProperty(HsqlDatabaseProperties.textdb_cache_size_scale,cacheSizeScale);

maxCacheRows=(1 << cacheScale) * 3;

maxCacheRows=dbProps.getIntegerProperty(HsqlDatabaseProperties.textdb_cache_rows,maxCacheRows);

maxCacheRows=tableprops.getIntegerProperty(HsqlDatabaseProperties.textdb_cache_rows,maxCacheRows);

maxCacheBytes=((1 << cacheSizeScale) * maxCacheRows) / 1024;

if (maxCacheBytes < 4) {

maxCacheBytes=4;

}

maxCacheBytes=dbProps.getIntegerProperty(HsqlDatabaseProperties.textdb_cache_size,(int)maxCacheBytes);

maxCacheBytes=tableprops.getIntegerProperty(HsqlDatabaseProperties.textdb_cache_size,(int)maxCacheBytes);

maxCacheBytes*=1024;

}

Location: TextFileSettings.java

Content: 

private static String translateSep(String sep){

  return translateSep(sep,false);

}

Location: TextFileSettings.java

Content: 

/** 

 * Translates the escaped characters in a separator string and returns the non-escaped string.

 */

private static String translateSep(String sep,boolean isProperty){

  if (sep == null) {

    return null;

  }

  int next=sep.indexOf(BACKSLASH_CHAR);

  if (next != -1) {

    int start=0;

    char[] sepArray=sep.toCharArray();

    char ch=0;

    int len=sep.length();

    StringBuffer sb=new StringBuffer(len);

    do {

      sb.append(sepArray,start,next - start);

      start=++next;

      if (next >= len) {

        sb.append(BACKSLASH_CHAR);

        break;

      }

      if (!isProperty) {

        ch=sepArray[next];

      }

      if (ch == 'n') {

        sb.append(LF_CHAR);

        start++;

      }

 else       if (ch == 'r') {

        sb.append(CR_CHAR);

        start++;

      }

 else       if (ch == 't') {

        sb.append('\t');

        start++;

      }

 else       if (ch == BACKSLASH_CHAR) {

        sb.append(BACKSLASH_CHAR);

        start++;

      }

 else       if (ch == 'u') {

        start++;

        sb.append((char)Integer.parseInt(sep.substring(start,start + 4),16));

        start+=4;

      }

 else       if (sep.startsWith("semi",next)) {

        sb.append(';');

        start+=4;

      }

 else       if (sep.startsWith("space",next)) {

        sb.append(' ');

        start+=5;

      }

 else       if (sep.startsWith("quote",next)) {

        sb.append(DOUBLE_QUOTE_CHAR);

        start+=5;

      }

 else       if (sep.startsWith("apos",next)) {

        sb.append('\'');

        start+=4;

      }

 else       if (sep.startsWith("colon",next)) {

        sb.append(':');

        start+=5;

      }

 else {

        sb.append(BACKSLASH_CHAR);

        sb.append(sepArray[next]);

        start++;

      }

    }

 while ((next=sep.indexOf(BACKSLASH_CHAR,start)) != -1);

    sb.append(sepArray,start,len - start);

    sep=sb.toString();

  }

  return sep;

}

