Location: TestTextTable.java

Content: 

/** 

 * does some very basic insertion tests

 */

private void checkInsertions(){

  executeStatement("INSERT INTO \"" + m_products.getName() + "\" VALUES ( 3, 'Pears' )");

  verifyTableContent(m_products.getName(),m_products.appendRowData(new Object[]{new Integer(3),"Pears"}));

  try {

    m_statement.execute("INSERT INTO \"" + m_products.getName() + "\" VALUES ( 1, 'Green Apples' )");

    fail("PKs do not work as expected.");

  }

 catch (  SQLException e) {

  }

}

Location: TestTextTable.java

Content: 

/** 

 * checks different field separators

 */

private void checkSeparators(){

  String[][] separators=new String[][]{new String[]{";","\\semi"},new String[]{"\"","\\quote"},new String[]{" ","\\space"},new String[]{"'","\\apos"},new String[]{"\t","\\t"},new String[]{"\\","\\"},new String[]{".","."},new String[]{"-","-"},new String[]{"#","#"},new String[]{",",","}};

  for (int i=0; i < separators.length; ++i) {

    String separator=separators[i][0];

    String separatorSpec=separators[i][1];

    String tableName="customers_" + i;

    TextTableDescriptor tempCustomersDesc=new TextTableDescriptor(tableName,m_customers.getColumnSpec(),separator,separatorSpec,m_customers.getData());

    tempCustomersDesc.createTextFile();

    try {

      tempCustomersDesc.createTable(m_connection);

    }

 catch (    Throwable t) {

      fail("checkSeparators: separator '" + separatorSpec + "' doesn't work: "+ t.toString());

    }

    executeStatement("SET TABLE \"" + tableName + "\" SOURCE OFF");

    executeStatement("DROP TABLE \"" + tableName + "\"");

  }

}

Location: TestTextTable.java

Content: 

/** 

 * verifies whether implicit and explicit dis/connections from/to the text table source work as expected

 */

private void checkSourceConnection(){

  String sqlSetTable="SET TABLE \"" + m_products.getName() + "\"";

  assertEquals("internal error: retrieving the data source does not work properly at all.",m_products.getDataSourceSpec(),getDataSourceSpec(m_products.getName()));

  assertFalse("internal error: table should not be read-only, initially",isReadOnly(m_products.getName()));

  executeStatement(sqlSetTable + " SOURCE OFF");

  assertEquals("Disconnecting a text table should not reset the table source.",m_products.getDataSourceSpec(),getDataSourceSpec(m_products.getName()));

  assertTrue("Disconnecting from the table source should put the table into read-only mode.",isReadOnly(m_products.getName()));

  try {

    java.sql.ResultSet tableContent=m_statement.executeQuery("SELECT * FROM \"" + m_products.getName() + "\"");

    assertFalse("A disconnected table should be empty.",tableContent.next());

  }

 catch (  SQLException ex) {

    fail("Selecting from a disconnected table should return an empty result set.");

  }

  executeStatement(sqlSetTable + " SOURCE ON");

  verifyTableContent(m_products.getName(),m_products.getData());

  executeStatement(sqlSetTable + " READONLY TRUE");

  assertTrue("Setting the table to read-only failed.",isReadOnly(m_products.getName()));

  executeStatement(sqlSetTable + " SOURCE OFF");

  assertTrue("Still, a disconnected table should be read-only.",isReadOnly(m_products.getName()));

  executeStatement(sqlSetTable + " SOURCE ON");

  assertTrue("A reconnected readonly table should preserve its readonly-ness.",isReadOnly(m_products.getName()));

  executeStatement(sqlSetTable + " READONLY FALSE");

  assertFalse("Unable to reset the readonly-ness.",isReadOnly(m_products.getName()));

  try {

    String fileName="malformed.csv";

    PrintStream textFile=new PrintStream(FileUtil.getFileUtil().openOutputStreamElement(fileName,true));

    textFile.println("not a number;some text");

    textFile.close();

    new java.io.File(fileName).deleteOnExit();

    String newDataSourceSpec=fileName + ";encoding=UTF-8;fs=\\semi";

    try {

      m_statement.execute(sqlSetTable + " SOURCE \"" + newDataSourceSpec+ "\"");

      fail("a malformed data source was accepted silently.");

    }

 catch (    java.sql.SQLException es) {

    }

    assertTrue("A table with an invalid data source should fall back to original read-only.",!isReadOnly(m_products.getName()));

    assertEquals("A data source which cannot be set should nonetheless be remembered.",m_products.getDataSourceSpec(),getDataSourceSpec(m_products.getName()));

    executeStatement("SHUTDOWN");

    m_connection=newConnection();

    m_statement=m_connection.createStatement();

    assertEquals("A data source should survive a database shutdown.",m_products.getDataSourceSpec(),getDataSourceSpec(m_products.getName()));

    assertTrue("After shutdown and DB-reconnect, the table should keepe read-only attribute.",!isReadOnly(m_products.getName()));

    FileUtil.getFileUtil().delete(fileName);

    textFile=new PrintStream(FileUtil.getFileUtil().openOutputStreamElement(fileName,true));

    textFile.println("1;some text");

    textFile.close();

    m_statement.execute(sqlSetTable + " SOURCE \"" + newDataSourceSpec+ "\"");

    assertFalse("The file was fixed, reconnect was successful, so the table shouldn't be read-only.",isReadOnly(m_products.getName()));

    m_statement.execute(sqlSetTable + " SOURCE \"" + m_products.getDataSourceSpec()+ "\"");

    verifyTableContent(m_products.getName(),m_products.getData());

  }

 catch (  junit.framework.AssertionFailedError e) {

    throw e;

  }

catch (  Throwable t) {

    fail("checkSourceConnection: unable to check invalid data sources, error: " + t.toString());

  }

}

Location: TestTextTable.java

Content: 

/** 

 * executes a given m_statement <p>Basically, this method calls <code>m_statement.execute(sql)</code>, but wraps any <code>SQLException</code>s into a JUnit error.

 */

private void executeStatement(String sql){

  try {

    m_statement.execute(sql);

  }

 catch (  SQLException ex) {

    fail(ex.toString());

  }

}

Location: TestTextTable.java

Content: 

/** 

 * returns the data source definition for a given text table

 */

private String getDataSourceSpec(String tableName){

  String spec=null;

  try {

    java.sql.ResultSet results=m_statement.executeQuery("SELECT DATA_SOURCE_DEFINTION FROM INFORMATION_SCHEMA.SYSTEM_TEXTTABLES " + "WHERE TABLE_NAME='" + tableName + "'");

    results.next();

    spec=results.getString(1);

  }

 catch (  SQLException ex) {

    fail("getDataSourceSpec(" + tableName + ") failed: "+ ex.toString());

  }

  return spec;

}

Location: TestTextTable.java

Content: 

/** 

 * determines whether a given table is currently read-only

 */

private boolean isReadOnly(String tableName){

  boolean isReadOnly=true;

  try {

    java.sql.ResultSet systemTables=m_statement.executeQuery("SELECT READ_ONLY FROM INFORMATION_SCHEMA.SYSTEM_TABLES " + "WHERE TABLE_NAME='" + m_products.getName() + "'");

    systemTables.next();

    isReadOnly=systemTables.getBoolean(1);

  }

 catch (  SQLException ex) {

    fail("isReadOnly(" + tableName + ") failed: "+ ex.toString());

  }

  return isReadOnly;

}

Location: TestTextTable.java

Content: 

/** 

 * creates the database tables needed for the test

 */

private void setupDatabase(){

  try {

    m_connection=newConnection();

    m_statement=m_connection.createStatement();

    m_products.createTable(m_connection);

    m_customers.createTable(m_connection);

  }

 catch (  SQLException ex) {

    fail(ex.toString());

  }

}

Location: TestTextTable.java

Content: 

/** 

 * sets up all text files for the test database

 */

private void setupTextFiles(){

  m_products.createTextFile();

  m_customers.createTextFile();

}

Location: TestTextTable.java

Content: 

/** 

 * basic tests for text files

 */

public void testTextFiles(){

  verifyInitialContent();

  checkInsertions();

  checkSeparators();

  checkSourceConnection();

}

Location: TestTextTable.java

Content: 

/** 

 * Creates a new instance of TestTextTable 

 */

public TestTextTable(String testName){

  super(testName,"jdbc:hsqldb:file:test",false,false);

}

Location: TestTextTable.java

Content: 

/** 

 * verifies the initial content of the "products" text table, plus a simple insertion

 */

private void verifyInitialContent(){

  verifyTableContent(m_products.getName(),m_products.getData());

  verifyTableContent(m_customers.getName(),m_customers.getData());

}

Location: TestTextTable.java

Content: 

/** 

 * verifies the content of a given table is as expected

 * @param tableName the name of the table whose content is to check

 * @param expectedValues the values expected in the table

 */

private void verifyTableContent(String tableName,Object[][] expectedValues){

  String selectStmt="SELECT * FROM \"" + tableName + "\" ORDER BY ID";

  try {

    java.sql.ResultSet results=m_statement.executeQuery(selectStmt);

    int row=0;

    while (results.next()) {

      row=results.getRow();

      Object[] expectedRowContent=expectedValues[row - 1];

      for (int col=0; col < expectedRowContent.length; ++col) {

        Object expectedValue=expectedRowContent[col];

        Object foundValue=results.getObject(col + 1);

        assertEquals("table " + tableName + ", row "+ row+ ", column "+ col+ ":",expectedValue,foundValue);

      }

    }

    assertEquals("table " + tableName + "'s row count: ",expectedValues.length,row);

  }

 catch (  junit.framework.AssertionFailedError e) {

    throw e;

  }

catch (  Throwable t) {

    fail("verifyTableContent(" + tableName + ") failed with "+ t.toString());

  }

}

