Location: ValidatingResourceBundle.java

Content: 

/** 

 * @see RefCapablePropertyResourceBundle#getExpandedString(String,int) 

 */

public String getExpandedString(Enum<?> key){

  if (!enumType.isInstance(key))   throw new IllegalArgumentException("Key is a " + key.getClass().getName() + ",not a "+ enumType.getName()+ ":  "+ key);

  return wrappedRCPRB.getExpandedString(key.toString(),missingPropertyBehavior);

}

Location: ValidatingResourceBundle.java

Content: 

/** 

 * @see RefCapablePropertyResourceBundle#getExpandedString(String,String[],int,int) 

 */

public String getExpandedString(Enum<?> key,String... strings){

  if (!enumType.isInstance(key))   throw new IllegalArgumentException("Key is a " + key.getClass().getName() + ",not a "+ enumType.getName()+ ":  "+ key);

  return wrappedRCPRB.getExpandedString(key.toString(),strings,missingPropertyBehavior,missingPosValueBehavior);

}

Location: ValidatingResourceBundle.java

Content: 

public int getMissingPosValueBehavior(){

  return missingPosValueBehavior;

}

Location: ValidatingResourceBundle.java

Content: 

public int getMissingPropertyBehavior(){

  return missingPropertyBehavior;

}

Location: ValidatingResourceBundle.java

Content: 

/** 

 * @see RefCapablePropertyResourceBundle#getString(String) 

 */

public String getString(Enum<?> key){

  if (!enumType.isInstance(key))   throw new IllegalArgumentException("Key is a " + key.getClass().getName() + ",not a "+ enumType.getName()+ ":  "+ key);

  return wrappedRCPRB.getString(key.toString());

}

Location: ValidatingResourceBundle.java

Content: 

public String getString(Enum<?> key,int i1){

  if (!enumType.isInstance(key))   throw new IllegalArgumentException("Key is a " + key.getClass().getName() + ",not a "+ enumType.getName()+ ":  "+ key);

  return getString(key,new String[]{Integer.toString(i1)});

}

Location: ValidatingResourceBundle.java

Content: 

public String getString(Enum<?> key,int i1,int i2){

  if (!enumType.isInstance(key))   throw new IllegalArgumentException("Key is a " + key.getClass().getName() + ",not a "+ enumType.getName()+ ":  "+ key);

  return getString(key,new String[]{Integer.toString(i1),Integer.toString(i2)});

}

Location: ValidatingResourceBundle.java

Content: 

public String getString(Enum<?> key,int i1,int i2,int i3){

  if (!enumType.isInstance(key))   throw new IllegalArgumentException("Key is a " + key.getClass().getName() + ",not a "+ enumType.getName()+ ":  "+ key);

  return getString(key,new String[]{Integer.toString(i1),Integer.toString(i2),Integer.toString(i3)});

}

Location: ValidatingResourceBundle.java

Content: 

public String getString(Enum<?> key,int i1,int i2,String s3){

  if (!enumType.isInstance(key))   throw new IllegalArgumentException("Key is a " + key.getClass().getName() + ",not a "+ enumType.getName()+ ":  "+ key);

  return getString(key,new String[]{Integer.toString(i1),Integer.toString(i2),s3});

}

Location: ValidatingResourceBundle.java

Content: 

public String getString(Enum<?> key,int i1,String s2){

  if (!enumType.isInstance(key))   throw new IllegalArgumentException("Key is a " + key.getClass().getName() + ",not a "+ enumType.getName()+ ":  "+ key);

  return getString(key,new String[]{Integer.toString(i1),s2});

}

Location: ValidatingResourceBundle.java

Content: 

public String getString(Enum<?> key,int i1,String s2,int i3){

  if (!enumType.isInstance(key))   throw new IllegalArgumentException("Key is a " + key.getClass().getName() + ",not a "+ enumType.getName()+ ":  "+ key);

  return getString(key,new String[]{Integer.toString(i1),s2,Integer.toString(i3)});

}

Location: ValidatingResourceBundle.java

Content: 

public String getString(Enum<?> key,int i1,String s2,String s3){

  if (!enumType.isInstance(key))   throw new IllegalArgumentException("Key is a " + key.getClass().getName() + ",not a "+ enumType.getName()+ ":  "+ key);

  return getString(key,new String[]{Integer.toString(i1),s2,s3});

}

Location: ValidatingResourceBundle.java

Content: 

/** 

 * @see RefCapablePropertyResourceBundle#getString(String,String[],int) 

 */

public String getString(Enum<?> key,String... strings){

  if (!enumType.isInstance(key))   throw new IllegalArgumentException("Key is a " + key.getClass().getName() + ",not a "+ enumType.getName()+ ":  "+ key);

  return wrappedRCPRB.getString(key.toString(),strings,missingPosValueBehavior);

}

Location: ValidatingResourceBundle.java

Content: 

public String getString(Enum<?> key,String s1,int i2){

  if (!enumType.isInstance(key))   throw new IllegalArgumentException("Key is a " + key.getClass().getName() + ",not a "+ enumType.getName()+ ":  "+ key);

  return getString(key,new String[]{s1,Integer.toString(i2)});

}

Location: ValidatingResourceBundle.java

Content: 

public String getString(Enum<?> key,String s1,int i2,int i3){

  if (!enumType.isInstance(key))   throw new IllegalArgumentException("Key is a " + key.getClass().getName() + ",not a "+ enumType.getName()+ ":  "+ key);

  return getString(key,new String[]{s1,Integer.toString(i2),Integer.toString(i3)});

}

Location: ValidatingResourceBundle.java

Content: 

public String getString(Enum<?> key,String s1,int i2,String s3){

  if (!enumType.isInstance(key))   throw new IllegalArgumentException("Key is a " + key.getClass().getName() + ",not a "+ enumType.getName()+ ":  "+ key);

  return getString(key,new String[]{s1,Integer.toString(i2),s3});

}

Location: ValidatingResourceBundle.java

Content: 

public String getString(Enum<?> key,String s1,String s2,int i3){

  if (!enumType.isInstance(key))   throw new IllegalArgumentException("Key is a " + key.getClass().getName() + ",not a "+ enumType.getName()+ ":  "+ key);

  return getString(key,new String[]{s1,s2,Integer.toString(i3)});

}

Location: ValidatingResourceBundle.java

Content: 

public static String resourceKeyFor(Enum<?> enumKey){

  return enumKey.name().replace('_','.');

}

Location: ValidatingResourceBundle.java

Content: 

/** 

 * Set behavior for get*String(String, String[]) method when a positional index (like %{4}) is used but no subs value was given for that index.  Set to one of <UL> <LI>RefCapablePropertyResourceBundle.THROW_BEHAVIOR <LI>RefCapablePropertyResourceBundle.EMPTYSTRING_BEHAVIOR <LI>RefCapablePropertyResourceBundle.NOOP_BEHAVIOR </UL> The first value is the default.

 */

public void setMissingPosValueBehavior(int missingPosValueBehavior){

  this.missingPosValueBehavior=missingPosValueBehavior;

}

Location: ValidatingResourceBundle.java

Content: 

/** 

 * Set behavior for get*String*() method when a referred-to System Property is not set.  Set to one of <UL> <LI>RefCapablePropertyResourceBundle.THROW_BEHAVIOR <LI>RefCapablePropertyResourceBundle.EMPTYSTRING_BEHAVIOR <LI>RefCapablePropertyResourceBundle.NOOP_BEHAVIOR </UL> The first value is the default.

 */

public void setMissingPropertyBehavior(int missingPropertyBehavior){

  this.missingPropertyBehavior=missingPropertyBehavior;

}

Location: ValidatingResourceBundle.java

Content: 

public ValidatingResourceBundle(String baseName,Class<? extends Enum<?>> enumType){

  this.enumType=enumType;

  try {

    wrappedRCPRB=RefCapablePropertyResourceBundle.getBundle(baseName,enumType.getClassLoader());

    validate();

  }

 catch (  RuntimeException re) {

    System.err.println("Failed to initialize resource bundle: " + re);

    throw re;

  }

}

