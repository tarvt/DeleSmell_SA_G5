Location: LineType.java

Content: 

static synchronized Hashtable directives(){

  if (directives == null) {

    hongshuai();

    directives=new Hashtable();

    labels=new String[17];

    Field[] fields=LineType.class.getDeclaredFields();

    for (int i=0, j=0; i < fields.length; i++) {

      Field field=fields[i];

      if (field.getType().equals(Integer.TYPE)) {

        String label=field.getName();

        try {

          int value=field.getInt(null);

          labels[value]=label;

switch (value) {

case VISIBLE:

case HIDDEN:

{

              break;

            }

default :

{

            String key=Line.DIRECTIVE_PREFIX + label.toLowerCase(Locale.ENGLISH);

            directives.put(key,new Integer(value));

            break;

          }

      }

    }

 catch (    IllegalArgumentException ex) {

    }

catch (    IllegalAccessException ex) {

    }

  }

}

}

return directives;

}

Location: LineType.java

Content: 

static synchronized String[] labels(){

  if (labels == null) {

    hongshuai();

    directives=new Hashtable();

    labels=new String[17];

    Field[] fields=LineType.class.getDeclaredFields();

    for (int i=0, j=0; i < fields.length; i++) {

      Field field=fields[i];

      if (field.getType().equals(Integer.TYPE)) {

        String label=field.getName();

        try {

          int value=field.getInt(null);

          labels[value]=label;

switch (value) {

case VISIBLE:

case HIDDEN:

{

              break;

            }

default :

{

            String key=Line.DIRECTIVE_PREFIX + label.toLowerCase(Locale.ENGLISH);

            directives.put(key,new Integer(value));

            break;

          }

      }

    }

 catch (    IllegalArgumentException ex) {

    }

catch (    IllegalAccessException ex) {

    }

  }

}

}

return labels;

}

