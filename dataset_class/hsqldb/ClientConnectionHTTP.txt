Location: ClientConnectionHTTP.java

Content: 

public ClientConnectionHTTP(ClientConnectionHTTP other){

  super(other);

}

Location: ClientConnectionHTTP.java

Content: 

public ClientConnectionHTTP(String host,int port,String path,String database,boolean isTLS,boolean isTLSWrapper,String user,String password,int timeZoneSeconds){

  super(host,port,path,database,isTLS,isTLSWrapper,user,password,timeZoneSeconds);

}

Location: ClientConnectionHTTP.java

Content: 

protected void closeConnection(){

}

Location: ClientConnectionHTTP.java

Content: 

protected void initConnection(String host,int port,boolean isTLS){

}

Location: ClientConnectionHTTP.java

Content: 

/** 

 * This just opens (a new or re-uses a connection) Keep-Alive. Contrary to before, the dataOutput and dataInput are not connected to the connection's Output- and Input-Streams here, because when connecting to the input stream here, somehow rules out writing to the output stream.

 */

protected void openConnection(String host,int port,boolean isTLS){

  try {

    URL url=null;

    String s="";

    if (!path.endsWith("/")) {

      s="/";

    }

    if (isTLS) {

      url=new URL("https://" + host + ":"+ port+ path+ s+ database);

    }

 else {

      url=new URL("http://" + host + ":"+ port+ path+ s+ database);

    }

    httpConnection=(HttpURLConnection)url.openConnection();

    httpConnection.setDefaultUseCaches(false);

  }

 catch (  IOException e) {

    e.printStackTrace(System.out);

  }

}

Location: ClientConnectionHTTP.java

Content: 

protected void write(Result r) throws IOException, HsqlException {

  HsqlByteArrayOutputStream memStream=new HsqlByteArrayOutputStream();

  DataOutputStream tempOutput=new DataOutputStream(memStream);

  r.write(this,tempOutput,rowOut);

  httpConnection.setRequestMethod("POST");

  httpConnection.setDoOutput(true);

  httpConnection.setUseCaches(false);

  httpConnection.setRequestProperty("Content-Type","application/octet-stream");

  httpConnection.setRequestProperty("Content-Length",String.valueOf(IDLENGTH + memStream.size()));

  dataOutput=new DataOutputStream(httpConnection.getOutputStream());

  dataOutput.writeInt(r.getDatabaseId());

  dataOutput.writeLong(r.getSessionId());

  memStream.writeTo(dataOutput);

  dataOutput.flush();

}

