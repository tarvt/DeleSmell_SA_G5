Location: FunctionCustom.java

Content: 

private FunctionCustom(int id){

  super();

  this.funcType=id;

  isDeterministic=!nonDeterministicFuncSet.contains(id);

switch (id) {

case FUNC_SQLCODE:

case FUNC_SQLERRM:

    parseList=optionalNoParamList;

  break;

case FUNC_DBTIMEZONE:

case FUNC_SESSIONTIMEZONE:

case FUNC_SYSDATE:

case FUNC_SYSTIMESTAMP:

parseList=optionalNoParamList;

break;

case FUNC_ACTION_ID:

case FUNC_DATABASE:

case FUNC_DATABASE_ISOLATION_LEVEL:

case FUNC_DATABASE_NAME:

case FUNC_DATABASE_TIMEZONE:

case FUNC_DATABASE_VERSION:

case FUNC_ISAUTOCOMMIT:

case FUNC_ISOLATION_LEVEL:

case FUNC_ISREADONLYDATABASE:

case FUNC_ISREADONLYDATABASEFILES:

case FUNC_ISREADONLYSESSION:

case FUNC_PI:

case FUNC_SESSION_ID:

case FUNC_SESSION_ISOLATION_LEVEL:

case FUNC_SESSION_TIMEZONE:

case FUNC_TIMEZONE:

case FUNC_TRANSACTION_CONTROL:

case FUNC_TRANSACTION_ID:

case FUNC_TRANSACTION_SIZE:

parseList=emptyParamList;

break;

case FUNC_ACOS:

case FUNC_ASCII:

case FUNC_ASIN:

case FUNC_ATAN:

case FUNC_BITNOT:

case FUNC_CHAR:

case FUNC_COS:

case FUNC_COSH:

case FUNC_COT:

case FUNC_DEGREES:

case FUNC_DAYS:

case FUNC_FROM_BASE64:

case FUNC_HEX:

case FUNC_HEXTORAW:

case FUNC_LAST_DAY:

case FUNC_LOB_ID:

case FUNC_LOG10:

case FUNC_RADIANS:

case FUNC_RAWTOHEX:

case FUNC_REVERSE:

case FUNC_ROUNDMAGIC:

case FUNC_SIGN:

case FUNC_SIN:

case FUNC_SINH:

case FUNC_SOUNDEX:

case FUNC_SPACE:

case FUNC_SYS_EXTRACT_UTC:

case FUNC_TAN:

case FUNC_TANH:

case FUNC_TIMESTAMP_WITH_ZONE:

case FUNC_TO_BASE64:

case FUNC_TO_DSINTERVAL:

case FUNC_TO_YMINTERVAL:

case FUNC_TO_NUMBER:

case FUNC_UNHEX:

parseList=singleParamList;

break;

case FUNC_ADD_MONTHS:

case FUNC_ATAN2:

case FUNC_CONCAT:

case FUNC_CRYPT_KEY:

case FUNC_BITAND:

case FUNC_BITANDNOT:

case FUNC_BITOR:

case FUNC_BITXOR:

case FUNC_DIFFERENCE:

case FUNC_FROM_TZ:

case FUNC_LEFT:

case FUNC_MONTHS_BETWEEN:

case FUNC_NANVL:

case FUNC_NEXT_DAY:

case FUNC_NUMTODSINTERVAL:

case FUNC_NUMTOYMINTERVAL:

case FUNC_REGEXP_MATCHES:

case FUNC_REGEXP_SUBSTRING:

case FUNC_REGEXP_SUBSTRING_ARRAY:

case FUNC_REPEAT:

case FUNC_RIGHT:

parseList=doubleParamList;

break;

case FUNC_TO_CHAR:

case FUNC_TO_DATE:

case FUNC_TO_TIMESTAMP:

case FUNC_TO_TIMESTAMP_TZ:

parseList=optionalDoubleParamList;

break;

case FUNC_LOAD_FILE:

case FUNC_ROUND:

case FUNC_TIMESTAMP:

case FUNC_TRUNC:

case FUNC_TRUNCATE:

parseList=optionalDoubleParamList;

break;

case FUNC_DATEDIFF:

parseList=new short[]{Tokens.OPENBRACKET,Tokens.X_TOKEN,Tokens.COMMA,Tokens.QUESTION,Tokens.COMMA,Tokens.QUESTION,Tokens.CLOSEBRACKET};

parseListAlt=new short[]{Tokens.OPENBRACKET,Tokens.QUESTION,Tokens.COMMA,Tokens.QUESTION,Tokens.X_OPTION,2,Tokens.COMMA,Tokens.QUESTION,Tokens.CLOSEBRACKET};

break;

case FUNC_DATEADD:

parseList=new short[]{Tokens.OPENBRACKET,Tokens.X_TOKEN,Tokens.COMMA,Tokens.QUESTION,Tokens.COMMA,Tokens.QUESTION,Tokens.CLOSEBRACKET};

parseListAlt=tripleParamList;

break;

case FUNC_DATENAME:

case FUNC_DATEPART:

parseList=new short[]{Tokens.OPENBRACKET,Tokens.X_TOKEN,Tokens.COMMA,Tokens.QUESTION,Tokens.CLOSEBRACKET};

break;

case FUNC_DATE_ADD:

case FUNC_DATE_SUB:

parseList=doubleParamList;

break;

case FUNC_NEW_TIME:

case FUNC_SEQUENCE_ARRAY:

case FUNC_TRANSLATE:

parseList=tripleParamList;

break;

case FUNC_LPAD:

case FUNC_RPAD:

case FUNC_POSITION_CHAR:

case FUNC_REPLACE:

parseList=new short[]{Tokens.OPENBRACKET,Tokens.QUESTION,Tokens.COMMA,Tokens.QUESTION,Tokens.X_OPTION,2,Tokens.COMMA,Tokens.QUESTION,Tokens.CLOSEBRACKET};

break;

case FUNC_REGEXP_REPLACE:

parseList=new short[]{Tokens.OPENBRACKET,Tokens.QUESTION,Tokens.COMMA,Tokens.QUESTION,Tokens.X_OPTION,2,Tokens.COMMA,Tokens.QUESTION,Tokens.X_OPTION,2,Tokens.COMMA,Tokens.QUESTION,Tokens.X_OPTION,2,Tokens.COMMA,Tokens.QUESTION,Tokens.X_OPTION,2,Tokens.COMMA,Tokens.QUESTION,Tokens.CLOSEBRACKET};

break;

case FUNC_UNIX_MILLIS:

case FUNC_UNIX_TIMESTAMP:

case FUNC_UUID:

parseList=optionalSingleParamList;

break;

case FUNC_EXTRACT:

name=Tokens.T_EXTRACT;

parseList=singleParamList;

break;

case FUNC_TRIM_CHAR:

name=Tokens.T_TRIM;

parseList=singleParamList;

break;

case FUNC_OVERLAY_CHAR:

name=Tokens.T_OVERLAY;

parseList=quadParamList;

break;

case FUNC_IDENTITY:

name=Tokens.T_IDENTITY;

parseList=emptyParamList;

break;

case FUNC_DIAGNOSTICS:

parseList=new short[]{Tokens.OPENBRACKET,Tokens.ROW_COUNT,Tokens.CLOSEBRACKET};

break;

case FUNC_POSITION_ARRAY:

parseList=new short[]{Tokens.OPENBRACKET,Tokens.QUESTION,Tokens.IN,Tokens.QUESTION,Tokens.X_OPTION,2,Tokens.FROM,Tokens.QUESTION,Tokens.CLOSEBRACKET};

break;

case FUNC_SORT_ARRAY:

parseList=new short[]{Tokens.OPENBRACKET,Tokens.QUESTION,Tokens.X_OPTION,4,Tokens.X_KEYSET,2,Tokens.ASC,Tokens.DESC,Tokens.X_OPTION,5,Tokens.NULLS,Tokens.X_KEYSET,2,Tokens.FIRST,Tokens.LAST,Tokens.CLOSEBRACKET};

break;

case FUNC_TIMESTAMPADD:

name=Tokens.T_TIMESTAMPADD;

parseList=new short[]{Tokens.OPENBRACKET,Tokens.X_KEYSET,10,Tokens.SQL_TSI_FRAC_SECOND,Tokens.SQL_TSI_MILLI_SECOND,Tokens.SQL_TSI_SECOND,Tokens.SQL_TSI_MINUTE,Tokens.SQL_TSI_HOUR,Tokens.SQL_TSI_DAY,Tokens.SQL_TSI_WEEK,Tokens.SQL_TSI_MONTH,Tokens.SQL_TSI_QUARTER,Tokens.SQL_TSI_YEAR,Tokens.COMMA,Tokens.QUESTION,Tokens.COMMA,Tokens.QUESTION,Tokens.CLOSEBRACKET};

parseListAlt=new short[]{Tokens.OPENBRACKET,Tokens.X_KEYSET,10,Tokens.MICROSECOND,Tokens.MILLISECOND,Tokens.SECOND,Tokens.MINUTE,Tokens.HOUR,Tokens.DAY,Tokens.WEEK,Tokens.MONTH,Tokens.QUARTER,Tokens.YEAR,Tokens.COMMA,Tokens.QUESTION,Tokens.COMMA,Tokens.QUESTION,Tokens.CLOSEBRACKET};

break;

case FUNC_TIMESTAMPDIFF:

name=Tokens.T_TIMESTAMPDIFF;

parseList=new short[]{Tokens.OPENBRACKET,Tokens.X_KEYSET,10,Tokens.SQL_TSI_FRAC_SECOND,Tokens.SQL_TSI_MILLI_SECOND,Tokens.SQL_TSI_SECOND,Tokens.SQL_TSI_MINUTE,Tokens.SQL_TSI_HOUR,Tokens.SQL_TSI_DAY,Tokens.SQL_TSI_WEEK,Tokens.SQL_TSI_MONTH,Tokens.SQL_TSI_QUARTER,Tokens.SQL_TSI_YEAR,Tokens.COMMA,Tokens.QUESTION,Tokens.COMMA,Tokens.QUESTION,Tokens.CLOSEBRACKET};

parseListAlt=new short[]{Tokens.OPENBRACKET,Tokens.X_KEYSET,10,Tokens.MICROSECOND,Tokens.MILLISECOND,Tokens.SECOND,Tokens.MINUTE,Tokens.HOUR,Tokens.DAY,Tokens.WEEK,Tokens.MONTH,Tokens.QUARTER,Tokens.YEAR,Tokens.COMMA,Tokens.QUESTION,Tokens.COMMA,Tokens.QUESTION,Tokens.CLOSEBRACKET};

break;

case FUNC_RAND:

parseList=optionalSingleParamList;

break;

default :

throw Error.runtimeError(ErrorCode.U_S0500,"FunctionCustom");

}

}

Location: FunctionCustom.java

Content: 

private static int getExtractTokenForTSIPart(int part){

switch (part) {

case Tokens.SQL_TSI_FRAC_SECOND:

    return Tokens.NANOSECOND;

case Tokens.SQL_TSI_MILLI_SECOND:

  return Tokens.MILLISECOND;

case Tokens.SQL_TSI_SECOND:

return Tokens.SECOND;

case Tokens.SQL_TSI_MINUTE:

return Tokens.MINUTE;

case Tokens.SQL_TSI_HOUR:

return Tokens.HOUR;

case Tokens.SQL_TSI_DAY:

return Tokens.DAY;

case Tokens.DAY_OF_WEEK:

return Tokens.DAY_OF_WEEK;

case Tokens.DAY_OF_YEAR:

return Tokens.DAY_OF_YEAR;

case Tokens.TIMEZONE:

return Tokens.TIMEZONE;

case Tokens.SQL_TSI_WEEK:

return Tokens.WEEK_OF_YEAR;

case Tokens.SQL_TSI_MONTH:

return Tokens.MONTH;

case Tokens.SQL_TSI_QUARTER:

return Tokens.QUARTER;

case Tokens.SQL_TSI_YEAR:

return Tokens.YEAR;

default :

throw Error.runtimeError(ErrorCode.U_S0500,"FunctionCustom");

}

}

Location: FunctionCustom.java

Content: 

private String getSQLSimple(){

  StringBuffer sb=new StringBuffer(name).append('(');

  for (int i=0; i < nodes.length; i++) {

    if (i > 0) {

      sb.append(',');

    }

    sb.append(nodes[i].getSQL());

  }

  sb.append(')');

  return sb.toString();

}

Location: FunctionCustom.java

Content: 

static int getSQLTypeForToken(String string){

  int type=-1;

  if ("YEAR_MONTH".equalsIgnoreCase(string)) {

    type=Types.SQL_INTERVAL_YEAR_TO_MONTH;

  }

 else   if ("DAY_HOUR".equalsIgnoreCase(string)) {

    type=Types.SQL_INTERVAL_DAY_TO_HOUR;

  }

 else   if ("DAY_MINUTE".equalsIgnoreCase(string)) {

    type=Types.SQL_INTERVAL_DAY_TO_MINUTE;

  }

 else   if ("DAY_SECOND".equalsIgnoreCase(string)) {

    type=Types.SQL_INTERVAL_DAY_TO_SECOND;

  }

 else   if ("DAY_MICROSECOND".equalsIgnoreCase(string)) {

    type=Types.SQL_INTERVAL_DAY_TO_SECOND;

  }

 else   if ("HOUR_MINUTE".equalsIgnoreCase(string)) {

    type=Types.SQL_INTERVAL_HOUR_TO_MINUTE;

  }

 else   if ("HOUR_SECOND".equalsIgnoreCase(string)) {

    type=Types.SQL_INTERVAL_HOUR_TO_SECOND;

  }

 else   if ("HOUR_MICROSECOND".equalsIgnoreCase(string)) {

    type=Types.SQL_INTERVAL_HOUR_TO_SECOND;

  }

 else   if ("MINUTE_SECOND".equalsIgnoreCase(string)) {

    type=Types.SQL_INTERVAL_MINUTE_TO_SECOND;

  }

 else   if ("MINUTE_MICROSECOND".equalsIgnoreCase(string)) {

    type=Types.SQL_INTERVAL_MINUTE_TO_SECOND;

  }

 else   if ("SECOND_MICROSECOND".equalsIgnoreCase(string)) {

    type=Types.SQL_INTERVAL_SECOND;

  }

  return type;

}

Location: FunctionCustom.java

Content: 

private static IntKeyIntValueHashMap getTranslationMap(String source,String dest){

  IntKeyIntValueHashMap map=new IntKeyIntValueHashMap();

  for (int i=0; i < source.length(); i++) {

    int character=source.charAt(i);

    if (i >= dest.length()) {

      map.put(character,-1);

      continue;

    }

    int value=dest.charAt(i);

    map.put(character,value);

  }

  return map;

}

Location: FunctionCustom.java

Content: 

private static int getTSIToken(String string){

  int part;

  if ("yy".equalsIgnoreCase(string) || "yyyy".equalsIgnoreCase(string) || "year".equalsIgnoreCase(string)) {

    part=Tokens.SQL_TSI_YEAR;

  }

 else   if ("qq".equalsIgnoreCase(string) || "quarter".equalsIgnoreCase(string)) {

    part=Tokens.SQL_TSI_QUARTER;

  }

 else   if ("mm".equalsIgnoreCase(string) || "month".equalsIgnoreCase(string)) {

    part=Tokens.SQL_TSI_MONTH;

  }

 else   if ("dd".equalsIgnoreCase(string) || "day".equalsIgnoreCase(string)) {

    part=Tokens.SQL_TSI_DAY;

  }

 else   if ("dy".equalsIgnoreCase(string) || "dayofyear".equalsIgnoreCase(string)) {

    part=Tokens.DAY_OF_YEAR;

  }

 else   if ("dw".equalsIgnoreCase(string) || "weekday".equalsIgnoreCase(string)) {

    part=Tokens.DAY_OF_WEEK;

  }

 else   if ("wk".equalsIgnoreCase(string) || "week".equalsIgnoreCase(string)) {

    part=Tokens.SQL_TSI_WEEK;

  }

 else   if ("hh".equalsIgnoreCase(string) || "hour".equalsIgnoreCase(string)) {

    part=Tokens.SQL_TSI_HOUR;

  }

 else   if ("mi".equalsIgnoreCase(string) || "minute".equalsIgnoreCase(string)) {

    part=Tokens.SQL_TSI_MINUTE;

  }

 else   if ("ss".equalsIgnoreCase(string) || "second".equalsIgnoreCase(string)) {

    part=Tokens.SQL_TSI_SECOND;

  }

 else   if ("ms".equalsIgnoreCase(string) || "millisecond".equalsIgnoreCase(string)) {

    part=Tokens.SQL_TSI_MILLI_SECOND;

  }

 else   if ("mcs".equalsIgnoreCase(string) || "microsecond".equalsIgnoreCase(string)) {

    part=Tokens.SQL_TSI_MICRO_SECOND;

  }

 else   if ("ns".equalsIgnoreCase(string) || "nanosecond".equalsIgnoreCase(string)) {

    part=Tokens.SQL_TSI_FRAC_SECOND;

  }

 else   if ("tz".equalsIgnoreCase(string) || "tzoffset".equalsIgnoreCase(string)) {

    part=Tokens.TIMEZONE;

  }

 else {

    throw Error.error(ErrorCode.X_42566,string);

  }

  return part;

}

Location: FunctionCustom.java

Content: 

public static boolean isRegularFunction(int tokenType){

  return customRegularFuncMap.get(tokenType,-1) != -1;

}

Location: FunctionCustom.java

Content: 

public static boolean isValueFunction(int tokenType){

  return customValueFuncMap.get(tokenType,-1) != -1;

}

Location: FunctionCustom.java

Content: 

public static FunctionSQL newCustomFunction(Session session,String token,int tokenType){

  int id=customRegularFuncMap.get(tokenType,-1);

  if (id == -1) {

    id=customValueFuncMap.get(tokenType,-1);

  }

  if (id == -1) {

    return null;

  }

switch (tokenType) {

case Tokens.BITLENGTH:

case Tokens.LCASE:

case Tokens.LENGTH:

case Tokens.LOG:

case Tokens.OCTETLENGTH:

case Tokens.UCASE:

    return new FunctionSQL(id);

case Tokens.CURDATE:

case Tokens.CURTIME:

case Tokens.TODAY:

case Tokens.NOW:

{

    FunctionSQL function=new FunctionSQL(id);

    function.parseList=optionalNoParamList;

    return function;

  }

case Tokens.SUBSTR:

{

  FunctionSQL function=new FunctionSQL(id);

  function.parseList=tripleParamList;

  return function;

}

case Tokens.DATENAME:

case Tokens.DATEPART:

case Tokens.EOMONTH:

case Tokens.NEWID:

if (!session.database.sqlSyntaxMss) {

return null;

}

break;

case Tokens.DBTIMEZONE:

case Tokens.SYS_GUID:

case Tokens.SYSTIMESTAMP:

if (!session.database.sqlSyntaxOra) {

return null;

}

}

FunctionCustom function=new FunctionCustom(id);

if (id == FUNC_TRIM_CHAR) {

switch (tokenType) {

case Tokens.LTRIM:

function.extractSpec=Tokens.LEADING;

break;

case Tokens.RTRIM:

function.extractSpec=Tokens.TRAILING;

break;

default :

}

}

if (id == FUNC_EXTRACT) {

switch (tokenType) {

case Tokens.DAYNAME:

function.extractSpec=Tokens.DAY_NAME;

break;

case Tokens.MONTHNAME:

function.extractSpec=Tokens.MONTH_NAME;

break;

case Tokens.DAYOFMONTH:

function.extractSpec=Tokens.DAY_OF_MONTH;

break;

case Tokens.DAYOFWEEK:

function.extractSpec=Tokens.DAY_OF_WEEK;

break;

case Tokens.DAYOFYEAR:

function.extractSpec=Tokens.DAY_OF_YEAR;

break;

case Tokens.WEEK:

function.extractSpec=Tokens.WEEK_OF_YEAR;

break;

default :

function.extractSpec=tokenType;

}

}

if (function.name == null) {

function.name=token;

}

return function;

}

Location: FunctionCustom.java

Content: 

private static int regexpParams(String params){

  int flags=0;

  if (params == null) {

    return flags;

  }

  for (int i=0; i < params.length(); ++i) {

switch (params.charAt(i)) {

case 'i':

      flags|=Pattern.CASE_INSENSITIVE;

    break;

case 'c':

  flags&=~Pattern.CASE_INSENSITIVE;

flags|=Pattern.UNICODE_CASE;

break;

case 'n':

flags|=Pattern.DOTALL;

break;

case 'm':

flags|=Pattern.MULTILINE;

break;

default :

throw Error.error(ErrorCode.X_22511,params);

}

}

return flags;

}

Location: FunctionCustom.java

Content: 

/** 

 * Returns a four character code representing the sound of the given <code>String</code>. Non-ASCCI characters in the input <code>String</code> are ignored. <p> This method was rewritten for HSQLDB to comply with the description at <a href="http://www.archives.gov/research/census/soundex.html"> http://www.archives.gov/research/census/soundex.html </a>.<p>

 * @param s the <code>String</code> for which to calculate the 4 character<code>SOUNDEX</code> value

 * @return the 4 character <code>SOUNDEX</code> value for the given<code>String</code>

 */

private static char[] soundex(String s){

  if (s == null) {

    return null;

  }

  s=s.toUpperCase(Locale.ENGLISH);

  int len=s.length();

  char[] b=new char[]{'0','0','0','0'};

  char lastdigit='0';

  for (int i=0, j=0; i < len && j < 4; i++) {

    char c=s.charAt(i);

    char newdigit;

    if ("AEIOUY".indexOf(c) != -1) {

      newdigit='7';

    }

 else     if (c == 'H' || c == 'W') {

      newdigit='8';

    }

 else     if ("BFPV".indexOf(c) != -1) {

      newdigit='1';

    }

 else     if ("CGJKQSXZ".indexOf(c) != -1) {

      newdigit='2';

    }

 else     if (c == 'D' || c == 'T') {

      newdigit='3';

    }

 else     if (c == 'L') {

      newdigit='4';

    }

 else     if (c == 'M' || c == 'N') {

      newdigit='5';

    }

 else     if (c == 'R') {

      newdigit='6';

    }

 else {

      continue;

    }

    if (j == 0) {

      b[j++]=c;

      lastdigit=newdigit;

    }

 else     if (newdigit <= '6') {

      if (newdigit != lastdigit) {

        b[j++]=newdigit;

        lastdigit=newdigit;

      }

    }

 else     if (newdigit == '7') {

      lastdigit=newdigit;

    }

  }

  return b;

}

Location: FunctionCustom.java

Content: 

private static String translateWithMap(String source,IntKeyIntValueHashMap map){

  StringBuffer sb=new StringBuffer(source.length());

  for (int i=0; i < source.length(); i++) {

    int character=source.charAt(i);

    int value=map.get(character,-2);

    if (value == -2) {

      sb.append((char)character);

    }

 else     if (value == -1) {

    }

 else {

      sb.append((char)value);

    }

  }

  return sb.toString();

}

