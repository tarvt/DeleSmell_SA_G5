Location: StatementProcedure.java

Content: 

Result executeJavaProcedure(Session session,Connection connection){

  Result result=Result.updateZeroResult;

  Object[] callArguments=session.sessionContext.routineArguments;

  Object[] data=procedure.convertArgsToJava(session,callArguments);

  if (procedure.javaMethodWithConnection) {

    data[0]=connection;

  }

  result=procedure.invokeJavaMethod(session,data);

  procedure.convertArgsToSQL(session,callArguments,data);

  return result;

}

Location: StatementProcedure.java

Content: 

Result executePSMProcedure(Session session){

  int variableCount=procedure.getVariableCount();

  int cursorCount=procedure.getCursorCount();

  session.sessionContext.routineVariables=new Object[variableCount];

  session.sessionContext.routineCursors=new Result[cursorCount];

  Result result=procedure.statement.execute(session);

  if (result.isError()) {

    return result;

  }

  return result;

}

Location: StatementProcedure.java

Content: 

Result getExpressionResult(Session session){

  Object o;

  Result r;

  session.sessionData.startRowProcessing();

  o=expression.getValue(session);

  if (resultMetaData == null) {

    getResultMetaData();

  }

  r=Result.newSingleColumnResult(resultMetaData);

  Object[] row;

  if (expression.getDataType().isArrayType()) {

    row=new Object[1];

    row[0]=o;

  }

 else   if (o instanceof Object[]) {

    row=(Object[])o;

  }

 else {

    row=new Object[1];

    row[0]=o;

  }

  r.getNavigator().add(row);

  return r;

}

Location: StatementProcedure.java

Content: 

/** 

 * Returns the metadata for the placeholder parameters.

 */

public ResultMetaData getParametersMetaData(){

  ResultMetaData meta=super.getParametersMetaData();

  for (int i=0; i < meta.columnLabels.length; i++) {

    ColumnSchema param=parameters[i].getColumn();

    if (param != null && param.getName() != null) {

      meta.columnLabels[i]=param.getNameString();

    }

  }

  return meta;

}

Location: StatementProcedure.java

Content: 

Result getProcedureResult(Session session){

  Object[] data=ValuePool.emptyObjectArray;

  int argLength;

  if (procedure.isPSM()) {

    argLength=arguments.length;

    if (procedure.getMaxDynamicResults() > 0) {

      argLength++;

    }

  }

 else {

    argLength=procedure.javaMethod.getParameterTypes().length;

    if (procedure.javaMethodWithConnection) {

      argLength--;

    }

  }

  if (argLength > 0) {

    data=new Object[argLength];

  }

  for (int i=0; i < arguments.length; i++) {

    Expression e=arguments[i];

    if (e != null) {

      Type targetType=procedure.getParameter(i).getDataType();

      Object value=e.getValue(session);

      data[i]=targetType.convertToType(session,value,e.getDataType());

    }

  }

  session.sessionContext.pushRoutineInvocation();

  Result result=Result.updateZeroResult;

  Object[] callArguments;

  try {

    session.sessionContext.routineArguments=data;

    session.sessionContext.routineVariables=ValuePool.emptyObjectArray;

    if (procedure.isPSM()) {

      result=executePSMProcedure(session);

    }

 else {

      Connection connection=session.getInternalConnection();

      result=executeJavaProcedure(session,connection);

    }

    callArguments=session.sessionContext.routineArguments;

  }

  finally {

    session.sessionContext.popRoutineInvocation();

    if (!procedure.isPSM()) {

      session.releaseInternalConnection();

    }

  }

  if (result.isError()) {

    return result;

  }

  for (int i=0; i < procedure.getParameterCount(); i++) {

    ColumnSchema param=procedure.getParameter(i);

    int mode=param.getParameterMode();

    if (mode != SchemaObject.ParameterModes.PARAM_IN) {

      if (arguments[i].isDynamicParam()) {

        int paramIndex=arguments[i].parameterIndex;

        session.sessionContext.dynamicArguments[paramIndex]=callArguments[i];

      }

 else {

        int varIndex=arguments[i].getColumnIndex();

        session.sessionContext.routineVariables[varIndex]=callArguments[i];

      }

    }

  }

  Result r=result;

  result=Result.newCallResponse(getParametersMetaData().getParameterTypes(),id,session.sessionContext.dynamicArguments);

  if (procedure.returnsTable()) {

    result.addChainedResult(r);

  }

 else   if (callArguments.length > arguments.length) {

    r=(Result)callArguments[arguments.length];

    result.addChainedResult(r);

  }

  return result;

}

Location: StatementProcedure.java

Content: 

public ResultMetaData getResultMetaData(){

  if (resultMetaData != null) {

    return resultMetaData;

  }

switch (type) {

case StatementTypes.CALL:

{

      if (expression == null) {

        return ResultMetaData.emptyResultMetaData;

      }

      ResultMetaData md=ResultMetaData.newResultMetaData(1);

      ColumnBase column=new ColumnBase(null,null,null,StatementDMQL.RETURN_COLUMN_NAME);

      column.setType(expression.getDataType());

      md.columns[0]=column;

      md.prepareData();

      resultMetaData=md;

      return md;

    }

default :

  throw Error.runtimeError(ErrorCode.U_S0500,"StatementProcedure");

}

}

Location: StatementProcedure.java

Content: 

TableDerived[] getSubqueries(Session session){

  OrderedHashSet subQueries=null;

  if (expression != null) {

    subQueries=expression.collectAllSubqueries(subQueries);

  }

  for (int i=0; i < arguments.length; i++) {

    subQueries=arguments[i].collectAllSubqueries(subQueries);

  }

  if (subQueries == null || subQueries.size() == 0) {

    return TableDerived.emptyArray;

  }

  TableDerived[] subQueryArray=new TableDerived[subQueries.size()];

  subQueries.toArray(subQueryArray);

  for (int i=0; i < subqueries.length; i++) {

    subQueryArray[i].prepareTable(session);

  }

  return subQueryArray;

}

Location: StatementProcedure.java

Content: 

/** 

 * Constructor for CALL statements for expressions.

 */

StatementProcedure(Session session,Expression expression,CompileContext compileContext){

  super(StatementTypes.CALL,StatementTypes.X_SQL_DATA,session.getCurrentSchemaHsqlName());

  statementReturnType=StatementTypes.RETURN_RESULT;

  if (expression.opType == OpTypes.FUNCTION) {

    FunctionSQLInvoked f=(FunctionSQLInvoked)expression;

    if (f.routine.returnsTable) {

      this.procedure=f.routine;

      this.arguments=f.nodes;

    }

 else {

      this.expression=expression;

    }

  }

 else {

    this.expression=expression;

  }

  setDatabaseObjects(session,compileContext);

  checkAccessRights(session);

  if (procedure != null) {

    session.getGrantee().checkAccess(procedure);

  }

  isTransactionStatement=readTableNames.length > 0 || writeTableNames.length > 0;

}

Location: StatementProcedure.java

Content: 

/** 

 * Constructor for CALL statements for procedures.

 */

StatementProcedure(Session session,Routine procedure,Expression[] arguments,CompileContext compileContext){

  super(StatementTypes.CALL,StatementTypes.X_SQL_DATA,session.getCurrentSchemaHsqlName());

  if (procedure.maxDynamicResults > 0) {

    statementReturnType=StatementTypes.RETURN_ANY;

  }

  this.procedure=procedure;

  this.arguments=arguments;

  setDatabaseObjects(session,compileContext);

  checkAccessRights(session);

  session.getGrantee().checkAccess(procedure);

  if (procedure.isPSM()) {

    isTransactionStatement=readTableNames.length > 0 || writeTableNames.length > 0;

  }

}

