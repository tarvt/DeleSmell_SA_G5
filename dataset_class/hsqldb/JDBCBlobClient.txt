Location: JDBCBlobClient.java

Content: 

public void clearUpdates(){

  readLock.lock();

  try {

    if (originalBlob != null) {

      blob=originalBlob;

      originalBlob=null;

    }

  }

  finally {

    readLock.unlock();

  }

}

Location: JDBCBlobClient.java

Content: 

/** 

 * Retrieves the <code>BLOB</code> value designated by this <code>Blob</code> instance as a stream.

 * @return a stream containing the <code>BLOB</code> data

 * @throws SQLException if there is an error accessing the<code>BLOB</code> value

 */

public InputStream getBinaryStream() throws SQLException {

  readLock.lock();

  try {

    checkClosed();

    return new BlobInputStream(session,blob,0,length());

  }

  finally {

    readLock.unlock();

  }

}

Location: JDBCBlobClient.java

Content: 

/** 

 * Returns an <code>InputStream</code> object that contains a partial <code>Blob</code> value, starting  with the byte specified by pos, which is length bytes in length.

 * @param pos the offset to the first byte of the partial value to be retrieved.The first byte in the <code>Blob</code> is at position 1

 * @param length the length in bytes of the partial value to be retrieved

 * @return <code>InputStream</code> through which the partial <code>Blob</code> value can be read.

 * @throws SQLException if pos is less than 1 or if pos is greater than the number of bytesin the <code>Blob</code> or if pos + length is greater than the number of bytes in the <code>Blob</code>

 * @since JDK 1.6, HSQLDB 2.0

 */

public InputStream getBinaryStream(long pos,long length) throws SQLException {

  readLock.lock();

  try {

    checkClosed();

    if (!isInLimits(this.length(),pos - 1,length)) {

      throw JDBCUtil.outOfRangeArgument();

    }

    return new BlobInputStream(session,blob,pos - 1,length);

  }

  finally {

    readLock.unlock();

  }

}

Location: JDBCBlobClient.java

Content: 

public BlobDataID getBlob(){

  return blob;

}

Location: JDBCBlobClient.java

Content: 

/** 

 * Retrieves all or part of the <code>BLOB</code> value that this <code>Blob</code> object represents, as an array of bytes.

 * @param pos the ordinal position of the first byte in the<code>BLOB</code> value to be extracted; the first byte is at position 1

 * @param length the number of consecutive bytes to be copied

 * @return a byte array containing up to <code>length</code> consecutivebytes from the <code>BLOB</code> value designated by this <code>Blob</code> object, starting with the byte at position <code>pos</code>

 * @throws SQLException if there is an error accessing the<code>BLOB</code> value

 */

public byte[] getBytes(long pos,int length) throws SQLException {

  readLock.lock();

  try {

    checkClosed();

    if (!isInLimits(Long.MAX_VALUE,pos - 1,length)) {

      throw JDBCUtil.outOfRangeArgument();

    }

    try {

      return blob.getBytes(session,pos - 1,length);

    }

 catch (    HsqlException e) {

      throw JDBCUtil.sqlException(e);

    }

  }

  finally {

    readLock.unlock();

  }

}

Location: JDBCBlobClient.java

Content: 

public JDBCBlobClient(SessionInterface session,BlobDataID blob){

  this.session=session;

  this.blob=blob;

}

Location: JDBCBlobClient.java

Content: 

/** 

 * Retrieves the byte position in the <code>BLOB</code> value designated by this <code>Blob</code> object at which <code>pattern</code> begins.

 * @param pattern the <code>Blob</code> object designating the<code>BLOB</code> value for which to search

 * @param start the position in the <code>BLOB</code> value at which tobegin searching; the first position is 1

 * @return the position at which the pattern begins, else -1

 * @throws SQLException if there is an error accessing the<code>BLOB</code> value

 */

public long position(Blob pattern,long start) throws SQLException {

  readLock.lock();

  try {

    checkClosed();

    if (!isInLimits(Long.MAX_VALUE,start - 1,0)) {

      throw JDBCUtil.outOfRangeArgument();

    }

    if (pattern instanceof JDBCBlobClient) {

      BlobDataID searchClob=((JDBCBlobClient)pattern).blob;

      try {

        long position=blob.position(session,searchClob,start - 1);

        if (position >= 0) {

          position++;

        }

        return position;

      }

 catch (      HsqlException e) {

        throw JDBCUtil.sqlException(e);

      }

    }

    if (!isInLimits(Integer.MAX_VALUE,0,pattern.length())) {

      throw JDBCUtil.outOfRangeArgument();

    }

    byte[] bytePattern=pattern.getBytes(1,(int)pattern.length());

    return position(bytePattern,start);

  }

  finally {

    readLock.unlock();

  }

}

Location: JDBCBlobClient.java

Content: 

/** 

 * Retrieves the byte position at which the specified byte array <code>pattern</code> begins within the <code>BLOB</code> value that this <code>Blob</code> object represents.

 * @param pattern the byte array for which to search

 * @param start the position at which to begin searching; the firstposition is 1

 * @return the position at which the pattern appears, else -1

 * @throws SQLException if there is an error accessing the<code>BLOB</code>

 */

public long position(byte[] pattern,long start) throws SQLException {

  readLock.lock();

  try {

    checkClosed();

    if (!isInLimits(Long.MAX_VALUE,start - 1,0)) {

      throw JDBCUtil.outOfRangeArgument();

    }

    try {

      long position=blob.position(session,pattern,start - 1);

      if (position >= 0) {

        position++;

      }

      return position;

    }

 catch (    HsqlException e) {

      throw JDBCUtil.sqlException(e);

    }

  }

  finally {

    readLock.unlock();

  }

}

Location: JDBCBlobClient.java

Content: 

/** 

 * Retrieves a stream that can be used to write to the <code>BLOB</code> value that this <code>Blob</code> object represents.

 * @param pos the position in the <code>BLOB</code> value at which tostart writing

 * @return a <code>java.io.OutputStream</code> object to which data canbe written

 * @throws SQLException if there is an error accessing the<code>BLOB</code> value

 */

public OutputStream setBinaryStream(long pos) throws SQLException {

  writeLock.lock();

  try {

    throw JDBCUtil.notSupported();

  }

  finally {

    writeLock.unlock();

  }

}

Location: JDBCBlobClient.java

Content: 

/** 

 * Writes the given array of bytes to the <code>BLOB</code> value that this <code>Blob</code> object represents, starting at position <code>pos</code>, and returns the number of bytes written.

 * @param pos the position in the <code>BLOB</code> object at which tostart writing

 * @param bytes the array of bytes to be written to the<code>BLOB</code> value that this <code>Blob</code> object represents

 * @return the number of bytes written

 * @throws SQLException if there is an error accessing the<code>BLOB</code> value

 */

public int setBytes(long pos,byte[] bytes) throws SQLException {

  writeLock.lock();

  try {

    return setBytes(pos,bytes,0,bytes.length);

  }

  finally {

    writeLock.unlock();

  }

}

Location: JDBCBlobClient.java

Content: 

/** 

 * Writes all or part of the given <code>byte</code> array to the <code>BLOB</code> value that this <code>Blob</code> object represents and returns the number of bytes written.

 * @param pos the position in the <code>BLOB</code> object at which tostart writing

 * @param bytes the array of bytes to be written to this<code>BLOB</code> object

 * @param offset the offset into the array <code>bytes</code> at whichto start reading the bytes to be set

 * @param len the number of bytes to be written to the <code>BLOB</code>value from the array of bytes <code>bytes</code>

 * @return the number of bytes written

 * @throws SQLException if there is an error accessing the<code>BLOB</code> value

 */

public int setBytes(long pos,byte[] bytes,int offset,int len) throws SQLException {

  writeLock.lock();

  try {

    checkClosed();

    if (!isInLimits(bytes.length,offset,len)) {

      throw JDBCUtil.outOfRangeArgument();

    }

    if (!isInLimits(Long.MAX_VALUE,pos - 1,len)) {

      throw JDBCUtil.outOfRangeArgument();

    }

    if (!isWritable) {

      throw JDBCUtil.notUpdatableColumn();

    }

    startUpdate();

    try {

      blob.setBytes(session,pos - 1,bytes,offset,len);

      return len;

    }

 catch (    HsqlException e) {

      throw JDBCUtil.sqlException(e);

    }

  }

  finally {

    writeLock.unlock();

  }

}

Location: JDBCBlobClient.java

Content: 

public void setWritable(JDBCResultSet result,int index){

  writeLock.lock();

  try {

    isWritable=true;

    resultSet=result;

    colIndex=index;

  }

  finally {

    writeLock.unlock();

  }

}

Location: JDBCBlobClient.java

Content: 

private void startUpdate() throws SQLException {

  if (originalBlob != null) {

    return;

  }

  originalBlob=blob;

  blob=(BlobDataID)blob.duplicate(session);

  resultSet.startUpdate(colIndex + 1);

  resultSet.preparedStatement.parameterValues[colIndex]=blob;

  resultSet.preparedStatement.parameterSet[colIndex]=Boolean.TRUE;

}

