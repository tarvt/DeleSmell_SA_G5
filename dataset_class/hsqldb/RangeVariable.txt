Location: RangeVariable.java

Content: 

public void addAllColumns(){

  if (usedColumns != null) {

    ArrayUtil.fillArray(usedColumns,true);

  }

}

Location: RangeVariable.java

Content: 

public void addColumn(int columnIndex){

  if (usedColumns != null) {

    usedColumns[columnIndex]=true;

  }

}

Location: RangeVariable.java

Content: 

private static void addConditionsToList(HsqlArrayList list,Expression[] array){

  if (array == null) {

    return;

  }

  for (int i=0; i < array.length; i++) {

    if (array[i] != null) {

      if (array[i].isSingleColumnCondition || array[i].isSingleColumnNull || array[i].isSingleColumnNotNull) {

        list.add(array[i]);

      }

    }

  }

}

Location: RangeVariable.java

Content: 

public void addJoinCondition(Expression e){

  joinCondition=ExpressionLogical.andExpressions(joinCondition,e);

}

Location: RangeVariable.java

Content: 

public void addNamedJoinColumnExpression(String name,Expression e,int position){

  if (namedJoinColumnExpressions == null) {

    namedJoinColumnExpressions=new HashMap();

  }

  namedJoinColumnExpressions.put(name,e);

  if (namedJoinColumnCheck == null) {

    namedJoinColumnCheck=rangeTable.getNewColumnCheckList();

  }

  namedJoinColumnCheck[position]=true;

}

Location: RangeVariable.java

Content: 

public void addNamedJoinColumns(OrderedHashSet columns){

  namedJoinColumns=columns;

}

Location: RangeVariable.java

Content: 

protected void addTableColumns(Expression expression,int start,int count,HashSet exclude){

  Table table=getTable();

  HsqlArrayList list=new HsqlArrayList();

  for (int i=start; i < start + count; i++) {

    ColumnSchema column=table.getColumn(i);

    String columnName=columnAliases == null ? column.getName().name : (String)columnAliases.get(i);

    if (exclude != null && exclude.contains(columnName)) {

      continue;

    }

    Expression e=new ExpressionColumn(this,i);

    list.add(e);

  }

  Expression[] nodes=new Expression[list.size()];

  list.toArray(nodes);

  expression.nodes=nodes;

}

Location: RangeVariable.java

Content: 

/** 

 * Add all columns to a list of expressions

 */

public void addTableColumns(HsqlArrayList exprList){

  if (namedJoinColumns != null) {

    int count=exprList.size();

    int position=0;

    for (int i=0; i < count; i++) {

      Expression e=(Expression)exprList.get(i);

      String columnName=e.getColumnName();

      if (namedJoinColumns.contains(columnName)) {

        if (position != i) {

          exprList.remove(i);

          exprList.add(position,e);

        }

        e=getColumnExpression(columnName);

        exprList.set(position,e);

        position++;

      }

    }

  }

  addTableColumns(exprList,exprList.size(),namedJoinColumns);

}

Location: RangeVariable.java

Content: 

/** 

 * Add all columns to a list of expressions

 */

public int addTableColumns(HsqlArrayList exprList,int position,HashSet exclude){

  Table table=getTable();

  int count=table.getColumnCount();

  for (int i=0; i < count; i++) {

    ColumnSchema column=table.getColumn(i);

    String columnName=columnAliases == null ? column.getName().name : (String)columnAliases.get(i);

    if (exclude != null && exclude.contains(columnName)) {

      continue;

    }

    Expression e=new ExpressionColumn(this,i);

    exprList.add(position++,e);

  }

  return position;

}

Location: RangeVariable.java

Content: 

public void addTableColumns(RangeVariable subRange,Expression expression,HashSet exclude){

  if (subRange == this) {

    Table table=getTable();

    int count=table.getColumnCount();

    addTableColumns(expression,0,count,exclude);

  }

}

Location: RangeVariable.java

Content: 

public int findColumn(String schemaName,String tableName,String columnName){

  if (namedJoinColumnExpressions != null && namedJoinColumnExpressions.containsKey(columnName)) {

    if (tableName != null && !resolvesTableName(tableName)) {

      return -1;

    }

  }

  if (resolvesSchemaAndTableName(schemaName,tableName)) {

    return findColumn(columnName);

  }

  return -1;

}

Location: RangeVariable.java

Content: 

public SimpleName getColumnAlias(int i){

  if (columnAliases == null) {

    return rangeTable.getColumn(i).getName();

  }

 else {

    return columnAliasNames[i];

  }

}

Location: RangeVariable.java

Content: 

public ExpressionColumn getColumnExpression(String name){

  return namedJoinColumnExpressions == null ? null : (ExpressionColumn)namedJoinColumnExpressions.get(name);

}

Location: RangeVariable.java

Content: 

public ColumnSchema getColumn(int i){

  if (variables == null) {

    return rangeTable.getColumn(i);

  }

 else {

    return (ColumnSchema)variables.get(i);

  }

}

Location: RangeVariable.java

Content: 

protected int getFirstColumnIndex(RangeVariable subRange){

  if (subRange == this) {

    return 0;

  }

  return -1;

}

Location: RangeVariable.java

Content: 

public RangeIteratorMain getIterator(Session session){

  RangeIteratorMain it;

  if (this.isRightJoin) {

    it=new RangeIteratorRight(session,this,null);

  }

 else {

    it=new RangeIteratorMain(session,this);

  }

  session.sessionContext.setRangeIterator(it);

  return it;

}

Location: RangeVariable.java

Content: 

public static RangeIterator getIterator(Session session,RangeVariable[] rangeVars){

  if (rangeVars.length == 1) {

    return rangeVars[0].getIterator(session);

  }

  RangeIteratorMain[] iterators=new RangeIteratorMain[rangeVars.length];

  for (int i=0; i < rangeVars.length; i++) {

    iterators[i]=rangeVars[i].getIterator(session);

  }

  return new RangeIteratorJoined(iterators);

}

Location: RangeVariable.java

Content: 

/** 

 * used before condition processing

 */

public Expression getJoinCondition(){

  return joinCondition;

}

Location: RangeVariable.java

Content: 

public RangeVariable getRangeForTableName(String name){

  if (resolvesTableName(name)) {

    return this;

  }

  return null;

}

Location: RangeVariable.java

Content: 

/** 

 * Used for sort

 */

public Index getSortIndex(){

  if (joinConditions.length == 1) {

    return joinConditions[0].rangeIndex;

  }

 else {

    return null;

  }

}

Location: RangeVariable.java

Content: 

public SimpleName getTableAlias(){

  return tableAlias == null ? rangeTable.getName() : tableAlias;

}

Location: RangeVariable.java

Content: 

public OrderedHashSet getUniqueColumnNameSet(){

  OrderedHashSet set=new OrderedHashSet();

  if (columnAliases != null) {

    set.addAll(columnAliases);

    return set;

  }

  for (int i=0; i < rangeTable.columnList.size(); i++) {

    String name=rangeTable.getColumn(i).getName().name;

    boolean added=set.add(name);

    if (!added) {

      throw Error.error(ErrorCode.X_42578,name);

    }

  }

  return set;

}

Location: RangeVariable.java

Content: 

public boolean hasAnyIndexCondition(){

  for (int i=0; i < joinConditions.length; i++) {

    if (joinConditions[0].indexedColumnCount > 0) {

      return true;

    }

  }

  for (int i=0; i < whereConditions.length; i++) {

    if (whereConditions[0].indexedColumnCount > 0) {

      return true;

    }

  }

  return false;

}

Location: RangeVariable.java

Content: 

public boolean hasAnyTerminalCondition(){

  for (int i=0; i < joinConditions.length; i++) {

    if (joinConditions[0].terminalCondition != null) {

      return true;

    }

  }

  for (int i=0; i < whereConditions.length; i++) {

    if (whereConditions[0].terminalCondition != null) {

      return true;

    }

  }

  return false;

}

Location: RangeVariable.java

Content: 

public boolean hasColumnAlias(){

  return columnAliases != null;

}

Location: RangeVariable.java

Content: 

public boolean hasSingleIndexCondition(){

  return joinConditions.length == 1 && joinConditions[0].indexedColumnCount > 0;

}

Location: RangeVariable.java

Content: 

public boolean hasTableAlias(){

  return tableAlias != null;

}

Location: RangeVariable.java

Content: 

public boolean isVariable(){

  return variables != null;

}

Location: RangeVariable.java

Content: 

void moveConditionsToInner(Session session,RangeVariable[] ranges){

  Expression[] colExpr;

  int exclude;

  HsqlArrayList conditionsList;

  Expression condition=null;

  if (whereConditions.length > 1) {

    return;

  }

  if (joinConditions.length > 1) {

    return;

  }

  for (int i=0; i < ranges.length; i++) {

    if (ranges[i].isLeftJoin || ranges[i].isRightJoin) {

      return;

    }

  }

  exclude=ArrayUtil.find(ranges,this);

  conditionsList=new HsqlArrayList();

  addConditionsToList(conditionsList,joinConditions[0].indexCond);

  if (joinConditions[0].indexCond != null && joinConditions[0].indexCond[0] != joinConditions[0].indexEndCond[0]) {

    addConditionsToList(conditionsList,joinConditions[0].indexEndCond);

  }

  addConditionsToList(conditionsList,whereConditions[0].indexCond);

  addConditionsToList(conditionsList,whereConditions[0].indexEndCond);

  RangeVariableResolver.decomposeAndConditions(session,joinConditions[0].nonIndexCondition,conditionsList);

  RangeVariableResolver.decomposeAndConditions(session,whereConditions[0].nonIndexCondition,conditionsList);

  for (int i=conditionsList.size() - 1; i >= 0; i--) {

    Expression e=(Expression)conditionsList.get(i);

    if (e == null || e.isTrue() || e.hasReference(ranges,exclude)) {

      conditionsList.remove(i);

    }

  }

  if (conditionsList.size() == 0) {

    if (rangeTable.isView()) {

      ((TableDerived)rangeTable).resetToView();

    }

    return;

  }

  OrderedHashSet subquerySet=null;

  for (int i=0; i < conditionsList.size(); i++) {

    Expression e=(Expression)conditionsList.get(i);

    subquerySet=e.collectAllSubqueries(subquerySet);

    if (subquerySet != null) {

      return;

    }

  }

  QueryExpression queryExpression=rangeTable.getQueryExpression();

  colExpr=((QuerySpecification)queryExpression).exprColumns;

  for (int i=0; i < conditionsList.size(); i++) {

    Expression e=(Expression)conditionsList.get(i);

    e=e.duplicate();

    e=e.replaceColumnReferences(this,colExpr);

    OrderedHashSet set=e.collectRangeVariables(null);

    if (set != null) {

      for (int j=0; j < set.size(); j++) {

        RangeVariable range=(RangeVariable)set.get(j);

        if (this != range && range.rangeType == RangeVariable.TABLE_RANGE) {

          queryExpression.setCorrelated();

          break;

        }

      }

    }

    condition=ExpressionLogical.andExpressions(condition,e);

  }

  queryExpression.addExtraConditions(condition);

}

Location: RangeVariable.java

Content: 

public RangeVariable(HashMappedList variables,SimpleName rangeName,boolean isVariable,int rangeType){

  this.variables=variables;

  this.rangeType=rangeType;

  rangeTable=null;

  tableAlias=rangeName;

  columnsInGroupBy=null;

  usedColumns=null;

  joinConditions=new RangeVariableConditions[]{new RangeVariableConditions(this,true)};

  whereConditions=new RangeVariableConditions[]{new RangeVariableConditions(this,false)};

switch (rangeType) {

case TRANSITION_RANGE:

    usedColumns=new boolean[variables.size()];

case PARAMETER_RANGE:

case VARIALBE_RANGE:

case PLACEHOLDER_RANGE:

  break;

default :

throw Error.runtimeError(ErrorCode.U_S0500,"RangeVariable");

}

}

Location: RangeVariable.java

Content: 

public RangeVariable(Table table,int position){

  rangeType=TABLE_RANGE;

  rangeTable=table;

  tableAlias=null;

  columnsInGroupBy=rangeTable.getNewColumnCheckList();

  usedColumns=rangeTable.getNewColumnCheckList();

  rangePosition=position;

  joinConditions=new RangeVariableConditions[]{new RangeVariableConditions(this,true)};

  whereConditions=new RangeVariableConditions[]{new RangeVariableConditions(this,false)};

}

Location: RangeVariable.java

Content: 

public RangeVariable(Table table,SimpleName alias,OrderedHashSet columnList,SimpleName[] columnNameList,CompileContext compileContext){

  rangeType=TABLE_RANGE;

  rangeTable=table;

  tableAlias=alias;

  columnAliases=columnList;

  columnAliasNames=columnNameList;

  joinConditions=new RangeVariableConditions[]{new RangeVariableConditions(this,true)};

  whereConditions=new RangeVariableConditions[]{new RangeVariableConditions(this,false)};

  compileContext.registerRangeVariable(this);

  if (rangeTable.getColumnCount() != 0) {

    hongshuai();

    if (columnAliasNames != null && rangeTable.getColumnCount() != columnAliasNames.length) {

      throw Error.error(ErrorCode.X_42593);

    }

    columnsInGroupBy=rangeTable.getNewColumnCheckList();

    usedColumns=rangeTable.getNewColumnCheckList();

    joinConditions[0].rangeIndex=rangeTable.getPrimaryIndex();

    whereConditions[0].rangeIndex=rangeTable.getPrimaryIndex();

  }

}

Location: RangeVariable.java

Content: 

public void resetConditions(){

  Index index=joinConditions[0].rangeIndex;

  joinConditions=new RangeVariableConditions[]{new RangeVariableConditions(this,true)};

  joinConditions[0].rangeIndex=index;

  index=whereConditions[0].rangeIndex;

  whereConditions=new RangeVariableConditions[]{new RangeVariableConditions(this,false)};

  whereConditions[0].rangeIndex=index;

}

Location: RangeVariable.java

Content: 

void resolveRangeTableTypes(Session session,RangeVariable[] ranges){

  QueryExpression queryExpression=rangeTable.getQueryExpression();

  if (queryExpression != null) {

    if (queryExpression instanceof QuerySpecification) {

      QuerySpecification qs=(QuerySpecification)queryExpression;

      if (qs.isGrouped || qs.isAggregated || qs.isOrderSensitive) {

      }

 else {

        moveConditionsToInner(session,ranges);

      }

    }

    queryExpression.resolveTypesPartThree(session);

  }

}

Location: RangeVariable.java

Content: 

public void resolveRangeTable(Session session,RangeGroup rangeGroup,RangeGroup[] rangeGroups){

  QueryExpression queryExpression=rangeTable.getQueryExpression();

  Expression dataExpression=rangeTable.getDataExpression();

  if (queryExpression == null && dataExpression == null) {

    return;

  }

  rangeGroups=(RangeGroup[])ArrayUtil.toAdjustedArray(rangeGroups,rangeGroup,rangeGroups.length,1);

  if (dataExpression != null) {

    HsqlList unresolved=dataExpression.resolveColumnReferences(session,RangeGroup.emptyGroup,rangeGroups,null);

    unresolved=Expression.resolveColumnSet(session,RangeVariable.emptyArray,RangeGroup.emptyArray,unresolved);

    ExpressionColumn.checkColumnsResolved(unresolved);

    dataExpression.resolveTypes(session,null);

    setRangeTableVariables();

  }

  if (queryExpression != null) {

    queryExpression.resolveReferences(session,rangeGroups);

    HsqlList unresolved=queryExpression.getUnresolvedExpressions();

    unresolved=Expression.resolveColumnSet(session,RangeVariable.emptyArray,RangeGroup.emptyArray,unresolved);

    ExpressionColumn.checkColumnsResolved(unresolved);

    queryExpression.resolveTypesPartOne(session);

    queryExpression.resolveTypesPartTwo(session);

    rangeTable.prepareTable(session);

    setRangeTableVariables();

  }

}

Location: RangeVariable.java

Content: 

private boolean resolvesSchemaAndTableName(String schemaName,String tableName){

  return resolvesSchemaName(schemaName) && resolvesTableName(tableName);

}

Location: RangeVariable.java

Content: 

private boolean resolvesSchemaName(String name){

  if (name == null) {

    return true;

  }

  if (variables != null) {

    return false;

  }

  if (tableAlias != null) {

    return false;

  }

  return name.equals(rangeTable.getSchemaName().name);

}

Location: RangeVariable.java

Content: 

private boolean resolvesTableName(String name){

  if (name == null) {

    return true;

  }

  if (variables != null) {

    if (tableAlias != null) {

      return name.equals(tableAlias.name);

    }

    return false;

  }

  if (tableAlias == null) {

    if (name.equals(rangeTable.getName().name)) {

      return true;

    }

  }

 else   if (name.equals(tableAlias.name)) {

    return true;

  }

  return false;

}

Location: RangeVariable.java

Content: 

public boolean reverseOrder(){

  if (joinConditions.length == 1) {

    joinConditions[0].reverseIndexCondition();

    return true;

  }

  return false;

}

Location: RangeVariable.java

Content: 

public boolean setDistinctColumnsOnIndex(int[] colMap){

  if (joinConditions.length != 1) {

    return false;

  }

  int[] indexColMap=joinConditions[0].rangeIndex.getColumns();

  if (colMap.length > indexColMap.length) {

    return false;

  }

  if (colMap.length == indexColMap.length) {

    if (ArrayUtil.haveEqualSets(colMap,indexColMap,colMap.length)) {

      indexDistinctCount=colMap.length;

      return true;

    }

  }

  if (ArrayUtil.haveEqualArrays(colMap,indexColMap,colMap.length)) {

    indexDistinctCount=colMap.length;

    return true;

  }

  return false;

}

Location: RangeVariable.java

Content: 

/** 

 * Removes reference to Index to avoid possible memory leaks after alter table or drop index

 */

public void setForCheckConstraint(){

  joinConditions[0].rangeIndex=null;

  whereConditions[0].rangeIndex=null;

  rangePosition=0;

}

Location: RangeVariable.java

Content: 

public void setJoinType(boolean isLeft,boolean isRight){

  isJoin=true;

  isLeftJoin=isLeft;

  isRightJoin=isRight;

  if (isRightJoin) {

    whereConditions[0].rangeIndex=rangeTable.getPrimaryIndex();

  }

}

Location: RangeVariable.java

Content: 

public void setRangeTableVariables(){

  if (columnAliasNames != null && rangeTable.getColumnCount() != columnAliasNames.length) {

    throw Error.error(ErrorCode.X_42593);

  }

  columnsInGroupBy=rangeTable.getNewColumnCheckList();

  usedColumns=rangeTable.getNewColumnCheckList();

  joinConditions[0].rangeIndex=rangeTable.getPrimaryIndex();

  whereConditions[0].rangeIndex=rangeTable.getPrimaryIndex();

}

Location: RangeVariable.java

Content: 

/** 

 * Used for sort

 */

public boolean setSortIndex(Index index,boolean reversed){

  if (joinConditions.length == 1) {

    if (joinConditions[0].indexedColumnCount == 0) {

      joinConditions[0].rangeIndex=index;

      joinConditions[0].reversed=reversed;

      return true;

    }

  }

  return false;

}

