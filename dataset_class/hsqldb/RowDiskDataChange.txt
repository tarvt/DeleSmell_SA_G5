Location: RowDiskDataChange.java

Content: 

public int[] getUpdateColumnMap(){

  return updateColMap;

}

Location: RowDiskDataChange.java

Content: 

public Object[] getUpdateData(){

  return updateData;

}

Location: RowDiskDataChange.java

Content: 

/** 

 * Constructor when read from the disk into the Cache.

 * @param t table

 * @param in data source

 * @throws IOException

 */

public RowDiskDataChange(Session session,PersistentStore store,RowInputInterface in) throws IOException {

  super(store,in);

  targetTable=store.getTable().database.schemaManager.findTable(session,(String)rowData[COL_POS_TABLE_NAME],(String)rowData[COL_POS_SCHEMA_NAME],null);

  if ((Boolean)rowData[COL_POS_IS_UPDATE]) {

    updateData=in.readData(targetTable.colTypes);

    RowInputBinary bin=(RowInputBinary)in;

    if (bin.readNull()) {

      updateColMap=null;

    }

 else {

      updateColMap=bin.readIntArray();

    }

  }

 else {

    updateData=null;

    updateColMap=null;

  }

}

Location: RowDiskDataChange.java

Content: 

/** 

 * Constructor for new Rows.  Variable hasDataChanged is set to true in order to indicate the data needs saving.

 * @param t table

 * @param data row data

 */

public RowDiskDataChange(TableBase t,Object[] data,PersistentStore store,Table targetTable){

  super(t,data,store);

  this.targetTable=targetTable;

}

Location: RowDiskDataChange.java

Content: 

public void setTargetTable(Table table){

  targetTable=table;

}

Location: RowDiskDataChange.java

Content: 

public void setUpdateColumnMap(int[] colMap){

  updateColMap=colMap;

}

Location: RowDiskDataChange.java

Content: 

public void setUpdateData(Object[] data){

  updateData=data;

}

