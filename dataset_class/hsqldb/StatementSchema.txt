Location: StatementSchema.java

Content: 

private static void dropDomain(Session session,HsqlName name,boolean cascade){

  Type domain=(Type)session.database.schemaManager.getSchemaObject(name);

  OrderedHashSet set=session.database.schemaManager.getReferencesTo(domain.getName());

  if (!cascade && set.size() > 0) {

    HsqlName objectName=(HsqlName)set.get(0);

    throw Error.error(ErrorCode.X_42502,objectName.getSchemaQualifiedStatementName());

  }

  Constraint[] constraints=domain.userTypeModifier.getConstraints();

  set=new OrderedHashSet();

  for (int i=0; i < constraints.length; i++) {

    set.add(constraints[i].getName());

  }

  session.database.schemaManager.removeSchemaObjects(set);

  session.database.schemaManager.removeSchemaObject(domain.getName(),cascade);

  domain.userTypeModifier=null;

}

Location: StatementSchema.java

Content: 

private void dropObject(Session session,HsqlName name,boolean cascade){

  checkSchemaUpdateAuthorisation(session,name.schema);

  name=session.database.schemaManager.getSchemaObjectName(name.schema,name.name,name.type,true);

  session.database.schemaManager.removeSchemaObject(name,cascade);

}

Location: StatementSchema.java

Content: 

private static void dropRole(Session session,HsqlName name,boolean cascade){

  Grantee role=session.database.getGranteeManager().getRole(name.name);

  if (!cascade && session.database.schemaManager.hasSchemas(role)) {

    HsqlArrayList list=session.database.schemaManager.getSchemas(role);

    Schema schema=(Schema)list.get(0);

    throw Error.error(ErrorCode.X_42502,schema.getName().statementName);

  }

  session.database.schemaManager.dropSchemas(session,role,cascade);

  session.database.getGranteeManager().dropRole(name.name);

}

Location: StatementSchema.java

Content: 

private void dropRoutine(Session session,HsqlName name,boolean cascade){

  checkSchemaUpdateAuthorisation(session,name.schema);

  session.database.schemaManager.removeSchemaObject(name,cascade);

}

Location: StatementSchema.java

Content: 

private void dropSchema(Session session,HsqlName name,boolean cascade){

  HsqlName schema=session.database.schemaManager.getUserSchemaHsqlName(name.name);

  checkSchemaUpdateAuthorisation(session,schema);

  session.database.schemaManager.dropSchema(session,name.name,cascade);

}

Location: StatementSchema.java

Content: 

private void dropTable(Session session,HsqlName name,boolean cascade){

  Table table=session.database.schemaManager.findUserTable(name.name,name.schema.name);

  session.database.schemaManager.dropTableOrView(session,table,cascade);

}

Location: StatementSchema.java

Content: 

private void dropType(Session session,HsqlName name,boolean cascade){

  checkSchemaUpdateAuthorisation(session,name.schema);

  Type distinct=(Type)session.database.schemaManager.getSchemaObject(name);

  session.database.schemaManager.removeSchemaObject(name,cascade);

  distinct.userTypeModifier=null;

}

Location: StatementSchema.java

Content: 

private static void dropUser(Session session,HsqlName name,boolean cascade){

  Grantee grantee=session.database.getUserManager().get(name.name);

  if (session.database.getSessionManager().isUserActive(name.name)) {

    throw Error.error(ErrorCode.X_42539);

  }

  if (!cascade && session.database.schemaManager.hasSchemas(grantee)) {

    HsqlArrayList list=session.database.schemaManager.getSchemas(grantee);

    Schema schema=(Schema)list.get(0);

    throw Error.error(ErrorCode.X_42502,schema.getName().statementName);

  }

  session.database.schemaManager.dropSchemas(session,grantee,cascade);

  session.database.getUserManager().dropUser(name.name);

}

Location: StatementSchema.java

Content: 

void setOrCheckObjectName(Session session,HsqlName parent,HsqlName name,boolean check){

  if (name.schema == null) {

    name.schema=schemaName == null ? session.getCurrentSchemaHsqlName() : schemaName;

  }

 else {

    name.schema=session.getSchemaHsqlName(name.schema.name);

    if (name.schema == null) {

      throw Error.error(ErrorCode.X_42505);

    }

    if (isSchemaDefinition && schemaName != name.schema) {

      throw Error.error(ErrorCode.X_42505);

    }

  }

  if (name.parent == null) {

    name.parent=parent;

  }

  if (!isSchemaDefinition) {

    checkSchemaUpdateAuthorisation(session,name.schema);

  }

  if (check) {

    session.database.schemaManager.checkSchemaObjectNotExists(name);

  }

}

Location: StatementSchema.java

Content: 

void setSchemaName(Session session,HsqlName parent,HsqlName name){

  if (name.schema == null) {

    name.schema=schemaName == null ? session.getCurrentSchemaHsqlName() : schemaName;

  }

 else {

    name.schema=session.getSchemaHsqlName(name.schema.name);

    if (name.schema == null) {

      throw Error.error(ErrorCode.X_42505);

    }

    if (isSchemaDefinition && schemaName != name.schema) {

      throw Error.error(ErrorCode.X_42505);

    }

  }

}

Location: StatementSchema.java

Content: 

StatementSchema(int type,int group){

  super(type,group);

  isTransactionStatement=true;

}

Location: StatementSchema.java

Content: 

StatementSchema(String sql,int type){

  this(sql,type,null,(HsqlName[])null,null);

}

Location: StatementSchema.java

Content: 

StatementSchema(String sql,int type,Object[] args,HsqlName[] readName,HsqlName[] writeName){

  super(type);

  isTransactionStatement=true;

  this.sql=sql;

  if (args != null) {

    arguments=args;

  }

  if (readName != null) {

    readTableNames=readName;

  }

  if (writeName != null) {

    writeTableNames=writeName;

  }

switch (type) {

case StatementTypes.RENAME_OBJECT:

    group=StatementTypes.X_SQL_SCHEMA_MANIPULATION;

  break;

case StatementTypes.ALTER_DOMAIN:

case StatementTypes.ALTER_INDEX:

case StatementTypes.ALTER_ROUTINE:

case StatementTypes.ALTER_SEQUENCE:

case StatementTypes.ALTER_TYPE:

case StatementTypes.ALTER_TABLE:

case StatementTypes.ALTER_TRANSFORM:

case StatementTypes.ALTER_VIEW:

group=StatementTypes.X_SQL_SCHEMA_MANIPULATION;

break;

case StatementTypes.DROP_ASSERTION:

case StatementTypes.DROP_CHARACTER_SET:

case StatementTypes.DROP_COLLATION:

case StatementTypes.DROP_TYPE:

case StatementTypes.DROP_DOMAIN:

case StatementTypes.DROP_ROLE:

case StatementTypes.DROP_USER:

case StatementTypes.DROP_ROUTINE:

case StatementTypes.DROP_SCHEMA:

case StatementTypes.DROP_SEQUENCE:

case StatementTypes.DROP_TABLE:

case StatementTypes.DROP_TRANSFORM:

case StatementTypes.DROP_TRANSLATION:

case StatementTypes.DROP_TRIGGER:

case StatementTypes.DROP_CAST:

case StatementTypes.DROP_ORDERING:

case StatementTypes.DROP_VIEW:

case StatementTypes.DROP_INDEX:

case StatementTypes.DROP_CONSTRAINT:

case StatementTypes.DROP_COLUMN:

case StatementTypes.DROP_REFERENCE:

group=StatementTypes.X_SQL_SCHEMA_MANIPULATION;

break;

case StatementTypes.GRANT:

group=StatementTypes.X_SQL_SCHEMA_MANIPULATION;

order=10;

break;

case StatementTypes.GRANT_ROLE:

group=StatementTypes.X_SQL_SCHEMA_MANIPULATION;

order=10;

break;

case StatementTypes.REVOKE:

case StatementTypes.REVOKE_ROLE:

group=StatementTypes.X_SQL_SCHEMA_MANIPULATION;

break;

case StatementTypes.CREATE_SCHEMA:

group=StatementTypes.X_SQL_SCHEMA_DEFINITION;

break;

case StatementTypes.CREATE_ROLE:

group=StatementTypes.X_SQL_SCHEMA_DEFINITION;

order=1;

break;

case StatementTypes.CREATE_ROUTINE:

group=StatementTypes.X_SQL_SCHEMA_DEFINITION;

order=7;

break;

case StatementTypes.CREATE_SEQUENCE:

group=StatementTypes.X_SQL_SCHEMA_DEFINITION;

order=1;

break;

case StatementTypes.CREATE_TABLE:

group=StatementTypes.X_SQL_SCHEMA_DEFINITION;

order=2;

break;

case StatementTypes.CREATE_TRANSFORM:

group=StatementTypes.X_SQL_SCHEMA_DEFINITION;

order=1;

break;

case StatementTypes.CREATE_TRANSLATION:

group=StatementTypes.X_SQL_SCHEMA_DEFINITION;

order=1;

break;

case StatementTypes.CREATE_TRIGGER:

group=StatementTypes.X_SQL_SCHEMA_DEFINITION;

order=7;

break;

case StatementTypes.CREATE_CAST:

group=StatementTypes.X_SQL_SCHEMA_DEFINITION;

order=2;

break;

case StatementTypes.CREATE_TYPE:

group=StatementTypes.X_SQL_SCHEMA_DEFINITION;

order=1;

break;

case StatementTypes.CREATE_ORDERING:

group=StatementTypes.X_SQL_SCHEMA_DEFINITION;

order=1;

break;

case StatementTypes.CREATE_VIEW:

group=StatementTypes.X_SQL_SCHEMA_DEFINITION;

order=5;

break;

case StatementTypes.CREATE_USER:

group=StatementTypes.X_SQL_SCHEMA_DEFINITION;

order=1;

break;

case StatementTypes.CREATE_ASSERTION:

group=StatementTypes.X_SQL_SCHEMA_DEFINITION;

order=9;

break;

case StatementTypes.CREATE_CHARACTER_SET:

group=StatementTypes.X_SQL_SCHEMA_DEFINITION;

order=1;

break;

case StatementTypes.CREATE_COLLATION:

group=StatementTypes.X_SQL_SCHEMA_DEFINITION;

order=1;

break;

case StatementTypes.CREATE_DOMAIN:

group=StatementTypes.X_SQL_SCHEMA_DEFINITION;

order=1;

break;

case StatementTypes.CREATE_ALIAS:

group=StatementTypes.X_SQL_SCHEMA_DEFINITION;

order=8;

break;

case StatementTypes.CREATE_INDEX:

group=StatementTypes.X_SQL_SCHEMA_MANIPULATION;

order=4;

break;

case StatementTypes.CREATE_REFERENCE:

group=StatementTypes.X_SQL_SCHEMA_MANIPULATION;

order=12;

break;

case StatementTypes.COMMENT:

group=StatementTypes.X_SQL_SCHEMA_MANIPULATION;

order=11;

break;

case StatementTypes.CHECK:

group=StatementTypes.X_SQL_SCHEMA_MANIPULATION;

statementTokens=(Token[])args[0];

break;

case StatementTypes.LOG_SCHEMA_STATEMENT:

group=StatementTypes.X_SQL_SCHEMA_MANIPULATION;

break;

default :

throw Error.runtimeError(ErrorCode.U_S0500,"StatementSchema");

}

}

