Location: TestSql.java

Content: 

public void testAny(){

  try {

    String ddl="drop table PRICE_RELATE_USER_ORDER_V2 if exists;" + "create table PRICE_RELATE_USER_ORDER_V2 " + "(ID_ORDER_V2 BIGINT, ID_USER NUMERIC, DATE_CREATE TIMESTAMP)";

    String sql="insert into PRICE_RELATE_USER_ORDER_V2 " + "(ID_ORDER_V2, ID_USER, DATE_CREATE) " + "values "+ "(?, ?, ?)";

    Statement st=connection.createStatement();

    st.execute(ddl);

    PreparedStatement ps=connection.prepareStatement(sql);

    ps.setLong(1,1);

    ps.setNull(2,Types.NUMERIC);

    ps.setTimestamp(3,new java.sql.Timestamp(System.currentTimeMillis()));

    ps.execute();

  }

 catch (  SQLException e) {

    e.printStackTrace();

    System.out.println("TestSql.testAny() error: " + e.getMessage());

  }

  System.out.println("testAny complete");

}

Location: TestSql.java

Content: 

public void testBinaryFunction() throws Exception {

  Statement sStatement=null;

  ResultSet r;

  boolean mismatch;

  sStatement=connection.createStatement();

  try {

    String s="create table bintest(id int primary key, bin varbinary(100))";

    sStatement.execute(s);

    s="insert into bintest values ( ?, ?)";

    PreparedStatement p=connection.prepareStatement(s);

    p.clearParameters();

    p.setInt(1,10);

    p.setBytes(2,b1);

    p.executeUpdate();

    p.clearParameters();

    p.setInt(1,20);

    p.setBytes(2,b2);

    p.executeUpdate();

    byte[] b1n;

    byte[] b2n;

    s="select \"org.hsqldb.lib.ArrayUtil.countStartElementsAt\"(bin,0, ?) " + "from bintest";

    p=connection.prepareStatement(s);

    p.setBytes(1,b2);

    r=p.executeQuery();

    r.next();

    int integer1=r.getInt(1);

    r.next();

    int integer2=r.getInt(1);

    s="select \"org.hsqldb.lib.StringConverter.hexStringToByteArray\"" + "(\"org.hsqldb.lib.StringConverter.byteArrayToHexString\"(x'abcd')) " + "from bintest";

    r=sStatement.executeQuery(s);

    r.next();

    b1n=r.getBytes(1);

    r.next();

    b1n=r.getBytes(1);

    s="select \"org.hsqldb.lib.StringConverter.byteArrayToHexString\"(bin) " + "from bintest";

    r=sStatement.executeQuery(s);

    r.next();

    b1n=r.getBytes(1);

    r.next();

    b1n=r.getBytes(1);

    s="create table obj(id int,o object)";

    sStatement.execute(s);

    s="insert into obj values(?,?)";

    p=connection.prepareStatement(s);

    p.setInt(1,1);

    int[] ia1={1,2,3};

    p.setObject(2,ia1);

    p.executeUpdate();

    p.clearParameters();

    p.setInt(1,2);

    java.awt.Rectangle r1=new java.awt.Rectangle(10,11,12,13);

    p.setObject(2,r1);

    p.executeUpdate();

    r=sStatement.executeQuery("SELECT o FROM obj ORDER BY id DESC");

    r.next();

    java.awt.Rectangle r2=(java.awt.Rectangle)r.getObject(1);

    if (r2.x != 10 || r2.y != 11 || r2.width != 12 || r2.height != 13) {

      throw new Exception("Object data error: Rectangle");

    }

    r.next();

    int[] ia2=(int[])(r.getObject(1));

    if (ia2[0] != 1 || ia2[1] != 2 || ia2[2] != 3 || ia2.length != 3) {

      throw new Exception("Object data error: int[]");

    }

    sStatement.close();

  }

 catch (  Exception e) {

    assertEquals(0,1);

  }

}

Location: TestSql.java

Content: 

/** 

 * Fix for bug #1201135

 */

public void testBinds(){

  try {

    PreparedStatement pstmt=connection.prepareStatement("drop table test if exists");

    pstmt.execute();

    pstmt=connection.prepareStatement("create table test (id integer)");

    pstmt.execute();

    pstmt=connection.prepareStatement("insert into test values (10)");

    pstmt.execute();

    pstmt=connection.prepareStatement("insert into test values (20)");

    pstmt.execute();

    pstmt=connection.prepareStatement("select count(*) from test where id is null");

    ResultSet rs=pstmt.executeQuery();

    rs.next();

    int count=rs.getInt(1);

    assertEquals(0,count);

    pstmt=connection.prepareStatement("select limit ? 2  id from test");

    pstmt.setInt(1,0);

    rs=pstmt.executeQuery();

    rs.next();

    count=rs.getInt(1);

    assertEquals(10,count);

    pstmt.setInt(1,1);

    rs=pstmt.executeQuery();

    rs.next();

    count=rs.getInt(1);

    assertEquals(20,count);

  }

 catch (  SQLException e) {

    e.printStackTrace();

    System.out.println("TestSql.testBinds() error: " + e.getMessage());

  }

}

Location: TestSql.java

Content: 

public void testMetaData(){

  String ddl01="DROP TABLE ADDRESSBOOK IF EXISTS";

  String ddl02="DROP TABLE ADDRESSBOOK_CATEGORY IF EXISTS";

  String ddl03="DROP TABLE USER IF EXISTS";

  String ddl1="CREATE TABLE USER(USER_ID INTEGER NOT NULL PRIMARY KEY,LOGIN_ID VARCHAR(128) NOT NULL,USER_NAME VARCHAR(254) DEFAULT ' ' NOT NULL,CREATE_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,UPDATE_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,LAST_ACCESS_DATE TIMESTAMP,CONSTRAINT IXUQ_LOGIN_ID0 UNIQUE(LOGIN_ID))";

  String ddl2="CREATE TABLE ADDRESSBOOK_CATEGORY(USER_ID INTEGER NOT NULL,CATEGORY_ID INTEGER DEFAULT 0 NOT NULL,CATEGORY_NAME VARCHAR(60) DEFAULT '' NOT NULL,CONSTRAINT SYS_PK_ADDRESSBOOK_CATEGORY PRIMARY KEY(USER_ID,CATEGORY_ID),CONSTRAINT FK_ADRBKCAT1 FOREIGN KEY(USER_ID) REFERENCES USER(USER_ID) ON DELETE CASCADE)";

  String ddl3="CREATE TABLE ADDRESSBOOK(USER_ID INTEGER NOT NULL,ADDRESSBOOK_ID INTEGER NOT NULL,CATEGORY_ID INTEGER DEFAULT 0 NOT NULL,FIRST VARCHAR(64) DEFAULT '' NOT NULL,LAST VARCHAR(64) DEFAULT '' NOT NULL,NOTE VARCHAR(128) DEFAULT '' NOT NULL,CONSTRAINT SYS_PK_ADDRESSBOOK PRIMARY KEY(USER_ID,ADDRESSBOOK_ID),CONSTRAINT FK_ADRBOOK1 FOREIGN KEY(USER_ID,CATEGORY_ID) REFERENCES ADDRESSBOOK_CATEGORY(USER_ID,CATEGORY_ID) ON DELETE CASCADE)";

  String result1="1";

  String result2="2";

  String result3="3";

  String result4="4";

  String result5="5";

  try {

    stmnt.execute(ddl01);

    stmnt.execute(ddl02);

    stmnt.execute(ddl03);

    stmnt.execute(ddl1);

    stmnt.execute(ddl2);

    stmnt.execute(ddl3);

    DatabaseMetaData md=connection.getMetaData();

{

      System.out.println("Testing DatabaseMetaData methods");

      System.out.println(md.getDatabaseMajorVersion());

      System.out.println(md.getDatabaseMinorVersion());

      System.out.println(md.getDatabaseProductName());

      System.out.println(md.getDatabaseProductVersion());

      System.out.println(md.getDefaultTransactionIsolation());

      System.out.println(md.getDriverMajorVersion());

      System.out.println(md.getDriverMinorVersion());

      System.out.println(md.getDriverName());

      System.out.println(md.getDriverVersion());

      System.out.println(md.getExtraNameCharacters());

      System.out.println(md.getIdentifierQuoteString());

      System.out.println(md.getJDBCMajorVersion());

      System.out.println(md.getJDBCMinorVersion());

      System.out.println(md.getMaxBinaryLiteralLength());

      System.out.println(md.getMaxCatalogNameLength());

      System.out.println(md.getMaxColumnsInGroupBy());

      System.out.println(md.getMaxColumnsInIndex());

      System.out.println(md.getMaxColumnsInOrderBy());

      System.out.println(md.getMaxColumnsInSelect());

      System.out.println(md.getMaxColumnsInTable());

      System.out.println(md.getMaxConnections());

      System.out.println(md.getMaxCursorNameLength());

      System.out.println(md.getMaxIndexLength());

      System.out.println(md.getMaxProcedureNameLength());

      System.out.println(md.getMaxRowSize());

      System.out.println(md.getMaxSchemaNameLength());

      System.out.println(md.getMaxStatementLength());

      System.out.println(md.getMaxStatements());

      System.out.println(md.getMaxTableNameLength());

      System.out.println(md.getMaxUserNameLength());

      System.out.println(md.getNumericFunctions());

      System.out.println(md.getProcedureTerm());

      System.out.println(md.getResultSetHoldability());

      System.out.println(md.getSchemaTerm());

      System.out.println(md.getSearchStringEscape());

      System.out.println("Testing DatabaseMetaData.getSQLKeywords()");

      System.out.println(md.getSQLKeywords());

      System.out.println(md.getSQLStateType());

      System.out.println("Testing DatabaseMetaData.getStringFunctions()");

      System.out.println(md.getStringFunctions());

      System.out.println("Testing DatabaseMetaData.getSystemFunctions()");

      System.out.println(md.getSystemFunctions());

      System.out.println("Testing DatabaseMetaData.getTimeDateFunctions()");

      System.out.println(md.getTimeDateFunctions());

      System.out.println(md.getURL());

      System.out.println(md.getUserName());

      System.out.println(DatabaseMetaData.importedKeyCascade);

      System.out.println(md.isCatalogAtStart());

      System.out.println(md.isReadOnly());

      ResultSet rs;

      rs=md.getPrimaryKeys(null,null,"USER");

      ResultSetMetaData rsmd=rs.getMetaData();

      String result0="";

      for (; rs.next(); ) {

        for (int i=0; i < rsmd.getColumnCount(); i++) {

          result0+=rs.getString(i + 1) + ":";

        }

        result0+="\n";

      }

      rs.close();

      System.out.println(result0);

    }

{

      ResultSet rs;

      rs=md.getBestRowIdentifier(null,null,"USER",0,true);

      ResultSetMetaData rsmd=rs.getMetaData();

      String result0="";

      for (; rs.next(); ) {

        for (int i=0; i < rsmd.getColumnCount(); i++) {

          result0+=rs.getString(i + 1) + ":";

        }

        result0+="\n";

      }

      rs.close();

      System.out.println(result0);

    }

{

      ResultSet rs=md.getImportedKeys(null,null,"ADDRESSBOOK");

      ResultSetMetaData rsmd=rs.getMetaData();

      result1="";

      for (; rs.next(); ) {

        for (int i=0; i < rsmd.getColumnCount(); i++) {

          result1+=rs.getString(i + 1) + ":";

        }

        result1+="\n";

      }

      rs.close();

      System.out.println(result1);

    }

{

      ResultSet rs=md.getCrossReference(null,null,"ADDRESSBOOK_CATEGORY",null,null,"ADDRESSBOOK");

      ResultSetMetaData rsmd=rs.getMetaData();

      result2="";

      for (; rs.next(); ) {

        for (int i=0; i < rsmd.getColumnCount(); i++) {

          result2+=rs.getString(i + 1) + ":";

        }

        result2+="\n";

      }

      rs.close();

      System.out.println(result2);

    }

{

      ResultSet rs=md.getExportedKeys(null,null,"USER");

      ResultSetMetaData rsmd=rs.getMetaData();

      result3="";

      for (; rs.next(); ) {

        for (int i=0; i < rsmd.getColumnCount(); i++) {

          result3+=rs.getString(i + 1) + ":";

        }

        result3+="\n";

      }

      rs.close();

      System.out.println(result3);

    }

{

      ResultSet rs=md.getCrossReference(null,null,"USER",null,null,"ADDRESSBOOK_CATEGORY");

      ResultSetMetaData rsmd=rs.getMetaData();

      result4="";

      for (; rs.next(); ) {

        for (int i=0; i < rsmd.getColumnCount(); i++) {

          result4+=rs.getString(i + 1) + ":";

        }

        result4+="\n";

      }

      rs.close();

      System.out.println(result4);

    }

{

      stmnt.execute("DROP TABLE T IF EXISTS;");

      stmnt.execute("CREATE TABLE T (I IDENTITY, A CHAR(20), B CHAR(20));");

      stmnt.execute("INSERT INTO T VALUES (NULL, 'get_column_name', '" + getColumnName + "');");

      ResultSet rs=stmnt.executeQuery("SELECT I, A, B, A \"aliasA\", B \"aliasB\", 1 FROM T;");

      ResultSetMetaData rsmd=rs.getMetaData();

      result5="";

      for (; rs.next(); ) {

        for (int i=0; i < rsmd.getColumnCount(); i++) {

          result5+=rsmd.getColumnName(i + 1) + ":" + rs.getString(i + 1)+ ":";

        }

        result5+="\n";

      }

      rs.close();

      rs=stmnt.executeQuery("SELECT I, A, B, A \"aliasA\", B \"aliasB\", 1 FROM T;");

      rsmd=rs.getMetaData();

      for (; rs.next(); ) {

        for (int i=0; i < rsmd.getColumnCount(); i++) {

          result5+=rsmd.getColumnLabel(i + 1) + ":" + rs.getString(i + 1)+ ":";

        }

        result5+="\n";

      }

      System.out.println(result5);

      System.out.println("first column identity: " + rsmd.isAutoIncrement(1));

      rsmd.isCaseSensitive(1);

      rsmd.isCurrency(1);

      rsmd.isDefinitelyWritable(1);

      rsmd.isNullable(1);

      rsmd.isReadOnly(1);

      rsmd.isSearchable(1);

      rsmd.isSigned(1);

      rsmd.isWritable(1);

      rs.close();

      pstmnt=connection.prepareStatement("INSERT INTO T VALUES (?,?,?)");

      pstmnt.setString(1,null);

      pstmnt.setString(2,"test");

      pstmnt.setString(3,"test2");

      pstmnt.executeUpdate();

      pstmnt=connection.prepareStatement("call identity()");

      ResultSet rsi=pstmnt.executeQuery();

      rsi.next();

      int identity=rsi.getInt(1);

      System.out.println("call identity(): " + identity);

      rsi.close();

    }

  }

 catch (  SQLException e) {

    fail(e.getMessage());

  }

  System.out.println("testMetaData complete");

  assertEquals(result1,result2);

  assertEquals(result3,result4);

}

Location: TestSql.java

Content: 

public void testPreparedWithManyParams() throws Exception {

  int count=40;

  String tabledef="CREATE TABLE T1 (";

  for (int i=0; i < count; i++) {

    if (i != 0) {

      tabledef=tabledef + ',';

    }

    tabledef=tabledef + "COL_" + i+ " INT NOT NULL";

  }

  tabledef+=");";

  String querydef="INSERT INTO T1(";

  for (int i=0; i < count; i++) {

    if (i != 0) {

      querydef=querydef + ',';

    }

    querydef=querydef + "COL_" + i;

  }

  querydef+=") VALUES (";

  for (int i=0; i < count; i++) {

    if (i != 0) {

      querydef=querydef + ',';

    }

    querydef=querydef + "?";

  }

  querydef+=");";

  Statement st=connection.createStatement();

  st.execute("DROP TABLE T1 IF EXISTS;");

  st.execute(tabledef);

  PreparedStatement ps=connection.prepareStatement(querydef);

  for (int i=0; i < count; i++) {

    ps.setInt(i + 1,i + 311);

  }

  ps.executeUpdate();

}

Location: TestSql.java

Content: 

public TestSql(String name){

  super(name);

}

Location: TestSql.java

Content: 

/** 

 * In 1.8.0.2, this fails in client / server due to column type of the second select for b1 being boolean, while the first select is interpreted as varchar. The rowOutputBase class attempts to cast the Java Boolean into String.

 */

public void testUnionColumnTypes(){

  try {

    Connection conn=newConnection();

    Statement stmt=conn.createStatement();

    stmt.execute("DROP TABLE test1 IF EXISTS");

    stmt.execute("DROP TABLE test2 IF EXISTS");

    stmt.execute("CREATE TABLE test1 (id int, b1 boolean)");

    stmt.execute("CREATE TABLE test2 (id int)");

    stmt.execute("INSERT INTO test1 VALUES(1,true)");

    stmt.execute("INSERT INTO test2 VALUES(2)");

    ResultSet rs=stmt.executeQuery("select id,null as b1 from test2 union select id, b1 from test1");

    Boolean[] array=new Boolean[2];

    for (int i=0; rs.next(); i++) {

      boolean boole=rs.getBoolean(2);

      array[i]=Boolean.valueOf(boole);

      if (rs.wasNull()) {

        array[i]=null;

      }

    }

    boolean result=(array[0] == null && array[1] == Boolean.TRUE) || (array[0] == Boolean.TRUE && array[1] == null);

    assertTrue(result);

  }

 catch (  SQLException e) {

    e.printStackTrace();

    System.out.println("TestSql.testUnionColumnType() error: " + e.getMessage());

  }

}

Location: TestSql.java

Content: 

public void testX1(){

  String tableDDL="create table lo_attribute ( " + "learningid varchar(15) not null, " + "ordering integer not null,"+ "attribute_value_data varchar(85),"+ "constraint PK_LO_ATTR primary key (learningid, ordering))";

  try {

    Statement stmt=connection.createStatement();

    stmt.execute("drop table lo_attribute if exists");

    stmt.execute(tableDDL);

    stmt.execute("insert into lo_attribute values('abcd', 10, 'cdef')");

    stmt.execute("insert into lo_attribute values('bcde', 20, 'cdef')");

  }

 catch (  SQLException e) {

    assertEquals(0,1);

  }

  try {

    String prepared="update lo_attribute set " + " ordering = (ordering - 1) where ordering > ?";

    PreparedStatement ps=connection.prepareStatement(prepared);

    ps.setInt(1,10);

    ps.execute();

  }

 catch (  SQLException e) {

    assertEquals(0,1);

  }

  try {

    connection.setAutoCommit(false);

    java.sql.Savepoint savepoint=connection.setSavepoint("savepoint");

    connection.createStatement().executeQuery("CALL true;");

    connection.rollback(savepoint);

  }

 catch (  SQLException e) {

    assertEquals(0,1);

  }

}

