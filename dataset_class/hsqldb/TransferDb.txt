Location: TransferDb.java

Content: 

void commit() throws DataAccessPointException {

  if (srcStatement != null) {

    try {

      srcStatement.close();

    }

 catch (    SQLException e) {

    }

    srcStatement=null;

  }

  try {

    conn.commit();

  }

 catch (  SQLException e) {

    throw new DataAccessPointException(e.toString());

  }

}

Location: TransferDb.java

Content: 

boolean getAutoCommit() throws DataAccessPointException {

  boolean result=false;

  try {

    result=conn.getAutoCommit();

  }

 catch (  SQLException e) {

    throw new DataAccessPointException(e.toString());

  }

  return result;

}

Location: TransferDb.java

Content: 

Vector getCatalog() throws DataAccessPointException {

  Vector ret=new Vector();

  ResultSet result=null;

  if (databaseToConvert != null && databaseToConvert.length() > 0) {

    ret.addElement(databaseToConvert);

    return (ret);

  }

  try {

    result=meta.getCatalogs();

  }

 catch (  SQLException e) {

    result=null;

  }

  try {

    if (result != null) {

      while (result.next()) {

        ret.addElement(result.getString(1));

      }

      result.close();

    }

  }

 catch (  SQLException e) {

    throw new DataAccessPointException(e.toString());

  }

  return (ret);

}

Location: TransferDb.java

Content: 

/** 

 * @return Returns the conn.

 */

public Connection getConn(){

  return conn;

}

Location: TransferDb.java

Content: 

/** 

 * @return Returns the meta.

 */

public DatabaseMetaData getMeta(){

  return meta;

}

Location: TransferDb.java

Content: 

Vector getSchemas() throws DataAccessPointException {

  Vector ret=new Vector();

  ResultSet result=null;

  try {

    result=meta.getSchemas();

  }

 catch (  SQLException e) {

    result=null;

  }

  try {

    if (result != null) {

      while (result.next()) {

        ret.addElement(result.getString(1));

      }

      result.close();

    }

  }

 catch (  SQLException e) {

    throw new DataAccessPointException(e.toString());

  }

  return (ret);

}

Location: TransferDb.java

Content: 

boolean isConnected(){

  return (conn != null);

}

Location: TransferDb.java

Content: 

void rollback() throws DataAccessPointException {

  if (srcStatement != null) {

    try {

      srcStatement.close();

    }

 catch (    SQLException e) {

    }

    srcStatement=null;

  }

  try {

    conn.rollback();

  }

 catch (  SQLException e) {

    throw new DataAccessPointException(e.toString());

  }

}

Location: TransferDb.java

Content: 

void setAutoCommit(boolean flag) throws DataAccessPointException {

  try {

    conn.setAutoCommit(flag);

  }

 catch (  SQLException e) {

    throw new DataAccessPointException(e.toString());

  }

}

Location: TransferDb.java

Content: 

void setCatalog(String sCatalog) throws DataAccessPointException {

  if (sCatalog != null && sCatalog.length() > 0) {

    try {

      conn.setCatalog(sCatalog);

    }

 catch (    SQLException e) {

      throw new DataAccessPointException(e.toString());

    }

  }

}

Location: TransferDb.java

Content: 

TransferDb(Connection c,Traceable t) throws DataAccessPointException {

  super(t);

  conn=c;

  if (c != null) {

    String productLowerName;

    try {

      meta=c.getMetaData();

      databaseToConvert=c.getCatalog();

      productLowerName=meta.getDatabaseProductName();

      if (productLowerName == null) {

        productLowerName="";

      }

 else {

        productLowerName=productLowerName.toLowerCase();

      }

      helper=HelperFactory.getHelper(productLowerName);

      helper.set(this,t,meta.getIdentifierQuoteString());

    }

 catch (    SQLException e) {

      throw new DataAccessPointException(e.toString());

    }

  }

}

Location: TransferDb.java

Content: 

/** 

 * Method declaration

 * @param type

 * @param r

 * @param p

 * @throws SQLException

 */

private void transferRow(TransferResultSet r,PreparedStatement p,int len,int[] types) throws DataAccessPointException, SQLException {

  for (int i=1; i <= len; i++) {

    int t=types[i];

    Object o=r.getObject(i);

    if (o == null) {

      if (p != null) {

        p.setNull(i,t);

      }

    }

 else {

      o=helper.convertColumnValue(o,i,t);

      p.setObject(i,o);

    }

  }

  if (p != null) {

    p.execute();

  }

}

