Location: JaasAuthBean.java

Content: 

/** 

 * @see AuthFunctionBean#authenticate(String,String)

 */

public String[] authenticate(String userName,String password) throws DenyException {

  if (!initialized) {

    throw new IllegalStateException("You must invoke the 'init' method to initialize the " + JaasAuthBean.class.getName() + " instance.");

  }

  try {

    LoginContext lc=new LoginContext(applicationKey,new UPCallbackHandler(userName,password));

    try {

      lc.login();

    }

 catch (    LoginException le) {

      logger.finer("JSSE backend denying access:  " + le);

      throw new DenyException();

    }

    try {

      if (roleSchemaValuePattern == null) {

        return null;

      }

      int i=0;

      Matcher m=null;

      List<String> rsCandidates=new ArrayList<String>();

      List<String> rsList=new ArrayList<String>();

      Subject s=lc.getSubject();

      if (roleSchemaViaCredential) {

        for (        Object cred : new ArrayList(s.getPublicCredentials())) {

          rsCandidates.add(cred.toString());

        }

      }

 else {

        for (        Principal p : new ArrayList<Principal>(s.getPrincipals())) {

          rsCandidates.add(p.getName());

        }

      }

      logger.finer(Integer.toString(rsCandidates.size()) + " candidate " + (roleSchemaViaCredential ? "Credentials" : "Principals"));

      for (      String candid : rsCandidates) {

        m=roleSchemaValuePattern.matcher(candid);

        if (m.matches()) {

          logger.finer("    +" + ++i + ": "+ ((m.groupCount() > 0) ? m.group(1) : candid));

          rsList.add((m.groupCount() > 0) ? m.group(1) : candid);

        }

 else {

          logger.finer("    -" + ++i + ": "+ candid);

        }

      }

      return rsList.toArray(new String[0]);

    }

  finally {

      lc.logout();

    }

  }

 catch (  LoginException le) {

    logger.severe("System JaasAuthBean failure",le);

    throw new RuntimeException(le);

  }

catch (  RuntimeException re) {

    logger.severe("System JaasAuthBean failure",re);

    throw re;

  }

}

Location: JaasAuthBean.java

Content: 

public JaasAuthBean(){

}

Location: JaasAuthBean.java

Content: 

/** 

 * Set the key into the JAAS runtime configuration. For Sun's JAAS implementation, this is the "application" identifier for a stanza in the JAAS configuration file.

 * @param applicationKey key

 */

public void setApplicationKey(String applicationKey){

  this.applicationKey=applicationKey;

}

Location: JaasAuthBean.java

Content: 

/** 

 * String wrapper for method setRoleSchemaValuePattern(Pattern) Use the (x?) Pattern constructs to set options.

 * @see #setRoleSchemaValuePattern(Pattern)

 * @param patternString pattern

 * @throws java.util.regex.PatternSyntaxException exception

 */

public void setRoleSchemaValuePatternString(String patternString){

  setRoleSchemaValuePattern(Pattern.compile(patternString));

}

Location: JaasAuthBean.java

Content: 

/** 

 * Assign a pattern to both detect honored values, and optionally to map from a single principal name or public credential string to a single HyperSQL role or schema string. Do not use this method if you are using this JaasAuthBean only to permit or reject access (with roles and schema being determined by pre-existing local HyperSQL accounts). On that case, simple success of the login() method method will allow access as the specified user. <P> If every principal name or public credentials holds only the String values precisely as HyperSQL needs them, then set the pattern to ".+". For example, if the JAAS module returns principals (or credentials) with values "one", "two", "three", then if you set this pattern to ".+", HyperSQL will attempt to assign initial schema and roles for the values "one", "two", and "three". <P> These are two distinct and important purposes for the specified Pattern. <OL> <LI> Values that do not successfully match the pattern will be ignored. If the pattern does match, then the entire principal or credential value will be used to assign initial schema or role (as long as it is a valid schema name or role name in the local database). <LI> Optionally uses parentheses to specify a single capture group (if you use parentheses to specify more than one matching group, we will only capture for the first). What is captured by this group is exactly the role or schema that HyperSQL will attempt to assign. If no capture parens are given then the Pattern is only used for the acceptance decision, and the JAAS-provided value will be returned verbatim. </OL> <P> N.b. this Pattern will be used for the matches() operation, therefore it must match the entire candidate value strings (this is different than the find operation which does not need to satisfy the entire candidate value). <P>Example1 :<PRE><CODE> cn=([^,]+),ou=dbRole,dc=admc,dc=com </CODE></PRE> will extract the CN value from matching attribute values. <P>Example1 :<PRE><CODE> cn=[^,]+,ou=dbRole,dc=admc,dc=com </CODE></PRE> will return the entire <CODE>cn...com</CODE> string for matching attribute values.

 * @see Matcher#matches()

 * @param roleSchemaValuePattern pattern

 */

public void setRoleSchemaValuePattern(Pattern roleSchemaValuePattern){

  this.roleSchemaValuePattern=roleSchemaValuePattern;

}

Location: JaasAuthBean.java

Content: 

/** 

 * By default, If roleSchemaValuePattern is set, then role and schema values are obtained from principle values; otherwise existing account privileges are used (if any). If roleSchemaViaCredential is set to true and roleSchemaValuePattern is set, then credential values will be used instead. <P> Do not set roleSchemaViaCredential to true unless roleSchemaValuePattern is set.

 * @param roleSchemaViaCredential boolean

 */

public void setRoleSchemaViaCredential(boolean roleSchemaViaCredential){

  this.roleSchemaViaCredential=roleSchemaViaCredential;

}

