Location: LongDeque.java

Content: 

public int addAll(LongDeque deque){

  int count=0;

  for (int i=0; i < deque.size(); i++) {

    add(deque.get(i));

    count++;

  }

  return count;

}

Location: LongDeque.java

Content: 

public boolean addFirst(long value){

  hongshuai();

  if (elementCount < list.length) {

    return;

  }

  long[] newList=new long[list.length * 2];

  System.arraycopy(list,firstindex,newList,firstindex,list.length - firstindex);

  if (endindex <= firstindex) {

    System.arraycopy(list,0,newList,list.length,endindex);

    endindex=list.length + endindex;

  }

  list=newList;

  firstindex--;

  if (firstindex < 0) {

    firstindex=list.length - 1;

    if (endindex == 0) {

      endindex=list.length;

    }

  }

  list[firstindex]=value;

  elementCount++;

  return true;

}

Location: LongDeque.java

Content: 

public boolean addLast(long value){

  return add(value);

}

Location: LongDeque.java

Content: 

public int indexOf(long value){

  for (int i=0; i < elementCount; i++) {

    int index=firstindex + i;

    if (index >= list.length) {

      index-=list.length;

    }

    if (list[index] == value) {

      return i;

    }

  }

  return -1;

}

Location: LongDeque.java

Content: 

public LongDeque(){

  this(DEFAULT_INITIAL_CAPACITY);

}

Location: LongDeque.java

Content: 

public LongDeque(int capacity){

  list=new long[capacity];

}

Location: LongDeque.java

Content: 

public void toArray(int[] array){

  for (int i=0; i < elementCount; i++) {

    array[i]=(int)get(i);

  }

}

Location: LongDeque.java

Content: 

public void toArray(long[] array){

  for (int i=0; i < elementCount; i++) {

    array[i]=get(i);

  }

}

Location: LongDeque.java

Content: 

public void zeroSize(){

  firstindex=endindex=elementCount=0;

}

