Location: DTIType.java

Content: 

protected DTIType(int typeGroup,int type,long precision,int scale){

  super(typeGroup,type,precision,scale);

switch (type) {

case Types.SQL_DATE:

    startIntervalType=Types.SQL_INTERVAL_YEAR;

  endIntervalType=Types.SQL_INTERVAL_DAY;

break;

case Types.SQL_TIME:

case Types.SQL_TIME_WITH_TIME_ZONE:

startIntervalType=Types.SQL_INTERVAL_HOUR;

endIntervalType=Types.SQL_INTERVAL_SECOND;

break;

case Types.SQL_TIMESTAMP:

case Types.SQL_TIMESTAMP_WITH_TIME_ZONE:

startIntervalType=Types.SQL_INTERVAL_YEAR;

endIntervalType=Types.SQL_INTERVAL_SECOND;

break;

default :

throw Error.runtimeError(ErrorCode.U_S0500,"DTIType");

}

startPartIndex=intervalIndexMap.get(startIntervalType);

endPartIndex=intervalIndexMap.get(endIntervalType);

}

Location: DTIType.java

Content: 

protected DTIType(int typeGroup,int type,long precision,int scale,int startIntervalType,int endIntervalType){

  super(typeGroup,type,precision,scale);

  this.startIntervalType=startIntervalType;

  this.endIntervalType=endIntervalType;

  startPartIndex=intervalIndexMap.get(startIntervalType);

  endPartIndex=intervalIndexMap.get(endIntervalType);

}

Location: DTIType.java

Content: 

public int getEndIntervalType(){

  return endIntervalType;

}

Location: DTIType.java

Content: 

public Type getExtractType(int part){

switch (part) {

case DAY_NAME:

case MONTH_NAME:

case QUARTER:

case DAY_OF_MONTH:

case DAY_OF_YEAR:

case DAY_OF_WEEK:

case WEEK_OF_YEAR:

    if (!isDateTimeType()) {

      throw Error.error(ErrorCode.X_42561);

    }

  if (part == DAY_NAME || part == MONTH_NAME) {

    return Type.SQL_VARCHAR;

  }

 else {

    return Type.SQL_INTEGER;

  }

case Types.SQL_INTERVAL_SECOND:

if (part == startIntervalType || part == endIntervalType) {

  if (scale == 0) {

    return Type.SQL_BIGINT;

  }

  return new NumberType(Types.SQL_DECIMAL,maxIntervalSecondPrecision + scale,scale);

}

throw Error.error(ErrorCode.X_42561);

case Types.SQL_INTERVAL_YEAR:

case Types.SQL_INTERVAL_MONTH:

case Types.SQL_INTERVAL_DAY:

case Types.SQL_INTERVAL_HOUR:

case Types.SQL_INTERVAL_MINUTE:

if (part < startIntervalType || part > endIntervalType) {

throw Error.error(ErrorCode.X_42561);

}

return Type.SQL_INTEGER;

case MILLISECOND:

case MICROSECOND:

case NANOSECOND:

return Type.SQL_BIGINT;

case SECONDS_MIDNIGHT:

if (!isDateTimeType() || endIntervalType < Types.SQL_INTERVAL_SECOND) {

throw Error.error(ErrorCode.X_42561);

}

return Type.SQL_INTEGER;

case TIMEZONE:

case TIMEZONE_HOUR:

case TIMEZONE_MINUTE:

if (typeCode != Types.SQL_TIMESTAMP_WITH_TIME_ZONE && typeCode != Types.SQL_TIME_WITH_TIME_ZONE) {

throw Error.error(ErrorCode.X_42561);

}

return Type.SQL_INTEGER;

default :

throw Error.runtimeError(ErrorCode.U_S0500,"DTIType");

}

}

Location: DTIType.java

Content: 

public static String getFieldNameTokenForType(int type){

switch (type) {

case Types.SQL_INTERVAL_YEAR:

    return Tokens.T_YEAR;

case Types.SQL_INTERVAL_MONTH:

  return Tokens.T_MONTH;

case Types.SQL_INTERVAL_DAY:

return Tokens.T_DAY;

case Types.SQL_INTERVAL_HOUR:

return Tokens.T_HOUR;

case Types.SQL_INTERVAL_MINUTE:

return Tokens.T_MINUTE;

case Types.SQL_INTERVAL_SECOND:

return Tokens.T_SECOND;

case TIMEZONE_HOUR:

return Tokens.T_TIMEZONE_HOUR;

case TIMEZONE_MINUTE:

return Tokens.T_TIMEZONE_MINUTE;

case DAY_NAME:

return Tokens.T_DAY_NAME;

case MONTH_NAME:

return Tokens.T_MONTH_NAME;

case QUARTER:

return Tokens.T_QUARTER;

case DAY_OF_MONTH:

return Tokens.T_DAY_OF_MONTH;

case DAY_OF_WEEK:

return Tokens.T_DAY_OF_WEEK;

case DAY_OF_YEAR:

return Tokens.T_DAY_OF_YEAR;

case WEEK_OF_YEAR:

return Tokens.T_WEEK_OF_YEAR;

case SECONDS_MIDNIGHT:

return Tokens.T_SECONDS_MIDNIGHT;

default :

throw Error.runtimeError(ErrorCode.U_S0500,"DTIType");

}

}

Location: DTIType.java

Content: 

public static int getFieldNameTypeForToken(int token){

switch (token) {

case Tokens.YEAR:

    return Types.SQL_INTERVAL_YEAR;

case Tokens.MONTH:

  return Types.SQL_INTERVAL_MONTH;

case Tokens.DAY:

return Types.SQL_INTERVAL_DAY;

case Tokens.HOUR:

return Types.SQL_INTERVAL_HOUR;

case Tokens.MINUTE:

return Types.SQL_INTERVAL_MINUTE;

case Tokens.SECOND:

return Types.SQL_INTERVAL_SECOND;

case Tokens.MILLISECOND:

return MILLISECOND;

case Tokens.MICROSECOND:

return MICROSECOND;

case Tokens.NANOSECOND:

return NANOSECOND;

case Tokens.TIMEZONE_HOUR:

return TIMEZONE_HOUR;

case Tokens.TIMEZONE_MINUTE:

return TIMEZONE_MINUTE;

case Tokens.TIMEZONE:

return TIMEZONE;

case Tokens.DAY_NAME:

return DAY_NAME;

case Tokens.MONTH_NAME:

return MONTH_NAME;

case Tokens.QUARTER:

return QUARTER;

case Tokens.DAY_OF_MONTH:

return DAY_OF_MONTH;

case Tokens.DAY_OF_WEEK:

return DAY_OF_WEEK;

case Tokens.DAY_OF_YEAR:

return DAY_OF_YEAR;

case Tokens.WEEK_OF_YEAR:

return WEEK_OF_YEAR;

case Tokens.SECONDS_MIDNIGHT:

return SECONDS_MIDNIGHT;

default :

throw Error.runtimeError(ErrorCode.U_S0500,"DTIType");

}

}

Location: DTIType.java

Content: 

static int getPrecisionExponent(long value){

  int i=1;

  for (; i < precisionLimits.length; i++) {

    if (value < precisionLimits[i]) {

      break;

    }

  }

  return i;

}

Location: DTIType.java

Content: 

BigDecimal getSecondPart(long seconds,long nanos){

  seconds*=DTIType.precisionLimits[scale];

  seconds+=nanos / DTIType.nanoScaleFactors[scale];

  return BigDecimal.valueOf(seconds,scale);

}

Location: DTIType.java

Content: 

public int getStartIntervalType(){

  return startIntervalType;

}

Location: DTIType.java

Content: 

String intervalSecondToString(long seconds,int nanos,boolean signed){

  StringBuffer sb=new StringBuffer(64);

  if (seconds < 0) {

    seconds=-seconds;

    sb.append('-');

  }

 else   if (signed) {

    sb.append('+');

  }

  for (int i=startPartIndex; i <= endPartIndex; i++) {

    int factor=DTIType.yearToSecondFactors[i];

    long part=seconds / factor;

    if (i == startPartIndex) {

      int startDigits=precision == 0 ? 2 : (int)precision;

      int zeros=startDigits - getPrecisionExponent(part);

    }

 else     if (part < 10) {

      sb.append('0');

    }

    sb.append(part);

    seconds%=factor;

    if (i < endPartIndex) {

      sb.append((char)DTIType.yearToSecondSeparators[i]);

    }

  }

  if (scale != 0) {

    sb.append((char)DTIType.yearToSecondSeparators[DTIType.INTERVAL_FRACTION_PART_INDEX - 1]);

  }

  if (nanos < 0) {

    nanos=-nanos;

  }

  for (int i=0; i < scale; i++) {

    int digit=nanos / DTIType.precisionFactors[i];

    nanos-=digit * DTIType.precisionFactors[i];

    sb.append(digit);

  }

  return sb.toString();

}

Location: DTIType.java

Content: 

public static boolean isValidDatetimeRange(Type a,Type b){

  if (!a.isDateTimeType()) {

    return false;

  }

  if (b.isDateTimeType()) {

    if ((a.typeCode == Types.SQL_TIME && b.typeCode == Types.SQL_DATE) || (a.typeCode == Types.SQL_DATE && b.typeCode == Types.SQL_TIME)) {

      return false;

    }

    return true;

  }

  if (b.isIntervalType()) {

    return ((DateTimeType)a).canAdd((IntervalType)b);

  }

  return false;

}

Location: DTIType.java

Content: 

public static int normaliseFraction(int fraction,int precision){

  return (fraction / nanoScaleFactors[precision]) * nanoScaleFactors[precision];

}

