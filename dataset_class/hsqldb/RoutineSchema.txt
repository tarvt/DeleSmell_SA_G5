Location: RoutineSchema.java

Content: 

public void addSpecificRoutine(HsqlNameManager nameManager,Routine routine,boolean replace){

  int signature=routine.getParameterSignature();

  Type[] types=routine.getParameterTypes();

  int matchPosition=routines.length;

  for (int i=0; i < this.routines.length; i++) {

    if (routines[i].parameterTypes.length == types.length) {

      if (routineType == SchemaObject.PROCEDURE) {

        if (!replace) {

          throw Error.error(ErrorCode.X_42605);

        }

      }

      if (routines[i].isAggregate() != routine.isAggregate()) {

        throw Error.error(ErrorCode.X_42605);

      }

      boolean match=true;

      for (int j=0; j < types.length; j++) {

        if (!routines[i].parameterTypes[j].equals(types[j])) {

          match=false;

          break;

        }

      }

      if (match) {

        if (replace) {

          routine.setSpecificName(routines[i].getSpecificName());

          matchPosition=i;

          break;

        }

 else {

          throw Error.error(ErrorCode.X_42605);

        }

      }

    }

  }

  if (routine.getSpecificName() == null) {

    HsqlName specificName=nameManager.newSpecificRoutineName(name);

    routine.setSpecificName(specificName);

  }

 else {

    routine.getSpecificName().parent=name;

    routine.getSpecificName().schema=name.schema;

  }

  routine.setName(name);

  routine.routineSchema=this;

  if (matchPosition == routines.length) {

    routines=(Routine[])ArrayUtil.resizeArray(routines,routines.length + 1);

  }

  routines[matchPosition]=routine;

}

Location: RoutineSchema.java

Content: 

public Routine findSpecificRoutine(Type[] types){

  int matchIndex=-1;

  outerLoop:   for (int i=0; i < this.routines.length; i++) {

    int matchCount=0;

    if (routines[i].isAggregate()) {

      if (types.length == 1) {

        if (types[0] == null) {

          return routines[i];

        }

        int typeDifference=types[0].precedenceDegree(routines[i].parameterTypes[0]);

        if (typeDifference < -NumberType.DOUBLE_WIDTH) {

          if (matchIndex == -1) {

            continue;

          }

          int oldDiff=types[0].precedenceDegree(routines[matchIndex].parameterTypes[0]);

          int newDiff=types[0].precedenceDegree(routines[i].parameterTypes[0]);

          if (oldDiff == newDiff) {

            continue outerLoop;

          }

          if (newDiff < oldDiff) {

            matchIndex=i;

          }

          continue outerLoop;

        }

 else         if (typeDifference == 0) {

          return routines[i];

        }

 else {

          matchIndex=i;

          continue outerLoop;

        }

      }

    }

    if (routines[i].parameterTypes.length != types.length) {

      continue;

    }

    if (types.length == 0) {

      return this.routines[i];

    }

    for (int j=0; j < types.length; j++) {

      int typeDifference;

      if (types[j] == null) {

        continue;

      }

      typeDifference=types[j].precedenceDegree(routines[i].parameterTypes[j]);

      if (typeDifference < -NumberType.DOUBLE_WIDTH) {

        continue outerLoop;

      }

 else       if (typeDifference == 0) {

        if (matchCount == j) {

          matchCount=j + 1;

        }

      }

    }

    if (matchCount == types.length) {

      return routines[i];

    }

    if (matchIndex == -1) {

      matchIndex=i;

      continue;

    }

    for (int j=0; j < types.length; j++) {

      if (types[j] == null) {

        continue;

      }

      int oldDiff=types[j].precedenceDegree(routines[matchIndex].parameterTypes[j]);

      int newDiff=types[j].precedenceDegree(routines[i].parameterTypes[j]);

      if (oldDiff == newDiff) {

        continue;

      }

      if (newDiff < oldDiff) {

        matchIndex=i;

      }

      continue outerLoop;

    }

  }

  return matchIndex < 0 ? null : routines[matchIndex];

}

Location: RoutineSchema.java

Content: 

public Routine[] getSpecificRoutines(){

  return routines;

}

Location: RoutineSchema.java

Content: 

public Routine getSpecificRoutine(int paramCount){

  for (int i=0; i < this.routines.length; i++) {

    if (routines[i].parameterTypes.length == paramCount) {

      return routines[i];

    }

  }

  throw Error.error(ErrorCode.X_42501);

}

Location: RoutineSchema.java

Content: 

public Routine getSpecificRoutine(Type[] types){

  Routine routine=findSpecificRoutine(types);

  if (routine == null) {

    StringBuffer sb=new StringBuffer();

    sb.append(name.getSchemaQualifiedStatementName());

    sb.append(Tokens.T_OPENBRACKET);

    for (int i=0; i < types.length; i++) {

      if (i != 0) {

        sb.append(Tokens.T_COMMA);

      }

      sb.append(types[i].getNameString());

    }

    sb.append(Tokens.T_CLOSEBRACKET);

    throw Error.error(ErrorCode.X_42609,sb.toString());

  }

  return routine;

}

Location: RoutineSchema.java

Content: 

public boolean isAggregate(){

  return routines[0].isAggregate;

}

Location: RoutineSchema.java

Content: 

public void removeSpecificRoutine(Routine routine){

  for (int i=0; i < this.routines.length; i++) {

    if (routines[i] == routine) {

      routines=(Routine[])ArrayUtil.toAdjustedArray(routines,null,i,-1);

      break;

    }

  }

}

Location: RoutineSchema.java

Content: 

public RoutineSchema(int type,HsqlName name){

  routineType=type;

  this.name=name;

}

