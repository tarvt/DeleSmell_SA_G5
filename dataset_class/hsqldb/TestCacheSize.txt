Location: TestCacheSize.java

Content: 

private void countTestID(){

  try {

    StopWatch sw=new StopWatch();

    sStatement.execute("SELECT count(*) from TEST where id > -1");

    ResultSet rs=sStatement.getResultSet();

    rs.next();

    long time=sw.elapsedTime();

    long rate=((long)bigrows * 1000) / (time + 1);

    storeResult("count (index on id)",rs.getInt(1),time,rate);

    System.out.println("count time (index on id) " + rs.getInt(1) + " rows  -- "+ time+ " ms -- "+ rate+ " tps");

    sw.zero();

    sStatement.execute("SELECT count(*) from TEST");

    rs=sStatement.getResultSet();

    rs.next();

    time=sw.elapsedTime();

    rate=(1000L) / (time + 1);

    storeResult("count (index on id)",rs.getInt(1),time,rate);

    System.out.println("count time (full count) " + rs.getInt(1) + " rows  -- "+ time+ " ms -- "+ rate+ " tps");

  }

 catch (  SQLException e) {

  }

}

Location: TestCacheSize.java

Content: 

private void countTestZip(){

  try {

    StopWatch sw=new StopWatch();

    sStatement.execute("SELECT count(*) from TEST where zip > -1");

    ResultSet rs=sStatement.getResultSet();

    rs.next();

    long time=(long)sw.elapsedTime();

    long rate=((long)bigrows * 1000) / (time + 1);

    storeResult("count (index on zip)",rs.getInt(1),time,rate);

    System.out.println("count time (index on zip) " + rs.getInt(1) + " rows  -- "+ time+ " ms -- "+ rate+ " tps");

  }

 catch (  SQLException e) {

  }

}

Location: TestCacheSize.java

Content: 

private void countZip(){

  try {

    StopWatch sw=new StopWatch();

    sStatement.execute("SELECT count(*) from zip where zip > -1");

    ResultSet rs=sStatement.getResultSet();

    rs.next();

    System.out.println("count time (zip table) " + rs.getInt(1) + " rows  -- "+ sw.elapsedTime()+ " ms");

  }

 catch (  SQLException e) {

  }

}

Location: TestCacheSize.java

Content: 

static void deleteDatabase(String path){

  FileUtil fileUtil=FileUtil.getFileUtil();

  fileUtil.delete(path + ".backup");

  fileUtil.delete(path + ".properties");

  fileUtil.delete(path + ".script");

  fileUtil.delete(path + ".data");

  fileUtil.delete(path + ".log");

  fileUtil.delete(path + ".lck");

  fileUtil.delete(path + ".csv");

}

Location: TestCacheSize.java

Content: 

void deleteTest(){

  StopWatch sw=new StopWatch();

  java.util.Random randomgen=new java.util.Random();

  int i=0;

  boolean slow=false;

  int count=0;

  int random=0;

  try {

    PreparedStatement ps=cConnection.prepareStatement("DELETE FROM test WHERE id = ?");

    for (i=0; count < smallops; i++) {

      random=nextIntRandom(randomgen,bigrows);

      ps.setInt(1,random);

      count+=ps.executeUpdate();

      if (reportProgress && (i + 1) % 10000 == 0 || (slow && (i + 1) % 100 == 0)) {

        System.out.println("delete " + (i + 1) + " : "+ sw.elapsedTime()+ " rps: "+ (i * 1000 / (sw.elapsedTime() + 1)));

      }

    }

    ps.close();

  }

 catch (  SQLException e) {

    System.out.println("error : " + random);

    e.printStackTrace();

  }

  long time=sw.elapsedTime();

  long rate=(count * 1000) / (time + 1);

  storeResult("delete with random id",count,time,rate);

  System.out.println("delete time for random id " + count + " rows  -- "+ time+ " ms -- "+ rate+ " tps");

}

Location: TestCacheSize.java

Content: 

void deleteZipTable(){

  StopWatch sw=new StopWatch();

  java.util.Random randomgen=new java.util.Random();

  int i=0;

  boolean slow=false;

  int count=0;

  int random=0;

  try {

    PreparedStatement ps=cConnection.prepareStatement("DELETE FROM zip WHERE zip = ?");

    for (i=0; i <= smallrows; i++) {

      random=i;

      ps.setInt(1,random);

      count+=ps.executeUpdate();

      if (reportProgress && (i + 1) % 10000 == 0 || (slow && (i + 1) % 100 == 0)) {

        System.out.println("delete " + (i + 1) + " : "+ sw.elapsedTime()+ " rps: "+ (i * 1000 / (sw.elapsedTime() + 1)));

      }

    }

    ps.close();

  }

 catch (  SQLException e) {

    System.out.println("error : " + random);

    e.printStackTrace();

  }

  long time=sw.elapsedTime();

  long rate=((long)count * 1000) / (time + 1);

  storeResult("delete with random zip",count,time,rate);

  System.out.println("delete time for random zip " + count + " rows  -- "+ time+ " ms -- "+ rate+ " tps");

}

Location: TestCacheSize.java

Content: 

private void fillUpBigTable(String filler,Random randomgen) throws SQLException {

  StopWatch sw=new StopWatch();

  int i;

  PreparedStatement ps=cConnection.prepareStatement("INSERT INTO zip VALUES(?)");

  for (i=0; i <= smallrows; i++) {

    ps.setInt(1,i);

    ps.execute();

  }

  ps.close();

  sStatement.execute("SET DATABASE REFERENTIAL INTEGRITY " + this.refIntegrity);

  ps=cConnection.prepareStatement("INSERT INTO test (firstname,lastname,zip,filler) VALUES (?,?,?,?)");

  ps.setString(1,"Julia");

  ps.setString(2,"Clancy");

  for (i=0; i < bigrows; i++) {

    ps.setInt(3,nextIntRandom(randomgen,smallrows));

{

      long nextrandom=randomgen.nextLong();

      int randomlength=(int)nextrandom & 0x7f;

      if (randomlength > filler.length()) {

        randomlength=filler.length();

      }

      String varfiller=filler.substring(0,randomlength);

      ps.setString(4,nextrandom + varfiller);

    }

    ps.execute();

    if (reportProgress && (i + 1) % 10000 == 0) {

      System.out.println("insert " + (i + 1) + " : "+ sw.elapsedTime());

    }

    if (deleteWhileInsert && i != 0 && i % deleteWhileInsertInterval == 0) {

      sStatement.execute("CALL IDENTITY();");

      ResultSet rs=sStatement.getResultSet();

      rs.next();

      int lastId=rs.getInt(1);

      sStatement.execute("SELECT * INTO TEMP tempt FROM test WHERE id > " + (lastId - 4000));

      sStatement.execute("DELETE FROM test WHERE id > " + (lastId - 4000));

      sStatement.execute("INSERT INTO test SELECT * FROM tempt");

      sStatement.execute("DROP TABLE tempt");

    }

  }

  ps.close();

  long time=sw.elapsedTime();

  long rate=((long)i * 1000) / (time + 1);

  storeResult("insert",i,time,rate);

  System.out.println("insert time for " + i + " rows -- "+ time+ " ms -- "+ rate+ " tps");

}

Location: TestCacheSize.java

Content: 

private void fillUpMultiTable(String filler,Random randomgen) throws SQLException {

  StopWatch sw=new StopWatch();

  int i;

  PreparedStatement ps=cConnection.prepareStatement("INSERT INTO test2 (id1, id2, firstname,lastname,zip,filler) VALUES (?,?,?,?,?,?)");

  ps.setString(3,"Julia");

  ps.setString(4,"Clancy");

  int id1=0;

  for (i=0; i < bigrows; i++) {

    int id2=nextIntRandom(randomgen,Integer.MAX_VALUE);

    if (i % 1000 == 0) {

      id1=nextIntRandom(randomgen,Integer.MAX_VALUE);

    }

    ps.setInt(1,id1);

    ps.setInt(2,id2);

    ps.setInt(5,nextIntRandom(randomgen,smallrows));

    long nextrandom=randomgen.nextLong();

    int randomlength=(int)nextrandom & 0x7f;

    if (randomlength > filler.length()) {

      randomlength=filler.length();

    }

    String varfiller=filler.substring(0,randomlength);

    ps.setString(6,nextrandom + varfiller);

    try {

      ps.execute();

    }

 catch (    SQLException e) {

      e.printStackTrace();

    }

    if (reportProgress && (i + 1) % 10000 == 0) {

      System.out.println("insert " + (i + 1) + " : "+ sw.elapsedTime());

    }

  }

  ps.close();

  System.out.println("total multi key rows inserted: " + i);

  System.out.println("insert time: " + sw.elapsedTime() + " rps: "+ (i * 1000 / (sw.elapsedTime() + 1)));

}

Location: TestCacheSize.java

Content: 

void selectID(){

  StopWatch sw=new StopWatch();

  java.util.Random randomgen=new java.util.Random();

  int i=0;

  boolean slow=false;

  try {

    PreparedStatement ps=cConnection.prepareStatement("SELECT firstname,lastname,zip,filler FROM test WHERE id = ?");

    for (i=0; i < smallops; i++) {

      ps.setInt(1,nextIntRandom(randomgen,bigrows - 1));

      ps.execute();

      if (reportProgress && (i + 1) % 10000 == 0 || (slow && (i + 1) % 100 == 0)) {

        System.out.println("Select " + (i + 1) + " : "+ (sw.elapsedTime() + 1));

      }

    }

    ps.close();

  }

 catch (  SQLException e) {

    e.printStackTrace();

  }

  long time=sw.elapsedTime();

  long rate=((long)i * 1000) / (time + 1);

  storeResult("select random id",i,time,rate);

  System.out.println("select time for random id " + i + " rows  -- "+ time+ " ms -- "+ rate+ " tps");

}

Location: TestCacheSize.java

Content: 

void selectZip(){

  StopWatch sw=new StopWatch();

  java.util.Random randomgen=new java.util.Random();

  int i=0;

  boolean slow=false;

  try {

    PreparedStatement ps=cConnection.prepareStatement("SELECT TOP 1 firstname,lastname,zip,filler FROM test WHERE zip = ?");

    for (; i < bigops; i++) {

      ps.setInt(1,nextIntRandom(randomgen,smallrows));

      ps.execute();

      if ((i + 1) == 100 && sw.elapsedTime() > 50000) {

        slow=true;

      }

      if (reportProgress && (i + 1) % 10000 == 0 || (slow && (i + 1) % 100 == 0)) {

        System.out.println("Select " + (i + 1) + " : "+ sw.elapsedTime()+ " rps: "+ (i * 1000 / (sw.elapsedTime() + 1)));

      }

    }

  }

 catch (  SQLException e) {

    e.printStackTrace();

  }

  long time=sw.elapsedTime();

  long rate=((long)i * 1000) / (time + 1);

  storeResult("select random zip",i,time,rate);

  System.out.println("select time for random zip " + i + " rows  -- "+ time+ " ms -- "+ rate+ " tps");

}

Location: TestCacheSize.java

Content: 

void selectZipTable(){

  StopWatch sw=new StopWatch();

  java.util.Random randomgen=new java.util.Random();

  int i=0;

  boolean slow=false;

  try {

    PreparedStatement ps=cConnection.prepareStatement("SELECT zip FROM zip WHERE zip = ?");

    for (i=0; i < bigops; i++) {

      ps.setInt(1,nextIntRandom(randomgen,smallrows - 1));

      ps.execute();

      if (reportProgress && (i + 1) % 10000 == 0 || (slow && (i + 1) % 100 == 0)) {

        System.out.println("Select " + (i + 1) + " : "+ (sw.elapsedTime() + 1));

      }

    }

    ps.close();

  }

 catch (  SQLException e) {

    e.printStackTrace();

  }

  long time=sw.elapsedTime();

  long rate=((long)i * 1000) / (time + 1);

  storeResult("select random zip (zip table)",i,time,rate);

  System.out.println("select time for random zip from zip table " + i + " rows  -- "+ time+ " ms -- "+ rate+ " tps");

}

Location: TestCacheSize.java

Content: 

void storeResult(String description,int count,long time,long rate){

  try {

    writer.write("<tr><td>" + description + "</td><td>"+ count+ "</td><td>"+ time+ "</td><td>"+ rate+ "</td></tr>\n");

  }

 catch (  Exception e) {

  }

}

Location: TestCacheSize.java

Content: 

void updateID(){

  StopWatch sw=new StopWatch();

  java.util.Random randomgen=new java.util.Random();

  int i=0;

  boolean slow=false;

  int count=0;

  int random=0;

  try {

    PreparedStatement ps=cConnection.prepareStatement("UPDATE test SET zip = zip + 1 WHERE id = ? and zip <> " + smallrows);

    for (i=0; i < smallops; i++) {

      random=nextIntRandom(randomgen,bigrows - 1);

      ps.setInt(1,random);

      ps.execute();

      if (reportProgress && (i + 1) % 10000 == 0 || (slow && (i + 1) % 100 == 0)) {

        System.out.println("Update " + (i + 1) + " : "+ sw.elapsedTime()+ " rps: "+ (i * 1000 / (sw.elapsedTime() + 1)));

      }

    }

    ps.close();

  }

 catch (  SQLException e) {

    System.out.println("error : " + random);

    e.printStackTrace();

  }

  long time=sw.elapsedTime();

  long rate=(i * 1000) / (time + 1);

  storeResult("update with random id",i,time,rate);

  System.out.println("update time with random id " + i + " rows  -- "+ time+ " ms -- "+ rate+ " tps");

}

Location: TestCacheSize.java

Content: 

void updateIDLinear(){

  StopWatch sw=new StopWatch();

  java.util.Random randomgen=new java.util.Random();

  int i=0;

  boolean slow=false;

  int count=0;

  int random=0;

  try {

    PreparedStatement ps=cConnection.prepareStatement("UPDATE test SET zip = zip + 1 WHERE id = ? and zip <> " + smallrows);

    for (i=0; i < bigops; i++) {

      random=i;

      ps.setInt(1,random);

      ps.execute();

      if (reportProgress && (i + 1) % 10000 == 0 || (slow && (i + 1) % 100 == 0)) {

        System.out.println("Update " + (i + 1) + " : "+ sw.elapsedTime()+ " rps: "+ (i * 1000 / (sw.elapsedTime() + 1)));

      }

    }

    ps.close();

  }

 catch (  SQLException e) {

    System.out.println("error : " + random);

    e.printStackTrace();

  }

  long time=sw.elapsedTime();

  long rate=(i * 1000) / (time + 1);

  storeResult("update with sequential id",i,time,rate);

  System.out.println("update time with sequential id " + i + " rows  -- "+ time+ " ms -- "+ rate+ " tps");

}

Location: TestCacheSize.java

Content: 

void updateTestString(){

  StopWatch sw=new StopWatch();

  java.util.Random randomgen=new java.util.Random();

  int i=0;

  boolean slow=false;

  int count=0;

  int random=0;

  try {

    PreparedStatement ps=cConnection.prepareStatement("UPDATE test SET filler = ? WHERE id = ? and zip <> " + smallrows);

    for (i=0; i < smallops * 2; i++) {

      random=nextIntRandom(randomgen,bigrows - 1);

      int randomLength=nextIntRandom(randomgen,filler.length());

      String newFiller=filler.substring(randomLength);

      ps.setString(1,newFiller);

      ps.setInt(2,random);

      ps.execute();

      if (reportProgress && (i + 1) % 10000 == 0 || (slow && (i + 1) % 100 == 0)) {

        System.out.println("Update " + (i + 1) + " : "+ sw.elapsedTime()+ " rps: "+ (i * 1000 / (sw.elapsedTime() + 1)));

      }

    }

    ps.close();

  }

 catch (  SQLException e) {

    System.out.println("error : " + random);

    e.printStackTrace();

  }

  long time=sw.elapsedTime();

  long rate=(i * 1000) / (time + 1);

  storeResult("update with random id",i,time,rate);

  System.out.println("update time with random id " + i + " rows  -- "+ time+ " ms -- "+ rate+ " tps");

}

Location: TestCacheSize.java

Content: 

private void updateZip(){

  StopWatch sw=new StopWatch();

  java.util.Random randomgen=new java.util.Random();

  int i=0;

  boolean slow=false;

  int count=0;

  int random=0;

  try {

    PreparedStatement ps=cConnection.prepareStatement("UPDATE test SET filler = filler || zip WHERE zip = ?");

    for (; i < smallrows; i++) {

      random=nextIntRandom(randomgen,smallrows - 1);

      ps.setInt(1,random);

      count+=ps.executeUpdate();

      if (reportProgress && count % 10000 < 20) {

        System.out.println("Update " + count + " : "+ (sw.elapsedTime() + 1));

      }

    }

    ps.close();

  }

 catch (  SQLException e) {

    System.out.println("error : " + random);

    e.printStackTrace();

  }

  long time=sw.elapsedTime();

  long rate=(i * 1000) / (time + 1);

  storeResult("update with random zip",i,time,rate);

  System.out.println("update time with random zip " + i + " rows  -- "+ time+ " ms -- "+ rate+ " tps");

}

