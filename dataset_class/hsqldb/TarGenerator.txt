Location: TarGenerator.java

Content: 

/** 

 * @see #setPaxThreshold(long)

 */

public long getPaxThreshold(){

  return paxThreshold;

}

Location: TarGenerator.java

Content: 

public void queueEntry(File file) throws FileNotFoundException, TarMalformatException {

  queueEntry(null,file);

}

Location: TarGenerator.java

Content: 

public void queueEntry(String entryPath,File file) throws FileNotFoundException, TarMalformatException {

  entryQueue.add(new TarEntrySupplicant(entryPath,file,archive,paxThreshold));

}

Location: TarGenerator.java

Content: 

/** 

 * This method does not support Pax Interchange Format, nor data sizes greater than 2G. <P> This limitation may or may not be eliminated in the future. </P>

 */

public void queueEntry(String entryPath,InputStream inStream,int maxBytes) throws IOException, TarMalformatException {

  entryQueue.add(new TarEntrySupplicant(entryPath,inStream,maxBytes,'0',archive));

}

Location: TarGenerator.java

Content: 

public void queueEntry(String entryPath,InputStreamInterface is) throws FileNotFoundException, TarMalformatException {

  entryQueue.add(new TarEntrySupplicant(entryPath,is,archive,paxThreshold));

}

Location: TarGenerator.java

Content: 

/** 

 * When data file is this size or greater, in bytes, a Pix Interchange Format 'x' record will be created and used for the file entry. <P> <B>Limitation</B> At this time, PAX is only implemented for entries added as Files, not entries added as Stream. </P>

 */

public void setPaxThreshold(long paxThreshold){

  this.paxThreshold=paxThreshold;

}

Location: TarGenerator.java

Content: 

/** 

 * Compression is determined directly by the suffix of the file name in the specified path.

 * @param inFile  Absolute or relative (from user.dir) File fortar file to be created.  getName() Suffix must indicate tar file and may indicate a compression method.

 * @param overWrite    True to replace an existing file of same path.

 * @param blocksPerRecord  Null will use default tar value.

 */

public TarGenerator(File inFile,boolean overWrite,Integer blocksPerRecord) throws IOException {

  File archiveFile=inFile.getAbsoluteFile();

  int compression=TarFileOutputStream.Compression.NO_COMPRESSION;

  if (archiveFile.getName().endsWith(".tgz") || archiveFile.getName().endsWith(".tar.gz")) {

    compression=TarFileOutputStream.Compression.GZIP_COMPRESSION;

  }

 else   if (archiveFile.getName().endsWith(".tar")) {

  }

 else {

    throw new IllegalArgumentException(RB.unsupported_ext.getString(getClass().getName(),archiveFile.getPath()));

  }

  if (archiveFile.exists()) {

    if (!overWrite) {

      throw new IOException(RB.dest_exists.getString(archiveFile.getPath()));

    }

  }

 else {

    File parentDir=archiveFile.getParentFile();

    if (parentDir.exists()) {

      if (!parentDir.isDirectory()) {

        throw new IOException(RB.parent_not_dir.getString(parentDir.getPath()));

      }

      if (!parentDir.canWrite()) {

        throw new IOException(RB.cant_write_parent.getString(parentDir.getPath()));

      }

    }

 else {

      if (!parentDir.mkdirs()) {

        throw new IOException(RB.parent_create_fail.getString(parentDir.getPath()));

      }

    }

  }

  archive=(blocksPerRecord == null) ? new TarFileOutputStream(archiveFile,compression) : new TarFileOutputStream(archiveFile,compression,blocksPerRecord.intValue());

  if ((blocksPerRecord != null) && TarFileOutputStream.debug) {

    System.out.println(RB.bpr_write.getString(blocksPerRecord.intValue()));

  }

}

