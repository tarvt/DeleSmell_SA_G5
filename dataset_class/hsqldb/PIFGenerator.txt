Location: PIFGenerator.java

Content: 

/** 

 * Convenience wrapper for addRecord(String, String). N.b. this writes values exactly as either "true" or "false".

 * @see #addRecord(String,String)

 * @see Boolean#toString(boolean)

 */

public void addRecord(String key,boolean b) throws TarMalformatException, IOException {

  addRecord(key,Boolean.toString(b));

}

Location: PIFGenerator.java

Content: 

/** 

 * Convenience wrapper for addRecord(String, String).

 * @see #addRecord(String,String)

 */

public void addRecord(String key,int i) throws TarMalformatException, IOException {

  addRecord(key,Integer.toString(i));

}

Location: PIFGenerator.java

Content: 

/** 

 * Convenience wrapper for addRecord(String, String).

 * @see #addRecord(String,String)

 */

public void addRecord(String key,long l) throws TarMalformatException, IOException {

  addRecord(key,Long.toString(l));

}

Location: PIFGenerator.java

Content: 

/** 

 * I guess the "initial length" field is supposed to be in units of characters, not bytes?

 */

public void addRecord(String key,String value) throws TarMalformatException, IOException {

  if (key == null || value == null || key.length() < 1 || value.length() < 1) {

    throw new TarMalformatException(RB.zero_write.getString());

  }

  int lenWithoutIlen=key.length() + value.length() + 3;

  int lenW=0;

  if (lenWithoutIlen < 8) {

    lenW=lenWithoutIlen + 1;

  }

 else   if (lenWithoutIlen < 97) {

    lenW=lenWithoutIlen + 2;

  }

 else   if (lenWithoutIlen < 996) {

    lenW=lenWithoutIlen + 3;

  }

 else   if (lenWithoutIlen < 9995) {

    lenW=lenWithoutIlen + 4;

  }

 else   if (lenWithoutIlen < 99994) {

    lenW=lenWithoutIlen + 5;

  }

 else {

    throw new TarMalformatException(RB.pif_toobig.getString(99991));

  }

  writer.write(Integer.toString(lenW));

  writer.write(' ');

  writer.write(key);

  writer.write('=');

  writer.write(value);

  writer.write('\n');

  writer.flush();

}

Location: PIFGenerator.java

Content: 

protected PIFGenerator(){

  try {

    writer=new OutputStreamWriter(this,"UTF-8");

  }

 catch (  UnsupportedEncodingException uee) {

    throw new RuntimeException("Serious problem.  JVM can't encode UTF-8",uee);

  }

  fakePid=(int)(new Date().getTime() % 100000L);

}

Location: PIFGenerator.java

Content: 

/** 

 * Construct a PIFGenerator object for a 'x' record.

 * @param file Target file of the x record.

 */

public PIFGenerator(File file){

  this();

  String parentPath=(file.getParentFile() == null) ? "." : file.getParentFile().getPath();

  name=parentPath + "/PaxHeaders." + fakePid+ '/'+ file.getName();

}

Location: PIFGenerator.java

Content: 

/** 

 * Construct a PIFGenerator object for a 'g' record.

 * @param sequenceNum  Index starts at 1 in each Tar file

 */

public PIFGenerator(int sequenceNum){

  this();

  if (sequenceNum < 1) {

    throw new IllegalArgumentException("Sequence numbers start at 1");

  }

  name=System.getProperty("java.io.tmpdir") + "/GlobalHead." + fakePid+ '.'+ sequenceNum;

}

