Location: CharacterType.java

Content: 

public int canMoveFrom(Type otherType){

  if (otherType == this) {

    return 0;

  }

  if (!otherType.isCharacterType()) {

    return -1;

  }

switch (typeCode) {

case Types.SQL_VARCHAR:

{

      if (otherType.typeCode == typeCode) {

        return precision >= otherType.precision ? 0 : 1;

      }

      if (otherType.typeCode == Types.SQL_CHAR) {

        return precision >= otherType.precision ? 0 : -1;

      }

      return -1;

    }

case Types.SQL_CLOB:

{

    if (otherType.typeCode == Types.SQL_CLOB) {

      return precision >= otherType.precision ? 0 : 1;

    }

    return -1;

  }

case Types.SQL_CHAR:

{

  return otherType.typeCode == Types.SQL_CHAR && precision == otherType.precision ? 0 : -1;

}

default :

return -1;

}

}

Location: CharacterType.java

Content: 

public CharacterType(Collation collation,int type,long precision){

  super(Types.SQL_VARCHAR,type,precision,0);

  if (collation == null) {

    collation=Collation.getDefaultInstance();

  }

  this.collation=collation;

  this.charset=Charset.getDefaultInstance();

  nameString=getNameStringPrivate();

}

Location: CharacterType.java

Content: 

/** 

 * Always ASCII collation

 */

public CharacterType(int type,long precision){

  super(Types.SQL_VARCHAR,type,precision,0);

  this.collation=Collation.getDefaultInstance();

  this.charset=Charset.getDefaultInstance();

  nameString=getNameStringPrivate();

}

Location: CharacterType.java

Content: 

String convertJavaTimeObject(SessionInterface session,Object a){

  return null;

}

Location: CharacterType.java

Content: 

public Object convertToTypeJDBC(SessionInterface session,Object a,Type otherType){

  if (a == null) {

    return a;

  }

  if (otherType.typeCode == Types.SQL_BLOB) {

    throw Error.error(ErrorCode.X_42561);

  }

  return convertToType(session,a,otherType);

}

Location: CharacterType.java

Content: 

public Charset getCharacterSet(){

  return charset;

}

Location: CharacterType.java

Content: 

public static CharacterType getCharacterType(int type,long length){

switch (type) {

case Types.SQL_CHAR:

    if (length < fixedTypesLength) {

      return charArray[(int)length];

    }

case Types.SQL_VARCHAR:

  return new CharacterType(type,(int)length);

case Types.SQL_CLOB:

return new ClobType(length);

default :

throw Error.runtimeError(ErrorCode.U_S0500,"CharacterType");

}

}

Location: CharacterType.java

Content: 

public static CharacterType getCharacterType(int type,long length,Collation collation){

  if (collation == null) {

    collation=Collation.getDefaultInstance();

  }

switch (type) {

case Types.SQL_VARCHAR:

case Types.SQL_CHAR:

    return new CharacterType(collation,type,(int)length);

case Types.SQL_CLOB:

  CharacterType typeObject=new ClobType(length);

typeObject.collation=collation;

return typeObject;

default :

throw Error.runtimeError(ErrorCode.U_S0500,"CharacterType");

}

}

Location: CharacterType.java

Content: 

public Type getCharacterType(long length){

  if (length == precision) {

    return this;

  }

  return getCharacterType(this.typeCode,length,this.collation);

}

Location: CharacterType.java

Content: 

public Collation getCollation(){

  return collation;

}

Location: CharacterType.java

Content: 

private String getNameStringPrivate(){

switch (typeCode) {

case Types.SQL_CHAR:

    return Tokens.T_CHARACTER;

case Types.SQL_VARCHAR:

  return Tokens.T_VARCHAR;

case Types.SQL_CLOB:

return Tokens.T_CLOB;

default :

throw Error.runtimeError(ErrorCode.U_S0500,"CharacterType");

}

}

Location: CharacterType.java

Content: 

public static int getRightTrimSize(String s,char trim){

  int endindex=s.length();

  for (--endindex; endindex >= 0 && s.charAt(endindex) == trim; endindex--) {

  }

  endindex++;

  return endindex;

}

Location: CharacterType.java

Content: 

public boolean isCharacterType(){

  return true;

}

Location: CharacterType.java

Content: 

public Object lower(Session session,Object data){

  if (data == null) {

    return null;

  }

  if (typeCode == Types.SQL_CLOB) {

    String result=((ClobData)data).getSubString(session,0,(int)((ClobData)data).length(session));

    result=collation.toLowerCase(result);

    ClobData clob=session.createClob(result.length());

    clob.setString(session,0,result);

    return clob;

  }

  return collation.toLowerCase((String)data);

}

Location: CharacterType.java

Content: 

/** 

 * Matches the string against array containing part strings. Null element in array indicates skip one character. Empty string in array indicates skip any number of characters.

 */

public Boolean match(Session session,String string,String[] array){

  if (string == null || array == null) {

    return null;

  }

  String s=null;

  int offset=0;

  boolean match=true;

  for (int i=0; i < array.length; i++) {

    if (array[i] == null) {

      offset++;

      match=true;

    }

 else     if (array[i].length() == 0) {

      match=false;

    }

    if (match) {

      if (offset + array[i].length() > string.length()) {

        return Boolean.FALSE;

      }

      s=string.substring(offset,offset + array[i].length());

      if (collation.compare(s,array[i]) != 0) {

        return Boolean.FALSE;

      }

      offset+=array[i].length();

    }

 else {

      int index=string.indexOf(array[i],offset);

      if (index < 0) {

        return Boolean.FALSE;

      }

      offset=index + array[i].length();

      match=true;

    }

  }

  return Boolean.TRUE;

}

Location: CharacterType.java

Content: 

public Object overlay(SessionInterface session,Object data,Object overlay,long offset,long length,boolean hasLength){

  if (data == null || overlay == null) {

    return null;

  }

  if (!hasLength) {

    length=typeCode == Types.SQL_CLOB ? ((ClobData)overlay).length(session) : ((String)overlay).length();

  }

  Object temp=concat(null,substring(session,data,0,offset,true,false),overlay);

  return concat(null,temp,substring(session,data,offset + length,0,false,false));

}

Location: CharacterType.java

Content: 

public int precedenceDegree(Type other){

  if (other.typeCode == typeCode) {

    return 0;

  }

  if (!other.isCharacterType()) {

    return Integer.MIN_VALUE;

  }

switch (typeCode) {

case Types.SQL_CHAR:

    return other.typeCode == Types.SQL_CLOB ? 4 : 2;

case Types.SQL_VARCHAR:

  return other.typeCode == Types.SQL_CLOB ? 4 : 2;

case Types.SQL_CLOB:

return other.typeCode == Types.SQL_CHAR ? -4 : -2;

default :

throw Error.runtimeError(ErrorCode.U_S0500,"CharacterType");

}

}

Location: CharacterType.java

Content: 

public long size(SessionInterface session,Object data){

  if (typeCode == Types.SQL_CLOB) {

    return ((ClobData)data).length(session);

  }

  return ((String)data).length();

}

Location: CharacterType.java

Content: 

public Object substring(SessionInterface session,Object data,long offset,long length,boolean hasLength,boolean trailing){

  long end;

  long dataLength=typeCode == Types.SQL_CLOB ? ((ClobData)data).length(session) : ((String)data).length();

  if (trailing) {

    end=dataLength;

    if (length > dataLength) {

      offset=0;

    }

 else {

      offset=dataLength - length;

    }

  }

 else   if (hasLength) {

    end=offset + length;

  }

 else {

    end=dataLength > offset ? dataLength : offset;

  }

  if (end < offset) {

    throw Error.error(ErrorCode.X_22011);

  }

  if (offset > end || end < 0) {

    offset=0;

    end=0;

  }

  if (offset < 0) {

    offset=0;

  }

  if (end > dataLength) {

    end=dataLength;

  }

  length=end - offset;

  if (data instanceof String) {

    return ((String)data).substring((int)offset,(int)(offset + length));

  }

 else   if (data instanceof ClobData) {

    ClobData clob=session.createClob(length);

    if (length > Integer.MAX_VALUE) {

      throw Error.error(ErrorCode.X_22001);

    }

    String result=((ClobData)data).getSubString(session,offset,(int)length);

    clob.setString(session,0,result);

    return clob;

  }

 else {

    throw Error.runtimeError(ErrorCode.U_S0500,"CharacterType");

  }

}

Location: CharacterType.java

Content: 

public Object trim(SessionInterface session,Object data,char trim,boolean leading,boolean trailing){

  if (data == null) {

    return null;

  }

  String s;

  if (typeCode == Types.SQL_CLOB) {

    long length=((ClobData)data).length(session);

    if (length > Integer.MAX_VALUE) {

      throw Error.error(ErrorCode.X_22026);

    }

    s=((ClobData)data).getSubString(session,0,(int)length);

  }

 else {

    s=(String)data;

  }

  int endindex=s.length();

  if (trailing) {

    for (--endindex; endindex >= 0 && s.charAt(endindex) == trim; endindex--) {

    }

    endindex++;

  }

  int startindex=0;

  if (leading) {

    while (startindex < endindex && s.charAt(startindex) == trim) {

      startindex++;

    }

  }

  if (startindex == 0 && endindex == s.length()) {

  }

 else {

    s=s.substring(startindex,endindex);

  }

  if (typeCode == Types.SQL_CLOB) {

    ClobData clob=session.createClob(s.length());

    clob.setString(session,0,s);

    return clob;

  }

 else {

    return s;

  }

}

Location: CharacterType.java

Content: 

/** 

 * Memory limits apply to Upper and Lower implementations with Clob data

 */

public Object upper(Session session,Object data){

  if (data == null) {

    return null;

  }

  if (typeCode == Types.SQL_CLOB) {

    String result=((ClobData)data).getSubString(session,0,(int)((ClobData)data).length(session));

    result=collation.toUpperCase(result);

    ClobData clob=session.createClob(result.length());

    clob.setString(session,0,result);

    return clob;

  }

  return collation.toUpperCase((String)data);

}

