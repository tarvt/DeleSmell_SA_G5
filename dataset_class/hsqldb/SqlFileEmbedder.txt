Location: SqlFileEmbedder.java

Content: 

/** 

 * Your own classes can use this method to execute SQL files. <P> See source code for the main(String[]) method for an example of calling this method.

 * @see #main(String[])

 * @param fileStrings String[]

 * @throws IOException on io problems

 * @throws SqlToolError on SQL Tool problems

 * @throws SQLException on SQL problems

 */

public void executeFiles(String[] fileStrings) throws IOException, SqlToolError, SQLException {

  Map<String,String> sqlVarMap=new HashMap<String,String>();

  sqlVarMap.put("invoker",getClass().getName());

  File file;

  SqlFile sqlFile;

  for (  String fileString : fileStrings) {

    file=new File(fileString);

    if (!file.isFile())     throw new IOException("SQL file not present: " + file.getAbsolutePath());

    sqlFile=new SqlFile(file);

    sqlFile.setConnection(conn);

    sqlFile.addUserVars(sqlVarMap);

    sqlFile.execute();

    conn=sqlFile.getConnection();

    sqlVarMap=sqlFile.getUserVars();

  }

}

Location: SqlFileEmbedder.java

Content: 

/** 

 * Instantiates SqlFileEmbedder object and connects to specified database. <P> N.b., you do not need to use RCData to use SqlFile. All SqlFile needs is a live Connection. I'm using RCData because it is a convenient way for a non-contained app (i.e. one that doesn't run in a 3rd party container) to get a Connection.

 * @param rcFile File

 * @param urlid String

 * @throws Exception on any problem

 */

public SqlFileEmbedder(File rcFile,String urlid) throws Exception {

  conn=(new RCData(rcFile,urlid)).getConnection();

  conn.setAutoCommit(false);

}

