Location: ClobDataID.java

Content: 

public ClobDataID(long id){

  this.id=id;

}

Location: ClobDataID.java

Content: 

public ClobData duplicate(SessionInterface session){

  ResultLob resultOut=ResultLob.newLobDuplicateRequest(id);

  Result resultIn=session.execute(resultOut);

  if (resultIn.isError()) {

    throw resultIn.getException();

  }

  long lobID=((ResultLob)resultIn).getLobID();

  return new ClobDataID(lobID);

}

Location: ClobDataID.java

Content: 

public Reader getCharacterStream(SessionInterface session){

  long length=length(session);

  return new ClobInputStream(session,this,0,length);

}

Location: ClobDataID.java

Content: 

public Reader getCharacterStream(SessionInterface session,long pos,long length){

  return new ClobInputStream(session,this,pos,length);

}

Location: ClobDataID.java

Content: 

public char[] getChars(SessionInterface session,long position,int length){

  ResultLob resultOut=ResultLob.newLobGetCharsRequest(id,position,length);

  Result resultIn=session.execute(resultOut);

  if (resultIn.isError()) {

    throw resultIn.getException();

  }

  return ((ResultLob)resultIn).getCharArray();

}

Location: ClobDataID.java

Content: 

public ClobData getClob(SessionInterface session,long position,long length){

  ResultLob resultOut=ResultLob.newLobGetRequest(id,position,length);

  Result resultIn=session.execute(resultOut);

  if (resultIn.isError()) {

    throw resultIn.getException();

  }

  long lobID=((ResultLob)resultIn).getLobID();

  return new ClobDataID(lobID);

}

Location: ClobDataID.java

Content: 

public long getId(){

  return id;

}

Location: ClobDataID.java

Content: 

public String getSubString(SessionInterface session,long pos,int length){

  long clobLength=length(session);

  if (pos >= clobLength) {

    return "";

  }

  if (pos + length >= clobLength) {

    length=(int)(clobLength - pos);

  }

  char[] chars=getChars(session,pos,length);

  return new String(chars);

}

Location: ClobDataID.java

Content: 

public boolean isBinary(){

  return false;

}

Location: ClobDataID.java

Content: 

public long length(SessionInterface session){

  if (length > -1) {

    return length;

  }

  ResultLob resultOut=ResultLob.newLobGetLengthRequest(id);

  Result resultIn=session.execute(resultOut);

  if (resultIn.isError()) {

    throw resultIn.getException();

  }

  length=((ResultLob)resultIn).getBlockLength();

  return length;

}

Location: ClobDataID.java

Content: 

/** 

 * @todo - implement the next method call in Session 

 */

public long nonSpaceLength(SessionInterface session){

  ResultLob resultOut=ResultLob.newLobGetTruncateLength(id);

  Result resultIn=session.execute(resultOut);

  if (resultIn.isError()) {

    throw resultIn.getException();

  }

  return ((ResultLob)resultIn).getBlockLength();

}

Location: ClobDataID.java

Content: 

public long position(SessionInterface session,ClobData searchstr,long start){

  ResultLob resultOut=ResultLob.newLobGetCharPatternPositionRequest(id,searchstr.getId(),start);

  Result resultIn=session.execute(resultOut);

  if (resultIn.isError()) {

    throw resultIn.getException();

  }

  return ((ResultLob)resultIn).getOffset();

}

Location: ClobDataID.java

Content: 

public long position(SessionInterface session,String searchstr,long start){

  ResultLob resultOut=ResultLob.newLobGetCharPatternPositionRequest(id,searchstr.toCharArray(),start);

  Result resultIn=session.execute(resultOut);

  if (resultIn.isError()) {

    throw resultIn.getException();

  }

  return ((ResultLob)resultIn).getOffset();

}

Location: ClobDataID.java

Content: 

public void setCharacterStream(SessionInterface session,long pos,Reader in){

}

Location: ClobDataID.java

Content: 

public void setChars(SessionInterface session,long pos,char[] chars,int offset,int len){

  if (offset != 0 || len != chars.length) {

    if (!isInLimits(chars.length,offset,len)) {

      throw Error.error(ErrorCode.X_22001);

    }

    if (offset != 0 || len != chars.length) {

      char[] newChars=new char[len];

      System.arraycopy(chars,offset,newChars,0,len);

      chars=newChars;

    }

  }

  ResultLob resultOut=ResultLob.newLobSetCharsRequest(id,pos,chars);

  Result resultIn=session.execute(resultOut);

  if (resultIn.isError()) {

    throw resultIn.getException();

  }

  this.length=((ResultLob)resultIn).getBlockLength();

}

Location: ClobDataID.java

Content: 

public void setClob(SessionInterface session,long pos,ClobData clob,long offset,long len){

}

Location: ClobDataID.java

Content: 

public void setId(long id){

  this.id=id;

}

Location: ClobDataID.java

Content: 

public void setSession(SessionInterface session){

}

Location: ClobDataID.java

Content: 

public void setString(SessionInterface session,long pos,String str){

  ResultLob resultOut=ResultLob.newLobSetCharsRequest(id,pos,str.toCharArray());

  Result resultIn=session.execute(resultOut);

  if (resultIn.isError()) {

    throw resultIn.getException();

  }

  this.length=((ResultLob)resultIn).getBlockLength();

}

Location: ClobDataID.java

Content: 

public void truncate(SessionInterface session,long len){

  if (len >= length(session)) {

    return;

  }

  ResultLob resultOut=ResultLob.newLobTruncateRequest(id,len);

  Result resultIn=session.execute(resultOut);

  if (resultIn.isError()) {

    throw resultIn.getException();

  }

  this.length=((ResultLob)resultIn).getBlockLength();

}

