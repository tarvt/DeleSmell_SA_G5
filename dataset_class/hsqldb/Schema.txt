Location: Schema.java

Content: 

public void addSchemaObject(HsqlNameManager nameManager,SchemaObject object,boolean replace){

  HsqlName name=object.getName();

  SchemaObjectSet set=this.getObjectSet(name.type);

switch (name.type) {

case SchemaObject.PROCEDURE:

case SchemaObject.FUNCTION:

{

      RoutineSchema routine=(RoutineSchema)set.getObject(name.name);

      if (routine == null) {

        routine=new RoutineSchema(name.type,name);

        routine.addSpecificRoutine(nameManager,(Routine)object,replace);

        set.checkAdd(name);

        SchemaObjectSet specificSet=getObjectSet(SchemaObject.SPECIFIC_ROUTINE);

        specificSet.checkAdd(((Routine)object).getSpecificName());

        set.add(routine,replace);

        specificSet.add(object,replace);

      }

 else {

        SchemaObjectSet specificSet=getObjectSet(SchemaObject.SPECIFIC_ROUTINE);

        HsqlName specificName=((Routine)object).getSpecificName();

        if (specificName != null) {

          specificSet.checkAdd(specificName);

        }

        routine.addSpecificRoutine(nameManager,(Routine)object,replace);

        specificSet.add(object,replace);

      }

      return;

    }

}

set.add(object,replace);

}

Location: Schema.java

Content: 

public void addSimpleObjects(OrderedHashSet unresolved){

  Iterator it=specificRoutineLookup.map.values().iterator();

  while (it.hasNext()) {

    Routine routine=(Routine)it.next();

    if (routine.dataImpact == Routine.NO_SQL || routine.dataImpact == Routine.CONTAINS_SQL || routine.language == Routine.LANGUAGE_JAVA) {

      unresolved.add(routine);

    }

  }

  unresolved.addAll(typeLookup.map.values());

  unresolved.addAll(charsetLookup.map.values());

  unresolved.addAll(collationLookup.map.values());

}

Location: Schema.java

Content: 

SchemaObject findAnySchemaObjectForSynonym(String name){

  int[] types={SchemaObject.SEQUENCE,SchemaObject.TABLE,SchemaObject.ROUTINE};

  for (  int type : types) {

    SchemaObject object=findSchemaObject(name,type);

    if (object != null) {

      return object;

    }

  }

  return null;

}

Location: Schema.java

Content: 

/** 

 * synonyms are allowed for a table, view, sequence, procedure, function, package, materialized view, user-defined type.

 */

ReferenceObject findReference(String name,int type){

  ReferenceObject ref=(ReferenceObject)referenceList.get(name);

  if (ref == null) {

    return null;

  }

  if (ref.getTarget().type == type) {

    return ref;

  }

switch (type) {

case SchemaObject.TABLE:

    if (ref.getTarget().type == SchemaObject.VIEW) {

      return ref;

    }

case SchemaObject.ROUTINE:

  if (ref.getTarget().type == SchemaObject.FUNCTION || ref.getTarget().type == SchemaObject.PROCEDURE) {

    return ref;

  }

}

return null;

}

Location: Schema.java

Content: 

SchemaObject findSchemaObject(String name,int type){

  SchemaObjectSet set=null;

  HsqlName objectName;

  Table table;

switch (type) {

case SchemaObject.SEQUENCE:

    return sequenceLookup.getObject(name);

case SchemaObject.TABLE:

case SchemaObject.VIEW:

  return tableLookup.getObject(name);

case SchemaObject.CHARSET:

return charsetLookup.getObject(name);

case SchemaObject.COLLATION:

return collationLookup.getObject(name);

case SchemaObject.PROCEDURE:

return procedureLookup.getObject(name);

case SchemaObject.FUNCTION:

return functionLookup.getObject(name);

case SchemaObject.ROUTINE:

{

SchemaObject object=procedureLookup.getObject(name);

if (object == null) {

object=functionLookup.getObject(name);

}

return object;

}

case SchemaObject.SPECIFIC_ROUTINE:

return specificRoutineLookup.getObject(name);

case SchemaObject.DOMAIN:

case SchemaObject.TYPE:

return typeLookup.getObject(name);

case SchemaObject.INDEX:

set=indexLookup;

objectName=set.getName(name);

if (objectName == null) {

return null;

}

table=(Table)tableList.get(objectName.parent.name);

return table.getIndex(name);

case SchemaObject.CONSTRAINT:

set=constraintLookup;

objectName=set.getName(name);

if (objectName == null) {

return null;

}

table=(Table)tableList.get(objectName.parent.name);

if (table == null) {

return null;

}

return table.getConstraint(name);

case SchemaObject.TRIGGER:

set=triggerLookup;

objectName=set.getName(name);

if (objectName == null) {

return null;

}

table=(Table)tableList.get(objectName.parent.name);

return table.getTrigger(name);

case SchemaObject.REFERENCE:

return referenceLookup.getObject(name);

default :

throw Error.runtimeError(ErrorCode.U_S0500,"SchemaManager");

}

}

Location: Schema.java

Content: 

public SchemaObjectSet getObjectSet(int type){

switch (type) {

case SchemaObject.SEQUENCE:

    return sequenceLookup;

case SchemaObject.TABLE:

case SchemaObject.VIEW:

  return tableLookup;

case SchemaObject.CHARSET:

return charsetLookup;

case SchemaObject.COLLATION:

return collationLookup;

case SchemaObject.PROCEDURE:

return procedureLookup;

case SchemaObject.FUNCTION:

return functionLookup;

case SchemaObject.ROUTINE:

return functionLookup;

case SchemaObject.SPECIFIC_ROUTINE:

return specificRoutineLookup;

case SchemaObject.DOMAIN:

case SchemaObject.TYPE:

return typeLookup;

case SchemaObject.ASSERTION:

return assertionLookup;

case SchemaObject.TRIGGER:

return triggerLookup;

case SchemaObject.REFERENCE:

return referenceLookup;

case SchemaObject.INDEX:

return indexLookup;

case SchemaObject.CONSTRAINT:

return constraintLookup;

default :

throw Error.runtimeError(ErrorCode.U_S0500,"Schema");

}

}

Location: Schema.java

Content: 

public HsqlArrayList getSequenceRestartSQL(){

  HsqlArrayList list=new HsqlArrayList();

  Iterator it=sequenceLookup.map.values().iterator();

  while (it.hasNext()) {

    NumberSequence sequence=(NumberSequence)it.next();

    String ddl=sequence.getRestartSQL();

    list.add(ddl);

  }

  return list;

}

Location: Schema.java

Content: 

static String getSetSchemaSQL(HsqlName schemaName){

  StringBuffer sb=new StringBuffer();

  sb.append(Tokens.T_SET).append(' ');

  sb.append(Tokens.T_SCHEMA).append(' ');

  sb.append(schemaName.statementName);

  return sb.toString();

}

Location: Schema.java

Content: 

public HsqlArrayList getSQLArray(OrderedHashSet resolved,OrderedHashSet unresolved){

  HsqlArrayList list=new HsqlArrayList();

  String setSchema=getSetSchemaSQL(name);

  list.add(setSchema);

  sequenceLookup.getSQL(list,resolved,unresolved);

  tableLookup.getSQL(list,resolved,unresolved);

  functionLookup.getSQL(list,resolved,unresolved);

  procedureLookup.getSQL(list,resolved,unresolved);

  referenceLookup.getSQL(list,resolved,unresolved);

  if (list.size() == 1) {

    list.clear();

  }

  return list;

}

Location: Schema.java

Content: 

public HsqlArrayList getTriggerSQL(){

  HsqlArrayList list=new HsqlArrayList();

  Iterator it=tableLookup.map.values().iterator();

  while (it.hasNext()) {

    Table table=(Table)it.next();

    String[] ddl=table.getTriggerSQL();

    list.addAll(ddl);

  }

  return list;

}

Location: Schema.java

Content: 

Iterator schemaObjectIterator(int type){

switch (type) {

case SchemaObject.SEQUENCE:

    return sequenceLookup.map.values().iterator();

case SchemaObject.TABLE:

case SchemaObject.VIEW:

  return tableLookup.map.values().iterator();

case SchemaObject.CHARSET:

return charsetLookup.map.values().iterator();

case SchemaObject.COLLATION:

return collationLookup.map.values().iterator();

case SchemaObject.PROCEDURE:

return procedureLookup.map.values().iterator();

case SchemaObject.FUNCTION:

return functionLookup.map.values().iterator();

case SchemaObject.ROUTINE:

Iterator functions=functionLookup.map.values().iterator();

return new WrapperIterator(functions,procedureLookup.map.values().iterator());

case SchemaObject.SPECIFIC_ROUTINE:

return specificRoutineLookup.map.values().iterator();

case SchemaObject.DOMAIN:

case SchemaObject.TYPE:

return typeLookup.map.values().iterator();

case SchemaObject.ASSERTION:

return assertionLookup.map.values().iterator();

case SchemaObject.TRIGGER:

return triggerLookup.map.values().iterator();

case SchemaObject.REFERENCE:

return referenceLookup.map.values().iterator();

case SchemaObject.INDEX:

return indexLookup.map.values().iterator();

case SchemaObject.CONSTRAINT:

return constraintLookup.map.values().iterator();

default :

throw Error.runtimeError(ErrorCode.U_S0500,"Schema");

}

}

Location: Schema.java

Content: 

public Schema(HsqlName name,Grantee owner){

  this.name=name;

  triggerLookup=new SchemaObjectSet(SchemaObject.TRIGGER);

  indexLookup=new SchemaObjectSet(SchemaObject.INDEX);

  constraintLookup=new SchemaObjectSet(SchemaObject.CONSTRAINT);

  tableLookup=new SchemaObjectSet(SchemaObject.TABLE);

  sequenceLookup=new SchemaObjectSet(SchemaObject.SEQUENCE);

  typeLookup=new SchemaObjectSet(SchemaObject.TYPE);

  charsetLookup=new SchemaObjectSet(SchemaObject.CHARSET);

  collationLookup=new SchemaObjectSet(SchemaObject.COLLATION);

  procedureLookup=new SchemaObjectSet(SchemaObject.PROCEDURE);

  functionLookup=new SchemaObjectSet(SchemaObject.FUNCTION);

  specificRoutineLookup=new SchemaObjectSet(SchemaObject.SPECIFIC_ROUTINE);

  assertionLookup=new SchemaObjectSet(SchemaObject.ASSERTION);

  referenceLookup=new SchemaObjectSet(SchemaObject.REFERENCE);

  tableList=(HashMappedList)tableLookup.map;

  sequenceList=(HashMappedList)sequenceLookup.map;

  referenceList=(HashMappedList)referenceLookup.map;

  name.owner=owner;

}

