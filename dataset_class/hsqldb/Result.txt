Location: Result.java

Content: 

public void addBatchedPreparedExecuteRequest(Object[] parameterValues){

  navigator.add(parameterValues);

}

Location: Result.java

Content: 

public void addChainedResult(Result result){

  Result current=this;

  while (current.chainedResult != null) {

    current=current.chainedResult;

  }

  current.chainedResult=result;

}

Location: Result.java

Content: 

public void addLobResult(ResultLob result){

  Result current=this;

  while (current.lobResults != null) {

    current=current.lobResults;

  }

  current.lobResults=result;

  lobCount++;

}

Location: Result.java

Content: 

public void addRows(String[] sql){

  if (sql == null) {

    return;

  }

  for (int i=0; i < sql.length; i++) {

    String[] s=new String[1];

    s[0]=sql[i];

    initialiseNavigator().add(s);

  }

}

Location: Result.java

Content: 

public void addWarnings(HsqlException[] warnings){

  for (int i=0; i < warnings.length; i++) {

    Result warning=newWarningResult(warnings[i]);

    addChainedResult(warning);

  }

}

Location: Result.java

Content: 

public void clearLobResults(){

  lobResults=null;

  lobCount=0;

}

Location: Result.java

Content: 

public int getActionType(){

  return updateCount;

}

Location: Result.java

Content: 

public Result getChainedResult(){

  return chainedResult;

}

Location: Result.java

Content: 

public int getConnectionAttrType(){

  return updateCount;

}

Location: Result.java

Content: 

public int getDatabaseId(){

  return databaseID;

}

Location: Result.java

Content: 

public String getDatabaseName(){

  return databaseName;

}

Location: Result.java

Content: 

public int getErrorCode(){

  return errorCode;

}

Location: Result.java

Content: 

public HsqlException getException(){

  return exception;

}

Location: Result.java

Content: 

/** 

 * initially, only used for updatability

 */

public int getExecuteProperties(){

  return rsProperties;

}

Location: Result.java

Content: 

public int getFetchSize(){

  return this.fetchSize;

}

Location: Result.java

Content: 

public ResultMetaData getGeneratedResultMetaData(){

  return generatedMetaData;

}

Location: Result.java

Content: 

public int getGeneratedResultType(){

  return generateKeys;

}

Location: Result.java

Content: 

public int getLobCount(){

  return lobCount;

}

Location: Result.java

Content: 

public ResultLob getLOBResult(){

  return lobResults;

}

Location: Result.java

Content: 

public String getMainString(){

  return mainString;

}

Location: Result.java

Content: 

public RowSetNavigator getNavigator(){

  return navigator;

}

Location: Result.java

Content: 

public Object[] getParameterData(){

  return (Object[])valueData;

}

Location: Result.java

Content: 

public long getResultId(){

  return id;

}

Location: Result.java

Content: 

public Object[] getSessionAttributes(){

  initialiseNavigator();

  navigator.next();

  return navigator.getCurrent();

}

Location: Result.java

Content: 

public long getSessionId(){

  return sessionID;

}

Location: Result.java

Content: 

public int getSessionRandomID(){

  return generateKeys;

}

Location: Result.java

Content: 

public Object[] getSingleRowData(){

  initialiseNavigator();

  navigator.next();

  Object[] data=navigator.getCurrent();

  data=(Object[])ArrayUtil.resizeArrayIfDifferent(data,metaData.getColumnCount());

  return data;

}

Location: Result.java

Content: 

public Statement getStatement(){

  return statement;

}

Location: Result.java

Content: 

public long getStatementID(){

  return statementID;

}

Location: Result.java

Content: 

public String getSubString(){

  return subString;

}

Location: Result.java

Content: 

public Result getUnlinkChainedResult(){

  Result result=chainedResult;

  chainedResult=null;

  return result;

}

Location: Result.java

Content: 

public int getUpdateCount(){

  return updateCount;

}

Location: Result.java

Content: 

public Object getValueObject(){

  return valueData;

}

Location: Result.java

Content: 

public String getZoneString(){

  return zoneString;

}

Location: Result.java

Content: 

public boolean hasGeneratedKeys(){

  return mode == ResultConstants.UPDATECOUNT && chainedResult != null;

}

Location: Result.java

Content: 

public RowSetNavigator initialiseNavigator(){

switch (mode) {

case ResultConstants.BATCHEXECUTE:

case ResultConstants.BATCHEXECDIRECT:

case ResultConstants.BATCHEXECRESPONSE:

case ResultConstants.SETSESSIONATTR:

case ResultConstants.PARAM_METADATA:

    navigator.beforeFirst();

  return navigator;

case ResultConstants.DATA:

case ResultConstants.DATAHEAD:

case ResultConstants.GENERATED:

navigator.reset();

return navigator;

default :

throw Error.runtimeError(ErrorCode.U_S0500,"Result");

}

}

Location: Result.java

Content: 

public boolean isData(){

  return mode == ResultConstants.DATA || mode == ResultConstants.DATAHEAD;

}

Location: Result.java

Content: 

public boolean isError(){

  return mode == ResultConstants.ERROR;

}

Location: Result.java

Content: 

public boolean isSimpleValue(){

  return mode == ResultConstants.VALUE;

}

Location: Result.java

Content: 

public boolean isUpdateCount(){

  return mode == ResultConstants.UPDATECOUNT;

}

Location: Result.java

Content: 

public boolean isWarning(){

  return mode == ResultConstants.WARNING;

}

Location: Result.java

Content: 

/** 

 * For BATCHEXECDIRECT

 */

public static Result newBatchedExecuteRequest(){

  Type[] types=new Type[]{Type.SQL_VARCHAR};

  Result result=newResult(ResultConstants.BATCHEXECDIRECT);

  result.metaData=ResultMetaData.newSimpleResultMetaData(types);

  return result;

}

Location: Result.java

Content: 

/** 

 * For BATCHEXERESPONSE for a BATCHEXECUTE or BATCHEXECDIRECT

 */

public static Result newBatchedExecuteResponse(int[] updateCounts,Result generatedResult,Result e){

  Result result=newResult(ResultConstants.BATCHEXECRESPONSE);

  result.addChainedResult(generatedResult);

  result.addChainedResult(e);

  Type[] types=new Type[]{Type.SQL_INTEGER};

  result.metaData=ResultMetaData.newSimpleResultMetaData(types);

  Object[][] table=new Object[updateCounts.length][];

  for (int i=0; i < updateCounts.length; i++) {

    table[i]=new Object[]{ValuePool.getInt(updateCounts[i])};

  }

  ((RowSetNavigatorClient)result.navigator).setData(table);

  return result;

}

Location: Result.java

Content: 

/** 

 * For CALL_RESPONSE For execution of SQL callable statements.

 */

public static Result newCallResponse(Type[] types,long statementId,Object[] values){

  Result result=newResult(ResultConstants.CALL_RESPONSE);

  result.metaData=ResultMetaData.newSimpleResultMetaData(types);

  result.statementID=statementId;

  result.valueData=values;

  return result;

}

Location: Result.java

Content: 

public static Result newCancelRequest(int randomId,long statementId,String sql){

  Result r=newResult(ResultConstants.SQLCANCEL);

  r.statementID=statementId;

  r.mainString=sql;

  r.generateKeys=randomId;

  return r;

}

Location: Result.java

Content: 

public static Result newConnectionAcknowledgeResponse(Session session){

  Result result=newResult(ResultConstants.CONNECTACKNOWLEDGE);

  result.sessionID=session.getId();

  result.databaseID=session.getDatabase().getDatabaseID();

  result.databaseName=session.getDatabase().getNameString();

  result.mainString=session.getDatabase().getProperties().getClientPropertiesAsString();

  result.generateKeys=session.getRandomId();

  return result;

}

Location: Result.java

Content: 

public static Result newConnectionAttemptRequest(String user,String password,String database,String zoneString,int timeZoneSeconds){

  Result result=newResult(ResultConstants.CONNECT);

  result.mainString=user;

  result.subString=password;

  result.zoneString=zoneString;

  result.databaseName=database;

  result.updateCount=timeZoneSeconds;

  return result;

}

Location: Result.java

Content: 

public static Result newDataHeadResult(SessionInterface session,Result source,int offset,int count){

  if (offset + count > source.navigator.getSize()) {

    count=source.navigator.getSize() - offset;

  }

  Result result=newResult(ResultConstants.DATAHEAD);

  result.metaData=source.metaData;

  result.navigator=new RowSetNavigatorClient(source.navigator,offset,count);

  result.navigator.setId(source.navigator.getId());

  result.setSession(session);

  result.rsProperties=source.rsProperties;

  result.fetchSize=source.fetchSize;

  return result;

}

Location: Result.java

Content: 

public static Result newDataResult(ResultMetaData md){

  Result result=newResult(ResultConstants.DATA);

  result.navigator=new RowSetNavigatorClient();

  result.metaData=md;

  return result;

}

Location: Result.java

Content: 

public static Result newDataRowsResult(Result source,int offset,int count){

  if (offset + count > source.navigator.getSize()) {

    count=source.navigator.getSize() - offset;

  }

  Result result=newResult(ResultConstants.DATAROWS);

  result.id=source.id;

  result.metaData=source.metaData;

  result.navigator=new RowSetNavigatorClient(source.navigator,offset,count);

  return result;

}

Location: Result.java

Content: 

public static Result newDataRowsResult(RowSetNavigator navigator){

  Result result=newResult(ResultConstants.DATAROWS);

  result.navigator=navigator;

  return result;

}

Location: Result.java

Content: 

public static Result newDoubleColumnResult(String colNameA,String colNameB){

  Result result=newResult(ResultConstants.DATA);

  result.metaData=ResultMetaData.newDoubleColumnMetaData(colNameA,colNameB);

  result.navigator=new RowSetNavigatorClient(8);

  return result;

}

Location: Result.java

Content: 

public static Result newErrorResult(Throwable t){

  return newErrorResult(t,null);

}

Location: Result.java

Content: 

/** 

 * @todo 1.9.0 fredt - move the messages to Error.java 

 */

public static Result newErrorResult(Throwable t,String statement){

  Result result=newResult(ResultConstants.ERROR);

  if (t instanceof HsqlException) {

    result.exception=(HsqlException)t;

    result.mainString=result.exception.getMessage();

    result.subString=result.exception.getSQLState();

    if (statement != null) {

      result.mainString+=" in statement [" + statement + "]";

    }

    result.errorCode=result.exception.getErrorCode();

  }

 else   if (t instanceof OutOfMemoryError) {

    System.gc();

    result.exception=Error.error(ErrorCode.OUT_OF_MEMORY,t);

    result.mainString=result.exception.getMessage();

    result.subString=result.exception.getSQLState();

    result.errorCode=result.exception.getErrorCode();

  }

 else   if (t instanceof Throwable) {

    result.exception=Error.error(ErrorCode.GENERAL_ERROR,t);

    result.mainString=result.exception.getMessage();

    result.subString=result.exception.getSQLState();

    result.errorCode=result.exception.getErrorCode();

  }

 else {

    result.exception=Error.error(ErrorCode.GENERAL_ERROR);

    result.mainString=result.exception.getMessage();

    result.subString=result.exception.getSQLState();

    result.errorCode=result.exception.getErrorCode();

  }

  return result;

}

Location: Result.java

Content: 

/** 

 * For direct execution of SQL statements. The statement and other parameters are set afterwards as the Result is reused

 */

public static Result newExecuteDirectRequest(){

  return newResult(ResultConstants.EXECDIRECT);

}

Location: Result.java

Content: 

public static Result newFreeStmtRequest(long statementID){

  Result r=newResult(ResultConstants.FREESTMT);

  r.statementID=statementID;

  return r;

}

Location: Result.java

Content: 

public static Result newGeneratedDataResult(ResultMetaData md){

  Result result=newResult(ResultConstants.GENERATED);

  result.navigator=new RowSetNavigatorClient();

  result.metaData=md;

  return result;

}

Location: Result.java

Content: 

/** 

 * For SQLEXECUTE For execution of SQL prepared statements. The parameters are set afterwards as the Result is reused

 */

public static Result newPreparedExecuteRequest(Type[] types,long statementId){

  Result result=newResult(ResultConstants.EXECUTE);

  result.metaData=ResultMetaData.newSimpleResultMetaData(types);

  result.statementID=statementId;

  result.valueData=ValuePool.emptyObjectArray;

  return result;

}

Location: Result.java

Content: 

public static Result newPrepareResponse(Statement statement){

  Result r=newResult(ResultConstants.PREPARE_ACK);

  r.statement=statement;

  r.statementID=statement.getID();

  int csType=statement.getType();

  r.statementReturnType=statement.getStatementReturnType();

  r.metaData=statement.getResultMetaData();

  r.parameterMetaData=statement.getParametersMetaData();

  return r;

}

Location: Result.java

Content: 

/** 

 * For SQLPREPARE For preparation of SQL prepared statements.

 */

public static Result newPrepareStatementRequest(){

  return newResult(ResultConstants.PREPARE);

}

Location: Result.java

Content: 

/** 

 * For interval PSM return values

 */

public static Result newPSMResult(int type,String label,Object value){

  Result result=newResult(ResultConstants.VALUE);

  result.errorCode=type;

  result.mainString=label;

  result.valueData=value;

  return result;

}

Location: Result.java

Content: 

/** 

 * For interval PSM return values

 */

public static Result newPSMResult(Object value){

  Result result=newResult(ResultConstants.VALUE);

  result.valueData=value;

  return result;

}

Location: Result.java

Content: 

public static Result newRequestDataResult(long id,int offset,int count){

  Result result=newResult(ResultConstants.REQUESTDATA);

  result.id=id;

  result.updateCount=offset;

  result.fetchSize=count;

  return result;

}

Location: Result.java

Content: 

public static Result newResetSessionRequest(){

  Result result=newResult(ResultConstants.RESETSESSION);

  return result;

}

Location: Result.java

Content: 

public static Result newResult(DataInput dataInput,RowInputInterface in) throws IOException {

  return newResult(null,dataInput.readByte(),dataInput,in);

}

Location: Result.java

Content: 

public static Result newResult(int type){

  RowSetNavigator navigator=null;

  Result result=null;

switch (type) {

case ResultConstants.CALL_RESPONSE:

case ResultConstants.EXECUTE:

case ResultConstants.UPDATE_RESULT:

    break;

case ResultConstants.BATCHEXECUTE:

case ResultConstants.BATCHEXECDIRECT:

  navigator=new RowSetNavigatorClient(4);

break;

case ResultConstants.SETSESSIONATTR:

case ResultConstants.PARAM_METADATA:

navigator=new RowSetNavigatorClient(1);

break;

case ResultConstants.BATCHEXECRESPONSE:

navigator=new RowSetNavigatorClient(4);

break;

case ResultConstants.DATA:

case ResultConstants.DATAHEAD:

case ResultConstants.DATAROWS:

case ResultConstants.GENERATED:

break;

case ResultConstants.LARGE_OBJECT_OP:

throw Error.runtimeError(ErrorCode.U_S0500,"Result");

default :

}

result=new Result(type);

result.navigator=navigator;

return result;

}

Location: Result.java

Content: 

public static Result newResult(RowSetNavigator nav){

  Result result=new Result(ResultConstants.DATA);

  result.navigator=nav;

  return result;

}

Location: Result.java

Content: 

private static Result newResult(Session session,DataInput dataInput,RowInputInterface in,int mode) throws IOException {

  Result result=newResult(mode);

  int length=dataInput.readInt();

  in.resetRow(0,length);

  byte[] byteArray=in.getBuffer();

  final int offset=4;

  dataInput.readFully(byteArray,offset,length - offset);

switch (mode) {

case ResultConstants.GETSESSIONATTR:

    result.statementReturnType=in.readByte();

  break;

case ResultConstants.DISCONNECT:

case ResultConstants.RESETSESSION:

case ResultConstants.STARTTRAN:

break;

case ResultConstants.PREPARE:

result.setStatementType(in.readByte());

result.mainString=in.readString();

result.rsProperties=in.readByte();

result.generateKeys=in.readByte();

if (result.generateKeys == ResultConstants.RETURN_GENERATED_KEYS_COL_NAMES || result.generateKeys == ResultConstants.RETURN_GENERATED_KEYS_COL_INDEXES) {

result.generatedMetaData=new ResultMetaData(in);

}

break;

case ResultConstants.CLOSE_RESULT:

result.id=in.readLong();

break;

case ResultConstants.FREESTMT:

result.statementID=in.readLong();

break;

case ResultConstants.EXECDIRECT:

result.updateCount=in.readInt();

result.fetchSize=in.readInt();

result.statementReturnType=in.readByte();

result.mainString=in.readString();

result.rsProperties=in.readByte();

result.queryTimeout=in.readShort();

result.generateKeys=in.readByte();

if (result.generateKeys == ResultConstants.RETURN_GENERATED_KEYS_COL_NAMES || result.generateKeys == ResultConstants.RETURN_GENERATED_KEYS_COL_INDEXES) {

result.generatedMetaData=new ResultMetaData(in);

}

break;

case ResultConstants.CONNECT:

result.databaseName=in.readString();

result.mainString=in.readString();

result.subString=in.readString();

result.zoneString=in.readString();

result.updateCount=in.readInt();

break;

case ResultConstants.ERROR:

case ResultConstants.WARNING:

result.mainString=in.readString();

result.subString=in.readString();

result.errorCode=in.readInt();

break;

case ResultConstants.CONNECTACKNOWLEDGE:

result.databaseID=in.readInt();

result.sessionID=in.readLong();

result.databaseName=in.readString();

result.mainString=in.readString();

result.generateKeys=in.readInt();

break;

case ResultConstants.UPDATECOUNT:

result.updateCount=in.readInt();

break;

case ResultConstants.ENDTRAN:

{

int type=in.readInt();

result.setActionType(type);

switch (type) {

case ResultConstants.TX_SAVEPOINT_NAME_RELEASE:

case ResultConstants.TX_SAVEPOINT_NAME_ROLLBACK:

result.mainString=in.readString();

break;

case ResultConstants.TX_COMMIT:

case ResultConstants.TX_ROLLBACK:

case ResultConstants.TX_COMMIT_AND_CHAIN:

case ResultConstants.TX_ROLLBACK_AND_CHAIN:

case ResultConstants.PREPARECOMMIT:

break;

default :

throw Error.runtimeError(ErrorCode.U_S0500,"Result");

}

break;

}

case ResultConstants.SETCONNECTATTR:

{

int type=in.readInt();

result.setConnectionAttrType(type);

switch (type) {

case ResultConstants.SQL_ATTR_SAVEPOINT_NAME:

result.mainString=in.readString();

break;

default :

throw Error.runtimeError(ErrorCode.U_S0500,"Result");

}

break;

}

case ResultConstants.SQLCANCEL:

result.databaseID=in.readInt();

result.sessionID=in.readLong();

result.statementID=in.readLong();

result.generateKeys=in.readInt();

result.mainString=in.readString();

break;

case ResultConstants.PREPARE_ACK:

result.statementReturnType=in.readByte();

result.statementID=in.readLong();

result.rsProperties=in.readByte();

result.metaData=new ResultMetaData(in);

result.parameterMetaData=new ResultMetaData(in);

break;

case ResultConstants.CALL_RESPONSE:

result.updateCount=in.readInt();

result.fetchSize=in.readInt();

result.statementID=in.readLong();

result.statementReturnType=in.readByte();

result.rsProperties=in.readByte();

result.metaData=new ResultMetaData(in);

result.valueData=readSimple(in,result.metaData);

break;

case ResultConstants.EXECUTE:

result.updateCount=in.readInt();

result.fetchSize=in.readInt();

result.statementID=in.readLong();

result.rsProperties=in.readByte();

result.queryTimeout=in.readShort();

Statement statement=session.statementManager.getStatement(session,result.statementID);

if (statement == null) {

result.mode=ResultConstants.EXECUTE_INVALID;

result.valueData=ValuePool.emptyObjectArray;

break;

}

result.statement=statement;

result.metaData=result.statement.getParametersMetaData();

result.valueData=readSimple(in,result.metaData);

break;

case ResultConstants.UPDATE_RESULT:

{

result.id=in.readLong();

int type=in.readInt();

result.setActionType(type);

result.metaData=new ResultMetaData(in);

result.valueData=readSimple(in,result.metaData);

break;

}

case ResultConstants.BATCHEXECRESPONSE:

case ResultConstants.BATCHEXECUTE:

case ResultConstants.BATCHEXECDIRECT:

case ResultConstants.SETSESSIONATTR:

{

result.updateCount=in.readInt();

result.fetchSize=in.readInt();

result.statementID=in.readLong();

result.queryTimeout=in.readShort();

result.metaData=new ResultMetaData(in);

result.navigator.readSimple(in,result.metaData);

break;

}

case ResultConstants.PARAM_METADATA:

{

result.metaData=new ResultMetaData(in);

result.navigator.read(in,result.metaData);

break;

}

case ResultConstants.REQUESTDATA:

{

result.id=in.readLong();

result.updateCount=in.readInt();

result.fetchSize=in.readInt();

break;

}

case ResultConstants.DATAHEAD:

case ResultConstants.DATA:

case ResultConstants.GENERATED:

{

result.id=in.readLong();

result.updateCount=in.readInt();

result.fetchSize=in.readInt();

result.rsProperties=in.readByte();

result.metaData=new ResultMetaData(in);

result.navigator=new RowSetNavigatorClient();

result.navigator.read(in,result.metaData);

break;

}

case ResultConstants.DATAROWS:

{

result.metaData=new ResultMetaData(in);

result.navigator=new RowSetNavigatorClient();

result.navigator.read(in,result.metaData);

break;

}

default :

throw Error.runtimeError(ErrorCode.U_S0500,"Result");

}

return result;

}

Location: Result.java

Content: 

public static Result newResult(Session session,int mode,DataInput dataInput,RowInputInterface in) throws IOException {

  try {

    if (mode == ResultConstants.LARGE_OBJECT_OP) {

      return ResultLob.newLob(dataInput,false);

    }

    Result result=newResult(session,dataInput,in,mode);

    return result;

  }

 catch (  IOException e) {

    throw Error.error(ErrorCode.X_08000);

  }

}

Location: Result.java

Content: 

/** 

 * Result structure used for set/get session attributes

 */

public static Result newSessionAttributesResult(){

  Result result=newResult(ResultConstants.DATA);

  result.navigator=new RowSetNavigatorClient(1);

  result.metaData=sessionAttributesMetaData;

  result.navigator.add(new Object[SessionInterface.INFO_LIMIT]);

  return result;

}

Location: Result.java

Content: 

public static Result newSetSavepointRequest(String name){

  Result result;

  result=newResult(ResultConstants.SETCONNECTATTR);

  result.setConnectionAttrType(ResultConstants.SQL_ATTR_SAVEPOINT_NAME);

  result.setMainString(name);

  return result;

}

Location: Result.java

Content: 

public static Result newSingleColumnResult(ResultMetaData meta){

  Result result=newResult(ResultConstants.DATA);

  result.metaData=meta;

  result.navigator=new RowSetNavigatorClient();

  return result;

}

Location: Result.java

Content: 

public static Result newSingleColumnResult(String colName){

  Result result=newResult(ResultConstants.DATA);

  result.metaData=ResultMetaData.newSingleColumnMetaData(colName);

  result.navigator=new RowSetNavigatorClient(8);

  return result;

}

Location: Result.java

Content: 

public static Result newSingleColumnStringResult(String colName,String contents){

  Result result=Result.newSingleColumnResult(colName);

  LineNumberReader lnr=new LineNumberReader(new StringReader(contents));

  while (true) {

    String line=null;

    try {

      line=lnr.readLine();

    }

 catch (    Exception e) {

    }

    if (line == null) {

      break;

    }

    result.getNavigator().add(new Object[]{line});

  }

  return result;

}

Location: Result.java

Content: 

public static Result newUpdateCountResult(int count){

  return new Result(ResultConstants.UPDATECOUNT,count);

}

Location: Result.java

Content: 

public static Result newUpdateCountResult(ResultMetaData meta,int count){

  Result result=newResult(ResultConstants.UPDATECOUNT);

  Result dataResult=newGeneratedDataResult(meta);

  result.updateCount=count;

  result.addChainedResult(dataResult);

  return result;

}

Location: Result.java

Content: 

/** 

 * For UPDATE_RESULT The parameters are set afterwards as the Result is reused

 */

public static Result newUpdateResultRequest(Type[] types,long id){

  Result result=newResult(ResultConstants.UPDATE_RESULT);

  result.metaData=ResultMetaData.newUpdateResultMetaData(types);

  result.id=id;

  result.valueData=new Object[]{};

  return result;

}

Location: Result.java

Content: 

public static Result newUpdateZeroResult(){

  return new Result(ResultConstants.UPDATECOUNT,0);

}

Location: Result.java

Content: 

public static Result newWarningResult(HsqlException w){

  Result result=newResult(ResultConstants.WARNING);

  result.mainString=w.getMessage();

  result.subString=w.getSQLState();

  result.errorCode=w.getErrorCode();

  return result;

}

Location: Result.java

Content: 

public void readAdditionalResults(SessionInterface session,DataInputStream inputStream,RowInputInterface in) throws IOException {

  Result currentResult=this;

  setSession(session);

  while (true) {

    int addedResultMode=inputStream.readByte();

    if (addedResultMode == ResultConstants.NONE) {

      return;

    }

    currentResult=newResult(null,inputStream,in,addedResultMode);

    addChainedResult(currentResult);

  }

}

Location: Result.java

Content: 

public void readLobResults(SessionInterface session,DataInputStream inputStream,RowInputInterface in) throws IOException {

  Result currentResult=this;

  boolean hasLob=false;

  setSession(session);

  while (true) {

    int addedResultMode=inputStream.readByte();

    if (addedResultMode == ResultConstants.LARGE_OBJECT_OP) {

      ResultLob resultLob=ResultLob.newLob(inputStream,false);

      if (session instanceof Session) {

        ((Session)session).allocateResultLob(resultLob,inputStream);

      }

 else {

        currentResult.addLobResult(resultLob);

      }

      hasLob=true;

      continue;

    }

 else     if (addedResultMode == ResultConstants.NONE) {

      break;

    }

 else {

      throw Error.runtimeError(ErrorCode.U_S0500,"Result");

    }

  }

  if (hasLob) {

    ((Session)session).registerResultLobs(currentResult);

  }

}

Location: Result.java

Content: 

private static Object[] readSimple(RowInputInterface in,ResultMetaData meta) throws IOException {

  int size=in.readInt();

  return in.readData(meta.columnTypes);

}

Location: Result.java

Content: 

Result(int mode){

  this.mode=(byte)mode;

}

Location: Result.java

Content: 

public Result(int mode,int count){

  this.mode=(byte)mode;

  updateCount=count;

}

Location: Result.java

Content: 

public void setActionType(int type){

  updateCount=type;

}

Location: Result.java

Content: 

public void setAsTransactionEndRequest(int subType,String savepoint){

  mode=ResultConstants.ENDTRAN;

  updateCount=subType;

  mainString=savepoint == null ? "" : savepoint;

}

Location: Result.java

Content: 

/** 

 * For BATCHEXECUTE

 */

public void setBatchedPreparedExecuteRequest(){

  mode=ResultConstants.BATCHEXECUTE;

  if (navigator == null) {

    navigator=new RowSetNavigatorClient(4);

  }

 else {

    navigator.clear();

  }

  updateCount=0;

  this.fetchSize=0;

}

Location: Result.java

Content: 

public void setConnectionAttrType(int type){

  updateCount=type;

}

Location: Result.java

Content: 

public void setDatabaseId(int id){

  databaseID=id;

}

Location: Result.java

Content: 

public void setFetchSize(int count){

  fetchSize=count;

}

Location: Result.java

Content: 

public void setMainString(String sql){

  this.mainString=sql;

}

Location: Result.java

Content: 

public void setMaxRows(int count){

  updateCount=count;

}

Location: Result.java

Content: 

public void setNavigator(RowSetNavigator navigator){

  this.navigator=navigator;

}

Location: Result.java

Content: 

/** 

 * For SQLEXECUTE results The parameters are set by this method as the Result is reused

 */

public void setPreparedExecuteProperties(Object[] parameterValues,int maxRows,int fetchSize,int resultProps,int timeout){

  mode=ResultConstants.EXECUTE;

  valueData=parameterValues;

  updateCount=maxRows;

  this.fetchSize=fetchSize;

  this.rsProperties=resultProps;

  queryTimeout=timeout;

}

Location: Result.java

Content: 

/** 

 * For UPDATE_RESULT results The parameters are set by this method as the Result is reused

 */

public void setPreparedResultUpdateProperties(Object[] parameterValues){

  valueData=parameterValues;

}

Location: Result.java

Content: 

/** 

 * For both EXECDIRECT and PREPARE

 */

public void setPrepareOrExecuteProperties(String sql,int maxRows,int fetchSize,int statementReturnType,int timeout,int resultSetProperties,int keyMode,int[] generatedIndexes,String[] generatedNames){

  mainString=sql;

  updateCount=maxRows;

  this.fetchSize=fetchSize;

  this.statementReturnType=statementReturnType;

  queryTimeout=timeout;

  rsProperties=resultSetProperties;

  generateKeys=keyMode;

  generatedMetaData=ResultMetaData.newGeneratedColumnsMetaData(generatedIndexes,generatedNames);

}

Location: Result.java

Content: 

public void setResultId(long id){

  this.id=id;

  if (navigator != null) {

    navigator.setId(id);

  }

}

Location: Result.java

Content: 

public void setResultType(int type){

  mode=(byte)type;

}

Location: Result.java

Content: 

public void setSessionId(long id){

  sessionID=id;

}

Location: Result.java

Content: 

public void setSessionRandomID(int id){

  generateKeys=id;

}

Location: Result.java

Content: 

public void setStatementID(long statementId){

  this.statementID=statementId;

}

Location: Result.java

Content: 

public void setStatementType(int type){

  statementReturnType=type;

}

Location: Result.java

Content: 

public void setStatement(Statement statement){

  this.statement=statement;

}

Location: Result.java

Content: 

public void setUpdateCount(int count){

  updateCount=count;

}

Location: Result.java

Content: 

public void setValueObject(Object value){

  valueData=value;

}

Location: Result.java

Content: 

private static void writeSimple(RowOutputInterface out,ResultMetaData meta,Object[] data) throws IOException {

  out.writeInt(1);

  out.writeData(meta.getColumnCount(),meta.columnTypes,data,null,null);

}

Location: Result.java

Content: 

public void write(SessionInterface session,DataOutputStream dataOut,RowOutputInterface rowOut) throws IOException {

  rowOut.reset();

  rowOut.writeByte(mode);

  int startPos=rowOut.size();

  rowOut.writeSize(0);

switch (mode) {

case ResultConstants.GETSESSIONATTR:

    rowOut.writeByte(statementReturnType);

  break;

case ResultConstants.DISCONNECT:

case ResultConstants.RESETSESSION:

case ResultConstants.STARTTRAN:

break;

case ResultConstants.PREPARE:

rowOut.writeByte(statementReturnType);

rowOut.writeString(mainString);

rowOut.writeByte(rsProperties);

rowOut.writeByte(generateKeys);

if (generateKeys == ResultConstants.RETURN_GENERATED_KEYS_COL_NAMES || generateKeys == ResultConstants.RETURN_GENERATED_KEYS_COL_INDEXES) {

generatedMetaData.write(rowOut);

}

break;

case ResultConstants.FREESTMT:

rowOut.writeLong(statementID);

break;

case ResultConstants.CLOSE_RESULT:

rowOut.writeLong(id);

break;

case ResultConstants.EXECDIRECT:

rowOut.writeInt(updateCount);

rowOut.writeInt(fetchSize);

rowOut.writeByte(statementReturnType);

rowOut.writeString(mainString);

rowOut.writeByte(rsProperties);

rowOut.writeShort(queryTimeout);

rowOut.writeByte(generateKeys);

if (generateKeys == ResultConstants.RETURN_GENERATED_KEYS_COL_NAMES || generateKeys == ResultConstants.RETURN_GENERATED_KEYS_COL_INDEXES) {

generatedMetaData.write(rowOut);

}

break;

case ResultConstants.CONNECT:

rowOut.writeString(databaseName);

rowOut.writeString(mainString);

rowOut.writeString(subString);

rowOut.writeString(zoneString);

rowOut.writeInt(updateCount);

break;

case ResultConstants.ERROR:

case ResultConstants.WARNING:

rowOut.writeString(mainString);

rowOut.writeString(subString);

rowOut.writeInt(errorCode);

break;

case ResultConstants.CONNECTACKNOWLEDGE:

rowOut.writeInt(databaseID);

rowOut.writeLong(sessionID);

rowOut.writeString(databaseName);

rowOut.writeString(mainString);

rowOut.writeInt(generateKeys);

break;

case ResultConstants.UPDATECOUNT:

rowOut.writeInt(updateCount);

break;

case ResultConstants.ENDTRAN:

{

int type=getActionType();

rowOut.writeInt(type);

switch (type) {

case ResultConstants.TX_SAVEPOINT_NAME_RELEASE:

case ResultConstants.TX_SAVEPOINT_NAME_ROLLBACK:

rowOut.writeString(mainString);

break;

case ResultConstants.TX_COMMIT:

case ResultConstants.TX_ROLLBACK:

case ResultConstants.TX_COMMIT_AND_CHAIN:

case ResultConstants.TX_ROLLBACK_AND_CHAIN:

case ResultConstants.PREPARECOMMIT:

break;

default :

throw Error.runtimeError(ErrorCode.U_S0500,"Result");

}

break;

}

case ResultConstants.SQLCANCEL:

rowOut.writeInt(databaseID);

rowOut.writeLong(sessionID);

rowOut.writeLong(statementID);

rowOut.writeInt(generateKeys);

rowOut.writeString(mainString);

break;

case ResultConstants.PREPARE_ACK:

rowOut.writeByte(statementReturnType);

rowOut.writeLong(statementID);

rowOut.writeByte(rsProperties);

metaData.write(rowOut);

parameterMetaData.write(rowOut);

break;

case ResultConstants.CALL_RESPONSE:

rowOut.writeInt(updateCount);

rowOut.writeInt(fetchSize);

rowOut.writeLong(statementID);

rowOut.writeByte(statementReturnType);

rowOut.writeByte(rsProperties);

metaData.write(rowOut);

writeSimple(rowOut,metaData,(Object[])valueData);

break;

case ResultConstants.EXECUTE:

rowOut.writeInt(updateCount);

rowOut.writeInt(fetchSize);

rowOut.writeLong(statementID);

rowOut.writeByte(rsProperties);

rowOut.writeShort(queryTimeout);

writeSimple(rowOut,metaData,(Object[])valueData);

break;

case ResultConstants.UPDATE_RESULT:

rowOut.writeLong(id);

rowOut.writeInt(getActionType());

metaData.write(rowOut);

writeSimple(rowOut,metaData,(Object[])valueData);

break;

case ResultConstants.BATCHEXECRESPONSE:

case ResultConstants.BATCHEXECUTE:

case ResultConstants.BATCHEXECDIRECT:

case ResultConstants.SETSESSIONATTR:

{

rowOut.writeInt(updateCount);

rowOut.writeInt(fetchSize);

rowOut.writeLong(statementID);

rowOut.writeShort(queryTimeout);

metaData.write(rowOut);

navigator.writeSimple(rowOut,metaData);

break;

}

case ResultConstants.PARAM_METADATA:

{

metaData.write(rowOut);

navigator.write(rowOut,metaData);

break;

}

case ResultConstants.SETCONNECTATTR:

{

int type=getConnectionAttrType();

rowOut.writeInt(type);

switch (type) {

case ResultConstants.SQL_ATTR_SAVEPOINT_NAME:

rowOut.writeString(mainString);

break;

default :

throw Error.runtimeError(ErrorCode.U_S0500,"Result");

}

break;

}

case ResultConstants.REQUESTDATA:

{

rowOut.writeLong(id);

rowOut.writeInt(updateCount);

rowOut.writeInt(fetchSize);

break;

}

case ResultConstants.DATAROWS:

metaData.write(rowOut);

navigator.write(rowOut,metaData);

break;

case ResultConstants.DATAHEAD:

case ResultConstants.DATA:

case ResultConstants.GENERATED:

rowOut.writeLong(id);

rowOut.writeInt(updateCount);

rowOut.writeInt(fetchSize);

rowOut.writeByte(rsProperties);

metaData.write(rowOut);

navigator.write(rowOut,metaData);

break;

default :

throw Error.runtimeError(ErrorCode.U_S0500,"Result");

}

rowOut.writeSize(rowOut.size() - startPos);

dataOut.write(rowOut.getOutputStream().getBuffer(),0,rowOut.size());

int count=getLobCount();

Result current=this;

for (int i=0; i < count; i++) {

ResultLob lob=current.lobResults;

lob.writeBody(session,dataOut);

current=current.lobResults;

}

if (chainedResult == null) {

dataOut.writeByte(ResultConstants.NONE);

}

 else {

chainedResult.write(session,dataOut,rowOut);

}

dataOut.flush();

}

