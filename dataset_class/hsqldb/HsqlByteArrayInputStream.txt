Location: HsqlByteArrayInputStream.java

Content: 

public HsqlByteArrayInputStream(byte[] buf){

  this.buffer=buf;

  this.pos=0;

  this.count=buf.length;

}

Location: HsqlByteArrayInputStream.java

Content: 

public HsqlByteArrayInputStream(byte[] buf,int offset,int length){

  this.buffer=buf;

  this.pos=offset;

  this.count=Math.min(offset + length,buf.length);

  this.mark=offset;

}

Location: HsqlByteArrayInputStream.java

Content: 

public boolean markSupported(){

  return true;

}

Location: HsqlByteArrayInputStream.java

Content: 

public void mark(int readAheadLimit){

  mark=pos;

}

Location: HsqlByteArrayInputStream.java

Content: 

public final double readDouble() throws IOException {

  return Double.longBitsToDouble(readLong());

}

Location: HsqlByteArrayInputStream.java

Content: 

public final float readFloat() throws IOException {

  return Float.intBitsToFloat(readInt());

}

Location: HsqlByteArrayInputStream.java

Content: 

public final void readFully(byte[] b,int off,int len) throws IOException {

  if (len < 0) {

    throw new IndexOutOfBoundsException();

  }

  int n=0;

  while (n < len) {

    int count=read(b,off + n,len - n);

    if (count < 0) {

      throw new EOFException();

    }

    n+=count;

  }

}

Location: HsqlByteArrayInputStream.java

Content: 

public final int readUnsignedByte() throws IOException {

  int ch=read();

  if (ch < 0) {

    throw new EOFException();

  }

  return ch;

}

Location: HsqlByteArrayInputStream.java

Content: 

public final int readUnsignedShort() throws IOException {

  int ch1=read();

  int ch2=read();

  if ((ch1 | ch2) < 0) {

    throw new EOFException();

  }

  return (ch1 << 8) + ch2;

}

Location: HsqlByteArrayInputStream.java

Content: 

public String readUTF() throws IOException {

  int bytecount=readUnsignedShort();

  if (pos + bytecount >= count) {

    throw new EOFException();

  }

  String result=StringConverter.readUTF(buffer,pos,bytecount);

  pos+=bytecount;

  return result;

}

