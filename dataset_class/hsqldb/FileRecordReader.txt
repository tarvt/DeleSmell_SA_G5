Location: FileRecordReader.java

Content: 

/** 

 * @throws java.util.regex.PatternSyntaxException

 * @throws UnsupportedEncodingException

 */

public FileRecordReader(String filePath,String recordDelimiterRegex,String encoding) throws FileNotFoundException, UnsupportedEncodingException {

  file=new File(filePath);

  reader=new InputStreamReader(new FileInputStream(file),encoding);

  recordPattern=Pattern.compile("(.*?)(" + recordDelimiterRegex + ").*",Pattern.DOTALL);

}

Location: FileRecordReader.java

Content: 

public String getAbsolutePath(){

  return file.getAbsolutePath();

}

Location: FileRecordReader.java

Content: 

public String getPath(){

  return file.getPath();

}

Location: FileRecordReader.java

Content: 

public boolean isOpen(){

  return reader != null;

}

Location: FileRecordReader.java

Content: 

/** 

 * @return null if no more records in input file

 * @throws IOException

 */

public String nextRecord() throws IOException {

  Matcher matcher;

  boolean reloaded=false;

  while (true) {

    matcher=recordPattern.matcher(stringBuffer);

    if (matcher.matches()) {

      String rec=matcher.group(1);

      stringBuffer.delete(0,matcher.end(2));

      return rec;

    }

    if (reader == null) {

      if (stringBuffer.length() < 1)       return null;

      String rec=stringBuffer.toString();

      stringBuffer.setLength(0);

      return rec;

    }

    reload(reloaded);

    reloaded=true;

  }

}

Location: FileRecordReader.java

Content: 

/** 

 * @param increaseBuffer.  If true, grab 2 x as many bytes as previous read.

 * @throws IOException

 */

private void reload(boolean increaseBuffer) throws IOException {

  if (reader == null)   throw new IllegalStateException("Attempt to reload after source file has been closed");

  if (increaseBuffer)   charBuffer=new char[charBuffer.length * 2];

  int retVal=reader.read(charBuffer);

  if (retVal > 0)   stringBuffer.append(charBuffer,0,retVal);

 else   close();

}

