Location: TarFileInputStream.java

Content: 

public int getReadBufferBlocks(){

  return readBufferBlocks;

}

Location: TarFileInputStream.java

Content: 

/** 

 * readBlock() and readNextHeaderBlock are the methods that USERS of this class should use to read header blocks from the tar file. <P> readBlock() should be used when you know that the current block should contain what you want. E.g. you know that the very first block of a tar file should contain a Tar Entry header block. </P>

 * @see #readNextHeaderBlock

 */

public void readBlock() throws IOException, TarMalformatException {

  readBlocks(1);

}

Location: TarFileInputStream.java

Content: 

/** 

 * readBlocks(int) is the method that USERS of this class should use to read file data from the tar file. This method reads from the tar file and writes to the readBuffer array. <P> This class and subclasses should read from the underlying readStream <b>ONLY WITH THIS METHOD</b>. That way we can be confident that bytesRead will always be accurate. </P> <P> This method is different from a typical Java byte array read command in that when reading tar files <OL> <LI>we always know ahead-of-time how many bytes we should read, and <LI>we always want to read quantities of bytes in multiples of 512. </OL> </P>

 * @param blocks  How many 512 blocks to read.

 * @throws IOException for an I/O error on the underlying InputStream

 * @throws TarMalformatException if no I/O error occurred, but we failed toread the exact number of bytes requested.

 */

public void readBlocks(int blocks) throws IOException, TarMalformatException {

  if (compressionType != TarFileOutputStream.Compression.NO_COMPRESSION) {

    readCompressedBlocks(blocks);

    return;

  }

  int i=readStream.read(readBuffer,0,blocks * 512);

  bytesRead+=i;

  if (i != blocks * 512) {

    throw new TarMalformatException(RB.insufficient_read.getString(blocks * 512,i));

  }

}

Location: TarFileInputStream.java

Content: 

/** 

 * Work-around for the problem that compressed InputReaders don't fill the read buffer before returning. Has visibility 'protected' so that subclasses may override with different algorithms, or use different algorithms for different compression stream.

 */

protected void readCompressedBlocks(int blocks) throws IOException {

  int bytesSoFar=0;

  int requiredBytes=512 * blocks;

  int i;

  while (bytesSoFar < requiredBytes) {

    i=readStream.read(readBuffer,bytesSoFar,requiredBytes - bytesSoFar);

    if (i < 0) {

      throw new EOFException(RB.decompression_ranout.getString(bytesSoFar,requiredBytes));

    }

    bytesRead+=i;

    bytesSoFar+=i;

  }

}

Location: TarFileInputStream.java

Content: 

/** 

 * readBlock() and readNextHeaderBlock are the methods that USERS of this class should use to read header blocks from the tar file. <P> readNextHeaderBlock continues working through the Tar File from the current point until it finds a block with a non-0 first byte. </P>

 * @return  True if a header block was read and place at beginning of thereadBuffer array.  False if EOF was encountered without finding any blocks with first byte != 0.  If false is returned, we have automatically closed the this TarFileInputStream too.

 * @see #readBlock

 */

public boolean readNextHeaderBlock() throws IOException, TarMalformatException {

  try {

    while (readStream.available() > 0) {

      readBlock();

      if (readBuffer[0] != 0) {

        return true;

      }

    }

  }

 catch (  EOFException ee) {

  }

  close();

  return false;

}

Location: TarFileInputStream.java

Content: 

/** 

 * Convenience wrapper to use default readBufferBlocks and compressionType.

 * @see #TarFileInputStream(File,int,int)

 */

public TarFileInputStream(File sourceFile) throws IOException {

  this(sourceFile,TarFileOutputStream.Compression.DEFAULT_COMPRESSION);

}

Location: TarFileInputStream.java

Content: 

/** 

 * Convenience wrapper to use default readBufferBlocks.

 * @see #TarFileInputStream(File,int,int)

 */

public TarFileInputStream(File sourceFile,int compressionType) throws IOException {

  this(sourceFile,compressionType,TarFileOutputStream.Compression.DEFAULT_BLOCKS_PER_RECORD);

}

Location: TarFileInputStream.java

Content: 

/** 

 * This class does no validation or enforcement of file naming conventions. If desired, the caller should enforce extensions like "tar" and "tar.gz" (and that they match the specified compression type). <P> This object will automatically release its I/O resources when you get false back from a readNextHeaderBlock() call. If you abort before then, you must call the close() method like for a normal InputStream. </P>

 * @see #close()

 * @see #readNextHeaderBlock()

 */

public TarFileInputStream(File sourceFile,int compressionType,int readBufferBlocks) throws IOException {

  if (!sourceFile.isFile()) {

    throw new FileNotFoundException(sourceFile.getAbsolutePath());

  }

  if (!sourceFile.canRead()) {

    throw new IOException(RB.read_denied.getString(sourceFile.getAbsolutePath()));

  }

  this.readBufferBlocks=readBufferBlocks;

  this.compressionType=compressionType;

  readBuffer=new byte[readBufferBlocks * 512];

switch (compressionType) {

case TarFileOutputStream.Compression.NO_COMPRESSION:

    readStream=new FileInputStream(sourceFile);

  break;

case TarFileOutputStream.Compression.GZIP_COMPRESSION:

readStream=new GZIPInputStream(new FileInputStream(sourceFile),readBuffer.length);

break;

default :

throw new IllegalArgumentException(RB.compression_unknown.getString(compressionType));

}

}

