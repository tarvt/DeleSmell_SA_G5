Location: BitType.java

Content: 

public BitType(int type,long precision){

  super(type,precision);

}

Location: BitType.java

Content: 

Object castOrConvertToType(SessionInterface session,Object a,Type otherType,boolean cast){

  BlobData b;

  if (a == null) {

    return null;

  }

switch (otherType.typeCode) {

case Types.SQL_VARCHAR:

case Types.SQL_CHAR:

{

      b=session.getScanner().convertToBit((String)a);

      otherType=getBitType(Types.SQL_BIT_VARYING,b.length(session));

      break;

    }

case Types.SQL_BIT:

case Types.SQL_BIT_VARYING:

case Types.SQL_BINARY:

case Types.SQL_VARBINARY:

case Types.SQL_BLOB:

  b=(BlobData)a;

break;

case Types.SQL_BOOLEAN:

{

if (precision != 1) {

  throw Error.error(ErrorCode.X_22501);

}

if (((Boolean)a).booleanValue()) {

  return BinaryData.singleBitOne;

}

 else {

  return BinaryData.singleBitZero;

}

}

case Types.TINYINT:

case Types.SQL_SMALLINT:

case Types.SQL_INTEGER:

case Types.SQL_BIGINT:

case Types.SQL_REAL:

case Types.SQL_FLOAT:

case Types.SQL_DOUBLE:

case Types.SQL_NUMERIC:

case Types.SQL_DECIMAL:

{

if (precision != 1) {

throw Error.error(ErrorCode.X_22501);

}

if (((NumberType)otherType).compareToZero(a) == 0) {

return BinaryData.singleBitZero;

}

 else {

return BinaryData.singleBitOne;

}

}

default :

throw Error.error(ErrorCode.X_22501);

}

if (b.bitLength(session) > precision) {

if (!cast) {

throw Error.error(ErrorCode.X_22001);

}

session.addWarning(Error.error(ErrorCode.W_01004));

}

int bytePrecision=(int)((precision + 7) / 8);

if (otherType.typeCode == Types.SQL_BLOB) {

byte[] bytes=b.getBytes(session,0,bytePrecision);

b=new BinaryData(bytes,precision);

}

switch (typeCode) {

case Types.SQL_BIT:

{

if (b.bitLength(session) == precision) {

return b;

}

if (b.length(session) > bytePrecision) {

byte[] data=b.getBytes(session,0,bytePrecision);

b=new BinaryData(data,precision);

}

 else if (b.length(session) <= bytePrecision) {

byte[] data=(byte[])ArrayUtil.resizeArray(b.getBytes(),bytePrecision);

b=new BinaryData(data,precision);

}

break;

}

case Types.SQL_BIT_VARYING:

{

if (b.bitLength(session) <= precision) {

return b;

}

if (b.length(session) > bytePrecision) {

byte[] data=b.getBytes(session,0,bytePrecision);

b=new BinaryData(data,precision);

}

break;

}

default :

throw Error.error(ErrorCode.X_22501);

}

byte[] data=b.getBytes();

for (int i=(int)precision; i < b.length(session) * 8; i++) {

BitMap.unset(data,i);

}

return b;

}

Location: BitType.java

Content: 

public Object concat(Session session,Object a,Object b){

  if (a == null || b == null) {

    return null;

  }

  long length=((BlobData)a).bitLength(session) + ((BlobData)b).bitLength(session);

  if (length > Integer.MAX_VALUE) {

    throw Error.error(ErrorCode.W_01000);

  }

  byte[] aData=((BlobData)a).getBytes();

  byte[] bData=((BlobData)b).getBytes();

  int aLength=(int)((BlobData)a).bitLength(session);

  int bLength=(int)((BlobData)b).bitLength(session);

  byte[] bytes=new byte[(int)(length + 7) / 8];

  System.arraycopy(aData,0,bytes,0,aData.length);

  for (int i=0; i < bLength; i++) {

    if (BitMap.isSet(bData,i)) {

      BitMap.set(bytes,aLength + i);

    }

  }

  return new BinaryData(bytes,length);

}

Location: BitType.java

Content: 

public static BinaryType getBitType(int type,long precision){

switch (type) {

case Types.SQL_BIT:

case Types.SQL_BIT_VARYING:

    return new BitType(type,precision);

default :

  throw Error.runtimeError(ErrorCode.U_S0500,"BitType");

}

}

Location: BitType.java

Content: 

public static BitSet getJavaBitSet(BinaryData data){

  int bits=(int)data.bitLength(null);

  BitSet bs=new BitSet(bits);

  byte[] bytes=data.getBytes();

  for (int i=0; i < bits; i++) {

    boolean set=BitMap.isSet(bytes,i);

    if (set) {

      bs.set(i);

    }

  }

  return bs;

}

Location: BitType.java

Content: 

int getRightTrimSize(BinaryData data){

  int i=(int)data.bitLength(null) - 1;

  byte[] bytes=data.getBytes();

  for (; i >= 0; i--) {

    if (BitMap.isSet(bytes,i)) {

      break;

    }

  }

  return i + 1;

}

Location: BitType.java

Content: 

public boolean isBitType(){

  return true;

}

Location: BitType.java

Content: 

public BlobData overlay(Session session,BlobData value,BlobData overlay,long offset,long length,boolean hasLength){

  if (value == null || overlay == null) {

    return null;

  }

  if (!hasLength) {

    length=overlay.bitLength(session);

  }

switch (typeCode) {

case Types.SQL_BIT:

case Types.SQL_BIT_VARYING:

{

      byte[] data=(byte[])ArrayUtil.duplicateArray(value.getBytes());

      byte[] overlaydata=overlay.getBytes();

      for (int i=0, pos=(int)offset; i < length; pos+=8, i++) {

        int count=8;

        if (length - pos < 8) {

          count=(int)length - pos;

        }

        BitMap.overlay(data,pos,overlaydata[i],count);

      }

      BinaryData binary=new BinaryData(data,value.bitLength(session));

      return binary;

    }

default :

  throw Error.runtimeError(ErrorCode.U_S0500,"BitType");

}

}

Location: BitType.java

Content: 

/** 

 * @todo - implement 

 */

public long position(SessionInterface session,BlobData data,BlobData otherData,Type otherType,long offset){

  if (data == null || otherData == null) {

    return -1L;

  }

  long otherLength=data.bitLength(session);

  if (offset + otherLength > data.bitLength(session)) {

    return -1;

  }

  throw Error.runtimeError(ErrorCode.U_S0500,"BitType");

}

Location: BitType.java

Content: 

public BlobData substring(SessionInterface session,BlobData data,long offset,long length,boolean hasLength){

  long end;

  long dataLength=data.bitLength(session);

  if (hasLength) {

    end=offset + length;

  }

 else {

    end=dataLength > offset ? dataLength : offset;

  }

  if (end < offset) {

    throw Error.error(ErrorCode.X_22011);

  }

  if (offset > end || end < 0) {

    offset=0;

    end=0;

  }

  if (offset < 0) {

    offset=0;

  }

  if (end > dataLength) {

    end=dataLength;

  }

  length=end - offset;

  byte[] dataBytes=data.getBytes();

  byte[] bytes=new byte[(int)(length + 7) / 8];

  for (int i=(int)offset; i < end; i++) {

    if (BitMap.isSet(dataBytes,i)) {

      BitMap.set(bytes,i - (int)offset);

    }

  }

  return new BinaryData(bytes,length);

}

