Location: RemoteChannelThroughputBenchmark.java

Content: 

@Benchmark public void remoteRebalance(RemoteChannelThroughputBenchmarkContext context) throws Exception {

  StreamExecutionEnvironment env=context.env;

  env.enableCheckpointing(CHECKPOINT_INTERVAL_MS);

  env.setParallelism(PARALLELISM);

  env.getCheckpointConfig().enableUnalignedCheckpoints(context.mode.equals(UNALIGNED));

  DataStreamSource<Long> source=env.addSource(new LongSource(RECORDS_PER_SUBTASK));

  source.slotSharingGroup("source").rebalance().map((MapFunction<Long,Long>)value -> value).slotSharingGroup("map").rebalance().addSink(new DiscardingSink<>()).slotSharingGroup("sink");

  miniCluster.executeJobBlocking(StreamingJobGraphGenerator.createJobGraph(env.getStreamGraph()));

}

Location: RemoteChannelThroughputBenchmark.java

Content: 

@Benchmark public void remoteRebalance(RemoteChannelThroughputBenchmarkContext context) throws Exception {

  StreamExecutionEnvironment env=context.env;

  env.enableCheckpointing(CHECKPOINT_INTERVAL_MS);

  env.setParallelism(PARALLELISM);

  env.getCheckpointConfig().enableUnalignedCheckpoints(context.mode.equals(UNALIGNED));

  DataStreamSource<Long> source=env.addSource(new LongSource(RECORDS_PER_SUBTASK));

  source.slotSharingGroup("source").rebalance().map((MapFunction<Long,Long>)value -> value).slotSharingGroup("map").rebalance().addSink(new DiscardingSink<>()).slotSharingGroup("sink");

  miniCluster.executeJobBlocking(StreamingJobGraphGenerator.createJobGraph(env.getStreamGraph()));

}

