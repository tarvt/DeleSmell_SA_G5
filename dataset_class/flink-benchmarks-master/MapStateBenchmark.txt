Location: MapStateBenchmark.java

Content: 

@Benchmark public void mapAdd(KeyValue keyValue) throws Exception {

  keyedStateBackend.setCurrentKey(keyValue.newKey);

  mapState.put(keyValue.mapKey,keyValue.mapValue);

}

Location: MapStateBenchmark.java

Content: 

@Benchmark public boolean mapContains(KeyValue keyValue) throws Exception {

  keyedStateBackend.setCurrentKey(keyValue.setUpKey);

  return mapState.contains(keyValue.mapKey << 1);

}

Location: MapStateBenchmark.java

Content: 

@Benchmark @OperationsPerInvocation(mapKeyCount) public void mapEntries(KeyValue keyValue,Blackhole bh) throws Exception {

  keyedStateBackend.setCurrentKey(keyValue.setUpKey);

  Iterable<Map.Entry<Long,Double>> iterable=mapState.entries();

  if (iterable != null) {

    for (    Map.Entry<Long,Double> entry : mapState.entries()) {

      bh.consume(entry.getKey());

      bh.consume(entry.getValue());

    }

  }

}

Location: MapStateBenchmark.java

Content: 

@Benchmark public Double mapGet(KeyValue keyValue) throws Exception {

  keyedStateBackend.setCurrentKey(keyValue.setUpKey);

  return mapState.get(keyValue.mapKey);

}

Location: MapStateBenchmark.java

Content: 

@Benchmark public boolean mapIsEmpty(KeyValue keyValue) throws Exception {

  keyedStateBackend.setCurrentKey(keyValue.setUpKey);

  return mapState.isEmpty();

}

Location: MapStateBenchmark.java

Content: 

@Benchmark @OperationsPerInvocation(mapKeyCount) public void mapIterator(KeyValue keyValue,Blackhole bh) throws Exception {

  keyedStateBackend.setCurrentKey(keyValue.setUpKey);

  Iterator<Map.Entry<Long,Double>> iterator=mapState.iterator();

  while (iterator.hasNext()) {

    Map.Entry<Long,Double> entry=iterator.next();

    bh.consume(entry.getKey());

    bh.consume(entry.getValue());

  }

}

Location: MapStateBenchmark.java

Content: 

@Benchmark @OperationsPerInvocation(mapKeyCount) public void mapKeys(KeyValue keyValue,Blackhole bh) throws Exception {

  keyedStateBackend.setCurrentKey(keyValue.setUpKey);

  for (  Long key : mapState.keys()) {

    bh.consume(key);

  }

}

Location: MapStateBenchmark.java

Content: 

@Benchmark public void mapPutAll(KeyValue keyValue) throws Exception {

  keyedStateBackend.setCurrentKey(keyValue.setUpKey);

  mapState.putAll(dummyMaps);

}

Location: MapStateBenchmark.java

Content: 

@Benchmark public void mapRemove(KeyValue keyValue) throws Exception {

  keyedStateBackend.setCurrentKey(keyValue.setUpKey);

  mapState.remove(keyValue.mapKey);

}

Location: MapStateBenchmark.java

Content: 

@Benchmark public void mapUpdate(KeyValue keyValue) throws Exception {

  keyedStateBackend.setCurrentKey(keyValue.setUpKey);

  mapState.put(keyValue.mapKey,keyValue.mapValue);

}

Location: MapStateBenchmark.java

Content: 

@Benchmark @OperationsPerInvocation(mapKeyCount) public void mapValues(KeyValue keyValue,Blackhole bh) throws Exception {

  keyedStateBackend.setCurrentKey(keyValue.setUpKey);

  for (  Double value : mapState.values()) {

    bh.consume(value);

  }

}

Location: MapStateBenchmark.java

Content: 

@Setup public void setUp() throws Exception {

  keyedStateBackend=createKeyedStateBackend(backendType);

  mapState=getMapState(keyedStateBackend,new MapStateDescriptor<>("mapState",Long.class,Double.class));

  dummyMaps=new HashMap<>(mapKeyCount);

  for (int i=0; i < mapKeyCount; ++i) {

    dummyMaps.put(mapKeys.get(i),random.nextDouble());

  }

  for (int i=0; i < setupKeyCount; ++i) {

    keyedStateBackend.setCurrentKey((long)i);

    for (int j=0; j < mapKeyCount; j++) {

      mapState.put(mapKeys.get(j),random.nextDouble());

    }

  }

  keyIndex=new AtomicInteger();

}

Location: MapStateBenchmark.java

Content: 

@Benchmark public void mapAdd(KeyValue keyValue) throws Exception {

  keyedStateBackend.setCurrentKey(keyValue.newKey);

  mapState.put(keyValue.mapKey,keyValue.mapValue);

}

Location: MapStateBenchmark.java

Content: 

@Benchmark public boolean mapContains(KeyValue keyValue) throws Exception {

  keyedStateBackend.setCurrentKey(keyValue.setUpKey);

  return mapState.contains(keyValue.mapKey << 1);

}

Location: MapStateBenchmark.java

Content: 

@Benchmark @OperationsPerInvocation(mapKeyCount) public void mapEntries(KeyValue keyValue,Blackhole bh) throws Exception {

  keyedStateBackend.setCurrentKey(keyValue.setUpKey);

  Iterable<Map.Entry<Long,Double>> iterable=mapState.entries();

  if (iterable != null) {

    for (    Map.Entry<Long,Double> entry : mapState.entries()) {

      bh.consume(entry.getKey());

      bh.consume(entry.getValue());

    }

  }

}

Location: MapStateBenchmark.java

Content: 

@Benchmark public Double mapGet(KeyValue keyValue) throws Exception {

  keyedStateBackend.setCurrentKey(keyValue.setUpKey);

  return mapState.get(keyValue.mapKey);

}

Location: MapStateBenchmark.java

Content: 

@Benchmark public boolean mapIsEmpty(KeyValue keyValue) throws Exception {

  keyedStateBackend.setCurrentKey(keyValue.setUpKey);

  return mapState.isEmpty();

}

Location: MapStateBenchmark.java

Content: 

@Benchmark @OperationsPerInvocation(mapKeyCount) public void mapIterator(KeyValue keyValue,Blackhole bh) throws Exception {

  keyedStateBackend.setCurrentKey(keyValue.setUpKey);

  Iterator<Map.Entry<Long,Double>> iterator=mapState.iterator();

  while (iterator.hasNext()) {

    Map.Entry<Long,Double> entry=iterator.next();

    bh.consume(entry.getKey());

    bh.consume(entry.getValue());

  }

}

Location: MapStateBenchmark.java

Content: 

@Benchmark @OperationsPerInvocation(mapKeyCount) public void mapKeys(KeyValue keyValue,Blackhole bh) throws Exception {

  keyedStateBackend.setCurrentKey(keyValue.setUpKey);

  for (  Long key : mapState.keys()) {

    bh.consume(key);

  }

}

Location: MapStateBenchmark.java

Content: 

@Benchmark public void mapPutAll(KeyValue keyValue) throws Exception {

  keyedStateBackend.setCurrentKey(keyValue.setUpKey);

  mapState.putAll(dummyMaps);

}

Location: MapStateBenchmark.java

Content: 

@Benchmark public void mapRemove(KeyValue keyValue) throws Exception {

  keyedStateBackend.setCurrentKey(keyValue.setUpKey);

  mapState.remove(keyValue.mapKey);

}

Location: MapStateBenchmark.java

Content: 

@Benchmark public void mapUpdate(KeyValue keyValue) throws Exception {

  keyedStateBackend.setCurrentKey(keyValue.setUpKey);

  mapState.put(keyValue.mapKey,keyValue.mapValue);

}

Location: MapStateBenchmark.java

Content: 

@Benchmark @OperationsPerInvocation(mapKeyCount) public void mapValues(KeyValue keyValue,Blackhole bh) throws Exception {

  keyedStateBackend.setCurrentKey(keyValue.setUpKey);

  for (  Double value : mapState.values()) {

    bh.consume(value);

  }

}

Location: MapStateBenchmark.java

Content: 

@Setup public void setUp() throws Exception {

  keyedStateBackend=createKeyedStateBackend(backendType);

  mapState=getMapState(keyedStateBackend,new MapStateDescriptor<>("mapState",Long.class,Double.class));

  dummyMaps=new HashMap<>(mapKeyCount);

  for (int i=0; i < mapKeyCount; ++i) {

    dummyMaps.put(mapKeys.get(i),random.nextDouble());

  }

  for (int i=0; i < setupKeyCount; ++i) {

    keyedStateBackend.setCurrentKey((long)i);

    for (int j=0; j < mapKeyCount; j++) {

      mapState.put(mapKeys.get(j),random.nextDouble());

    }

  }

  keyIndex=new AtomicInteger();

}

