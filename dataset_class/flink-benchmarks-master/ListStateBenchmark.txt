Location: ListStateBenchmark.java

Content: 

@Benchmark public void listAddAll(KeyValue keyValue) throws Exception {

  keyedStateBackend.setCurrentKey(keyValue.setUpKey);

  listState.addAll(dummyLists);

}

Location: ListStateBenchmark.java

Content: 

@Benchmark public void listAdd(KeyValue keyValue) throws Exception {

  keyedStateBackend.setCurrentKey(keyValue.newKey);

  listState.update(keyValue.listValue);

}

Location: ListStateBenchmark.java

Content: 

@Benchmark public void listAppend(KeyValue keyValue) throws Exception {

  keyedStateBackend.setCurrentKey(keyValue.setUpKey);

  listState.add(keyValue.value);

}

Location: ListStateBenchmark.java

Content: 

@Benchmark public void listGetAndIterate(KeyValue keyValue,Blackhole bh) throws Exception {

  keyedStateBackend.setCurrentKey(keyValue.setUpKey);

  Iterable<Long> iterable=listState.get();

  for (  Long value : iterable) {

    bh.consume(value);

  }

}

Location: ListStateBenchmark.java

Content: 

@Benchmark public Iterable<Long> listGet(KeyValue keyValue) throws Exception {

  keyedStateBackend.setCurrentKey(keyValue.setUpKey);

  return listState.get();

}

Location: ListStateBenchmark.java

Content: 

@Benchmark public void listUpdate(KeyValue keyValue) throws Exception {

  keyedStateBackend.setCurrentKey(keyValue.setUpKey);

  listState.update(keyValue.listValue);

}

Location: ListStateBenchmark.java

Content: 

@Setup(Level.Iteration) public void setUpPerIteration() throws Exception {

  for (int i=0; i < setupKeyCount; ++i) {

    keyedStateBackend.setCurrentKey((long)i);

    listState.add(random.nextLong());

  }

  if (keyedStateBackend instanceof RocksDBKeyedStateBackend) {

    RocksDBKeyedStateBackend<Long> rocksDBKeyedStateBackend=(RocksDBKeyedStateBackend<Long>)keyedStateBackend;

    compactState(rocksDBKeyedStateBackend,STATE_DESC);

  }

}

Location: ListStateBenchmark.java

Content: 

@TearDown(Level.Iteration) public void tearDownPerIteration() throws Exception {

  applyToAllKeys(keyedStateBackend,STATE_DESC,(k,state) -> {

    keyedStateBackend.setCurrentKey(k);

    state.clear();

  }

);

  if (keyedStateBackend instanceof RocksDBKeyedStateBackend) {

    RocksDBKeyedStateBackend<Long> rocksDBKeyedStateBackend=(RocksDBKeyedStateBackend<Long>)keyedStateBackend;

    compactState(rocksDBKeyedStateBackend,STATE_DESC);

  }

 else {

    System.gc();

  }

  Thread.sleep(1000);

}

Location: ListStateBenchmark.java

Content: 

@Benchmark public void listAddAll(KeyValue keyValue) throws Exception {

  keyedStateBackend.setCurrentKey(keyValue.setUpKey);

  listState.addAll(dummyLists);

}

Location: ListStateBenchmark.java

Content: 

@Benchmark public void listAdd(KeyValue keyValue) throws Exception {

  keyedStateBackend.setCurrentKey(keyValue.newKey);

  listState.update(keyValue.listValue);

}

Location: ListStateBenchmark.java

Content: 

@Benchmark public void listAppend(KeyValue keyValue) throws Exception {

  keyedStateBackend.setCurrentKey(keyValue.setUpKey);

  listState.add(keyValue.value);

}

Location: ListStateBenchmark.java

Content: 

@Benchmark public void listGetAndIterate(KeyValue keyValue,Blackhole bh) throws Exception {

  keyedStateBackend.setCurrentKey(keyValue.setUpKey);

  Iterable<Long> iterable=listState.get();

  for (  Long value : iterable) {

    bh.consume(value);

  }

}

Location: ListStateBenchmark.java

Content: 

@Benchmark public Iterable<Long> listGet(KeyValue keyValue) throws Exception {

  keyedStateBackend.setCurrentKey(keyValue.setUpKey);

  return listState.get();

}

Location: ListStateBenchmark.java

Content: 

@Benchmark public void listUpdate(KeyValue keyValue) throws Exception {

  keyedStateBackend.setCurrentKey(keyValue.setUpKey);

  listState.update(keyValue.listValue);

}

Location: ListStateBenchmark.java

Content: 

@Setup(Level.Iteration) public void setUpPerIteration() throws Exception {

  for (int i=0; i < setupKeyCount; ++i) {

    keyedStateBackend.setCurrentKey((long)i);

    listState.add(random.nextLong());

  }

  if (keyedStateBackend instanceof RocksDBKeyedStateBackend) {

    RocksDBKeyedStateBackend<Long> rocksDBKeyedStateBackend=(RocksDBKeyedStateBackend<Long>)keyedStateBackend;

    compactState(rocksDBKeyedStateBackend,STATE_DESC);

  }

}

Location: ListStateBenchmark.java

Content: 

@TearDown(Level.Iteration) public void tearDownPerIteration() throws Exception {

  applyToAllKeys(keyedStateBackend,STATE_DESC,(k,state) -> {

    keyedStateBackend.setCurrentKey(k);

    state.clear();

  }

);

  if (keyedStateBackend instanceof RocksDBKeyedStateBackend) {

    RocksDBKeyedStateBackend<Long> rocksDBKeyedStateBackend=(RocksDBKeyedStateBackend<Long>)keyedStateBackend;

    compactState(rocksDBKeyedStateBackend,STATE_DESC);

  }

 else {

    System.gc();

  }

  Thread.sleep(1000);

}

