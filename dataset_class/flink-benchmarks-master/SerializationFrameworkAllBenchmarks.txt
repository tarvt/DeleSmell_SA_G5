Location: SerializationFrameworkAllBenchmarks.java

Content: 

@Benchmark @OperationsPerInvocation(value=RECORDS_PER_INVOCATION) public void serializerAvroGeneric(FlinkEnvironmentContext context) throws Exception {

  StreamExecutionEnvironment env=context.env;

  env.setParallelism(4);

  Schema schema=AvroGenericRecordSource.loadSchema();

  env.addSource(new AvroGenericRecordSource(RECORDS_PER_INVOCATION,10,schema)).rebalance().addSink(new DiscardingSink<>());

  env.execute();

}

Location: SerializationFrameworkAllBenchmarks.java

Content: 

@Benchmark @OperationsPerInvocation(value=RECORDS_PER_INVOCATION) public void serializerAvroReflect(FlinkEnvironmentContext context) throws Exception {

  StreamExecutionEnvironment env=context.env;

  env.setParallelism(4);

  env.getConfig().enableForceAvro();

  env.addSource(new PojoSource(RECORDS_PER_INVOCATION,10)).rebalance().addSink(new DiscardingSink<>());

  env.execute();

}

Location: SerializationFrameworkAllBenchmarks.java

Content: 

@Benchmark @OperationsPerInvocation(value=SerializationFrameworkMiniBenchmarks.RECORDS_PER_INVOCATION) public void serializerKryoProtobuf(FlinkEnvironmentContext context) throws Exception {

  StreamExecutionEnvironment env=context.env;

  env.setParallelism(4);

  ExecutionConfig executionConfig=env.getConfig();

  executionConfig.enableForceKryo();

  executionConfig.registerTypeWithKryoSerializer(org.apache.flink.benchmark.protobuf.MyPojoOuterClass.MyPojo.class,ProtobufSerializer.class);

  executionConfig.registerTypeWithKryoSerializer(org.apache.flink.benchmark.protobuf.MyPojoOuterClass.MyOperation.class,ProtobufSerializer.class);

  env.addSource(new ProtobufPojoSource(RECORDS_PER_INVOCATION,10)).rebalance().addSink(new DiscardingSink<>());

  env.execute();

}

Location: SerializationFrameworkAllBenchmarks.java

Content: 

@Benchmark @OperationsPerInvocation(value=SerializationFrameworkMiniBenchmarks.RECORDS_PER_INVOCATION) public void serializerKryoThrift(FlinkEnvironmentContext context) throws Exception {

  StreamExecutionEnvironment env=context.env;

  env.setParallelism(4);

  ExecutionConfig executionConfig=env.getConfig();

  executionConfig.enableForceKryo();

  executionConfig.addDefaultKryoSerializer(org.apache.flink.benchmark.thrift.MyPojo.class,TBaseSerializer.class);

  executionConfig.addDefaultKryoSerializer(org.apache.flink.benchmark.thrift.MyOperation.class,TBaseSerializer.class);

  env.addSource(new ThriftPojoSource(RECORDS_PER_INVOCATION,10)).rebalance().addSink(new DiscardingSink<>());

  env.execute();

}

Location: SerializationFrameworkAllBenchmarks.java

Content: 

@Benchmark @OperationsPerInvocation(value=RECORDS_PER_INVOCATION) public void serializerKryoWithoutRegistration(FlinkEnvironmentContext context) throws Exception {

  StreamExecutionEnvironment env=context.env;

  env.setParallelism(4);

  env.getConfig().enableForceKryo();

  env.addSource(new PojoSource(RECORDS_PER_INVOCATION,10)).rebalance().addSink(new DiscardingSink<>());

  env.execute();

}

Location: SerializationFrameworkAllBenchmarks.java

Content: 

@Benchmark @OperationsPerInvocation(value=RECORDS_PER_INVOCATION) public void serializerPojoWithoutRegistration(FlinkEnvironmentContext context) throws Exception {

  StreamExecutionEnvironment env=context.env;

  env.setParallelism(4);

  env.addSource(new PojoSource(RECORDS_PER_INVOCATION,10)).rebalance().addSink(new DiscardingSink<>());

  env.execute();

}

Location: SerializationFrameworkAllBenchmarks.java

Content: 

@Benchmark @OperationsPerInvocation(value=SerializationFrameworkMiniBenchmarks.RECORDS_PER_INVOCATION) public void serializerScalaADT(FlinkEnvironmentContext context) throws Exception {

  StreamExecutionEnvironment env=context.env;

  env.setParallelism(4);

  env.addSource(new ScalaADTSource(RECORDS_PER_INVOCATION),ScalaADTSource.adtTypeInfo()).rebalance().addSink(new DiscardingSink<>());

  env.execute();

}

Location: SerializationFrameworkAllBenchmarks.java

Content: 

@Benchmark @OperationsPerInvocation(value=RECORDS_PER_INVOCATION) public void serializerAvroGeneric(FlinkEnvironmentContext context) throws Exception {

  StreamExecutionEnvironment env=context.env;

  env.setParallelism(4);

  Schema schema=AvroGenericRecordSource.loadSchema();

  env.addSource(new AvroGenericRecordSource(RECORDS_PER_INVOCATION,10,schema)).rebalance().addSink(new DiscardingSink<>());

  env.execute();

}

Location: SerializationFrameworkAllBenchmarks.java

Content: 

@Benchmark @OperationsPerInvocation(value=RECORDS_PER_INVOCATION) public void serializerAvroReflect(FlinkEnvironmentContext context) throws Exception {

  StreamExecutionEnvironment env=context.env;

  env.setParallelism(4);

  env.getConfig().enableForceAvro();

  env.addSource(new PojoSource(RECORDS_PER_INVOCATION,10)).rebalance().addSink(new DiscardingSink<>());

  env.execute();

}

Location: SerializationFrameworkAllBenchmarks.java

Content: 

@Benchmark @OperationsPerInvocation(value=SerializationFrameworkMiniBenchmarks.RECORDS_PER_INVOCATION) public void serializerKryoProtobuf(FlinkEnvironmentContext context) throws Exception {

  StreamExecutionEnvironment env=context.env;

  env.setParallelism(4);

  ExecutionConfig executionConfig=env.getConfig();

  executionConfig.enableForceKryo();

  executionConfig.registerTypeWithKryoSerializer(org.apache.flink.benchmark.protobuf.MyPojoOuterClass.MyPojo.class,ProtobufSerializer.class);

  executionConfig.registerTypeWithKryoSerializer(org.apache.flink.benchmark.protobuf.MyPojoOuterClass.MyOperation.class,ProtobufSerializer.class);

  env.addSource(new ProtobufPojoSource(RECORDS_PER_INVOCATION,10)).rebalance().addSink(new DiscardingSink<>());

  env.execute();

}

Location: SerializationFrameworkAllBenchmarks.java

Content: 

@Benchmark @OperationsPerInvocation(value=SerializationFrameworkMiniBenchmarks.RECORDS_PER_INVOCATION) public void serializerKryoThrift(FlinkEnvironmentContext context) throws Exception {

  StreamExecutionEnvironment env=context.env;

  env.setParallelism(4);

  ExecutionConfig executionConfig=env.getConfig();

  executionConfig.enableForceKryo();

  executionConfig.addDefaultKryoSerializer(org.apache.flink.benchmark.thrift.MyPojo.class,TBaseSerializer.class);

  executionConfig.addDefaultKryoSerializer(org.apache.flink.benchmark.thrift.MyOperation.class,TBaseSerializer.class);

  env.addSource(new ThriftPojoSource(RECORDS_PER_INVOCATION,10)).rebalance().addSink(new DiscardingSink<>());

  env.execute();

}

Location: SerializationFrameworkAllBenchmarks.java

Content: 

@Benchmark @OperationsPerInvocation(value=RECORDS_PER_INVOCATION) public void serializerKryoWithoutRegistration(FlinkEnvironmentContext context) throws Exception {

  StreamExecutionEnvironment env=context.env;

  env.setParallelism(4);

  env.getConfig().enableForceKryo();

  env.addSource(new PojoSource(RECORDS_PER_INVOCATION,10)).rebalance().addSink(new DiscardingSink<>());

  env.execute();

}

Location: SerializationFrameworkAllBenchmarks.java

Content: 

@Benchmark @OperationsPerInvocation(value=RECORDS_PER_INVOCATION) public void serializerPojoWithoutRegistration(FlinkEnvironmentContext context) throws Exception {

  StreamExecutionEnvironment env=context.env;

  env.setParallelism(4);

  env.addSource(new PojoSource(RECORDS_PER_INVOCATION,10)).rebalance().addSink(new DiscardingSink<>());

  env.execute();

}

Location: SerializationFrameworkAllBenchmarks.java

Content: 

@Benchmark @OperationsPerInvocation(value=SerializationFrameworkMiniBenchmarks.RECORDS_PER_INVOCATION) public void serializerScalaADT(FlinkEnvironmentContext context) throws Exception {

  StreamExecutionEnvironment env=context.env;

  env.setParallelism(4);

  env.addSource(new ScalaADTSource(RECORDS_PER_INVOCATION),ScalaADTSource.adtTypeInfo()).rebalance().addSink(new DiscardingSink<>());

  env.execute();

}

