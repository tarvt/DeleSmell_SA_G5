Location: SortingBoundedInputBenchmarks.java

Content: 

@Benchmark @OperationsPerInvocation(value=RECORDS_PER_INVOCATION) public void sortedMultiInput(SortingInputContext context) throws Exception {

  StreamExecutionEnvironment env=context.env;

  KeyedStream<Integer,Object> elements1=env.fromParallelCollection(new InputGenerator(RECORDS_PER_INVOCATION / 3),BasicTypeInfo.INT_TYPE_INFO).keyBy(el -> el);

  KeyedStream<Integer,Object> elements2=env.fromParallelCollection(new InputGenerator(RECORDS_PER_INVOCATION / 3),BasicTypeInfo.INT_TYPE_INFO).keyBy(el -> el);

  KeyedStream<Integer,Object> elements3=env.fromParallelCollection(new InputGenerator(RECORDS_PER_INVOCATION / 3),BasicTypeInfo.INT_TYPE_INFO).keyBy(el -> el);

  KeyedMultipleInputTransformation<Long> assertingTransformation=new KeyedMultipleInputTransformation<>("Asserting operator",new AssertingThreeInputOperatorFactory(),BasicTypeInfo.LONG_TYPE_INFO,-1,BasicTypeInfo.INT_TYPE_INFO);

  assertingTransformation.addInput(elements1.getTransformation(),elements1.getKeySelector());

  assertingTransformation.addInput(elements2.getTransformation(),elements2.getKeySelector());

  assertingTransformation.addInput(elements3.getTransformation(),elements3.getKeySelector());

  env.addOperator(assertingTransformation);

  DataStream<Long> counts=new DataStream<>(env,assertingTransformation);

  counts.addSink(new DiscardingSink<>());

  context.execute();

}

Location: SortingBoundedInputBenchmarks.java

Content: 

@Benchmark @OperationsPerInvocation(value=RECORDS_PER_INVOCATION) public void sortedOneInput(SortingInputContext context) throws Exception {

  StreamExecutionEnvironment env=context.env;

  DataStreamSource<Integer> elements=env.fromParallelCollection(new InputGenerator(RECORDS_PER_INVOCATION),BasicTypeInfo.INT_TYPE_INFO);

  SingleOutputStreamOperator<Long> counts=elements.keyBy(element -> element).transform("Asserting operator",BasicTypeInfo.LONG_TYPE_INFO,new AssertingOperator());

  counts.addSink(new DiscardingSink<>());

  context.execute();

}

Location: SortingBoundedInputBenchmarks.java

Content: 

@Benchmark @OperationsPerInvocation(value=RECORDS_PER_INVOCATION) public void sortedTwoInput(SortingInputContext context) throws Exception {

  StreamExecutionEnvironment env=context.env;

  DataStreamSource<Integer> elements1=env.fromParallelCollection(new InputGenerator(RECORDS_PER_INVOCATION / 2),BasicTypeInfo.INT_TYPE_INFO);

  DataStreamSource<Integer> elements2=env.fromParallelCollection(new InputGenerator(RECORDS_PER_INVOCATION / 2),BasicTypeInfo.INT_TYPE_INFO);

  SingleOutputStreamOperator<Long> counts=elements1.connect(elements2).keyBy(element -> element,element -> element).transform("Asserting operator",BasicTypeInfo.LONG_TYPE_INFO,new AssertingTwoInputOperator());

  counts.addSink(new DiscardingSink<>());

  context.execute();

}

Location: SortingBoundedInputBenchmarks.java

Content: 

@Benchmark @OperationsPerInvocation(value=RECORDS_PER_INVOCATION) public void sortedMultiInput(SortingInputContext context) throws Exception {

  StreamExecutionEnvironment env=context.env;

  KeyedStream<Integer,Object> elements1=env.fromParallelCollection(new InputGenerator(RECORDS_PER_INVOCATION / 3),BasicTypeInfo.INT_TYPE_INFO).keyBy(el -> el);

  KeyedStream<Integer,Object> elements2=env.fromParallelCollection(new InputGenerator(RECORDS_PER_INVOCATION / 3),BasicTypeInfo.INT_TYPE_INFO).keyBy(el -> el);

  KeyedStream<Integer,Object> elements3=env.fromParallelCollection(new InputGenerator(RECORDS_PER_INVOCATION / 3),BasicTypeInfo.INT_TYPE_INFO).keyBy(el -> el);

  KeyedMultipleInputTransformation<Long> assertingTransformation=new KeyedMultipleInputTransformation<>("Asserting operator",new AssertingThreeInputOperatorFactory(),BasicTypeInfo.LONG_TYPE_INFO,-1,BasicTypeInfo.INT_TYPE_INFO);

  assertingTransformation.addInput(elements1.getTransformation(),elements1.getKeySelector());

  assertingTransformation.addInput(elements2.getTransformation(),elements2.getKeySelector());

  assertingTransformation.addInput(elements3.getTransformation(),elements3.getKeySelector());

  env.addOperator(assertingTransformation);

  DataStream<Long> counts=new DataStream<>(env,assertingTransformation);

  counts.addSink(new DiscardingSink<>());

  context.execute();

}

Location: SortingBoundedInputBenchmarks.java

Content: 

@Benchmark @OperationsPerInvocation(value=RECORDS_PER_INVOCATION) public void sortedOneInput(SortingInputContext context) throws Exception {

  StreamExecutionEnvironment env=context.env;

  DataStreamSource<Integer> elements=env.fromParallelCollection(new InputGenerator(RECORDS_PER_INVOCATION),BasicTypeInfo.INT_TYPE_INFO);

  SingleOutputStreamOperator<Long> counts=elements.keyBy(element -> element).transform("Asserting operator",BasicTypeInfo.LONG_TYPE_INFO,new AssertingOperator());

  counts.addSink(new DiscardingSink<>());

  context.execute();

}

Location: SortingBoundedInputBenchmarks.java

Content: 

@Benchmark @OperationsPerInvocation(value=RECORDS_PER_INVOCATION) public void sortedTwoInput(SortingInputContext context) throws Exception {

  StreamExecutionEnvironment env=context.env;

  DataStreamSource<Integer> elements1=env.fromParallelCollection(new InputGenerator(RECORDS_PER_INVOCATION / 2),BasicTypeInfo.INT_TYPE_INFO);

  DataStreamSource<Integer> elements2=env.fromParallelCollection(new InputGenerator(RECORDS_PER_INVOCATION / 2),BasicTypeInfo.INT_TYPE_INFO);

  SingleOutputStreamOperator<Long> counts=elements1.connect(elements2).keyBy(element -> element,element -> element).transform("Asserting operator",BasicTypeInfo.LONG_TYPE_INFO,new AssertingTwoInputOperator());

  counts.addSink(new DiscardingSink<>());

  context.execute();

}

