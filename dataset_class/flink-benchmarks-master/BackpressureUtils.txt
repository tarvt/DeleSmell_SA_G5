Location: BackpressureUtils.java

Content: 

private static RestClusterClient<StandaloneClusterId> createClient(int port,Configuration clientConfiguration) throws Exception {

  final Configuration clientConfig=new Configuration();

  clientConfig.addAll(clientConfiguration);

  clientConfig.setInteger(RestOptions.PORT,port);

  return new RestClusterClient<>(clientConfig,StandaloneClusterId.getInstance());

}

Location: BackpressureUtils.java

Content: 

private static JobVertexBackPressureInfo.VertexBackPressureLevel queryBackpressure(JobID jobID,JobVertexID vertexID,RestClusterClient restClient,URI restAddress){

  try {

    final JobVertexMessageParameters metricsParameters=new JobVertexMessageParameters();

    metricsParameters.jobPathParameter.resolve(jobID);

    metricsParameters.jobVertexIdPathParameter.resolve(vertexID);

    return ((JobVertexBackPressureInfo)restClient.sendRequest(JobVertexBackPressureHeaders.getInstance(),metricsParameters,EmptyRequestBody.getInstance()).get()).getBackpressureLevel();

  }

 catch (  Exception e) {

    throw new FlinkRuntimeException(e);

  }

}

Location: BackpressureUtils.java

Content: 

static void waitForBackpressure(JobID jobID,List<JobVertexID> sourceId,URI restAddress,Configuration clientConfiguration) throws Exception {

  RestClusterClient<StandaloneClusterId> restClient=createClient(restAddress.getPort(),clientConfiguration);

  Deadline deadline=Deadline.fromNow(Duration.ofSeconds(30));

  boolean allBackpressured;

  Thread.sleep(100);

  do {

    allBackpressured=sourceId.stream().map(id -> queryBackpressure(jobID,id,restClient,restAddress)).allMatch(level -> level == JobVertexBackPressureInfo.VertexBackPressureLevel.HIGH);

  }

 while (!allBackpressured && deadline.hasTimeLeft());

  if (!allBackpressured) {

    throw new FlinkRuntimeException("Could not trigger backpressure for the job in given time.");

  }

}

Location: BackpressureUtils.java

Content: 

private static RestClusterClient<StandaloneClusterId> createClient(int port,Configuration clientConfiguration) throws Exception {

  final Configuration clientConfig=new Configuration();

  clientConfig.addAll(clientConfiguration);

  clientConfig.setInteger(RestOptions.PORT,port);

  return new RestClusterClient<>(clientConfig,StandaloneClusterId.getInstance());

}

Location: BackpressureUtils.java

Content: 

private static JobVertexBackPressureInfo.VertexBackPressureLevel queryBackpressure(JobID jobID,JobVertexID vertexID,RestClusterClient restClient,URI restAddress){

  try {

    final JobVertexMessageParameters metricsParameters=new JobVertexMessageParameters();

    metricsParameters.jobPathParameter.resolve(jobID);

    metricsParameters.jobVertexIdPathParameter.resolve(vertexID);

    return ((JobVertexBackPressureInfo)restClient.sendRequest(JobVertexBackPressureHeaders.getInstance(),metricsParameters,EmptyRequestBody.getInstance()).get()).getBackpressureLevel();

  }

 catch (  Exception e) {

    throw new FlinkRuntimeException(e);

  }

}

Location: BackpressureUtils.java

Content: 

static void waitForBackpressure(JobID jobID,List<JobVertexID> sourceId,URI restAddress,Configuration clientConfiguration) throws Exception {

  RestClusterClient<StandaloneClusterId> restClient=createClient(restAddress.getPort(),clientConfiguration);

  Deadline deadline=Deadline.fromNow(Duration.ofSeconds(30));

  boolean allBackpressured;

  Thread.sleep(100);

  do {

    allBackpressured=sourceId.stream().map(id -> queryBackpressure(jobID,id,restClient,restAddress)).allMatch(level -> level == JobVertexBackPressureInfo.VertexBackPressureLevel.HIGH);

  }

 while (!allBackpressured && deadline.hasTimeLeft());

  if (!allBackpressured) {

    throw new FlinkRuntimeException("Could not trigger backpressure for the job in given time.");

  }

}

