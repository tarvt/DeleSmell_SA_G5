Location: MyOperation.java

Content: 

@Override public int compareTo(MyOperation other){

  if (!getClass().equals(other.getClass())) {

    return getClass().getName().compareTo(other.getClass().getName());

  }

  int lastComparison=0;

  lastComparison=java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());

  if (lastComparison != 0) {

    return lastComparison;

  }

  if (isSetId()) {

    lastComparison=org.apache.thrift.TBaseHelper.compareTo(this.id,other.id);

    if (lastComparison != 0) {

      return lastComparison;

    }

  }

  lastComparison=java.lang.Boolean.valueOf(isSetName()).compareTo(other.isSetName());

  if (lastComparison != 0) {

    return lastComparison;

  }

  if (isSetName()) {

    lastComparison=org.apache.thrift.TBaseHelper.compareTo(this.name,other.name);

    if (lastComparison != 0) {

      return lastComparison;

    }

  }

  return 0;

}

Location: MyOperation.java

Content: 

public boolean equals(MyOperation that){

  if (that == null)   return false;

  if (this == that)   return true;

  boolean this_present_id=true;

  boolean that_present_id=true;

  if (this_present_id || that_present_id) {

    if (!(this_present_id && that_present_id))     return false;

    if (this.id != that.id)     return false;

  }

  boolean this_present_name=true && this.isSetName();

  boolean that_present_name=true && that.isSetName();

  if (this_present_name || that_present_name) {

    if (!(this_present_name && that_present_name))     return false;

    if (!this.name.equals(that.name))     return false;

  }

  return true;

}

Location: MyOperation.java

Content: 

public MyOperation(){

}

Location: MyOperation.java

Content: 

public MyOperation(int id,java.lang.String name){

  this();

  this.id=id;

  setIdIsSet(true);

  this.name=name;

}

Location: MyOperation.java

Content: 

/** 

 * Performs a deep copy on <i>other</i>.

 */

public MyOperation(MyOperation other){

  __isset_bitfield=other.__isset_bitfield;

  this.id=other.id;

  if (other.isSetName()) {

    this.name=other.name;

  }

}

Location: MyOperation.java

Content: 

@Override public int compareTo(MyOperation other){

  if (!getClass().equals(other.getClass())) {

    return getClass().getName().compareTo(other.getClass().getName());

  }

  int lastComparison=0;

  lastComparison=java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());

  if (lastComparison != 0) {

    return lastComparison;

  }

  if (isSetId()) {

    lastComparison=org.apache.thrift.TBaseHelper.compareTo(this.id,other.id);

    if (lastComparison != 0) {

      return lastComparison;

    }

  }

  lastComparison=java.lang.Boolean.valueOf(isSetName()).compareTo(other.isSetName());

  if (lastComparison != 0) {

    return lastComparison;

  }

  if (isSetName()) {

    lastComparison=org.apache.thrift.TBaseHelper.compareTo(this.name,other.name);

    if (lastComparison != 0) {

      return lastComparison;

    }

  }

  return 0;

}

Location: MyOperation.java

Content: 

public boolean equals(MyOperation that){

  if (that == null)   return false;

  if (this == that)   return true;

  boolean this_present_id=true;

  boolean that_present_id=true;

  if (this_present_id || that_present_id) {

    if (!(this_present_id && that_present_id))     return false;

    if (this.id != that.id)     return false;

  }

  boolean this_present_name=true && this.isSetName();

  boolean that_present_name=true && that.isSetName();

  if (this_present_name || that_present_name) {

    if (!(this_present_name && that_present_name))     return false;

    if (!this.name.equals(that.name))     return false;

  }

  return true;

}

Location: MyOperation.java

Content: 

public MyOperation(){

}

Location: MyOperation.java

Content: 

public MyOperation(int id,java.lang.String name){

  this();

  this.id=id;

  setIdIsSet(true);

  this.name=name;

}

Location: MyOperation.java

Content: 

/** 

 * Performs a deep copy on <i>other</i>.

 */

public MyOperation(MyOperation other){

  __isset_bitfield=other.__isset_bitfield;

  this.id=other.id;

  if (other.isSetName()) {

    this.name=other.name;

  }

}

