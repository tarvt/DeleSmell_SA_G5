Location: SerializationFrameworkMiniBenchmarks.java

Content: 

@Benchmark @OperationsPerInvocation(value=SerializationFrameworkMiniBenchmarks.RECORDS_PER_INVOCATION) public void serializerAvro(FlinkEnvironmentContext context) throws Exception {

  StreamExecutionEnvironment env=context.env;

  env.setParallelism(4);

  env.addSource(new AvroPojoSource(RECORDS_PER_INVOCATION,10)).rebalance().addSink(new DiscardingSink<>());

  env.execute();

}

Location: SerializationFrameworkMiniBenchmarks.java

Content: 

@Benchmark @OperationsPerInvocation(value=SerializationFrameworkMiniBenchmarks.RECORDS_PER_INVOCATION) public void serializerHeavyString(FlinkEnvironmentContext context) throws Exception {

  StreamExecutionEnvironment env=context.env;

  env.setParallelism(1);

  ExecutionConfig executionConfig=env.getConfig();

  executionConfig.registerPojoType(MyPojo.class);

  executionConfig.registerPojoType(MyOperation.class);

  env.addSource(new LongStringSource(RECORDS_PER_INVOCATION,12)).rebalance().addSink(new DiscardingSink<>());

  env.execute();

}

Location: SerializationFrameworkMiniBenchmarks.java

Content: 

@Benchmark @OperationsPerInvocation(value=SerializationFrameworkMiniBenchmarks.RECORDS_PER_INVOCATION) public void serializerKryo(FlinkEnvironmentContext context) throws Exception {

  StreamExecutionEnvironment env=context.env;

  env.setParallelism(4);

  ExecutionConfig executionConfig=env.getConfig();

  executionConfig.enableForceKryo();

  executionConfig.registerKryoType(MyPojo.class);

  executionConfig.registerKryoType(MyOperation.class);

  env.addSource(new PojoSource(RECORDS_PER_INVOCATION,10)).rebalance().addSink(new DiscardingSink<>());

  env.execute();

}

Location: SerializationFrameworkMiniBenchmarks.java

Content: 

@Benchmark @OperationsPerInvocation(value=SerializationFrameworkMiniBenchmarks.RECORDS_PER_INVOCATION) public void serializerPojo(FlinkEnvironmentContext context) throws Exception {

  StreamExecutionEnvironment env=context.env;

  env.setParallelism(4);

  ExecutionConfig executionConfig=env.getConfig();

  executionConfig.registerPojoType(MyPojo.class);

  executionConfig.registerPojoType(MyOperation.class);

  env.addSource(new PojoSource(RECORDS_PER_INVOCATION,10)).rebalance().addSink(new DiscardingSink<>());

  env.execute();

}

Location: SerializationFrameworkMiniBenchmarks.java

Content: 

@Benchmark @OperationsPerInvocation(value=SerializationFrameworkMiniBenchmarks.RECORDS_PER_INVOCATION) public void serializerRow(FlinkEnvironmentContext context) throws Exception {

  StreamExecutionEnvironment env=context.env;

  env.setParallelism(4);

  env.addSource(new RowSource(RECORDS_PER_INVOCATION,10)).rebalance().addSink(new DiscardingSink<>());

  env.execute();

}

Location: SerializationFrameworkMiniBenchmarks.java

Content: 

@Benchmark @OperationsPerInvocation(value=SerializationFrameworkMiniBenchmarks.RECORDS_PER_INVOCATION) public void serializerTuple(FlinkEnvironmentContext context) throws Exception {

  StreamExecutionEnvironment env=context.env;

  env.setParallelism(4);

  env.addSource(new TupleSource(RECORDS_PER_INVOCATION,10)).rebalance().addSink(new DiscardingSink<>());

  env.execute();

}

Location: SerializationFrameworkMiniBenchmarks.java

Content: 

@Benchmark @OperationsPerInvocation(value=SerializationFrameworkMiniBenchmarks.RECORDS_PER_INVOCATION) public void serializerAvro(FlinkEnvironmentContext context) throws Exception {

  StreamExecutionEnvironment env=context.env;

  env.setParallelism(4);

  env.addSource(new AvroPojoSource(RECORDS_PER_INVOCATION,10)).rebalance().addSink(new DiscardingSink<>());

  env.execute();

}

Location: SerializationFrameworkMiniBenchmarks.java

Content: 

@Benchmark @OperationsPerInvocation(value=SerializationFrameworkMiniBenchmarks.RECORDS_PER_INVOCATION) public void serializerHeavyString(FlinkEnvironmentContext context) throws Exception {

  StreamExecutionEnvironment env=context.env;

  env.setParallelism(1);

  ExecutionConfig executionConfig=env.getConfig();

  executionConfig.registerPojoType(MyPojo.class);

  executionConfig.registerPojoType(MyOperation.class);

  env.addSource(new LongStringSource(RECORDS_PER_INVOCATION,12)).rebalance().addSink(new DiscardingSink<>());

  env.execute();

}

Location: SerializationFrameworkMiniBenchmarks.java

Content: 

@Benchmark @OperationsPerInvocation(value=SerializationFrameworkMiniBenchmarks.RECORDS_PER_INVOCATION) public void serializerKryo(FlinkEnvironmentContext context) throws Exception {

  StreamExecutionEnvironment env=context.env;

  env.setParallelism(4);

  ExecutionConfig executionConfig=env.getConfig();

  executionConfig.enableForceKryo();

  executionConfig.registerKryoType(MyPojo.class);

  executionConfig.registerKryoType(MyOperation.class);

  env.addSource(new PojoSource(RECORDS_PER_INVOCATION,10)).rebalance().addSink(new DiscardingSink<>());

  env.execute();

}

Location: SerializationFrameworkMiniBenchmarks.java

Content: 

@Benchmark @OperationsPerInvocation(value=SerializationFrameworkMiniBenchmarks.RECORDS_PER_INVOCATION) public void serializerPojo(FlinkEnvironmentContext context) throws Exception {

  StreamExecutionEnvironment env=context.env;

  env.setParallelism(4);

  ExecutionConfig executionConfig=env.getConfig();

  executionConfig.registerPojoType(MyPojo.class);

  executionConfig.registerPojoType(MyOperation.class);

  env.addSource(new PojoSource(RECORDS_PER_INVOCATION,10)).rebalance().addSink(new DiscardingSink<>());

  env.execute();

}

Location: SerializationFrameworkMiniBenchmarks.java

Content: 

@Benchmark @OperationsPerInvocation(value=SerializationFrameworkMiniBenchmarks.RECORDS_PER_INVOCATION) public void serializerRow(FlinkEnvironmentContext context) throws Exception {

  StreamExecutionEnvironment env=context.env;

  env.setParallelism(4);

  env.addSource(new RowSource(RECORDS_PER_INVOCATION,10)).rebalance().addSink(new DiscardingSink<>());

  env.execute();

}

Location: SerializationFrameworkMiniBenchmarks.java

Content: 

@Benchmark @OperationsPerInvocation(value=SerializationFrameworkMiniBenchmarks.RECORDS_PER_INVOCATION) public void serializerTuple(FlinkEnvironmentContext context) throws Exception {

  StreamExecutionEnvironment env=context.env;

  env.setParallelism(4);

  env.addSource(new TupleSource(RECORDS_PER_INVOCATION,10)).rebalance().addSink(new DiscardingSink<>());

  env.execute();

}

