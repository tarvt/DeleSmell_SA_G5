Location: AsyncWaitOperatorBenchmark.java

Content: 

@Benchmark public void asyncWait(FlinkEnvironmentContext context) throws Exception {

  StreamExecutionEnvironment env=context.env;

  env.enableCheckpointing(CHECKPOINT_INTERVAL_MS);

  env.setParallelism(1);

  DataStreamSource<Long> source=env.addSource(new LongSource(RECORDS_PER_INVOCATION));

  DataStream<Long> result=createAsyncOperator(source);

  result.addSink(new DiscardingSink<>());

  env.execute();

}

Location: AsyncWaitOperatorBenchmark.java

Content: 

private DataStream<Long> createAsyncOperator(DataStreamSource<Long> source){

switch (outputMode) {

case ORDERED:

    return AsyncDataStream.orderedWait(source,new BenchmarkAsyncFunctionExecutor(),0,TimeUnit.MILLISECONDS);

case UNORDERED:

  return AsyncDataStream.unorderedWait(source,new BenchmarkAsyncFunctionExecutor(),0,TimeUnit.MILLISECONDS);

default :

throw new UnsupportedOperationException("Unknown mode");

}

}

Location: AsyncWaitOperatorBenchmark.java

Content: 

@Benchmark public void asyncWait(FlinkEnvironmentContext context) throws Exception {

  StreamExecutionEnvironment env=context.env;

  env.enableCheckpointing(CHECKPOINT_INTERVAL_MS);

  env.setParallelism(1);

  DataStreamSource<Long> source=env.addSource(new LongSource(RECORDS_PER_INVOCATION));

  DataStream<Long> result=createAsyncOperator(source);

  result.addSink(new DiscardingSink<>());

  env.execute();

}

Location: AsyncWaitOperatorBenchmark.java

Content: 

private DataStream<Long> createAsyncOperator(DataStreamSource<Long> source){

switch (outputMode) {

case ORDERED:

    return AsyncDataStream.orderedWait(source,new BenchmarkAsyncFunctionExecutor(),0,TimeUnit.MILLISECONDS);

case UNORDERED:

  return AsyncDataStream.unorderedWait(source,new BenchmarkAsyncFunctionExecutor(),0,TimeUnit.MILLISECONDS);

default :

throw new UnsupportedOperationException("Unknown mode");

}

}

