Location: TwoInputBenchmark.java

Content: 

@Benchmark @OperationsPerInvocation(value=TwoInputBenchmark.RECORDS_PER_INVOCATION) public void twoInputMapSink(FlinkEnvironmentContext context) throws Exception {

  StreamExecutionEnvironment env=context.env;

  env.enableCheckpointing(CHECKPOINT_INTERVAL_MS);

  env.setParallelism(1);

  env.setBufferTimeout(1);

  long numRecordsPerInput=RECORDS_PER_INVOCATION / 2;

  DataStreamSource<Long> source1=env.addSource(new LongSource(numRecordsPerInput));

  DataStreamSource<Long> source2=env.addSource(new LongSource(numRecordsPerInput));

  source1.connect(source2).transform("custom operator",TypeInformation.of(Long.class),new MultiplyByTwoCoStreamMap()).addSink(new DiscardingSink<>());

  env.execute();

}

Location: TwoInputBenchmark.java

Content: 

@Benchmark @OperationsPerInvocation(value=TwoInputBenchmark.ONE_IDLE_RECORDS_PER_INVOCATION) public void twoInputOneIdleMapSink(FlinkEnvironmentContext context) throws Exception {

  StreamExecutionEnvironment env=context.env;

  env.enableCheckpointing(CHECKPOINT_INTERVAL_MS);

  env.setParallelism(1);

  QueuingLongSource.reset();

  DataStreamSource<Long> source1=env.addSource(new QueuingLongSource(1,ONE_IDLE_RECORDS_PER_INVOCATION - 1));

  DataStreamSource<Long> source2=env.addSource(new QueuingLongSource(2,1));

  source1.connect(source2).transform("custom operator",TypeInformation.of(Long.class),new MultiplyByTwoCoStreamMap()).addSink(new DiscardingSink<>());

  env.execute();

}

Location: TwoInputBenchmark.java

Content: 

@Benchmark @OperationsPerInvocation(value=TwoInputBenchmark.RECORDS_PER_INVOCATION) public void twoInputMapSink(FlinkEnvironmentContext context) throws Exception {

  StreamExecutionEnvironment env=context.env;

  env.enableCheckpointing(CHECKPOINT_INTERVAL_MS);

  env.setParallelism(1);

  env.setBufferTimeout(1);

  long numRecordsPerInput=RECORDS_PER_INVOCATION / 2;

  DataStreamSource<Long> source1=env.addSource(new LongSource(numRecordsPerInput));

  DataStreamSource<Long> source2=env.addSource(new LongSource(numRecordsPerInput));

  source1.connect(source2).transform("custom operator",TypeInformation.of(Long.class),new MultiplyByTwoCoStreamMap()).addSink(new DiscardingSink<>());

  env.execute();

}

Location: TwoInputBenchmark.java

Content: 

@Benchmark @OperationsPerInvocation(value=TwoInputBenchmark.ONE_IDLE_RECORDS_PER_INVOCATION) public void twoInputOneIdleMapSink(FlinkEnvironmentContext context) throws Exception {

  StreamExecutionEnvironment env=context.env;

  env.enableCheckpointing(CHECKPOINT_INTERVAL_MS);

  env.setParallelism(1);

  QueuingLongSource.reset();

  DataStreamSource<Long> source1=env.addSource(new QueuingLongSource(1,ONE_IDLE_RECORDS_PER_INVOCATION - 1));

  DataStreamSource<Long> source2=env.addSource(new QueuingLongSource(2,1));

  source1.connect(source2).transform("custom operator",TypeInformation.of(Long.class),new MultiplyByTwoCoStreamMap()).addSink(new DiscardingSink<>());

  env.execute();

}

