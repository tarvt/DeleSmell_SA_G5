Location: InputBenchmark.java

Content: 

@Benchmark public void mapRebalanceMapSink(FlinkEnvironmentContext context) throws Exception {

  StreamExecutionEnvironment env=context.env;

  env.enableCheckpointing(CHECKPOINT_INTERVAL_MS);

  env.setParallelism(1);

  DataStreamSource<Long> source=sourceType.source(env,RECORDS_PER_INVOCATION);

  source.map(new MultiplyByTwo()).rebalance().map((  Long in) -> in).addSink(new DiscardingSink<>());

  env.execute();

}

Location: InputBenchmark.java

Content: 

@Benchmark public void mapSink(FlinkEnvironmentContext context) throws Exception {

  StreamExecutionEnvironment env=context.env;

  env.enableCheckpointing(CHECKPOINT_INTERVAL_MS);

  env.setParallelism(1);

  DataStreamSource<Long> source=sourceType.source(env,RECORDS_PER_INVOCATION);

  source.map(new MultiplyByTwo()).addSink(new DiscardingSink<>());

  env.execute();

}

Location: InputBenchmark.java

Content: 

@Benchmark public void mapRebalanceMapSink(FlinkEnvironmentContext context) throws Exception {

  StreamExecutionEnvironment env=context.env;

  env.enableCheckpointing(CHECKPOINT_INTERVAL_MS);

  env.setParallelism(1);

  DataStreamSource<Long> source=sourceType.source(env,RECORDS_PER_INVOCATION);

  source.map(new MultiplyByTwo()).rebalance().map((  Long in) -> in).addSink(new DiscardingSink<>());

  env.execute();

}

Location: InputBenchmark.java

Content: 

@Benchmark public void mapSink(FlinkEnvironmentContext context) throws Exception {

  StreamExecutionEnvironment env=context.env;

  env.enableCheckpointing(CHECKPOINT_INTERVAL_MS);

  env.setParallelism(1);

  DataStreamSource<Long> source=sourceType.source(env,RECORDS_PER_INVOCATION);

  source.map(new MultiplyByTwo()).addSink(new DiscardingSink<>());

  env.execute();

}

