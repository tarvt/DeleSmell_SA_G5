Location: PojoSerializationBenchmark.java

Content: 

@Benchmark public org.apache.flink.benchmark.avro.MyPojo readAvro() throws IOException {

  avroBuffer.reset();

  return avroSerializer.deserialize(new DataInputViewStreamWrapper(avroBuffer));

}

Location: PojoSerializationBenchmark.java

Content: 

@Benchmark public SerializationFrameworkMiniBenchmarks.MyPojo readKryo() throws IOException {

  kryoBuffer.reset();

  return kryoSerializer.deserialize(new DataInputViewStreamWrapper(kryoBuffer));

}

Location: PojoSerializationBenchmark.java

Content: 

@Benchmark public SerializationFrameworkMiniBenchmarks.MyPojo readPojo() throws IOException {

  pojoBuffer.reset();

  return pojoSerializer.deserialize(new DataInputViewStreamWrapper(pojoBuffer));

}

Location: PojoSerializationBenchmark.java

Content: 

@Benchmark public byte[] writeAvro() throws IOException {

  return write(avroSerializer,avroPojo);

}

Location: PojoSerializationBenchmark.java

Content: 

@Benchmark public byte[] writeKryo() throws IOException {

  return write(kryoSerializer,pojo);

}

Location: PojoSerializationBenchmark.java

Content: 

@Benchmark public byte[] writePojo() throws IOException {

  return write(pojoSerializer,pojo);

}

Location: PojoSerializationBenchmark.java

Content: 

private <T>byte[] write(TypeSerializer<T> serializer,T value) throws IOException {

  ByteArrayOutputStream buffer=new ByteArrayOutputStream();

  DataOutputView out=new DataOutputViewStreamWrapper(buffer);

  serializer.serialize(value,out);

  return buffer.toByteArray();

}

Location: PojoSerializationBenchmark.java

Content: 

@Benchmark public org.apache.flink.benchmark.avro.MyPojo readAvro() throws IOException {

  avroBuffer.reset();

  return avroSerializer.deserialize(new DataInputViewStreamWrapper(avroBuffer));

}

Location: PojoSerializationBenchmark.java

Content: 

@Benchmark public SerializationFrameworkMiniBenchmarks.MyPojo readKryo() throws IOException {

  kryoBuffer.reset();

  return kryoSerializer.deserialize(new DataInputViewStreamWrapper(kryoBuffer));

}

Location: PojoSerializationBenchmark.java

Content: 

@Benchmark public SerializationFrameworkMiniBenchmarks.MyPojo readPojo() throws IOException {

  pojoBuffer.reset();

  return pojoSerializer.deserialize(new DataInputViewStreamWrapper(pojoBuffer));

}

Location: PojoSerializationBenchmark.java

Content: 

@Benchmark public byte[] writeAvro() throws IOException {

  return write(avroSerializer,avroPojo);

}

Location: PojoSerializationBenchmark.java

Content: 

@Benchmark public byte[] writeKryo() throws IOException {

  return write(kryoSerializer,pojo);

}

Location: PojoSerializationBenchmark.java

Content: 

@Benchmark public byte[] writePojo() throws IOException {

  return write(pojoSerializer,pojo);

}

Location: PojoSerializationBenchmark.java

Content: 

private <T>byte[] write(TypeSerializer<T> serializer,T value) throws IOException {

  ByteArrayOutputStream buffer=new ByteArrayOutputStream();

  DataOutputView out=new DataOutputViewStreamWrapper(buffer);

  serializer.serialize(value,out);

  return buffer.toByteArray();

}

