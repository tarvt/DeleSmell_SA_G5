Location: LongestCommonSubsequence.java

Content: 

private static void distribute(char c,Set<String> set){

  if (set.size() == 0) {

    set.add(String.valueOf(c));

  }

 else {

    Object[] strings=set.toArray();

    set.clear();

    for (    Object object : strings) {

      String string=(String)object;

      String seq=String.valueOf(c);

      if (!string.contains(seq))       string=string.concat(seq);

      set.add(string);

    }

  }

}

Location: LongestCommonSubsequence.java

Content: 

public static MatrixPair getLCS(char[] seq1,char[] seq2){

  try {

    populateMatrix(seq1,seq2);

    for (int i=0; i < seq1.length; i++) {

      for (int j=0; j < seq2.length; j++) {

        lengthMatrix[i + 1][j + 1]=longestCommonSubsequence(i,j,seq1,seq2);

      }

    }

    return (new MatrixPair(lengthMatrix,sequenceMatrix));

  }

  finally {

    lengthMatrix=null;

    sequenceMatrix=null;

  }

}

Location: LongestCommonSubsequence.java

Content: 

private LongestCommonSubsequence(){

}

Location: LongestCommonSubsequence.java

Content: 

private static int longestCommonSubsequence(int i,int j,char[] seq1,char[] seq2){

  char x=seq1[i];

  char y=seq2[j];

  int result=0;

  Set<String> set=sequenceMatrix[i][j];

  if (set == null)   set=new HashSet<String>();

  if (x == y) {

    if (i > 0 && j > 0)     set=new HashSet<String>(sequenceMatrix[i - 1][j - 1]);

    distribute(x,set);

    result=(lengthMatrix[i][j]) + 1;

  }

 else {

    int a=lengthMatrix[i][j + 1];

    int b=lengthMatrix[i + 1][j];

    if (a > b) {

      set=new HashSet<String>(sequenceMatrix[i - 1][j]);

      result=a;

    }

 else     if (b > a) {

      set=new HashSet<String>(sequenceMatrix[i][j - 1]);

      result=b;

    }

 else     if (a == b) {

      if (i > 0 && j > 0) {

        Set<String> list1=sequenceMatrix[i - 1][j];

        Set<String> list2=sequenceMatrix[i][j - 1];

        set.addAll(list1);

        set.addAll(list2);

      }

      result=a;

    }

  }

  sequenceMatrix[i][j]=set;

  return result;

}

Location: LongestCommonSubsequence.java

Content: 

private static void populateMatrix(char[] seq1,char[] seq2){

  lengthMatrix=new int[seq1.length + 1][seq2.length + 1];

  sequenceMatrix=new HashSet[seq1.length][seq2.length];

}

