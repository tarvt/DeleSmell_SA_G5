Location: AVLTree.java

Content: 

/** 

 * Default constructor.

 */

public AVLTree(){

  this.creator=new BinarySearchTree.INodeCreator<T>(){

    /** 

 * {@inheritDoc}

 */

    @Override public BinarySearchTree.Node<T> createNewNode(    BinarySearchTree.Node<T> parent,    T id){

      return (new AVLNode<T>(parent,id));

    }

  }

;

}

Location: AVLTree.java

Content: 

/** 

 * Constructor with external Node creator.

 */

public AVLTree(INodeCreator<T> creator){

  super(creator);

}

Location: AVLTree.java

Content: 

/** 

 * Balance the tree according to the AVL post-delete algorithm.

 * @param node Root of tree to balance.

 */

private void balanceAfterDelete(AVLNode<T> node){

  int balanceFactor=node.getBalanceFactor();

  if (balanceFactor == -2 || balanceFactor == 2) {

    if (balanceFactor == -2) {

      AVLNode<T> ll=(AVLNode<T>)node.lesser.lesser;

      int lesser=(ll != null) ? ll.height : 0;

      AVLNode<T> lr=(AVLNode<T>)node.lesser.greater;

      int greater=(lr != null) ? lr.height : 0;

      if (lesser >= greater) {

        rotateRight(node);

        node.updateHeight();

        if (node.parent != null)         ((AVLNode<T>)node.parent).updateHeight();

      }

 else {

        rotateLeft(node.lesser);

        rotateRight(node);

        AVLNode<T> p=(AVLNode<T>)node.parent;

        if (p.lesser != null)         ((AVLNode<T>)p.lesser).updateHeight();

        if (p.greater != null)         ((AVLNode<T>)p.greater).updateHeight();

        p.updateHeight();

      }

    }

 else     if (balanceFactor == 2) {

      AVLNode<T> rr=(AVLNode<T>)node.greater.greater;

      int greater=(rr != null) ? rr.height : 0;

      AVLNode<T> rl=(AVLNode<T>)node.greater.lesser;

      int lesser=(rl != null) ? rl.height : 0;

      if (greater >= lesser) {

        rotateLeft(node);

        node.updateHeight();

        if (node.parent != null)         ((AVLNode<T>)node.parent).updateHeight();

      }

 else {

        rotateRight(node.greater);

        rotateLeft(node);

        AVLNode<T> p=(AVLNode<T>)node.parent;

        if (p.lesser != null)         ((AVLNode<T>)p.lesser).updateHeight();

        if (p.greater != null)         ((AVLNode<T>)p.greater).updateHeight();

        p.updateHeight();

      }

    }

  }

}

Location: AVLTree.java

Content: 

/** 

 * Balance the tree according to the AVL post-insert algorithm.

 * @param node Root of tree to balance.

 */

private void balanceAfterInsert(AVLNode<T> node){

  int balanceFactor=node.getBalanceFactor();

  if (balanceFactor > 1 || balanceFactor < -1) {

    AVLNode<T> child=null;

    Balance balance=null;

    if (balanceFactor < 0) {

      child=(AVLNode<T>)node.lesser;

      balanceFactor=child.getBalanceFactor();

      if (balanceFactor < 0)       balance=Balance.LEFT_LEFT;

 else       balance=Balance.LEFT_RIGHT;

    }

 else {

      child=(AVLNode<T>)node.greater;

      balanceFactor=child.getBalanceFactor();

      if (balanceFactor < 0)       balance=Balance.RIGHT_LEFT;

 else       balance=Balance.RIGHT_RIGHT;

    }

    if (balance == Balance.LEFT_RIGHT) {

      rotateLeft(child);

      rotateRight(node);

    }

 else     if (balance == Balance.RIGHT_LEFT) {

      rotateRight(child);

      rotateLeft(node);

    }

 else     if (balance == Balance.LEFT_LEFT) {

      rotateRight(node);

    }

 else {

      rotateLeft(node);

    }

    child.updateHeight();

    node.updateHeight();

  }

}

Location: AVLTree.java

Content: 

/** 

 * {@inheritDoc}

 */

@Override protected Node<T> removeValue(T value){

  Node<T> nodeToRemoved=this.getNode(value);

  if (nodeToRemoved == null)   return null;

  Node<T> replacementNode=this.getReplacementNode(nodeToRemoved);

  AVLNode<T> nodeToRefactor=null;

  if (replacementNode != null)   nodeToRefactor=(AVLNode<T>)replacementNode.parent;

  if (nodeToRefactor == null)   nodeToRefactor=(AVLNode<T>)nodeToRemoved.parent;

  if (nodeToRefactor != null && nodeToRefactor == nodeToRemoved)   nodeToRefactor=(AVLNode<T>)replacementNode;

  replaceNodeWithNode(nodeToRemoved,replacementNode);

  while (nodeToRefactor != null) {

    nodeToRefactor.updateHeight();

    balanceAfterDelete(nodeToRefactor);

    nodeToRefactor=(AVLNode<T>)nodeToRefactor.parent;

  }

  return nodeToRemoved;

}

