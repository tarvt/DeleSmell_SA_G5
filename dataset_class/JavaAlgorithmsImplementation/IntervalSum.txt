Location: IntervalSum.java

Content: 

/** 

 * Adds value at the end of IntervalSumArray. Complexity O(log n).

 * @param val value to be added at the end of array.

 */

public void add(int val){

  values.add(val);

  for (int i=1; i < greatestPowerOfTwoDividing(size() + 1); i*=2)   val+=prefSums.get(size() + 1 - i);

  prefSums.add(val);

}

Location: IntervalSum.java

Content: 

/** 

 * Return value with given index. Complexity O(1)

 * @param index index of array.

 * @return value at given index.

 */

public int get(int index){

  return values.get(index + 1);

}

Location: IntervalSum.java

Content: 

private static int greatestPowerOfTwoDividing(int x){

  return x & (-x);

}

Location: IntervalSum.java

Content: 

/** 

 * Creates empty IntervalSumArray

 */

public IntervalSum(){

  values.add(0);

  prefSums.add(0);

}

Location: IntervalSum.java

Content: 

/** 

 * Creates IntervalSumArray of given size filled with zeros. Complexity O(size).

 * @param size size of IntervalSumArray

 */

public IntervalSum(int size){

  for (int i=0; i < size; i++) {

    values.add(0);

    prefSums.add(0);

  }

}

Location: IntervalSum.java

Content: 

/** 

 * Creates IntervalSumArray filled with given values. Complexity O(n log n).

 * @param values sequence of values for IntervalSumArray.

 */

public IntervalSum(Iterable<Integer> values){

  for (  Integer v : values)   add(v);

}

Location: IntervalSum.java

Content: 

private static int predecessor(int x){

  return x - greatestPowerOfTwoDividing(x);

}

Location: IntervalSum.java

Content: 

/** 

 * Set value at given index. Complexity O(log n)

 * @param index index to be updated

 * @param val new value

 */

public void set(int index,int val){

  if (index < 0 || index >= size())   throw new IndexOutOfBoundsException();

  index++;

  int diff=val - values.get(index);

  values.set(index,val);

  while (index <= size()) {

    int oldPrefSum=prefSums.get(index);

    prefSums.set(index,oldPrefSum + diff);

    index=successor(index);

  }

}

Location: IntervalSum.java

Content: 

private static int successor(int x){

  return x + greatestPowerOfTwoDividing(x);

}

Location: IntervalSum.java

Content: 

/** 

 * Return sum of all values inclusively. Complexity O(log n)

 * @return sum of values in array

 */

public int sum(){

  return sum(size() - 1);

}

Location: IntervalSum.java

Content: 

/** 

 * Return sum of values from 0 to end inclusively. Complexity O(log n)

 * @param end end of interval

 * @return sum of values in interval

 */

public int sum(int end){

  if (end < 0 || end >= size())   throw new IndexOutOfBoundsException();

  end++;

  int s=0;

  while (end > 0) {

    s+=prefSums.get(end);

    end=predecessor(end);

  }

  return s;

}

Location: IntervalSum.java

Content: 

/** 

 * Return sum of values from start to end inclusively. Complexity O(log n)

 * @param start start of interval

 * @param end end of interval

 * @return sum of values in interval

 */

public int sum(int start,int end){

  if (start > end)   throw new IllegalArgumentException("Start must be less then end");

  int startPrefSum=start == 0 ? 0 : sum(start - 1);

  int endPrefSum=sum(end);

  return endPrefSum - startPrefSum;

}

