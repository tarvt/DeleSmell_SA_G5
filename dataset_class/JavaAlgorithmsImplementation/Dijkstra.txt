Location: Dijkstra.java

Content: 

private static boolean checkForNegativeEdges(Collection<Graph.Vertex<Integer>> vertitices){

  for (  Graph.Vertex<Integer> v : vertitices) {

    for (    Graph.Edge<Integer> e : v.getEdges()) {

      if (e.getCost() < 0)       return true;

    }

  }

  return false;

}

Location: Dijkstra.java

Content: 

private Dijkstra(){

}

Location: Dijkstra.java

Content: 

public static Map<Graph.Vertex<Integer>,Graph.CostPathPair<Integer>> getShortestPaths(Graph<Integer> graph,Graph.Vertex<Integer> start){

  final Map<Graph.Vertex<Integer>,List<Graph.Edge<Integer>>> paths=new HashMap<Graph.Vertex<Integer>,List<Graph.Edge<Integer>>>();

  final Map<Graph.Vertex<Integer>,Graph.CostVertexPair<Integer>> costs=new HashMap<Graph.Vertex<Integer>,Graph.CostVertexPair<Integer>>();

  getShortestPath(graph,start,null,paths,costs);

  final Map<Graph.Vertex<Integer>,Graph.CostPathPair<Integer>> map=new HashMap<Graph.Vertex<Integer>,Graph.CostPathPair<Integer>>();

  for (  Graph.CostVertexPair<Integer> pair : costs.values()) {

    int cost=pair.getCost();

    Graph.Vertex<Integer> vertex=pair.getVertex();

    List<Graph.Edge<Integer>> path=paths.get(vertex);

    map.put(vertex,new Graph.CostPathPair<Integer>(cost,path));

  }

  return map;

}

Location: Dijkstra.java

Content: 

public static Graph.CostPathPair<Integer> getShortestPath(Graph<Integer> graph,Graph.Vertex<Integer> start,Graph.Vertex<Integer> end){

  if (graph == null)   throw (new NullPointerException("Graph must be non-NULL."));

  final boolean hasNegativeEdge=checkForNegativeEdges(graph.getVertices());

  if (hasNegativeEdge)   throw (new IllegalArgumentException("Negative cost Edges are not allowed."));

  final Map<Graph.Vertex<Integer>,List<Graph.Edge<Integer>>> paths=new HashMap<Graph.Vertex<Integer>,List<Graph.Edge<Integer>>>();

  final Map<Graph.Vertex<Integer>,Graph.CostVertexPair<Integer>> costs=new HashMap<Graph.Vertex<Integer>,Graph.CostVertexPair<Integer>>();

  return getShortestPath(graph,start,end,paths,costs);

}

Location: Dijkstra.java

Content: 

private static Graph.CostPathPair<Integer> getShortestPath(Graph<Integer> graph,Graph.Vertex<Integer> start,Graph.Vertex<Integer> end,Map<Graph.Vertex<Integer>,List<Graph.Edge<Integer>>> paths,Map<Graph.Vertex<Integer>,Graph.CostVertexPair<Integer>> costs){

  if (graph == null)   throw (new NullPointerException("Graph must be non-NULL."));

  if (start == null)   throw (new NullPointerException("start must be non-NULL."));

  boolean hasNegativeEdge=checkForNegativeEdges(graph.getVertices());

  if (hasNegativeEdge)   throw (new IllegalArgumentException("Negative cost Edges are not allowed."));

  for (  Graph.Vertex<Integer> v : graph.getVertices())   paths.put(v,new ArrayList<Graph.Edge<Integer>>());

  for (  Graph.Vertex<Integer> v : graph.getVertices()) {

    if (v.equals(start))     costs.put(v,new Graph.CostVertexPair<Integer>(0,v));

 else     costs.put(v,new Graph.CostVertexPair<Integer>(Integer.MAX_VALUE,v));

  }

  final Queue<Graph.CostVertexPair<Integer>> unvisited=new PriorityQueue<Graph.CostVertexPair<Integer>>();

  unvisited.add(costs.get(start));

  while (!unvisited.isEmpty()) {

    final Graph.CostVertexPair<Integer> pair=unvisited.remove();

    final Graph.Vertex<Integer> vertex=pair.getVertex();

    for (    Graph.Edge<Integer> e : vertex.getEdges()) {

      final Graph.CostVertexPair<Integer> toPair=costs.get(e.getToVertex());

      final Graph.CostVertexPair<Integer> lowestCostToThisVertex=costs.get(vertex);

      final int cost=lowestCostToThisVertex.getCost() + e.getCost();

      if (toPair.getCost() == Integer.MAX_VALUE) {

        unvisited.remove(toPair);

        toPair.setCost(cost);

        unvisited.add(toPair);

        List<Graph.Edge<Integer>> set=paths.get(e.getToVertex());

        set.addAll(paths.get(e.getFromVertex()));

        set.add(e);

      }

 else       if (cost < toPair.getCost()) {

        unvisited.remove(toPair);

        toPair.setCost(cost);

        unvisited.add(toPair);

        List<Graph.Edge<Integer>> set=paths.get(e.getToVertex());

        set.clear();

        set.addAll(paths.get(e.getFromVertex()));

        set.add(e);

      }

    }

    if (end != null && vertex.equals(end)) {

      break;

    }

  }

  if (end != null) {

    final Graph.CostVertexPair<Integer> pair=costs.get(end);

    final List<Graph.Edge<Integer>> set=paths.get(end);

    return (new Graph.CostPathPair<Integer>(pair.getCost(),set));

  }

  return null;

}

