Location: HeapSort.java

Content: 

private static <T extends Comparable<T>>int add(int size,T element,T[] unsorted){

  int length=size;

  int i=length;

  unsorted[length++]=element;

  T e=unsorted[i];

  int parentIndex=((i - 1) / 2);

  T parent=unsorted[parentIndex];

  while (e.compareTo(parent) > 0) {

    swap(parentIndex,i,unsorted);

    i=parentIndex;

    e=unsorted[i];

    parentIndex=((i - 1) / 2);

    parent=unsorted[parentIndex];

  }

  return length;

}

Location: HeapSort.java

Content: 

private static <T extends Comparable<T>>void createHeap(T[] unsorted){

  int size=0;

  int length=unsorted.length;

  for (int i=0; i < length; i++) {

    T e=unsorted[i];

    size=add(size,e,unsorted);

  }

}

Location: HeapSort.java

Content: 

private HeapSort(){

}

Location: HeapSort.java

Content: 

private static <T extends Comparable<T>>void sortHeap(T[] unsorted){

  int length=unsorted.length;

  for (int index=length - 1; index > 0; index--) {

    swap(0,index,unsorted);

    int i=0;

    while (true) {

      int left=(i * 2) + 1;

      if (left >= index)       break;

      int right=left + 1;

      if (right >= index) {

        if (unsorted[left].compareTo(unsorted[i]) > 0)         swap(left,i,unsorted);

        break;

      }

      T ithElement=unsorted[i];

      T leftElement=unsorted[left];

      T rightElement=unsorted[right];

      if (ithElement.compareTo(leftElement) < 0) {

        if (unsorted[left].compareTo(rightElement) > 0) {

          swap(left,i,unsorted);

          i=left;

          continue;

        }

        swap(right,i,unsorted);

        i=right;

        continue;

      }

      if (rightElement.compareTo(ithElement) > 0) {

        swap(right,i,unsorted);

        i=right;

        continue;

      }

      break;

    }

  }

}

Location: HeapSort.java

Content: 

public static <T extends Comparable<T>>T[] sort(T[] unsorted){

  createHeap(unsorted);

  sortHeap(unsorted);

  return unsorted;

}

Location: HeapSort.java

Content: 

private static <T extends Comparable<T>>void swap(int parentIndex,int childIndex,T[] unsorted){

  T parent=unsorted[parentIndex];

  unsorted[parentIndex]=unsorted[childIndex];

  unsorted[childIndex]=parent;

}

