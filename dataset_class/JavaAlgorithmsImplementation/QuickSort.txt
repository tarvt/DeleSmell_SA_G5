Location: QuickSort.java

Content: 

private static final int getRandom(int length){

  if (type == PIVOT_TYPE.RANDOM && length > 0)   return RAND.nextInt(length);

  if (type == PIVOT_TYPE.FIRST && length > 0)   return 0;

  return length / 2;

}

Location: QuickSort.java

Content: 

private QuickSort(){

}

Location: QuickSort.java

Content: 

private static <T extends Comparable<T>>void sort(int index,int start,int finish,T[] unsorted){

  int pivotIndex=start + index;

  T pivot=unsorted[pivotIndex];

  int s=start;

  int f=finish;

  while (s <= f) {

    while (unsorted[s].compareTo(pivot) < 0)     s++;

    while (unsorted[f].compareTo(pivot) > 0)     f--;

    if (s <= f) {

      swap(s,f,unsorted);

      s++;

      f--;

    }

  }

  if (start < f) {

    pivotIndex=getRandom((f - start) + 1);

    sort(pivotIndex,start,f,unsorted);

  }

  if (s < finish) {

    pivotIndex=getRandom((finish - s) + 1);

    sort(pivotIndex,s,finish,unsorted);

  }

}

Location: QuickSort.java

Content: 

public static <T extends Comparable<T>>T[] sort(PIVOT_TYPE pivotType,T[] unsorted){

  int pivot=0;

  if (pivotType == PIVOT_TYPE.MIDDLE) {

    pivot=unsorted.length / 2;

  }

 else   if (pivotType == PIVOT_TYPE.RANDOM) {

    pivot=getRandom(unsorted.length);

  }

  sort(pivot,0,unsorted.length - 1,unsorted);

  return unsorted;

}

