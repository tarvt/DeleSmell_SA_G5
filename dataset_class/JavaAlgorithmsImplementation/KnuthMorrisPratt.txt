Location: KnuthMorrisPratt.java

Content: 

/** 

 * This function implements KMP algorithm for finding length of maximal prefix-suffix for each prefix of the string. Prefix-suffix of string S is a substring which occurs at the beginning and at the end of S. <p>

 * @param text Text

 * @return maximal length of prefix-suffix for each prefix of the string text

 */

public static List<Integer> getPrefSufTable(String text){

  final List<Integer> prefSufTable=new ArrayList<Integer>();

  final char[] chars=text.toCharArray();

  if (text.length() == 0)   return prefSufTable;

  prefSufTable.add(0);

  for (int i=1; i < chars.length; i++) {

    int sizeOfPrefSuf=prefSufTable.get(i - 1);

    while (sizeOfPrefSuf > 0 && (chars[i] != chars[sizeOfPrefSuf]))     sizeOfPrefSuf=prefSufTable.get(sizeOfPrefSuf - 1);

    if (chars[i] == chars[sizeOfPrefSuf]) {

      prefSufTable.add(sizeOfPrefSuf + 1);

    }

 else {

      prefSufTable.add(0);

    }

  }

  return prefSufTable;

}

Location: KnuthMorrisPratt.java

Content: 

private KnuthMorrisPratt(){

}

