Location: DisjointSet.java

Content: 

private DisjointSet(){

}

Location: DisjointSet.java

Content: 

/** 

 * Determine which subset a particular element is in. Find returns an item from this set that serves as its "representative"; by comparing the result  of two Find operations, one can determine whether two elements are in the same subset. This method uses path compression which is a way of flattening  the structure of the tree whenever Find is used on it.

 * @param x Find the "representative" of this Item

 * @return "Representative" of this Item

 */

public static final <T extends Object>Item<T> find(Item<T> x){

  if (x == null)   return null;

  if ((x.parent != null) && !(x.parent.equals(x)))   return x.parent=find(x.parent);

  return x.parent;

}

Location: DisjointSet.java

Content: 

/** 

 * Creates a set of one element.

 * @param v Value to use when creating the set

 * @return Item representing the value

 */

public static final <T extends Object>Item<T> makeSet(T v){

  final Item<T> item=new Item<T>(null,v);

  item.parent=item;

  return item;

}

Location: DisjointSet.java

Content: 

/** 

 * Join two subsets into a single subset. This method uses 'union by rank' which always attaches the smaller tree to the root of the larger tree. 

 * @param x Subset 1 to join

 * @param y Subset 2 to join

 * @return Resulting Set of joining Subset 1 and Subset 2 

 */

public static final <T extends Object>Item<T> union(Item<T> x,Item<T> y){

  final Item<T> xRoot=find(x);

  final Item<T> yRoot=find(y);

  if (xRoot == null && yRoot == null)   return null;

  if (xRoot == null && yRoot != null)   return yRoot;

  if (yRoot == null && xRoot != null)   return xRoot;

  if (xRoot.equals(yRoot))   return xRoot;

  if (xRoot.rank < yRoot.rank) {

    xRoot.parent=yRoot;

    return yRoot;

  }

 else   if (xRoot.rank > yRoot.rank) {

    yRoot.parent=xRoot;

    return xRoot;

  }

  yRoot.parent=xRoot;

  xRoot.rank=xRoot.rank + 1;

  return xRoot;

}

