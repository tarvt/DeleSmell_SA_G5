Location: TurboMatching.java

Content: 

/** 

 * Computes maximum matching, using turbomatching algorithm based on augmenting paths with O(EV) complexity.

 * @param graph             bipartite graph

 * @param < T >               parameter of graph on which network is based

 * @return a MatchingResult class instance containg a map of mates for each paired vertex and number of pairs

 */

public static <T extends Comparable<T>>MatchingResult<T> getMaximumMatching(Graph<T> graph){

  final Map<Graph.Vertex<T>,Graph.Vertex<T>> mate=new HashMap<Graph.Vertex<T>,Graph.Vertex<T>>();

  while (pathset(graph,mate))   ;

  return new MatchingResult<T>(mate);

}

Location: TurboMatching.java

Content: 

/** 

 * Searches for an augmenting path for each unmatched vertex.

 * @param graph         bipartite graph

 * @param mate          map containing a mate for each matched vertex

 * @return              information if any augmenting path was found

 */

private static <T extends Comparable<T>>boolean pathset(Graph<T> graph,Map<Graph.Vertex<T>,Graph.Vertex<T>> mate){

  final Set<Graph.Vertex<T>> visited=new HashSet<Graph.Vertex<T>>();

  boolean result=false;

  for (  Graph.Vertex<T> vertex : graph.getVertices()) {

    if (mate.containsKey(vertex) == false) {

      if (path(graph,mate,visited,vertex))       result=true;

    }

  }

  return result;

}

Location: TurboMatching.java

Content: 

/** 

 * Searches for an augmenting path for a vertex. Refreshes mates map appropriately.

 * @param graph         bipartite graph

 * @param mate          map containing a mate for each matched vertex

 * @param visited       set containing vertices visited in current pathset

 * @param vertex        regarded vertex

 * @param < T >           parameter of graph on which network is based

 * @return              information if an augmenting path was found

 */

private static <T extends Comparable<T>>boolean path(Graph<T> graph,Map<Graph.Vertex<T>,Graph.Vertex<T>> mate,Set<Graph.Vertex<T>> visited,Graph.Vertex<T> vertex){

  if (visited.contains(vertex))   return false;

  visited.add(vertex);

  for (  Graph.Edge<T> edge : vertex.getEdges()) {

    final Graph.Vertex<T> neighbour=edge.getFromVertex().equals(vertex) ? edge.getToVertex() : edge.getFromVertex();

    if (mate.containsKey(neighbour) == false || path(graph,mate,visited,mate.get(neighbour))) {

      mate.put(vertex,neighbour);

      mate.put(neighbour,vertex);

      return true;

    }

  }

  return false;

}

