Location: ImplicitKeyTreap.java

Content: 

public void addAtIndexAndUpdate(int index,T value){

  root=insert(((Node<T>)root),index,value);

  if (root == null)   size=0;

 else   size=(((Node<T>)root).size);

}

Location: ImplicitKeyTreap.java

Content: 

/** 

 * Insert value at index

 * @param index to insert value

 * @param value to insert

 */

public T add(int index,T value){

  addAtIndexAndUpdate(index,value);

  final Node<T> n=getNodeByIndex(index);

  if (n == null)   return null;

  return n.value;

}

Location: ImplicitKeyTreap.java

Content: 

/** 

 * Get value at index

 * @param index to remove value

 */

public T getAtIndex(int index){

  final Node<T> n=getNodeByIndex(index);

  if (n == null)   return null;

  return n.value;

}

Location: ImplicitKeyTreap.java

Content: 

private static <T>int getIndexByValue(Node<T> node,int parentIndex,T value){

  if (node == null)   return Integer.MIN_VALUE;

  final Node<T> p=(Node<T>)node.parent;

  final Node<T> l=(Node<T>)node.left;

  final Node<T> r=(Node<T>)node.right;

  final int leftSize=((l != null) ? l.size : 0);

  final int rightSize=((r != null) ? r.size : 0);

  int idx=Integer.MIN_VALUE;

  if (p != null && node.equals(p.left)) {

    idx=parentIndex - rightSize - 1;

  }

 else   if (p != null && node.equals(p.right)) {

    idx=leftSize + parentIndex + 1;

  }

 else {

    throw new RuntimeException("I do not have a parent :-(");

  }

  if (value.equals(node.value))   return idx;

  int i=getIndexByValue(l,idx,value);

  if (i >= 0)   return i;

  i=getIndexByValue(r,idx,value);

  return i;

}

Location: ImplicitKeyTreap.java

Content: 

private int getIndexByValue(T value){

  final Node<T> node=(Node<T>)root;

  if (value == null || node == null)   return Integer.MIN_VALUE;

  final Node<T> l=(Node<T>)node.left;

  final Node<T> r=(Node<T>)node.right;

  final int leftSize=((l != null) ? l.size : 0);

  final int idx=leftSize;

  if (value.equals(node.value))   return idx;

  int i=getIndexByValue(l,idx,value);

  if (i >= 0)   return i;

  i=getIndexByValue(r,idx,value);

  return i;

}

Location: ImplicitKeyTreap.java

Content: 

private Node<T> getNodeByIndex(int index){

  if (root == null)   return null;

  final Node<T> l=(Node<T>)root.left;

  final Node<T> r=(Node<T>)root.right;

  final int leftSize=((l != null) ? l.size : 0);

  final int idx=leftSize;

  if (idx == index) {

    return root;

  }

 else   if (index < leftSize) {

    return getNodeByIndex(l,idx,index);

  }

 else {

    return getNodeByIndex(r,idx,index);

  }

}

Location: ImplicitKeyTreap.java

Content: 

private static <T>Node<T> getNodeByIndex(Node<T> node,int parentIndex,int index){

  if (node == null)   return null;

  final Node<T> p=(Node<T>)node.parent;

  final Node<T> l=(Node<T>)node.left;

  final Node<T> r=(Node<T>)node.right;

  final int leftSize=((l != null) ? l.size : 0);

  final int rightSize=((r != null) ? r.size : 0);

  int idx=Integer.MIN_VALUE;

  if (p != null && node.equals(p.left)) {

    idx=parentIndex - rightSize - 1;

  }

 else   if (p != null && node.equals(p.right)) {

    idx=leftSize + parentIndex + 1;

  }

 else {

    throw new RuntimeException("I do not have a parent :-(");

  }

  if (idx == index)   return node;

  if (index <= idx) {

    return getNodeByIndex(l,idx,index);

  }

 else {

    return getNodeByIndex(r,idx,index);

  }

}

Location: ImplicitKeyTreap.java

Content: 

private static <T>Node<T> getNodeByValue(Node<T> node,T value){

  if (node == null)   return null;

  if (node.value.equals(value))   return node;

  Node<T> n=getNodeByValue(node.left,value);

  if (n == null)   n=getNodeByValue(node.right,value);

  return n;

}

Location: ImplicitKeyTreap.java

Content: 

private Node<T> getNodeByValue(T value){

  return getNodeByValue(root,value);

}

Location: ImplicitKeyTreap.java

Content: 

/** 

 * Default constructor.

 */

public ImplicitKeyTreap(){

}

Location: ImplicitKeyTreap.java

Content: 

/** 

 * Constructor with a random seed.

 * @param randomSeed to use.

 */

public ImplicitKeyTreap(int randomSeed){

  this();

  ImplicitKeyTreap.randomSeed=randomSeed;

}

Location: ImplicitKeyTreap.java

Content: 

public T[] inOrder(){

  return inOrder(root,size);

}

Location: ImplicitKeyTreap.java

Content: 

public static <T>T[] inOrder(Node<T> node,int size){

  T[] data=(T[])new Object[size];

  if (node == null)   return data;

  inOrder(node,data,0);

  return data;

}

Location: ImplicitKeyTreap.java

Content: 

private static <T>int inOrder(Node<T> node,T[] data,int idx){

  if (node == null)   return idx;

  idx=inOrder(node.left,data,idx);

  data[idx++]=node.value;

  idx=inOrder(node.right,data,idx);

  return idx;

}

Location: ImplicitKeyTreap.java

Content: 

private static <T>Node<T> insert(Node<T> root,int index,T value){

  final Pair<T> p=split(root,index);

  return merge(merge((Node<T>)p.left,new Node<T>(value)),(Node<T>)p.right);

}

Location: ImplicitKeyTreap.java

Content: 

/** 

 * Merge treaps from given left and right nodes

 * @param left node which represents root of left treap

 * @param right node which represents root of great treap

 * @return treap from merged treaps

 */

public static <T>Node<T> merge(Node<T> left,Node<T> right){

  if (left == null)   return right;

  if (right == null)   return left;

  if (left.priority < right.priority) {

    left.right=merge((Node<T>)left.right,right);

    if (left.right != null)     left.right.parent=left;

    left.update();

    return left;

  }

  right.left=merge(left,(Node<T>)right.left);

  if (right.left != null)   right.left.parent=right;

  right.update();

  return right;

}

Location: ImplicitKeyTreap.java

Content: 

private void removeAtIndexAndUpdate(int index){

  root=remove(((Node<T>)root),index);

  if (root == null)   size=0;

 else   size=(((Node<T>)root).size);

}

Location: ImplicitKeyTreap.java

Content: 

/** 

 * Remove value at index

 * @param index to remove value

 * @return value or null if not found

 */

public T removeAtIndex(int index){

  Node<T> n=getNodeByIndex(index);

  if (n == null)   return null;

  removeAtIndexAndUpdate(index);

  return n.value;

}

Location: ImplicitKeyTreap.java

Content: 

private static <T>Node<T> remove(Node<T> root,int index){

  final Pair<T> p=split(root,index);

  final int leftSize=(p.left != null ? ((Node<T>)p.left).size : 0);

  return merge(p.left,(split(p.right,(index + 1 - leftSize))).right);

}

Location: ImplicitKeyTreap.java

Content: 

/** 

 * Set value at index

 * @param index to remove value

 * @return value or null if not found

 */

public T set(int index,T value){

  final Node<T> n=getNodeByIndex(index);

  if (n == null)   return null;

  n.value=value;

  return n.value;

}

Location: ImplicitKeyTreap.java

Content: 

/** 

 * Split the treap at index

 * @param index to split at

 * @return Pair which contains root of both trees

 */

public Pair<T> split(int index){

  final Pair<T> p=split((Node<T>)root,index);

  if (p.left != null)   p.left.parent=null;

  if (p.right != null)   p.right.parent=null;

  return p;

}

Location: ImplicitKeyTreap.java

Content: 

/** 

 * Split the treap rooted at node at given index

 * @param node which represents root

 * @param index in treap to split

 * @return Pair which contains root of both trees

 */

public static <T>Pair<T> split(Node<T> node,int index){

  if (node == null)   return new Pair<T>(null,null);

  final int leftSize=(node.left != null ? ((Node<T>)node.left).size : 0);

  if (index <= leftSize) {

    final Pair<T> sub=split((Node<T>)node.left,index);

    node.left=sub.right;

    if (node.left != null)     node.left.parent=node;

    sub.right=node;

    node.update();

    return sub;

  }

  final Pair<T> sub=split((Node<T>)node.right,(index - leftSize - 1));

  node.right=sub.left;

  if (node.right != null)   node.right.parent=node;

  sub.left=node;

  node.update();

  return sub;

}

