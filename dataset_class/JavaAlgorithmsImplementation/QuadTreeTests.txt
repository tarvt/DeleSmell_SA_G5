Location: QuadTreeTests.java

Content: 

private static final <P extends QuadTree.XYPoint>void assertFalse(String msg,QuadTree<P> obj,boolean isFalse){

  String toString="";

  if (isFalse == true)   toString="\n" + obj.toString();

  Assert.assertFalse(msg + toString,isFalse);

}

Location: QuadTreeTests.java

Content: 

private static final <P extends QuadTree.XYPoint>void assertTrue(String msg,QuadTree<P> obj,boolean isTrue){

  String toString="";

  if (isTrue == false)   toString="\n" + obj.toString();

  Assert.assertTrue(msg + toString,isTrue);

}

Location: QuadTreeTests.java

Content: 

@Test public void testPointBasedQuadTree(){

  QuadTree<QuadTree.XYPoint> tree=new QuadTree.PointRegionQuadTree<QuadTree.XYPoint>(0,0,SIZE,SIZE);

  for (  QuadTree.XYPoint p : SET) {

    boolean r=tree.insert(p.getX(),p.getY());

    assertTrue("Not added to tree. p=" + p.toString(),tree,r);

  }

  for (  QuadTree.XYPoint p : SET) {

    java.util.Collection<QuadTree.XYPoint> r=tree.queryRange(p.getX(),p.getY(),1,1);

    assertTrue("Quad tree queryRange error. p=" + p.toString() + " r="+ r,tree,r.size() > 0);

  }

  for (  QuadTree.XYPoint p : QUERY) {

    java.util.Collection<QuadTree.XYPoint> r=tree.queryRange(p.getX(),p.getY(),1,1);

    if (SET.contains(p))     assertTrue("Point should be in tree. p=" + p.toString() + " r="+ r,tree,r.size() > 0);

  }

  java.util.List<QuadTree.XYPoint> result=new java.util.ArrayList<QuadTree.XYPoint>();

  result.addAll(tree.queryRange(0,0,SIZE,SIZE));

  Collections.sort(result);

  QuadTree.XYPoint prev=null;

  for (  QuadTree.XYPoint p : result) {

    assertFalse("Quad tree compare error. p=" + p + " prev="+ prev+ " result="+ result,tree,(prev != null && prev.equals(p)));

    prev=p;

  }

  for (  QuadTree.XYPoint p : SET) {

    boolean removed=tree.remove(p.getX(),p.getY());

    assertTrue("Quad tree remove error. removed=" + removed + " p="+ p.toString(),tree,removed);

  }

}

Location: QuadTreeTests.java

Content: 

@Test public void testRectangleBasedQuadTree(){

  QuadTree<QuadTree.AxisAlignedBoundingBox> tree=new QuadTree.MxCifQuadTree<QuadTree.AxisAlignedBoundingBox>(0,0,SIZE,SIZE,10,10);

  for (  QuadTree.XYPoint p : SET) {

    boolean r=tree.insert(p.getX(),p.getY());

    assertTrue("Not added to tree. p=" + p.toString(),tree,r);

  }

  for (  QuadTree.XYPoint p : SET) {

    java.util.Collection<QuadTree.AxisAlignedBoundingBox> r=tree.queryRange(p.getX(),p.getY(),1,1);

    assertTrue("Quad tree queryRange error. p=" + p.toString() + " r="+ r,tree,r.size() > 0);

  }

  for (  QuadTree.XYPoint p : QUERY) {

    java.util.Collection<QuadTree.AxisAlignedBoundingBox> r=tree.queryRange(p.getX(),p.getY(),1,1);

    if (SET.contains(p))     assertTrue("Point should be in tree. p=" + p.toString() + " r="+ r,tree,r.size() > 0);

  }

  java.util.ArrayList<QuadTree.AxisAlignedBoundingBox> result=new java.util.ArrayList<QuadTree.AxisAlignedBoundingBox>();

  result.addAll(tree.queryRange(0,0,SIZE,SIZE));

  Collections.sort(result);

  QuadTree.XYPoint prev=null;

  for (  QuadTree.XYPoint p : result) {

    assertFalse("Quad tree compare error. p=" + p + " prev="+ prev+ " result="+ result,tree,(prev != null && prev.equals(p)));

    prev=p;

  }

  for (  QuadTree.XYPoint p : SET) {

    boolean removed=tree.remove(p.getX(),p.getY());

    assertTrue("Quad tree remove error. removed=" + removed + " p="+ p.toString(),tree,removed);

  }

}

