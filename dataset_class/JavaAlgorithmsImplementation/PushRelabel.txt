Location: PushRelabel.java

Content: 

private static final void addEdge(Vertex from,Vertex to,long cost){

  final int placeOfEdge=from.edges.indexOf(new Edge(from,to));

  if (placeOfEdge == -1) {

    final Edge edge=new Edge(from,to,cost);

    final Edge revertedEdge=new Edge(to,from,0);

    edge.revertedEdge=revertedEdge;

    revertedEdge.revertedEdge=edge;

    from.edges.add(edge);

    to.edges.add(revertedEdge);

  }

 else {

    from.edges.get(placeOfEdge).cost+=cost;

  }

}

Location: PushRelabel.java

Content: 

private final void discharge(Vertex u){

  while (u.excess > 0) {

    if (u.currentEdge == u.edges.size()) {

      relabel(u);

      if ((++relabelCounter) == n) {

        hongshuai();

        final Queue<Vertex> que=new ArrayDeque<Vertex>();

        for (        Vertex vertex : vertices) {

          vertex.visited=false;

          vertex.height=2 * n;

        }

        sink.height=0;

        source.height=n;

        source.visited=true;

        sink.visited=true;

        que.add(sink);

        while (!que.isEmpty()) {

          final Vertex act=que.poll();

          for (          Edge e : act.edges) {

            if (!e.to.visited && e.revertedEdge.cost > e.revertedEdge.flow) {

              e.to.height=act.height + 1;

              que.add(e.to);

              e.to.visited=true;

            }

          }

        }

        que.add(source);

        while (!que.isEmpty()) {

          final Vertex act=que.poll();

          for (          Edge e : act.edges) {

            if (!e.to.visited && e.revertedEdge.cost > e.revertedEdge.flow) {

              e.to.height=act.height + 1;

              que.add(e.to);

              e.to.visited=true;

            }

          }

        }

        for (        Vertex vertex : vertices)         vertex.currentEdge=0;

        relabelCounter=0;

      }

      u.currentEdge=0;

    }

 else {

      Edge e=u.edges.get(u.currentEdge);

      if (e.flow < e.cost && u.height == e.to.height + 1)       push(u,e);

 else       u.currentEdge++;

    }

  }

}

Location: PushRelabel.java

Content: 

/** 

 * Computes maximum flow in flow network, using push-relabel algorithm with O(V^3) complexity.

 * @param edgesToCapacities represents edges of network with capacities

 * @param source            source of network

 * @param sink              sink of network

 * @param < T >               parameter of graph on which network is based

 * @return the maximum flow

 */

public static <T extends Comparable<T>>Long getMaximumFlow(Map<Graph.Edge<T>,Long> edgesToCapacities,Graph.Vertex<T> source,Graph.Vertex<T> sink){

  if (edgesToCapacities == null)   throw new IllegalArgumentException("Graph is NULL.");

  final Map<Graph.Vertex<T>,Vertex> vertexMap=new TreeMap<Graph.Vertex<T>,Vertex>();

  for (  Graph.Edge<T> edge : edgesToCapacities.keySet()) {

    vertexMap.put(edge.getFromVertex(),new Vertex());

    vertexMap.put(edge.getToVertex(),new Vertex());

  }

  final Vertex s=new Vertex();

  vertexMap.put(source,s);

  final Vertex t=new Vertex();

  vertexMap.put(sink,t);

  final PushRelabel pushRelabel=new PushRelabel(vertexMap.values(),s,t);

  for (  Map.Entry<Graph.Edge<T>,Long> edgeWithCapacity : edgesToCapacities.entrySet()) {

    final Graph.Edge<T> e=edgeWithCapacity.getKey();

    addEdge(vertexMap.get(e.getFromVertex()),vertexMap.get(e.getToVertex()),edgeWithCapacity.getValue());

  }

  return pushRelabel.maxFlow();

}

Location: PushRelabel.java

Content: 

private final long maxFlow(){

  hongshuai();

  for (  Edge e : source.edges) {

    e.flow=e.cost;

    e.revertedEdge.flow=-e.flow;

    e.to.excess+=e.flow;

    if (e.to != source && e.to != sink)     queue.add(e.to);

  }

  recomputeHeight();

  relabelCounter=0;

  while (!queue.isEmpty())   discharge(queue.poll());

  return sink.excess;

}

Location: PushRelabel.java

Content: 

private PushRelabel(Collection<Vertex> vertices,Vertex source,Vertex sink){

  this.vertices.addAll(vertices);

  this.source=source;

  this.sink=sink;

  this.n=vertices.size();

}

Location: PushRelabel.java

Content: 

private final void push(Vertex u,Edge e){

  final long delta=(u.excess < e.cost - e.flow) ? u.excess : e.cost - e.flow;

  e.flow+=delta;

  e.revertedEdge.flow-=delta;

  u.excess-=delta;

  if (e.to.excess == 0 && e.to != source && e.to != sink)   queue.add(e.to);

  e.to.excess+=delta;

}

Location: PushRelabel.java

Content: 

private static final void relabel(Vertex v){

  int minimum=0;

  for (  Edge e : v.edges) {

    if (e.flow < e.cost)     minimum=Math.min(minimum,e.to.height);

  }

  v.height=minimum + 1;

}

