Location: RamerDouglasPeucker.java

Content: 

private static final double distanceBetweenPoints(double vx,double vy,double wx,double wy){

  return sqr(vx - wx) + sqr(vy - wy);

}

Location: RamerDouglasPeucker.java

Content: 

private static final double distanceToSegmentSquared(double px,double py,double vx,double vy,double wx,double wy){

  final double l2=distanceBetweenPoints(vx,vy,wx,wy);

  if (l2 == 0)   return distanceBetweenPoints(px,py,vx,vy);

  final double t=((px - vx) * (wx - vx) + (py - vy) * (wy - vy)) / l2;

  if (t < 0)   return distanceBetweenPoints(px,py,vx,vy);

  if (t > 1)   return distanceBetweenPoints(px,py,wx,wy);

  return distanceBetweenPoints(px,py,(vx + t * (wx - vx)),(vy + t * (wy - vy)));

}

Location: RamerDouglasPeucker.java

Content: 

/** 

 * Given a curve composed of line segments find a similar curve with fewer points.

 * @param list List of Double[] points (x,y)

 * @param epsilon Distance dimension

 * @return Similar curve with fewer points

 */

public static final List<Double[]> douglasPeucker(List<Double[]> list,double epsilon){

  final List<Double[]> resultList=new ArrayList<Double[]>();

  douglasPeucker(list,0,list.size(),epsilon,resultList);

  return resultList;

}

Location: RamerDouglasPeucker.java

Content: 

private static final void douglasPeucker(List<Double[]> list,int s,int e,double epsilon,List<Double[]> resultList){

  double dmax=0;

  int index=0;

  final int start=s;

  final int end=e - 1;

  for (int i=start + 1; i < end; i++) {

    final double px=list.get(i)[0];

    final double py=list.get(i)[1];

    final double vx=list.get(start)[0];

    final double vy=list.get(start)[1];

    final double wx=list.get(end)[0];

    final double wy=list.get(end)[1];

    final double d=perpendicularDistance(px,py,vx,vy,wx,wy);

    if (d > dmax) {

      index=i;

      dmax=d;

    }

  }

  if (dmax > epsilon) {

    douglasPeucker(list,s,index,epsilon,resultList);

    douglasPeucker(list,index,e,epsilon,resultList);

  }

 else {

    if ((end - start) > 0) {

      resultList.add(list.get(start));

      resultList.add(list.get(end));

    }

 else {

      resultList.add(list.get(start));

    }

  }

}

Location: RamerDouglasPeucker.java

Content: 

private static final double perpendicularDistance(double px,double py,double vx,double vy,double wx,double wy){

  return Math.sqrt(distanceToSegmentSquared(px,py,vx,vy,wx,wy));

}

Location: RamerDouglasPeucker.java

Content: 

private RamerDouglasPeucker(){

}

Location: RamerDouglasPeucker.java

Content: 

private static final double sqr(double x){

  return Math.pow(x,2);

}

