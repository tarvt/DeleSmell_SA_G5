Location: DataStructuresTiming.java

Content: 

private static final void collectGarbage(long sleep){

  try {

    System.gc();

    System.gc();

    System.gc();

    Thread.sleep(sleep);

    System.runFinalization();

    Thread.sleep(sleep);

  }

 catch (  InterruptedException ex) {

    ex.printStackTrace();

  }

}

Location: DataStructuresTiming.java

Content: 

private static void generateTestData(int idx,int size,Integer[][] unsorteds,Integer[][] sorteds,String[] strings){

  System.out.println("Generating data.");

  StringBuilder builder=new StringBuilder();

  builder.append("Array=");

  java.util.Set<Integer> set=new java.util.HashSet<Integer>();

  unsorteds[idx]=new Integer[size];

  sorteds[idx]=new Integer[size];

  for (int i=0; i < size; i++) {

    Integer j=RANDOM.nextInt(RANDOM_SIZE);

    boolean found=true;

    while (found) {

      if (set.contains(j)) {

        j=RANDOM.nextInt(RANDOM_SIZE);

      }

 else {

        unsorteds[idx][i]=j;

        set.add(j);

        found=false;

      }

    }

    unsorteds[idx][i]=j;

    if (i != size - 1)     builder.append(j).append(',');

  }

  set.clear();

  set=null;

  builder.append('\n');

  strings[idx]=builder.toString();

  if (debug > 1)   System.out.println(strings[idx]);

  sorteds[idx]=Arrays.copyOf(unsorteds[idx],unsorteds[idx].length);

  Arrays.sort(sorteds[idx]);

  System.out.println("Generated data.");

}

Location: DataStructuresTiming.java

Content: 

static final long getMemoryUse(){

  putOutTheGarbage();

  long totalMemory=Runtime.getRuntime().totalMemory();

  putOutTheGarbage();

  long freeMemory=Runtime.getRuntime().freeMemory();

  return (totalMemory - freeMemory);

}

Location: DataStructuresTiming.java

Content: 

private static void handleError(String input,Object obj){

  System.err.println(input);

  System.err.println(obj.toString());

  throw new RuntimeException("Error in test.");

}

Location: DataStructuresTiming.java

Content: 

static final void putOutTheGarbage(long sleep){

  collectGarbage(sleep);

  collectGarbage(sleep);

  collectGarbage(sleep);

}

Location: DataStructuresTiming.java

Content: 

private static boolean runTests(){

  testIndex=0;

  int tests=NUMBER_OF_TESTS + 1;

  Integer[][] unsorteds=new Integer[tests][];

  Integer[][] sorteds=new Integer[tests][];

  String[] strings=new String[tests];

  for (int i=0; i < tests; i++)   generateTestData(i,ARRAY_SIZE,unsorteds,sorteds,strings);

  putOutTheGarbage();

  if (!runTests(new TestJavaRedBlackIntegerTree(),tests,unsorteds,sorteds,strings))   return false;

  putOutTheGarbage();

  if (!runTests(new TestRedBlackTree(),tests,unsorteds,sorteds,strings))   return false;

  putOutTheGarbage();

  if (!runTests(new TestAVLTree(),tests,unsorteds,sorteds,strings))   return false;

  putOutTheGarbage();

  if (!runTests(new TestSplayTree(),tests,unsorteds,sorteds,strings))   return false;

  putOutTheGarbage();

  if (!runTests(new TestBTree(),tests,unsorteds,sorteds,strings))   return false;

  putOutTheGarbage();

  if (!runTests(new TestTreap(),tests,unsorteds,sorteds,strings))   return false;

  putOutTheGarbage();

  if (!runTests(new TestHAMT(),tests,unsorteds,sorteds,strings))   return false;

  putOutTheGarbage();

  if (!runTests(new TestBST(),tests,unsorteds,sorteds,strings))   return false;

  putOutTheGarbage();

  if (!runTests(new TestJavaRedBlackStringTree(),tests,unsorteds,sorteds,strings))   return false;

  putOutTheGarbage();

  if (!runTests(new TestTrie(),tests,unsorteds,sorteds,strings))   return false;

  putOutTheGarbage();

  if (!runTests(new TestPatriciaTrie(),tests,unsorteds,sorteds,strings))   return false;

  putOutTheGarbage();

  if (!runTests(new TestJavaSkipList(),tests,unsorteds,sorteds,strings))   return false;

  putOutTheGarbage();

  if (!runTests(new TestSkipList(),tests,unsorteds,sorteds,strings))   return false;

  putOutTheGarbage();

  if (!runTests(new TestJavaMinHeap(),tests,unsorteds,sorteds,strings))   return false;

  putOutTheGarbage();

  if (!runTests(new TestMinHeapArray(),tests,unsorteds,sorteds,strings))   return false;

  putOutTheGarbage();

  if (!runTests(new TestMinHeapTree(),tests,unsorteds,sorteds,strings))   return false;

  putOutTheGarbage();

  if (!runTests(new TestJavaMaxHeap(),tests,unsorteds,sorteds,strings))   return false;

  putOutTheGarbage();

  if (!runTests(new TestMaxHeapArray(),tests,unsorteds,sorteds,strings))   return false;

  putOutTheGarbage();

  if (!runTests(new TestMaxHeapTree(),tests,unsorteds,sorteds,strings))   return false;

  putOutTheGarbage();

  if (!runTests(new TestJavaArrayList(),tests,unsorteds,sorteds,strings))   return false;

  putOutTheGarbage();

  if (!runTests(new TestArrayList(),tests,unsorteds,sorteds,strings))   return false;

  putOutTheGarbage();

  if (!runTests(new TestJavaLinkedList(),tests,unsorteds,sorteds,strings))   return false;

  putOutTheGarbage();

  if (!runTests(new TestSinglyLinkedList(),tests,unsorteds,sorteds,strings))   return false;

  putOutTheGarbage();

  if (!runTests(new TestDoublyLinkedList(),tests,unsorteds,sorteds,strings))   return false;

  putOutTheGarbage();

  if (!runTests(new TestJavaArrayQueue(),tests,unsorteds,sorteds,strings))   return false;

  putOutTheGarbage();

  if (!runTests(new TestArrayQueue(),tests,unsorteds,sorteds,strings))   return false;

  putOutTheGarbage();

  if (!runTests(new TestJavaLinkedQueue(),tests,unsorteds,sorteds,strings))   return false;

  putOutTheGarbage();

  if (!runTests(new TestLinkedQueue(),tests,unsorteds,sorteds,strings))   return false;

  putOutTheGarbage();

  if (!runTests(new TestJavaStack(),tests,unsorteds,sorteds,strings))   return false;

  putOutTheGarbage();

  if (!runTests(new TestArrayStack(),tests,unsorteds,sorteds,strings))   return false;

  putOutTheGarbage();

  if (!runTests(new TestLinkedStack(),tests,unsorteds,sorteds,strings))   return false;

  putOutTheGarbage();

  if (!runTests(new TestJavaHashMap(),tests,unsorteds,sorteds,strings))   return false;

  putOutTheGarbage();

  if (!runTests(new TestHashMapProbing(),tests,unsorteds,sorteds,strings))   return false;

  putOutTheGarbage();

  if (!runTests(new TestHashMapChaining(),tests,unsorteds,sorteds,strings))   return false;

  putOutTheGarbage();

  if (!runTests(new TestJavaTreeMap(),tests,unsorteds,sorteds,strings))   return false;

  putOutTheGarbage();

  if (!runTests(new TestTreeMap(),tests,unsorteds,sorteds,strings))   return false;

  putOutTheGarbage();

  if (!runTests(new TestTrieMap(),tests,unsorteds,sorteds,strings))   return false;

  putOutTheGarbage();

  if (!runTests(new TestRadixTrie(),tests,unsorteds,sorteds,strings))   return false;

  putOutTheGarbage();

  if (!runTests(new TestJavaSkipListMap(),tests,unsorteds,sorteds,strings))   return false;

  putOutTheGarbage();

  if (!runTests(new TestSkipListMap(),tests,unsorteds,sorteds,strings))   return false;

  putOutTheGarbage();

  return true;

}

Location: DataStructuresTiming.java

Content: 

private static final boolean runTests(Testable testable,int tests,Integer[][] unsorteds,Integer sorteds[][],String[] strings){

  boolean passed=false;

  firstTimeThru=true;

  for (int i=0; i < tests; i++) {

    try {

      Integer[] unsorted=unsorteds[i];

      Integer[] sorted=sorteds[i];

      String string=strings[i];

      passed=testable.run(unsorted,sorted,string);

      if (!passed) {

        System.err.println(testable.getInput());

        System.err.println(testable.getName() + " failed.");

        return false;

      }

    }

 catch (    NullPointerException e) {

      System.err.println(testable.getInput());

      throw e;

    }

    firstTimeThru=false;

  }

  if (debugTime && debugMemory)   System.out.println(getTestResults(NUMBER_OF_TESTS,TEST_NAMES,TEST_RESULTS));

  testIndex++;

  return true;

}

Location: DataStructuresTiming.java

Content: 

@SuppressWarnings("unchecked") private static <T extends Comparable<T>>boolean testJavaCollection(Collection<T> collection,Class<T> type,String name,Integer[] _unsorted,Integer[] _sorted,String input){

  if (!collection.isEmpty()) {

    System.err.println(name + " initial isEmpty() failed.");

    handleError(input,collection);

    return false;

  }

  if (collection.size() != 0) {

    System.err.println(name + " initial size() failed.");

    handleError(input,collection);

    return false;

  }

  T[] unsorted=(T[])Array.newInstance(type,_unsorted.length);

  T[] sorted=(T[])Array.newInstance(type,_sorted.length);

  for (int i=0; i < unsorted.length; i++)   unsorted[i]=Utils.parseT(_unsorted[i],type);

  for (int i=0; i < sorted.length; i++)   sorted[i]=Utils.parseT(_sorted[i],type);

  long sortedCount=0;

  long unsortedCount=0;

  long addTime=0L;

  long removeTime=0L;

  long beforeAddTime=0L;

  long afterAddTime=0L;

  long beforeRemoveTime=0L;

  long afterRemoveTime=0L;

  long memory=0L;

  long beforeMemory=0L;

  long afterMemory=0L;

  long lookupTime=0L;

  long beforeLookupTime=0L;

  long afterLookupTime=0L;

  if (debug > 1)   System.out.println(name);

  if (!firstTimeThru)   TEST_NAMES[testIndex]=name;

  unsortedCount++;

{

    beforeMemory=0L;

    afterMemory=0L;

    beforeAddTime=0L;

    afterAddTime=0L;

    if (debugMemory)     beforeMemory=DataStructuresTiming.getMemoryUse();

    if (debugTime)     beforeAddTime=System.nanoTime();

    for (int i=0; i < unsorted.length; i++) {

      T item=unsorted[i];

      boolean added=collection.add(item);

      if (!added) {

        System.err.println(name + " unsorted add failed.");

        handleError(input,collection);

        return false;

      }

    }

    if (debugTime) {

      afterAddTime=System.nanoTime();

      addTime+=afterAddTime - beforeAddTime;

      if (debug > 0)       System.out.println(name + " unsorted add time = " + (addTime / unsortedCount)+ " ns");

    }

    if (debugMemory) {

      afterMemory=DataStructuresTiming.getMemoryUse();

      memory+=afterMemory - beforeMemory;

      if (debug > 0)       System.out.println(name + " unsorted memory use = " + (memory / (unsortedCount + sortedCount))+ " bytes");

    }

    if (debug > 1)     System.out.println(collection.toString());

    beforeLookupTime=0L;

    afterLookupTime=0L;

    if (debugTime)     beforeLookupTime=System.nanoTime();

    for (int i=0; i < unsorted.length; i++) {

      T item=unsorted[i];

      boolean contains=collection.contains(item);

      if (!contains) {

        System.err.println(name + " unsorted contains failed.");

        handleError(input,collection);

        return false;

      }

    }

    if (debugTime) {

      afterLookupTime=System.nanoTime();

      lookupTime+=afterLookupTime - beforeLookupTime;

      if (debug > 0)       System.out.println(name + " unsorted lookup time = " + (lookupTime / (unsortedCount + sortedCount))+ " ns");

    }

    beforeRemoveTime=0L;

    afterRemoveTime=0L;

    if (debugTime)     beforeRemoveTime=System.nanoTime();

    for (int i=0; i < unsorted.length; i++) {

      T item=unsorted[i];

      boolean removed=collection.remove(item);

      if (!removed) {

        System.err.println(name + " unsorted remove failed.");

        handleError(input,collection);

        return false;

      }

    }

    if (debugTime) {

      afterRemoveTime=System.nanoTime();

      removeTime+=afterRemoveTime - beforeRemoveTime;

      if (debug > 0)       System.out.println(name + " unsorted remove time = " + (removeTime / unsortedCount)+ " ns");

    }

    if (!collection.isEmpty()) {

      System.err.println(name + " unsorted isEmpty() failed.");

      handleError(input,collection);

      return false;

    }

    if (collection.size() != 0) {

      System.err.println(name + " unsorted size() failed.");

      handleError(input,collection);

      return false;

    }

  }

  unsortedCount++;

{

    beforeMemory=0L;

    afterMemory=0L;

    beforeAddTime=0L;

    afterAddTime=0L;

    if (debugMemory)     beforeMemory=DataStructuresTiming.getMemoryUse();

    if (debugTime)     beforeAddTime=System.nanoTime();

    for (int i=unsorted.length - 1; i >= 0; i--) {

      T item=unsorted[i];

      boolean added=collection.add(item);

      if (!added) {

        System.err.println(name + " unsorted add failed.");

        handleError(input,collection);

        return false;

      }

    }

    if (debugTime) {

      afterAddTime=System.nanoTime();

      addTime+=afterAddTime - beforeAddTime;

      if (debug > 0)       System.out.println(name + " unsorted add time = " + (addTime / unsortedCount)+ " ns");

    }

    if (debugMemory) {

      afterMemory=DataStructuresTiming.getMemoryUse();

      memory+=afterMemory - beforeMemory;

      if (debug > 0)       System.out.println(name + " unsorted memory use = " + (memory / (unsortedCount + sortedCount))+ " bytes");

    }

    if (debug > 1)     System.out.println(collection.toString());

    beforeLookupTime=0L;

    afterLookupTime=0L;

    if (debugTime)     beforeLookupTime=System.nanoTime();

    for (int i=0; i < unsorted.length; i++) {

      T item=unsorted[i];

      boolean contains=collection.contains(item);

      if (!contains) {

        System.err.println(name + " unsorted contains failed.");

        handleError(input,collection);

        return false;

      }

    }

    if (debugTime) {

      afterLookupTime=System.nanoTime();

      lookupTime+=afterLookupTime - beforeLookupTime;

      if (debug > 0)       System.out.println(name + " unsorted lookup time = " + (lookupTime / (unsortedCount + sortedCount))+ " ns");

    }

    beforeRemoveTime=0L;

    afterRemoveTime=0L;

    if (debugTime)     beforeRemoveTime=System.nanoTime();

    for (int i=0; i < unsorted.length; i++) {

      T item=unsorted[i];

      boolean removed=collection.remove(item);

      if (!removed) {

        System.err.println(name + " unsorted remove failed.");

        handleError(input,collection);

        return false;

      }

    }

    if (debugTime) {

      afterRemoveTime=System.nanoTime();

      removeTime+=afterRemoveTime - beforeRemoveTime;

      if (debug > 0)       System.out.println(name + " unsorted remove time = " + (removeTime / unsortedCount)+ " ns");

    }

    if (!collection.isEmpty()) {

      System.err.println(name + " unsorted isEmpty() failed.");

      handleError(input,collection);

      return false;

    }

    if (collection.size() != 0) {

      System.err.println(name + " unsorted size() failed.");

      handleError(input,collection);

      return false;

    }

  }

  long addSortedTime=0L;

  long removeSortedTime=0L;

  long beforeAddSortedTime=0L;

  long afterAddSortedTime=0L;

  long beforeRemoveSortedTime=0L;

  long afterRemoveSortedTime=0L;

  sortedCount++;

{

    beforeMemory=0L;

    afterMemory=0L;

    beforeAddSortedTime=0L;

    afterAddSortedTime=0L;

    if (debugMemory)     beforeMemory=DataStructuresTiming.getMemoryUse();

    if (debugTime)     beforeAddSortedTime=System.nanoTime();

    for (int i=0; i < sorted.length; i++) {

      T item=sorted[i];

      boolean added=collection.add(item);

      if (!added) {

        System.err.println(name + " sorted add failed.");

        handleError(input,collection);

        return false;

      }

    }

    if (debugTime) {

      afterAddSortedTime=System.nanoTime();

      addSortedTime+=afterAddSortedTime - beforeAddSortedTime;

      if (debug > 0)       System.out.println(name + " sorted add time = " + (addSortedTime / sortedCount)+ " ns");

    }

    if (debugMemory) {

      afterMemory=DataStructuresTiming.getMemoryUse();

      memory+=afterMemory - beforeMemory;

      if (debug > 0)       System.out.println(name + " sorted memory use = " + (memory / (unsortedCount + sortedCount))+ " bytes");

    }

    if (debug > 1)     System.out.println(collection.toString());

    beforeLookupTime=0L;

    afterLookupTime=0L;

    if (debugTime)     beforeLookupTime=System.nanoTime();

    for (int i=0; i < sorted.length; i++) {

      T item=sorted[i];

      boolean contains=collection.contains(item);

      if (!contains) {

        System.err.println(name + " sorted contains failed.");

        handleError(input,collection);

        return false;

      }

    }

    if (debugTime) {

      afterLookupTime=System.nanoTime();

      lookupTime+=afterLookupTime - beforeLookupTime;

      if (debug > 0)       System.out.println(name + " sorted lookup time = " + (lookupTime / (unsortedCount + sortedCount))+ " ns");

    }

    beforeRemoveSortedTime=0L;

    afterRemoveSortedTime=0L;

    if (debugTime)     beforeRemoveSortedTime=System.nanoTime();

    for (int i=0; i < sorted.length; i++) {

      T item=sorted[i];

      boolean removed=collection.remove(item);

      if (!removed) {

        System.err.println(name + " sorted remove failed.");

        handleError(input,collection);

        return false;

      }

    }

    if (debugTime) {

      afterRemoveSortedTime=System.nanoTime();

      removeSortedTime+=afterRemoveSortedTime - beforeRemoveSortedTime;

      if (debug > 0)       System.out.println(name + " sorted remove time = " + (removeSortedTime / sortedCount)+ " ns");

    }

    if (!collection.isEmpty()) {

      System.err.println(name + " sorted isEmpty() failed.");

      handleError(input,collection);

      return false;

    }

    if (collection.size() != 0) {

      System.err.println(name + " sorted size() failed.");

      handleError(input,collection);

      return false;

    }

  }

  sortedCount++;

{

    beforeMemory=0L;

    afterMemory=0L;

    beforeAddSortedTime=0L;

    afterAddSortedTime=0L;

    if (debugMemory)     beforeMemory=DataStructuresTiming.getMemoryUse();

    if (debugTime)     beforeAddSortedTime=System.nanoTime();

    for (int i=0; i < sorted.length; i++) {

      T item=sorted[i];

      boolean added=collection.add(item);

      if (!added) {

        System.err.println(name + " sorted add failed.");

        handleError(input,collection);

        return false;

      }

    }

    if (debugTime) {

      afterAddSortedTime=System.nanoTime();

      addSortedTime+=afterAddSortedTime - beforeAddSortedTime;

      if (debug > 0)       System.out.println(name + " sorted add time = " + (addSortedTime / sortedCount)+ " ns");

    }

    if (debugMemory) {

      afterMemory=DataStructuresTiming.getMemoryUse();

      memory+=afterMemory - beforeMemory;

      if (debug > 0)       System.out.println(name + " sorted memory use = " + (memory / (unsortedCount + sortedCount))+ " bytes");

    }

    if (debug > 1)     System.out.println(collection.toString());

    beforeLookupTime=0L;

    afterLookupTime=0L;

    if (debugTime)     beforeLookupTime=System.nanoTime();

    for (int i=0; i < sorted.length; i++) {

      T item=sorted[i];

      boolean contains=collection.contains(item);

      if (!contains) {

        System.err.println(name + " sorted contains failed.");

        handleError(input,collection);

        return false;

      }

    }

    if (debugTime) {

      afterLookupTime=System.nanoTime();

      lookupTime+=afterLookupTime - beforeLookupTime;

      if (debug > 0)       System.out.println(name + " sorted lookup time = " + (lookupTime / (unsortedCount + sortedCount))+ " ns");

    }

    beforeRemoveSortedTime=0L;

    afterRemoveSortedTime=0L;

    if (debugTime)     beforeRemoveSortedTime=System.nanoTime();

    for (int i=sorted.length - 1; i >= 0; i--) {

      T item=sorted[i];

      boolean removed=collection.remove(item);

      if (!removed) {

        System.err.println(name + " sorted remove failed.");

        handleError(input,collection);

        return false;

      }

    }

    if (debugTime) {

      afterRemoveSortedTime=System.nanoTime();

      removeSortedTime+=afterRemoveSortedTime - beforeRemoveSortedTime;

      if (debug > 0)       System.out.println(name + " sorted remove time = " + (removeSortedTime / sortedCount)+ " ns");

    }

    if (!collection.isEmpty()) {

      System.err.println(name + " sorted isEmpty() failed.");

      handleError(input,collection);

      return false;

    }

    if (collection.size() != 0) {

      System.err.println(name + " sorted size() failed.");

      handleError(input,collection);

      return false;

    }

  }

  if (!firstTimeThru) {

    if (TEST_RESULTS[testIndex] == null)     TEST_RESULTS[testIndex]=new long[6];

    TEST_RESULTS[testIndex][0]+=(addTime / unsortedCount);

    TEST_RESULTS[testIndex][1]+=(removeTime / unsortedCount);

    TEST_RESULTS[testIndex][2]+=(addSortedTime / sortedCount);

    TEST_RESULTS[testIndex][3]+=(removeSortedTime / sortedCount);

    TEST_RESULTS[testIndex][4]+=(lookupTime / (unsortedCount + sortedCount));

    TEST_RESULTS[testIndex][5]+=(memory / (unsortedCount + sortedCount));

  }

  if (debug > 1)   System.out.println();

  return true;

}

Location: DataStructuresTiming.java

Content: 

@SuppressWarnings("unchecked") private static <K extends Comparable<K>,V>boolean testJavaMap(java.util.Map<K,V> map,Class<K> keyType,Class<V> valueType,String name,Integer[] _unsorted,Integer[] _sorted,String input){

  if (!map.isEmpty()) {

    System.err.println(name + " initial isEmpty() failed.");

    handleError(input,map);

    return false;

  }

  if (map.size() != 0) {

    System.err.println(name + " initial size() failed.");

    handleError(input,map);

    return false;

  }

  K[] kUnsorted=(K[])Array.newInstance(keyType,_unsorted.length);

  K[] kSorted=(K[])Array.newInstance(keyType,_sorted.length);

  V[] vUnsorted=(V[])Array.newInstance(valueType,_unsorted.length);

  V[] vSorted=(V[])Array.newInstance(valueType,_sorted.length);

  for (int i=0; i < kUnsorted.length; i++)   kUnsorted[i]=Utils.parseT(_unsorted[i],keyType);

  for (int i=0; i < kSorted.length; i++)   kSorted[i]=Utils.parseT(_sorted[i],keyType);

  for (int i=0; i < vUnsorted.length; i++)   vUnsorted[i]=Utils.parseT(_unsorted[i],valueType);

  for (int i=0; i < kSorted.length; i++)   vSorted[i]=Utils.parseT(_sorted[i],valueType);

  long sortedCount=0;

  long unsortedCount=0;

  long addTime=0L;

  long removeTime=0L;

  long beforeAddTime=0L;

  long afterAddTime=0L;

  long beforeRemoveTime=0L;

  long afterRemoveTime=0L;

  long memory=0L;

  long beforeMemory=0L;

  long afterMemory=0L;

  long lookupTime=0L;

  long beforeLookupTime=0L;

  long afterLookupTime=0L;

  if (debug > 1)   System.out.println(name);

  if (!firstTimeThru)   TEST_NAMES[testIndex]=name;

  unsortedCount++;

{

    beforeMemory=0L;

    afterMemory=0L;

    beforeAddTime=0L;

    afterAddTime=0L;

    if (debugMemory)     beforeMemory=DataStructuresTiming.getMemoryUse();

    if (debugTime)     beforeAddTime=System.nanoTime();

    for (int i=0; i < kUnsorted.length; i++) {

      K k=kUnsorted[i];

      V v=vUnsorted[i];

      map.put(k,v);

    }

    if (debugTime) {

      afterAddTime=System.nanoTime();

      addTime+=afterAddTime - beforeAddTime;

      if (debug > 0)       System.out.println(name + " unsorted add time = " + (addTime / unsortedCount)+ " ns");

    }

    if (debugMemory) {

      afterMemory=DataStructuresTiming.getMemoryUse();

      memory+=afterMemory - beforeMemory;

      if (debug > 0)       System.out.println(name + " unsorted memory use = " + (memory / (unsortedCount + sortedCount))+ " bytes");

    }

    K invalidKey=(K)Utils.parseT(INVALID,keyType);

    boolean contains=map.containsKey(invalidKey);

    V removed=map.remove(invalidKey);

    if (contains || (removed != null)) {

      System.err.println(name + " unsorted invalidity check. contains=" + contains+ " removed="+ removed);

      return false;

    }

    if (debug > 1)     System.out.println(map.toString());

    beforeLookupTime=0L;

    afterLookupTime=0L;

    if (debugTime)     beforeLookupTime=System.nanoTime();

    for (    K k : kUnsorted) {

      map.containsKey(k);

    }

    if (debugTime) {

      afterLookupTime=System.nanoTime();

      lookupTime+=afterLookupTime - beforeLookupTime;

      if (debug > 0)       System.out.println(name + " unsorted lookup time = " + (lookupTime / (unsortedCount + sortedCount))+ " ns");

    }

    if (debugTime)     beforeRemoveTime=System.nanoTime();

    for (int i=0; i < kUnsorted.length; i++) {

      K k=kUnsorted[i];

      removed=map.remove(k);

      if (removed == null) {

        System.err.println(name + " unsorted invalidity check. removed=" + removed);

        return false;

      }

    }

    if (debugTime) {

      afterRemoveTime=System.nanoTime();

      removeTime+=afterRemoveTime - beforeRemoveTime;

      if (debug > 0)       System.out.println(name + " unsorted remove time = " + (removeTime / unsortedCount)+ " ns");

    }

    if (!map.isEmpty()) {

      System.err.println(name + " unsorted isEmpty() failed.");

      handleError(input,map);

      return false;

    }

    if (map.size() != 0) {

      System.err.println(name + " unsorted size() failed.");

      handleError(input,map);

      return false;

    }

  }

  unsortedCount++;

{

    beforeMemory=0L;

    afterMemory=0L;

    beforeAddTime=0L;

    afterAddTime=0L;

    if (debugMemory)     beforeMemory=DataStructuresTiming.getMemoryUse();

    if (debugTime)     beforeAddTime=System.nanoTime();

    for (int i=kUnsorted.length - 1; i >= 0; i--) {

      K k=kUnsorted[i];

      V v=vUnsorted[i];

      map.put(k,v);

    }

    if (debugTime) {

      afterAddTime=System.nanoTime();

      addTime+=afterAddTime - beforeAddTime;

      if (debug > 0)       System.out.println(name + " unsorted add time = " + (addTime / unsortedCount)+ " ns");

    }

    if (debugMemory) {

      afterMemory=DataStructuresTiming.getMemoryUse();

      memory+=afterMemory - beforeMemory;

      if (debug > 0)       System.out.println(name + " unsorted memory use = " + (memory / (unsortedCount + sortedCount))+ " bytes");

    }

    K invalidKey=(K)Utils.parseT(INVALID,keyType);

    boolean contains=map.containsKey(invalidKey);

    V removed=map.remove(invalidKey);

    if (contains || (removed != null)) {

      System.err.println(name + " unsorted invalidity check. contains=" + contains+ " removed="+ removed);

      return false;

    }

    if (debug > 1)     System.out.println(map.toString());

    beforeLookupTime=0L;

    afterLookupTime=0L;

    if (debugTime)     beforeLookupTime=System.nanoTime();

    for (    K k : kUnsorted) {

      map.containsKey(k);

    }

    if (debugTime) {

      afterLookupTime=System.nanoTime();

      lookupTime+=afterLookupTime - beforeLookupTime;

      if (debug > 0)       System.out.println(name + " unsorted lookup time = " + (lookupTime / (unsortedCount + sortedCount))+ " ns");

    }

    beforeRemoveTime=0L;

    afterRemoveTime=0L;

    if (debugTime)     beforeRemoveTime=System.nanoTime();

    for (int i=kUnsorted.length - 1; i >= 0; i--) {

      K k=kUnsorted[i];

      removed=map.remove(k);

      if (removed == null) {

        System.err.println(name + " unsorted invalidity check. removed=" + removed);

        return false;

      }

    }

    if (debugTime) {

      afterRemoveTime=System.nanoTime();

      removeTime+=afterRemoveTime - beforeRemoveTime;

      if (debug > 0)       System.out.println(name + " unsorted remove time = " + (removeTime / unsortedCount)+ " ns");

    }

    if (!map.isEmpty()) {

      System.err.println(name + " unsorted isEmpty() failed.");

      handleError(input,map);

      return false;

    }

    if (map.size() != 0) {

      System.err.println(name + " unsorted size() failed.");

      handleError(input,map);

      return false;

    }

  }

  long addSortedTime=0L;

  long removeSortedTime=0L;

  long beforeAddSortedTime=0L;

  long afterAddSortedTime=0L;

  long beforeRemoveSortedTime=0L;

  long afterRemoveSortedTime=0L;

  sortedCount++;

{

    beforeMemory=0L;

    afterMemory=0L;

    beforeAddSortedTime=0L;

    afterAddSortedTime=0L;

    if (debugMemory)     beforeMemory=DataStructuresTiming.getMemoryUse();

    if (debugTime)     beforeAddSortedTime=System.nanoTime();

    for (int i=0; i < kSorted.length; i++) {

      K k=kSorted[i];

      V v=vSorted[i];

      map.put(k,v);

    }

    if (debugTime) {

      afterAddSortedTime=System.nanoTime();

      addSortedTime+=afterAddSortedTime - beforeAddSortedTime;

      if (debug > 0)       System.out.println(name + " sorted add time = " + (addSortedTime / sortedCount)+ " ns");

    }

    if (debugMemory) {

      afterMemory=DataStructuresTiming.getMemoryUse();

      memory+=afterMemory - beforeMemory;

      if (debug > 0)       System.out.println(name + " sorted memory use = " + (memory / (unsortedCount + sortedCount))+ " bytes");

    }

    K invalidKey=(K)Utils.parseT(INVALID,keyType);

    boolean contains=map.containsKey(invalidKey);

    V removed=map.remove(invalidKey);

    if (contains || (removed != null)) {

      System.err.println(name + " sorted invalidity check. contains=" + contains+ " removed="+ removed);

      return false;

    }

    if (debug > 1)     System.out.println(map.toString());

    beforeLookupTime=0L;

    afterLookupTime=0L;

    if (debugTime)     beforeLookupTime=System.nanoTime();

    for (    K k : kSorted) {

      map.containsKey(k);

    }

    if (debugTime) {

      afterLookupTime=System.nanoTime();

      lookupTime+=afterLookupTime - beforeLookupTime;

      if (debug > 0)       System.out.println(name + " sorted lookup time = " + (lookupTime / (unsortedCount + sortedCount))+ " ns");

    }

    beforeRemoveSortedTime=0L;

    afterRemoveSortedTime=0L;

    if (debugTime)     beforeRemoveSortedTime=System.nanoTime();

    for (int i=0; i < kSorted.length; i++) {

      K k=kSorted[i];

      removed=map.remove(k);

      if (removed == null) {

        System.err.println(name + " unsorted invalidity check. removed=" + removed);

        return false;

      }

    }

    if (debugTime) {

      afterRemoveSortedTime=System.nanoTime();

      removeSortedTime+=afterRemoveSortedTime - beforeRemoveSortedTime;

      if (debug > 0)       System.out.println(name + " sorted remove time = " + (removeSortedTime / sortedCount)+ " ns");

    }

    if (!map.isEmpty()) {

      System.err.println(name + " sorted isEmpty() failed.");

      handleError(input,map);

      return false;

    }

    if (map.size() != 0) {

      System.err.println(name + " sorted size() failed.");

      handleError(input,map);

      return false;

    }

  }

  sortedCount++;

{

    beforeMemory=0L;

    afterMemory=0L;

    beforeAddSortedTime=0L;

    afterAddSortedTime=0L;

    if (debugMemory)     beforeMemory=DataStructuresTiming.getMemoryUse();

    if (debugTime)     beforeAddSortedTime=System.nanoTime();

    for (int i=0; i < kSorted.length; i++) {

      K k=kSorted[i];

      V v=vSorted[i];

      map.put(k,v);

    }

    if (debugTime) {

      afterAddSortedTime=System.nanoTime();

      addSortedTime+=afterAddSortedTime - beforeAddSortedTime;

      if (debug > 0)       System.out.println(name + " sorted add time = " + (addSortedTime / sortedCount)+ " ns");

    }

    if (debugMemory) {

      afterMemory=DataStructuresTiming.getMemoryUse();

      memory+=afterMemory - beforeMemory;

      if (debug > 0)       System.out.println(name + " sorted memory use = " + (memory / (unsortedCount + sortedCount))+ " bytes");

    }

    K invalidKey=(K)Utils.parseT(INVALID,keyType);

    boolean contains=map.containsKey(invalidKey);

    V removed=map.remove(invalidKey);

    if (contains || (removed != null)) {

      System.err.println(name + " sorted invalidity check. contains=" + contains+ " removed="+ removed);

      return false;

    }

    if (debug > 1)     System.out.println(map.toString());

    beforeLookupTime=0L;

    afterLookupTime=0L;

    if (debugTime)     beforeLookupTime=System.nanoTime();

    for (    K k : kSorted) {

      map.containsKey(k);

    }

    if (debugTime) {

      afterLookupTime=System.nanoTime();

      lookupTime+=afterLookupTime - beforeLookupTime;

      if (debug > 0)       System.out.println(name + " sorted lookup time = " + (lookupTime / (unsortedCount + sortedCount))+ " ns");

    }

    beforeRemoveSortedTime=0L;

    afterRemoveSortedTime=0L;

    if (debugTime)     beforeRemoveSortedTime=System.nanoTime();

    for (int i=kSorted.length - 1; i >= 0; i--) {

      K k=kSorted[i];

      removed=map.remove(k);

      if (removed == null) {

        System.err.println(name + " unsorted invalidity check. removed=" + removed);

        return false;

      }

    }

    if (debugTime) {

      afterRemoveSortedTime=System.nanoTime();

      removeSortedTime+=afterRemoveSortedTime - beforeRemoveSortedTime;

      if (debug > 0)       System.out.println(name + " sorted remove time = " + (removeSortedTime / sortedCount)+ " ns");

    }

    if (!map.isEmpty()) {

      System.err.println(name + " sorted isEmpty() failed.");

      handleError(input,map);

      return false;

    }

    if (map.size() != 0) {

      System.err.println(name + " sorted size() failed.");

      handleError(input,map);

      return false;

    }

  }

  if (!firstTimeThru) {

    if (TEST_RESULTS[testIndex] == null)     TEST_RESULTS[testIndex]=new long[6];

    TEST_RESULTS[testIndex][0]+=(addTime / unsortedCount);

    TEST_RESULTS[testIndex][1]+=(removeTime / unsortedCount);

    TEST_RESULTS[testIndex][2]+=(addSortedTime / sortedCount);

    TEST_RESULTS[testIndex][3]+=(removeSortedTime / sortedCount);

    TEST_RESULTS[testIndex][4]+=(lookupTime / (unsortedCount + sortedCount));

    TEST_RESULTS[testIndex][5]+=(memory / (unsortedCount + sortedCount));

  }

  if (debug > 1)   System.out.println();

  return true;

}

