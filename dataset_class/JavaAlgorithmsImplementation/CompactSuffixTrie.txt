Location: CompactSuffixTrie.java

Content: 

/** 

 * Add character sequence to the trie.

 * @param sequence to add to trie.

 * @return True if added successfully.

 */

public boolean add(C sequence){

  int length=sequence.length();

  for (int i=0; i < length; i++) {

    CharSequence seq=sequence.subSequence(i,length);

    tree.add((C)seq);

  }

  return true;

}

Location: CompactSuffixTrie.java

Content: 

/** 

 * Create a compact suffix trie from sequence

 * @param sequence to create a suffix trie from.

 */

public CompactSuffixTrie(C sequence){

  tree=new PatriciaTrie<C>();

  int length=sequence.length();

  for (int i=0; i < length; i++) {

    CharSequence seq=sequence.subSequence(i,length);

    tree.add((C)seq);

  }

}

Location: CompactSuffixTrie.java

Content: 

public boolean equals(CompactSuffixTrie<C> trie){

  if (this.getSuffixes().equals(trie.getSuffixes()))   return true;

  return false;

}

Location: CompactSuffixTrie.java

Content: 

/** 

 * Get all suffixes at node.

 * @param node to get all suffixes at.

 * @return set of suffixes in trie at node.

 */

private Set<String> getSuffixes(PatriciaTrie.Node node){

  StringBuilder builder=new StringBuilder();

  if (node.string != null)   builder.append(node.string);

  Set<String> set=new TreeSet<String>();

  if (node.type == PatriciaTrie.WHITE) {

    set.add(builder.toString());

  }

  for (int i=0; i < node.getChildrenSize(); i++) {

    PatriciaTrie.Node c=node.getChild(i);

    set.addAll(getSuffixes(c,builder.toString()));

  }

  return set;

}

Location: CompactSuffixTrie.java

Content: 

/** 

 * Get all suffixes at node and prepend the prefix.

 * @param node to get all suffixes from.

 * @param prefix to prepend to suffixes.

 * @return set of suffixes in trie at node.

 */

private Set<String> getSuffixes(PatriciaTrie.Node node,String prefix){

  StringBuilder builder=new StringBuilder(prefix);

  if (node.string != null)   builder.append(node.string);

  Set<String> set=new TreeSet<String>();

  if (node.type == PatriciaTrie.WHITE) {

    set.add(builder.toString());

  }

  for (int i=0; i < node.getChildrenSize(); i++) {

    PatriciaTrie.Node c=node.getChild(i);

    set.addAll(getSuffixes(c,builder.toString()));

  }

  return set;

}

