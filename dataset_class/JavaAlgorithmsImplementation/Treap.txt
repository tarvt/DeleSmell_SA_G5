Location: Treap.java

Content: 

/** 

 * Heapify up the treap at the current node to the root.

 * @param current to heapify.

 */

private void heapify(TreapNode<T> current){

  TreapNode<T> parent=(TreapNode<T>)current.parent;

  while (parent != null && current.priority > parent.priority) {

    Node<T> grandParent=parent.parent;

    if (grandParent != null) {

      if (grandParent.greater != null && grandParent.greater == parent) {

        grandParent.greater=current;

        current.parent=grandParent;

      }

 else       if (grandParent.lesser != null && grandParent.lesser == parent) {

        grandParent.lesser=current;

        current.parent=grandParent;

      }

 else {

        throw new RuntimeException("YIKES! Grandparent should have at least one non-NULL child which should be my parent.");

      }

      current.parent=grandParent;

    }

 else {

      root=current;

      root.parent=null;

    }

    if (parent.lesser != null && parent.lesser == current) {

      parent.lesser=null;

      if (current.greater == null) {

        current.greater=parent;

        parent.parent=current;

      }

 else {

        Node<T> lost=current.greater;

        current.greater=parent;

        parent.parent=current;

        parent.lesser=lost;

        lost.parent=parent;

      }

    }

 else     if (parent.greater != null && parent.greater == current) {

      parent.greater=null;

      if (current.lesser == null) {

        current.lesser=parent;

        parent.parent=current;

      }

 else {

        Node<T> lost=current.lesser;

        current.lesser=parent;

        parent.parent=current;

        parent.greater=lost;

        lost.parent=parent;

      }

    }

 else {

      throw new RuntimeException("YIKES! Parent should have at least one non-NULL child which should be me.");

    }

    parent=(TreapNode<T>)current.parent;

  }

}

Location: Treap.java

Content: 

/** 

 * Default constructor.

 */

public Treap(){

  this.creator=new BinarySearchTree.INodeCreator<T>(){

    /** 

 * {@inheritDoc}

 */

    @Override public BinarySearchTree.Node<T> createNewNode(    BinarySearchTree.Node<T> parent,    T id){

      return (new TreapNode<T>(parent,id));

    }

  }

;

}

Location: Treap.java

Content: 

/** 

 * Constructor with external Node creator.

 */

public Treap(INodeCreator<T> creator){

  super(creator);

}

Location: Treap.java

Content: 

/** 

 * Constructor with external Node creator.

 */

public Treap(INodeCreator<T> creator,int randomSeed){

  this(randomSeed);

  this.creator=creator;

}

Location: Treap.java

Content: 

/** 

 * Constructor with a random seed.

 * @param randomSeed to use as a random seed.

 */

public Treap(int randomSeed){

  this();

  Treap.randomSeed=randomSeed;

}

