Location: PatriciaTrie.java

Content: 

/** 

 * Add CharSequence to trie and return the Node which represents the sequence.

 * @param seq to add to the trie.

 * @return Node which represents the sequence in the trie or NULL if thesequence already exists.

 */

protected Node addSequence(C seq){

  if (root == null)   root=this.creator.createNewNode(null,null,BLACK);

  int indexIntoParent=-1;

  int indexIntoString=-1;

  Node node=root;

  for (int i=0; i <= seq.length(); ) {

    indexIntoString=i;

    indexIntoParent++;

    if (i == seq.length())     break;

    char c=seq.charAt(i);

    if (node.partOfThis(c,indexIntoParent)) {

      i++;

      continue;

    }

 else     if (node.string != null && indexIntoParent < node.string.length) {

      break;

    }

    Node child=node.getChildBeginningWithChar(c);

    if (child != null) {

      indexIntoParent=0;

      node=child;

      i++;

    }

 else {

      break;

    }

  }

  Node addedNode=null;

  Node parent=node.parent;

  if (node.string != null && indexIntoParent < node.string.length) {

    char[] parentString=Arrays.copyOfRange(node.string,0,indexIntoParent);

    char[] refactorString=Arrays.copyOfRange(node.string,indexIntoParent,node.string.length);

    if (indexIntoString < seq.length()) {

      if (parent != null)       parent.removeChild(node);

      Node newParent=this.creator.createNewNode(parent,parentString,BLACK);

      if (parent != null)       parent.addChild(newParent);

      Node newNode1=node;

      newNode1.parent=newParent;

      newNode1.string=refactorString;

      newParent.addChild(newNode1);

      CharSequence newString=seq.subSequence(indexIntoString,seq.length());

      Node newNode2=this.creator.createNewNode(newParent,newString.toString().toCharArray(),WHITE);

      newParent.addChild(newNode2);

      addedNode=newNode2;

    }

 else {

      if (parent != null)       parent.removeChild(node);

      Node newParent=this.creator.createNewNode(parent,parentString,WHITE);

      if (parent != null)       parent.addChild(newParent);

      addedNode=newParent;

      Node newNode1=node;

      newNode1.parent=newParent;

      newNode1.string=refactorString;

      newParent.addChild(newNode1);

    }

  }

 else   if (node.string != null && seq.length() == indexIntoString) {

    if (node.type == WHITE)     return null;

    node.type=WHITE;

    addedNode=node;

  }

 else   if (node.string != null) {

    CharSequence newString=seq.subSequence(indexIntoString,seq.length());

    Node newNode=this.creator.createNewNode(node,newString.toString().toCharArray(),WHITE);

    node.addChild(newNode);

    addedNode=newNode;

  }

 else {

    Node newNode=this.creator.createNewNode(node,seq.toString().toCharArray(),WHITE);

    node.addChild(newNode);

    addedNode=newNode;

  }

  size++;

  return addedNode;

}

Location: PatriciaTrie.java

Content: 

/** 

 * {@inheritDoc}

 */

@Override public boolean contains(C seq){

  Node node=getNode(seq);

  return (node != null && node.type == WHITE);

}

Location: PatriciaTrie.java

Content: 

/** 

 * Get node which represents the sequence in the trie.

 * @param seq to find a node for.

 * @return Node which represents the sequence or NULL if not found.

 */

protected Node getNode(C seq){

  Node node=root;

  int indexIntoParent=-1;

  for (int i=0; i < seq.length(); ) {

    indexIntoParent++;

    char c=seq.charAt(i);

    if (node.partOfThis(c,indexIntoParent)) {

      i++;

      continue;

    }

 else     if (node.string != null && indexIntoParent < node.string.length) {

      return null;

    }

    Node child=node.getChildBeginningWithChar(c);

    if (child != null) {

      indexIntoParent=0;

      node=child;

      i++;

    }

 else {

      return null;

    }

  }

  if (node.string != null && indexIntoParent == (node.string.length - 1)) {

    int length=node.string.length;

    CharSequence sub=seq.subSequence(seq.length() - length,seq.length());

    for (int i=0; i < length; i++) {

      if (node.string[i] != sub.charAt(i))       return null;

    }

    if (node.type == WHITE)     return node;

  }

  return null;

}

Location: PatriciaTrie.java

Content: 

public PatriciaTrie(){

  this.creator=new INodeCreator(){

    /** 

 * {@inheritDoc}

 */

    @Override public Node createNewNode(    Node parent,    char[] seq,    boolean type){

      return (new Node(parent,seq,type));

    }

  }

;

}

Location: PatriciaTrie.java

Content: 

/** 

 * Constructor with external Node creator.

 */

public PatriciaTrie(INodeCreator creator){

  this.creator=creator;

}

Location: PatriciaTrie.java

Content: 

/** 

 * {@inheritDoc}

 */

@Override public C remove(C seq){

  C removed=null;

  Node node=getNode(seq);

  if (node != null)   removed=(C)(new String(node.string));

  remove(node);

  return removed;

}

Location: PatriciaTrie.java

Content: 

protected void remove(Node node){

  if (node == null)   return;

  node.type=BLACK;

  Node parent=node.parent;

  if (node.getChildrenSize() == 0) {

    if (parent != null)     parent.removeChild(node);

  }

 else   if (node.getChildrenSize() == 1) {

    Node child=node.getChild(0);

    StringBuilder builder=new StringBuilder();

    builder.append(node.string);

    builder.append(child.string);

    child.string=builder.toString().toCharArray();

    child.parent=parent;

    if (parent != null) {

      parent.removeChild(node);

      parent.addChild(child);

    }

  }

  while (parent != null && parent.type == BLACK && parent.getChildrenSize() == 1) {

    Node child=parent.getChild(0);

    StringBuilder builder=new StringBuilder();

    if (parent.string != null)     builder.append(parent.string);

    builder.append(child.string);

    child.string=builder.toString().toCharArray();

    if (parent.parent != null) {

      child.parent=parent.parent;

      parent.parent.removeChild(parent);

      parent.parent.addChild(child);

    }

    parent=parent.parent;

  }

  size--;

}

Location: PatriciaTrie.java

Content: 

private boolean validate(Node node,String string,java.util.Set<C> keys){

  StringBuilder builder=new StringBuilder(string);

  if (node.string != null)   builder.append(node.string);

  String s=builder.toString();

  if (node.type == WHITE) {

    C c=(C)s;

    if (c == null)     return false;

    if (keys.contains(c))     return false;

    keys.add(c);

  }

  for (int i=0; i < node.childrenSize; i++) {

    Node n=node.getChild(i);

    if (n == null)     return false;

    if (n.parent != node)     return false;

    if (!validate(n,s,keys))     return false;

  }

  return true;

}

