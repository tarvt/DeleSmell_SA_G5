Location: TurboMatchingTest.java

Content: 

@Test public void testEmptyGraph(){

  List<Graph.Edge<Integer>> edges=new ArrayList<Graph.Edge<Integer>>();

{

  }

  final Graph<Integer> graph=new Graph<Integer>(vertices,edges);

  TurboMatching.MatchingResult<Integer> matchingResult=TurboMatching.getMaximumMatching(graph);

  assertTrue(matchingResult.getSize() == 0);

  assertTrue(matchingResult.getMate().isEmpty());

}

Location: TurboMatchingTest.java

Content: 

@Test public void testFullBipartiteGraph(){

  List<Graph.Edge<Integer>> edges=new ArrayList<Graph.Edge<Integer>>();

{

    edges.add(new Graph.Edge<Integer>(1,v_a1,v_b1));

    edges.add(new Graph.Edge<Integer>(1,v_a1,v_b2));

    edges.add(new Graph.Edge<Integer>(1,v_a1,v_b3));

    edges.add(new Graph.Edge<Integer>(1,v_a2,v_b1));

    edges.add(new Graph.Edge<Integer>(1,v_a2,v_b2));

    edges.add(new Graph.Edge<Integer>(1,v_a2,v_b3));

    edges.add(new Graph.Edge<Integer>(1,v_a3,v_b1));

    edges.add(new Graph.Edge<Integer>(1,v_a3,v_b2));

    edges.add(new Graph.Edge<Integer>(1,v_a3,v_b3));

  }

  final Graph<Integer> graph=new Graph<Integer>(vertices,edges);

  TurboMatching.MatchingResult<Integer> matchingResult=TurboMatching.getMaximumMatching(graph);

  assertTrue(matchingResult.getSize() == 3);

  for (  Graph.Vertex<Integer> vertex : vertices) {

    assertTrue(matchingResult.getMate().get(matchingResult.getMate().get(vertex)).equals(vertex));

  }

}

Location: TurboMatchingTest.java

Content: 

@Test public void testOneMatched(){

  List<Graph.Edge<Integer>> edges=new ArrayList<Graph.Edge<Integer>>();

{

    edges.add(new Graph.Edge<Integer>(1,v_a1,v_b1));

    edges.add(new Graph.Edge<Integer>(1,v_a1,v_b2));

    edges.add(new Graph.Edge<Integer>(1,v_a1,v_b3));

  }

  final Graph<Integer> graph=new Graph<Integer>(vertices,edges);

  TurboMatching.MatchingResult<Integer> matchingResult=TurboMatching.getMaximumMatching(graph);

  assertTrue(matchingResult.getSize() == 1);

  assertTrue(matchingResult.getMate().containsKey(v_a1));

  assertTrue(matchingResult.getMate().containsValue(v_a1));

  assertFalse(matchingResult.getMate().containsKey(v_a2));

  assertFalse(matchingResult.getMate().containsValue(v_a2));

  assertFalse(matchingResult.getMate().containsKey(v_a3));

  assertFalse(matchingResult.getMate().containsValue(v_a3));

}

Location: TurboMatchingTest.java

Content: 

@Test public void testSingleEdgeForVertex(){

  List<Graph.Edge<Integer>> edges=new ArrayList<Graph.Edge<Integer>>();

{

    edges.add(new Graph.Edge<Integer>(1,v_a1,v_b1));

    edges.add(new Graph.Edge<Integer>(1,v_a2,v_b2));

    edges.add(new Graph.Edge<Integer>(1,v_a3,v_b3));

  }

  final Graph<Integer> graph=new Graph<Integer>(vertices,edges);

  TurboMatching.MatchingResult<Integer> matchingResult=TurboMatching.getMaximumMatching(graph);

  assertTrue(matchingResult.getSize() == 3);

  assertTrue(matchingResult.getMate().get(v_a1).equals(v_b1));

  assertTrue(matchingResult.getMate().get(v_a2).equals(v_b2));

  assertTrue(matchingResult.getMate().get(v_a3).equals(v_b3));

  assertTrue(matchingResult.getMate().get(v_b1).equals(v_a1));

  assertTrue(matchingResult.getMate().get(v_b2).equals(v_a2));

  assertTrue(matchingResult.getMate().get(v_b3).equals(v_a3));

}

Location: TurboMatchingTest.java

Content: 

@Test public void testTwoMatched(){

  List<Graph.Edge<Integer>> edges=new ArrayList<Graph.Edge<Integer>>();

{

    edges.add(new Graph.Edge<Integer>(1,v_a1,v_b1));

    edges.add(new Graph.Edge<Integer>(1,v_a1,v_b3));

    edges.add(new Graph.Edge<Integer>(1,v_a2,v_b2));

    edges.add(new Graph.Edge<Integer>(1,v_a3,v_b2));

  }

  final Graph<Integer> graph=new Graph<Integer>(vertices,edges);

  TurboMatching.MatchingResult<Integer> matchingResult=TurboMatching.getMaximumMatching(graph);

  assertTrue(matchingResult.getSize() == 2);

  assertTrue(matchingResult.getMate().containsKey(v_a1));

  assertTrue(matchingResult.getMate().containsKey(v_b2));

  assertTrue(matchingResult.getMate().containsValue(v_a1));

  assertTrue(matchingResult.getMate().containsValue(v_b2));

}

