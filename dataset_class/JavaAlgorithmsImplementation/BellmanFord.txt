Location: BellmanFord.java

Content: 

private BellmanFord(){

}

Location: BellmanFord.java

Content: 

private static void getShortestPath(Graph<Integer> graph,Graph.Vertex<Integer> start,Map<Graph.Vertex<Integer>,List<Graph.Edge<Integer>>> paths,Map<Graph.Vertex<Integer>,Graph.CostVertexPair<Integer>> costs){

  if (graph == null)   throw (new NullPointerException("Graph must be non-NULL."));

  if (start == null)   throw (new NullPointerException("start must be non-NULL."));

  for (  Graph.Vertex<Integer> v : graph.getVertices())   paths.put(v,new ArrayList<Graph.Edge<Integer>>());

  for (  Graph.Vertex<Integer> v : graph.getVertices())   if (v.equals(start))   costs.put(v,new Graph.CostVertexPair<Integer>(0,v));

 else   costs.put(v,new Graph.CostVertexPair<Integer>(Integer.MAX_VALUE,v));

  boolean negativeCycleCheck=false;

  for (int i=0; i < graph.getVertices().size(); i++) {

    if (i == (graph.getVertices().size() - 1))     negativeCycleCheck=true;

    for (    Graph.Edge<Integer> e : graph.getEdges()) {

      final Graph.CostVertexPair<Integer> pair=costs.get(e.getToVertex());

      final Graph.CostVertexPair<Integer> lowestCostToThisVertex=costs.get(e.getFromVertex());

      if (lowestCostToThisVertex.getCost() == Integer.MAX_VALUE)       continue;

      final int cost=lowestCostToThisVertex.getCost() + e.getCost();

      if (cost < pair.getCost()) {

        pair.setCost(cost);

        if (negativeCycleCheck) {

          throw new IllegalArgumentException("Graph contains a negative weight cycle.");

        }

        final List<Graph.Edge<Integer>> list=paths.get(e.getToVertex());

        list.clear();

        list.addAll(paths.get(e.getFromVertex()));

        list.add(e);

      }

    }

  }

}

