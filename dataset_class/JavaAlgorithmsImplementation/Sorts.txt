Location: Sorts.java

Content: 

@Test public void testAmericanFlagSorts(){

  Integer[] result=AmericanFlagSort.sort(unsorted.clone());

  assertTrue("American flag sort unsorted error. result=" + print(result),check(result));

  result=AmericanFlagSort.sort(sorted.clone());

  assertTrue("American flag sort sorted error. result=" + print(result),check(result));

  result=AmericanFlagSort.sort(reverse.clone());

  assertTrue("American flag sort reverse error. result=" + print(result),check(result));

}

Location: Sorts.java

Content: 

@Test public void testBubbleSorts(){

  Integer[] result=BubbleSort.sort(unsorted.clone());

  assertTrue("Bubble sort unsorted error. result=" + print(result),check(result));

  result=BubbleSort.sort(sorted.clone());

  assertTrue("Bubble sort sorted error. result=" + print(result),check(result));

  result=BubbleSort.sort(reverse.clone());

  assertTrue("Bubble sort reverse error. result=" + print(result),check(result));

}

Location: Sorts.java

Content: 

@Test public void testCountingSorts(){

  Integer[] result=CountingSort.sort(unsorted.clone());

  assertTrue("Counting sort unsorted error. result=" + print(result),check(result));

  result=CountingSort.sort(sorted.clone());

  assertTrue("Counting sort sorted error. result=" + print(result),check(result));

  result=CountingSort.sort(reverse.clone());

  assertTrue("Counting sort reverse error. result=" + print(result),check(result));

}

Location: Sorts.java

Content: 

@Test public void testHeapSorts(){

  Integer[] result=HeapSort.sort(unsorted.clone());

  assertTrue("Heap sort unsorted error. result=" + print(result),check(result));

  result=HeapSort.sort(sorted.clone());

  assertTrue("Heap sort sorted error. result=" + print(result),check(result));

  result=HeapSort.sort(reverse.clone());

  assertTrue("Heap sort reverse error. result=" + print(result),check(result));

}

Location: Sorts.java

Content: 

@Test public void testInsertionSorts(){

  Integer[] result=InsertionSort.sort(unsorted.clone());

  assertTrue("Inerstion sort unsorted error. result=" + print(result),check(result));

  result=InsertionSort.sort(sorted.clone());

  assertTrue("Inerstion sort sorted error. result=" + print(result),check(result));

  result=InsertionSort.sort(reverse.clone());

  assertTrue("Inerstion sort reverse error. result=" + print(result),check(result));

}

Location: Sorts.java

Content: 

@Test public void testMergeSortsInPlace(){

  Integer[] result=MergeSort.sort(MergeSort.SPACE_TYPE.IN_PLACE,unsorted.clone());

  assertTrue("Merge sort unsorted error. result=" + print(result),check(result));

  result=MergeSort.sort(MergeSort.SPACE_TYPE.IN_PLACE,sorted.clone());

  assertTrue("Merge sort sorted error. result=" + print(result),check(result));

  result=MergeSort.sort(MergeSort.SPACE_TYPE.IN_PLACE,reverse.clone());

  assertTrue("merge sort reverse error. result=" + print(result),check(result));

}

Location: Sorts.java

Content: 

@Test public void testMergeSortsNotInPlace(){

  Integer[] result=MergeSort.sort(MergeSort.SPACE_TYPE.NOT_IN_PLACE,unsorted.clone());

  assertTrue("Merge sort unsorted error. result=" + print(result),check(result));

  result=MergeSort.sort(MergeSort.SPACE_TYPE.NOT_IN_PLACE,sorted.clone());

  assertTrue("Merge sort sorted error. result=" + print(result),check(result));

  result=MergeSort.sort(MergeSort.SPACE_TYPE.NOT_IN_PLACE,reverse.clone());

  assertTrue("merge sort reverse error. result=" + print(result),check(result));

}

Location: Sorts.java

Content: 

@Test public void testQuickSorts(){

  Integer[] result=QuickSort.sort(QuickSort.PIVOT_TYPE.FIRST,unsorted.clone());

  assertTrue("Quick sort pivot firt unsorted error. result=" + print(result),check(result));

  result=QuickSort.sort(QuickSort.PIVOT_TYPE.FIRST,sorted.clone());

  assertTrue("Quick sort pivot firt sorted error. result=" + print(result),check(result));

  result=QuickSort.sort(QuickSort.PIVOT_TYPE.FIRST,reverse.clone());

  assertTrue("Quick sort pivot firt reverse error. result=" + print(result),check(result));

  result=QuickSort.sort(QuickSort.PIVOT_TYPE.MIDDLE,unsorted.clone());

  assertTrue("Quick sort pivot middle unsorted error. result=" + print(result),check(result));

  result=QuickSort.sort(QuickSort.PIVOT_TYPE.MIDDLE,sorted.clone());

  assertTrue("Quick sort pivot middle sorted error. result=" + print(result),check(result));

  result=QuickSort.sort(QuickSort.PIVOT_TYPE.MIDDLE,reverse.clone());

  assertTrue("Quick sort pivot middle reverse error. result=" + print(result),check(result));

  result=QuickSort.sort(QuickSort.PIVOT_TYPE.RANDOM,unsorted.clone());

  assertTrue("Quick sort pivot random unsorted error. result=" + print(result),check(result));

  result=QuickSort.sort(QuickSort.PIVOT_TYPE.RANDOM,sorted.clone());

  assertTrue("Quick sort pivot random sorted error. result=" + print(result),check(result));

  result=QuickSort.sort(QuickSort.PIVOT_TYPE.RANDOM,reverse.clone());

  assertTrue("Quick sort pivot random reverse error. result=" + print(result),check(result));

}

Location: Sorts.java

Content: 

@Test public void testRadixSorts(){

  Integer[] result=RadixSort.sort(unsorted.clone());

  assertTrue("Radix sort unsorted error. result=" + print(result),check(result));

  result=RadixSort.sort(sorted.clone());

  assertTrue("Radix sort sorted error. result=" + print(result),check(result));

  result=RadixSort.sort(reverse.clone());

  assertTrue("Radix sort reverse error. result=" + print(result),check(result));

}

Location: Sorts.java

Content: 

@Test public void testShellsSorts(){

  int[] shells=new int[]{10,5,3,1};

  Integer[] result=ShellSort.sort(shells,unsorted.clone());

  assertTrue("Shell's sort unsorted error. result=" + print(result),check(result));

  result=ShellSort.sort(shells,sorted.clone());

  assertTrue("Shell's sort sorted error. result=" + print(result),check(result));

  result=ShellSort.sort(shells,reverse.clone());

  assertTrue("Shell's sort reverse error. result=" + print(result),check(result));

}

