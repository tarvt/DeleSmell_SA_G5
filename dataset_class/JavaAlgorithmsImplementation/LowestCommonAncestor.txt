Location: LowestCommonAncestor.java

Content: 

/** 

 * Finds lower common ancestor of two nodes. Complexity O(log n) where n is the height of the tree.

 * @param node1 first node

 * @param node2 second node

 * @return lower common ancestor

 * @throws NodesNotInSameTreeException if nodes don't have common root

 */

public static <S>TreeNode<S> lowestCommonAncestor(TreeNode<S> node1,TreeNode<S> node2) throws NodesNotInSameTreeException {

  if (node1 == node2)   return node1;

 else   if (node1.depth < node2.depth)   return lowestCommonAncestor(node2,node1);

 else   if (node1.depth > node2.depth) {

    int diff=node1.depth - node2.depth;

    int jump=0;

    while (diff > 0) {

      if (diff % 2 == 1)       node1=node1.ancestors.get(jump);

      jump++;

      diff/=2;

    }

    return lowestCommonAncestor(node1,node2);

  }

 else {

    try {

      int step=0;

      while (1 << (step + 1) <= node1.depth)       step++;

      while (step >= 0) {

        if (step < node1.ancestors.size() && node1.ancestors.get(step) != node2.ancestors.get(step)) {

          node1=node1.ancestors.get(step);

          node2=node2.ancestors.get(step);

        }

        step--;

      }

      return node1.ancestors.get(0);

    }

 catch (    Exception e) {

      throw new NodesNotInSameTreeException();

    }

  }

}

