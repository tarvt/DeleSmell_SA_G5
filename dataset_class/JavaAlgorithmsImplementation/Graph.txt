Location: Graph.java

Content: 

public List<Edge<T>> getEdges(){

  return allEdges;

}

Location: Graph.java

Content: 

public TYPE getType(){

  return type;

}

Location: Graph.java

Content: 

public List<Vertex<T>> getVertices(){

  return allVertices;

}

Location: Graph.java

Content: 

public Graph(){

}

Location: Graph.java

Content: 

/** 

 * Creates a Graph from the vertices and edges. This defaults to an undirected Graph NOTE: Duplicate vertices and edges ARE allowed. NOTE: Copies the vertex and edge objects but does NOT store the Collection parameters itself.

 * @param vertices Collection of vertices

 * @param edges Collection of edges

 */

public Graph(Collection<Vertex<T>> vertices,Collection<Edge<T>> edges){

  this(TYPE.UNDIRECTED,vertices,edges);

}

Location: Graph.java

Content: 

/** 

 * Deep copies 

 */

public Graph(Graph<T> g){

  type=g.getType();

  for (  Vertex<T> v : g.getVertices())   this.allVertices.add(new Vertex<T>(v));

  for (  Vertex<T> v : this.getVertices()) {

    for (    Edge<T> e : v.getEdges()) {

      this.allEdges.add(e);

    }

  }

}

Location: Graph.java

Content: 

public Graph(TYPE type){

  this.type=type;

}

Location: Graph.java

Content: 

/** 

 * Creates a Graph from the vertices and edges. NOTE: Duplicate vertices and edges ARE allowed. NOTE: Copies the vertex and edge objects but does NOT store the Collection parameters itself.

 * @param vertices Collection of vertices

 * @param edges Collection of edges

 */

public Graph(TYPE type,Collection<Vertex<T>> vertices,Collection<Edge<T>> edges){

  this(type);

  this.allVertices.addAll(vertices);

  this.allEdges.addAll(edges);

  for (  Edge<T> e : edges) {

    final Vertex<T> from=e.from;

    final Vertex<T> to=e.to;

    if (!this.allVertices.contains(from) || !this.allVertices.contains(to))     continue;

    from.addEdge(e);

    if (this.type == TYPE.UNDIRECTED) {

      Edge<T> reciprical=new Edge<T>(e.cost,to,from);

      to.addEdge(reciprical);

      this.allEdges.add(reciprical);

    }

  }

}

