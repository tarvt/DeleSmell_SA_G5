Location: Prim.java

Content: 

public static Graph.CostPathPair<Integer> getMinimumSpanningTree(Graph<Integer> graph,Graph.Vertex<Integer> start){

  if (graph == null)   throw (new NullPointerException("Graph must be non-NULL."));

  if (graph.getType() == Graph.TYPE.DIRECTED)   throw (new IllegalArgumentException("Undirected graphs only."));

  int cost=0;

  final Set<Graph.Vertex<Integer>> unvisited=new HashSet<Graph.Vertex<Integer>>();

  unvisited.addAll(graph.getVertices());

  unvisited.remove(start);

  final List<Graph.Edge<Integer>> path=new ArrayList<Graph.Edge<Integer>>();

  final Queue<Graph.Edge<Integer>> edgesAvailable=new PriorityQueue<Graph.Edge<Integer>>();

  Graph.Vertex<Integer> vertex=start;

  while (!unvisited.isEmpty()) {

    for (    Graph.Edge<Integer> e : vertex.getEdges()) {

      if (unvisited.contains(e.getToVertex()))       edgesAvailable.add(e);

    }

    final Graph.Edge<Integer> e=edgesAvailable.remove();

    cost+=e.getCost();

    path.add(e);

    vertex=e.getToVertex();

    unvisited.remove(vertex);

  }

  return (new Graph.CostPathPair<Integer>(cost,path));

}

Location: Prim.java

Content: 

private Prim(){

}

