Location: Kruskal.java

Content: 

public static Graph.CostPathPair<Integer> getMinimumSpanningTree(Graph<Integer> graph){

  if (graph == null)   throw (new NullPointerException("Graph must be non-NULL."));

  if (graph.getType() == Graph.TYPE.DIRECTED)   throw (new IllegalArgumentException("Undirected graphs only."));

  int cost=0;

  final List<Graph.Edge<Integer>> path=new ArrayList<Graph.Edge<Integer>>();

  HashMap<Graph.Vertex<Integer>,HashSet<Graph.Vertex<Integer>>> membershipMap=new HashMap<Graph.Vertex<Integer>,HashSet<Graph.Vertex<Integer>>>();

  for (  Graph.Vertex<Integer> v : graph.getVertices()) {

    HashSet<Graph.Vertex<Integer>> set=new HashSet<Graph.Vertex<Integer>>();

    set.add(v);

    membershipMap.put(v,set);

  }

  PriorityQueue<Graph.Edge<Integer>> edgeQueue=new PriorityQueue<Graph.Edge<Integer>>(graph.getEdges());

  while (!edgeQueue.isEmpty()) {

    Graph.Edge<Integer> edge=edgeQueue.poll();

    if (!isTheSamePart(edge.getFromVertex(),edge.getToVertex(),membershipMap)) {

      union(edge.getFromVertex(),edge.getToVertex(),membershipMap);

      path.add(edge);

      cost+=edge.getCost();

    }

  }

  return (new Graph.CostPathPair<Integer>(cost,path));

}

Location: Kruskal.java

Content: 

private static boolean isTheSamePart(Graph.Vertex<Integer> v1,Graph.Vertex<Integer> v2,HashMap<Graph.Vertex<Integer>,HashSet<Graph.Vertex<Integer>>> membershipMap){

  return membershipMap.get(v1) == membershipMap.get(v2);

}

Location: Kruskal.java

Content: 

private Kruskal(){

}

Location: Kruskal.java

Content: 

private static void union(Graph.Vertex<Integer> v1,Graph.Vertex<Integer> v2,HashMap<Graph.Vertex<Integer>,HashSet<Graph.Vertex<Integer>>> membershipMap){

  HashSet<Graph.Vertex<Integer>> firstSet=membershipMap.get(v1);

  HashSet<Graph.Vertex<Integer>> secondSet=membershipMap.get(v2);

  if (secondSet.size() > firstSet.size()) {

    HashSet<Graph.Vertex<Integer>> tempSet=firstSet;

    firstSet=secondSet;

    secondSet=tempSet;

  }

  for (  Graph.Vertex<Integer> v : secondSet) {

    membershipMap.put(v,firstSet);

  }

  firstSet.addAll(secondSet);

}

