Location: Integers.java

Content: 

private static final String handleUnderOneThousand(int number){

  StringBuilder builder=new StringBuilder();

  int x=number;

  int m=x / HUNDRED;

  int r=x % HUNDRED;

  if (m > 0) {

    builder.append(singleDigits.get(m)).append("-hundred");

    x=x % HUNDRED;

  }

  if (r > 0) {

    if (m > 0)     builder.append(" ");

    if (x <= 19) {

      builder.append(singleDigits.get(x));

    }

 else {

      m=x / TEN;

      r=x % TEN;

      if (r == 0) {

        builder.append(multiDigits.get(x));

      }

 else {

        x=x - r;

        builder.append(multiDigits.get(x)).append("-");

        builder.append(singleDigits.get(r));

      }

    }

  }

  return builder.toString();

}

Location: Integers.java

Content: 

public static final boolean powerOfTwoUsingBits(int numberToCheck){

  int number=numberToCheck;

  if (number != 0 && ((number & (number - 1)) == 0))   return true;

  return false;

}

Location: Integers.java

Content: 

public static final boolean powerOfTwoUsingLog(int numberToCheck){

  int number=numberToCheck;

  double doubleLog=Math.log10(number) / Math.log10(2);

  int intLog=(int)doubleLog;

  if (Double.compare(doubleLog,intLog) == 0)   return true;

  return false;

}

Location: Integers.java

Content: 

public static final boolean powerOfTwoUsingLoop(int numberToCheck){

  int number=numberToCheck;

  if (number == 0)   return false;

  while (number % 2 == 0) {

    number/=2;

  }

  if (number > 1)   return false;

  return true;

}

Location: Integers.java

Content: 

public static final boolean powerOfTwoUsingRecursion(int numberToCheck){

  int number=numberToCheck;

  if (number == 1)   return true;

  if (number == 0 || number % 2 != 0)   return false;

  return powerOfTwoUsingRecursion(number / 2);

}

Location: Integers.java

Content: 

public static final String toBinaryUsingBigDecimal(int numberToConvert){

  int integer=numberToConvert;

  if (integer < 0)   throw new IllegalArgumentException("Method argument cannot be negative. number=" + integer);

  StringBuilder builder=new StringBuilder();

  BigDecimal number=new BigDecimal(integer);

  BigDecimal[] decimals=null;

  while (number.compareTo(ZERO) > 0) {

    decimals=number.divideAndRemainder(TWO);

    number=decimals[0];

    builder.append(decimals[1]);

  }

  return builder.reverse().toString();

}

Location: Integers.java

Content: 

public static final String toBinaryUsingDivideAndDouble(int numberToConvert){

  int integer=numberToConvert;

  if (integer < 0)   throw new IllegalArgumentException("Method argument cannot be negative. number=" + integer);

  StringBuilder builder=new StringBuilder();

  double temp=0d;

  while (integer > 0) {

    temp=integer / 2d;

    integer=(int)temp;

    builder.append((temp > integer) ? 1 : 0);

  }

  return builder.reverse().toString();

}

Location: Integers.java

Content: 

public static final String toBinaryUsingDivideAndModulus(int numberToConvert){

  int integer=numberToConvert;

  if (integer < 0)   throw new IllegalArgumentException("Method argument cannot be negative. number=" + integer);

  StringBuilder builder=new StringBuilder();

  int temp=0;

  while (integer > 0) {

    temp=integer;

    integer=temp / 2;

    builder.append(temp % 2);

  }

  return builder.reverse().toString();

}

Location: Integers.java

Content: 

public static final String toBinaryUsingShiftsAndModulus(int numberToConvert){

  int integer=numberToConvert;

  if (integer < 0)   throw new IllegalArgumentException("Method argument cannot be negative. number=" + integer);

  StringBuilder builder=new StringBuilder();

  int temp=0;

  while (integer > 0) {

    temp=integer;

    integer=(temp >> 1);

    builder.append(temp % 2);

  }

  return builder.reverse().toString();

}

Location: Integers.java

Content: 

public static final String toEnglish(int number){

  int x=number;

  if (x > Integer.MAX_VALUE || x <= Integer.MIN_VALUE)   throw new IllegalArgumentException("Number has to be <= Integer.MAX_VALUE and > Integer.MIN_VALUE. number=" + x);

  StringBuilder builder=new StringBuilder();

  if (x == 0) {

    builder.append(singleDigits.get(x));

    return builder.toString();

  }

  boolean billion=false;

  boolean million=false;

  boolean thousand=false;

  if (x < 0) {

    builder.append("negative ");

    x=x * -1;

  }

  int m=x / BILLION;

  if (m > 0) {

    billion=true;

    builder.append(handleUnderOneThousand(m)).append("-billion");

    x=x % BILLION;

  }

  m=x / MILLION;

  if (m > 0) {

    if (billion)     builder.append(" ");

    million=true;

    builder.append(handleUnderOneThousand(m)).append("-million");

    x=x % MILLION;

  }

  m=x / THOUSAND;

  if (m > 0) {

    if (billion || million)     builder.append(" ");

    thousand=true;

    builder.append(handleUnderOneThousand(m)).append("-thousand");

    x=x % THOUSAND;

  }

  if (billion || million || thousand && x != 0)   builder.append(" ");

  builder.append(handleUnderOneThousand(x));

  return builder.toString();

}

