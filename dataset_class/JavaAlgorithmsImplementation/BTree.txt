Location: BTree.java

Content: 

/** 

 * Constructor for B-Tree which defaults to a 2-3 B-Tree.

 */

public BTree(){

}

Location: BTree.java

Content: 

/** 

 * Constructor for B-Tree of ordered parameter. Order here means minimum  number of keys in a non-root node. 

 * @param order of the B-Tree.

 */

public BTree(int order){

  this.minKeySize=order;

  this.minChildrenSize=minKeySize + 1;

  this.maxKeySize=2 * minKeySize;

  this.maxChildrenSize=maxKeySize + 1;

}

Location: BTree.java

Content: 

/** 

 * Combined children keys with parent when size is less than minKeySize.

 * @param node with children to combined.

 * @return True if combined successfully.

 */

private boolean combined(Node<T> node){

  Node<T> parent=node.parent;

  int index=parent.indexOf(node);

  int indexOfLeftNeighbor=index - 1;

  int indexOfRightNeighbor=index + 1;

  Node<T> rightNeighbor=null;

  int rightNeighborSize=-minChildrenSize;

  if (indexOfRightNeighbor < parent.numberOfChildren()) {

    rightNeighbor=parent.getChild(indexOfRightNeighbor);

    rightNeighborSize=rightNeighbor.numberOfKeys();

  }

  if (rightNeighbor != null && rightNeighborSize > minKeySize) {

    T removeValue=rightNeighbor.getKey(0);

    int prev=getIndexOfPreviousValue(parent,removeValue);

    T parentValue=parent.removeKey(prev);

    T neighborValue=rightNeighbor.removeKey(0);

    node.addKey(parentValue);

    parent.addKey(neighborValue);

    if (rightNeighbor.numberOfChildren() > 0) {

      node.addChild(rightNeighbor.removeChild(0));

    }

  }

 else {

    Node<T> leftNeighbor=null;

    int leftNeighborSize=-minChildrenSize;

    if (indexOfLeftNeighbor >= 0) {

      leftNeighbor=parent.getChild(indexOfLeftNeighbor);

      leftNeighborSize=leftNeighbor.numberOfKeys();

    }

    if (leftNeighbor != null && leftNeighborSize > minKeySize) {

      T removeValue=leftNeighbor.getKey(leftNeighbor.numberOfKeys() - 1);

      int prev=getIndexOfNextValue(parent,removeValue);

      T parentValue=parent.removeKey(prev);

      T neighborValue=leftNeighbor.removeKey(leftNeighbor.numberOfKeys() - 1);

      node.addKey(parentValue);

      parent.addKey(neighborValue);

      if (leftNeighbor.numberOfChildren() > 0) {

        node.addChild(leftNeighbor.removeChild(leftNeighbor.numberOfChildren() - 1));

      }

    }

 else     if (rightNeighbor != null && parent.numberOfKeys() > 0) {

      T removeValue=rightNeighbor.getKey(0);

      int prev=getIndexOfPreviousValue(parent,removeValue);

      T parentValue=parent.removeKey(prev);

      parent.removeChild(rightNeighbor);

      node.addKey(parentValue);

      for (int i=0; i < rightNeighbor.keysSize; i++) {

        T v=rightNeighbor.getKey(i);

        node.addKey(v);

      }

      for (int i=0; i < rightNeighbor.childrenSize; i++) {

        Node<T> c=rightNeighbor.getChild(i);

        node.addChild(c);

      }

      if (parent.parent != null && parent.numberOfKeys() < minKeySize) {

        this.combined(parent);

      }

 else       if (parent.numberOfKeys() == 0) {

        node.parent=null;

        root=node;

      }

    }

 else     if (leftNeighbor != null && parent.numberOfKeys() > 0) {

      T removeValue=leftNeighbor.getKey(leftNeighbor.numberOfKeys() - 1);

      int prev=getIndexOfNextValue(parent,removeValue);

      T parentValue=parent.removeKey(prev);

      parent.removeChild(leftNeighbor);

      node.addKey(parentValue);

      for (int i=0; i < leftNeighbor.keysSize; i++) {

        T v=leftNeighbor.getKey(i);

        node.addKey(v);

      }

      for (int i=0; i < leftNeighbor.childrenSize; i++) {

        Node<T> c=leftNeighbor.getChild(i);

        node.addChild(c);

      }

      if (parent.parent != null && parent.numberOfKeys() < minKeySize) {

        this.combined(parent);

      }

 else       if (parent.numberOfKeys() == 0) {

        node.parent=null;

        root=node;

      }

    }

  }

  return true;

}

Location: BTree.java

Content: 

/** 

 * Get the greatest valued child from node.

 * @param nodeToGet child with the greatest value.

 * @return Node<T> child with greatest value.

 */

private Node<T> getGreatestNode(Node<T> nodeToGet){

  Node<T> node=nodeToGet;

  while (node.numberOfChildren() > 0) {

    node=node.getChild(node.numberOfChildren() - 1);

  }

  return node;

}

Location: BTree.java

Content: 

/** 

 * Get the index of next key in node.

 * @param node to find the next key in.

 * @param value to find a next value for.

 * @return index of next key or -1 if not found.

 */

private int getIndexOfNextValue(Node<T> node,T value){

  for (int i=0; i < node.numberOfKeys(); i++) {

    T t=node.getKey(i);

    if (t.compareTo(value) >= 0)     return i;

  }

  return node.numberOfKeys() - 1;

}

Location: BTree.java

Content: 

/** 

 * Get the index of previous key in node.

 * @param node to find the previous key in.

 * @param value to find a previous value for.

 * @return index of previous key or -1 if not found.

 */

private int getIndexOfPreviousValue(Node<T> node,T value){

  for (int i=1; i < node.numberOfKeys(); i++) {

    T t=node.getKey(i);

    if (t.compareTo(value) >= 0)     return i - 1;

  }

  return node.numberOfKeys() - 1;

}

Location: BTree.java

Content: 

/** 

 * Remove greatest valued key from node.

 * @param node to remove greatest value from.

 * @return value removed;

 */

private T removeGreatestValue(Node<T> node){

  T value=null;

  if (node.numberOfKeys() > 0) {

    value=node.removeKey(node.numberOfKeys() - 1);

  }

  return value;

}

Location: BTree.java

Content: 

/** 

 * Remove the value from the Node and check invariants

 * @param value T to remove from the tree

 * @param node Node to remove value from

 * @return True if value was removed from the tree.

 */

private T remove(T value,Node<T> node){

  if (node == null)   return null;

  T removed=null;

  int index=node.indexOf(value);

  removed=node.removeKey(value);

  if (node.numberOfChildren() == 0) {

    if (node.parent != null && node.numberOfKeys() < minKeySize) {

      this.combined(node);

    }

 else     if (node.parent == null && node.numberOfKeys() == 0) {

      root=null;

    }

  }

 else {

    Node<T> lesser=node.getChild(index);

    Node<T> greatest=this.getGreatestNode(lesser);

    T replaceValue=this.removeGreatestValue(greatest);

    node.addKey(replaceValue);

    if (greatest.parent != null && greatest.numberOfKeys() < minKeySize) {

      this.combined(greatest);

    }

    if (greatest.numberOfChildren() > maxChildrenSize) {

      this.split(greatest);

    }

  }

  size--;

  return removed;

}

Location: BTree.java

Content: 

/** 

 * The node's key size is greater than maxKeySize, split down the middle.

 * @param nodeToSplit to split.

 */

private void split(Node<T> nodeToSplit){

  Node<T> node=nodeToSplit;

  int numberOfKeys=node.numberOfKeys();

  int medianIndex=numberOfKeys / 2;

  T medianValue=node.getKey(medianIndex);

  Node<T> left=new Node<T>(null,maxKeySize,maxChildrenSize);

  for (int i=0; i < medianIndex; i++) {

    left.addKey(node.getKey(i));

  }

  if (node.numberOfChildren() > 0) {

    for (int j=0; j <= medianIndex; j++) {

      Node<T> c=node.getChild(j);

      left.addChild(c);

    }

  }

  Node<T> right=new Node<T>(null,maxKeySize,maxChildrenSize);

  for (int i=medianIndex + 1; i < numberOfKeys; i++) {

    right.addKey(node.getKey(i));

  }

  if (node.numberOfChildren() > 0) {

    for (int j=medianIndex + 1; j < node.numberOfChildren(); j++) {

      Node<T> c=node.getChild(j);

      right.addChild(c);

    }

  }

  if (node.parent == null) {

    Node<T> newRoot=new Node<T>(null,maxKeySize,maxChildrenSize);

    newRoot.addKey(medianValue);

    node.parent=newRoot;

    root=newRoot;

    node=root;

    node.addChild(left);

    node.addChild(right);

  }

 else {

    Node<T> parent=node.parent;

    parent.addKey(medianValue);

    parent.removeChild(node);

    parent.addChild(left);

    parent.addChild(right);

    if (parent.numberOfKeys() > maxKeySize)     split(parent);

  }

}

