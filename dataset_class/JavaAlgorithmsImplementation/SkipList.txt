Location: SkipList.java

Content: 

protected Node<T> getNode(T value){

  if (head == null)   return null;

  if (head.data.compareTo(value) == 0)   return head;

  NodeLevelPair<T> pair=getPredecessor(value);

  if (pair == null)   return null;

  return pair.node.getNext(pair.level);

}

Location: SkipList.java

Content: 

private NodeLevelPair<T> getPredecessor(T value){

  Node<T> node=head;

  if (node == null)   return null;

  if (node.data.compareTo(value) == 0)   return null;

  int level=node.getLevel();

  Node<T> next=node.getNext(level);

  while (next == null) {

    if (level > 0)     next=node.getNext(--level);

 else     break;

  }

  while (next != null) {

    int comp=next.data.compareTo(value);

    if (comp == 0) {

      NodeLevelPair<T> pair=new NodeLevelPair<T>(level,node);

      return pair;

    }

 else     if (comp >= 1) {

      if (level > 0)       level--;

 else       return null;

      next=node.getNext(level);

    }

 else {

      node=next;

      next=node.getNext(level);

      while (next == null && level > 0) {

        next=node.getNext(--level);

      }

    }

  }

  return null;

}

Location: SkipList.java

Content: 

/** 

 * Returns a random level for inserting a new node. Hardwired to k=1, p=0.5, max 31

 */

private int getRandom(){

  int x=randomSeed;

  x^=x << 13;

  x^=x >>> 17;

  randomSeed=x^=x << 5;

  if ((x & 0x8001) != 0)   return 0;

  int level=1;

  while (((x>>>=1) & 1) != 0)   ++level;

  return level;

}

Location: SkipList.java

Content: 

public String getString(T value,int level){

  StringBuilder builder=new StringBuilder();

  builder.append("size=").append(size).append("\n");

  Node<T> node=head;

  if (node != null) {

    int iLevel=node.getLevel();

    for (int i=iLevel; i >= 0; i--) {

      builder.append("[").append(i).append("] ");

      node=head;

      while (node != null) {

        if (level == i && value != null && node.data.compareTo(value) == 0)         builder.append("(").append(node.data).append(")");

 else         builder.append(node.data);

        Node<T> next=node.getNext(i);

        if (next != null)         builder.append("->");

        node=next;

      }

      if (i > 0)       builder.append("\n");

    }

  }

  builder.append("\n");

  return builder.toString();

}

Location: SkipList.java

Content: 

public SkipList(){

  randomSeed=seedGenerator.nextInt() | 0x0100;

}

Location: SkipList.java

Content: 

public SkipList(INodeCreator<T> creator){

  this();

  this.creator=creator;

}

Location: SkipList.java

Content: 

protected void swapNode(Node<T> node,Node<T> next){

  T value=node.data;

  node.data=next.data;

  next.data=value;

}

