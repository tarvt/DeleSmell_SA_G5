Location: RedBlackTree.java

Content: 

/** 

 * {@inheritDoc}

 */

@Override protected Node<T> addValue(T id){

  if (root == null) {

    root=this.creator.createNewNode(null,id);

    root.lesser=this.creator.createNewNode(root,null);

    root.greater=this.creator.createNewNode(root,null);

    size++;

    return root;

  }

  RedBlackNode<T> nodeAdded=null;

  Node<T> node=root;

  while (node != null) {

    if (node.id == null) {

      node.id=id;

      ((RedBlackNode<T>)node).color=RED;

      node.lesser=this.creator.createNewNode(node,null);

      node.greater=this.creator.createNewNode(node,null);

      nodeAdded=(RedBlackNode<T>)node;

      break;

    }

 else     if (id.compareTo(node.id) <= 0) {

      node=node.lesser;

    }

 else {

      node=node.greater;

    }

  }

  if (nodeAdded != null)   balanceAfterInsert(nodeAdded);

  size++;

  return nodeAdded;

}

Location: RedBlackTree.java

Content: 

/** 

 * Post delete balancing algorithm.

 * @param node to begin balancing at.

 * @return True if balanced or false if error.

 */

private boolean balanceAfterDelete(RedBlackNode<T> node){

  if (node.parent == null) {

    return true;

  }

  RedBlackNode<T> parent=(RedBlackNode<T>)node.parent;

  RedBlackNode<T> sibling=node.getSibling();

  if (sibling.color == RED) {

    parent.color=RED;

    sibling.color=BLACK;

    if (node == parent.lesser) {

      rotateLeft(parent);

      parent=(RedBlackNode<T>)node.parent;

      sibling=node.getSibling();

    }

 else     if (node == parent.greater) {

      rotateRight(parent);

      parent=(RedBlackNode<T>)node.parent;

      sibling=node.getSibling();

    }

 else {

      throw new RuntimeException("Yikes! I'm not related to my parent. " + node.toString());

    }

  }

  if (parent.color == BLACK && sibling.color == BLACK && ((RedBlackNode<T>)sibling.lesser).color == BLACK && ((RedBlackNode<T>)sibling.greater).color == BLACK) {

    sibling.color=RED;

    return balanceAfterDelete(parent);

  }

  if (parent.color == RED && sibling.color == BLACK && ((RedBlackNode<T>)sibling.lesser).color == BLACK && ((RedBlackNode<T>)sibling.greater).color == BLACK) {

    sibling.color=RED;

    parent.color=BLACK;

    return true;

  }

  if (sibling.color == BLACK) {

    if (node == parent.lesser && ((RedBlackNode<T>)sibling.lesser).color == RED && ((RedBlackNode<T>)sibling.greater).color == BLACK) {

      sibling.color=RED;

      ((RedBlackNode<T>)sibling.lesser).color=RED;

      rotateRight(sibling);

      parent=(RedBlackNode<T>)node.parent;

      sibling=node.getSibling();

    }

 else     if (node == parent.greater && ((RedBlackNode<T>)sibling.lesser).color == BLACK && ((RedBlackNode<T>)sibling.greater).color == RED) {

      sibling.color=RED;

      ((RedBlackNode<T>)sibling.greater).color=RED;

      rotateLeft(sibling);

      parent=(RedBlackNode<T>)node.parent;

      sibling=node.getSibling();

    }

  }

  sibling.color=parent.color;

  parent.color=BLACK;

  if (node == parent.lesser) {

    ((RedBlackNode<T>)sibling.greater).color=BLACK;

    rotateLeft(node.parent);

  }

 else   if (node == parent.greater) {

    ((RedBlackNode<T>)sibling.lesser).color=BLACK;

    rotateRight(node.parent);

  }

 else {

    throw new RuntimeException("Yikes! I'm not related to my parent. " + node.toString());

  }

  return true;

}

Location: RedBlackTree.java

Content: 

/** 

 * Post insertion balancing algorithm.

 * @param begin to begin balancing at.

 * @return True if balanced.

 */

private void balanceAfterInsert(RedBlackNode<T> begin){

  RedBlackNode<T> node=begin;

  RedBlackNode<T> parent=(RedBlackNode<T>)node.parent;

  if (parent == null) {

    node.color=BLACK;

    return;

  }

  if (parent.color == BLACK) {

    return;

  }

  RedBlackNode<T> grandParent=node.getGrandParent();

  RedBlackNode<T> uncle=node.getUncle(grandParent);

  if (parent.color == RED && uncle.color == RED) {

    parent.color=BLACK;

    uncle.color=BLACK;

    if (grandParent != null) {

      grandParent.color=RED;

      balanceAfterInsert(grandParent);

    }

    return;

  }

  if (parent.color == RED && uncle.color == BLACK) {

    if (node == parent.greater && parent == grandParent.lesser) {

      rotateLeft(parent);

      node=(RedBlackNode<T>)node.lesser;

      parent=(RedBlackNode<T>)node.parent;

      grandParent=node.getGrandParent();

      uncle=node.getUncle(grandParent);

    }

 else     if (node == parent.lesser && parent == grandParent.greater) {

      rotateRight(parent);

      node=(RedBlackNode<T>)node.greater;

      parent=(RedBlackNode<T>)node.parent;

      grandParent=node.getGrandParent();

      uncle=node.getUncle(grandParent);

    }

  }

  if (parent.color == RED && uncle.color == BLACK) {

    parent.color=BLACK;

    grandParent.color=RED;

    if (node == parent.lesser && parent == grandParent.lesser) {

      rotateRight(grandParent);

    }

 else     if (node == parent.greater && parent == grandParent.greater) {

      rotateLeft(grandParent);

    }

  }

}

Location: RedBlackTree.java

Content: 

/** 

 * Default constructor.

 */

public RedBlackTree(){

  this.creator=new BinarySearchTree.INodeCreator<T>(){

    /** 

 * {@inheritDoc}

 */

    @Override public BinarySearchTree.Node<T> createNewNode(    BinarySearchTree.Node<T> parent,    T id){

      return (new RedBlackNode<T>(parent,id,BLACK));

    }

  }

;

}

Location: RedBlackTree.java

Content: 

/** 

 * Constructor with external Node creator.

 */

public RedBlackTree(INodeCreator<T> creator){

  super(creator);

}

Location: RedBlackTree.java

Content: 

/** 

 * {@inheritDoc}

 */

@Override protected Node<T> removeNode(Node<T> node){

  if (node == null)   return node;

  RedBlackNode<T> nodeToRemoved=(RedBlackNode<T>)node;

  if (nodeToRemoved.isLeaf()) {

    nodeToRemoved.id=null;

    if (nodeToRemoved == root) {

      root=null;

    }

 else {

      nodeToRemoved.id=null;

      nodeToRemoved.color=BLACK;

      nodeToRemoved.lesser=null;

      nodeToRemoved.greater=null;

    }

    size--;

    return nodeToRemoved;

  }

  T id=nodeToRemoved.id;

  RedBlackNode<T> lesser=(RedBlackNode<T>)nodeToRemoved.lesser;

  RedBlackNode<T> greater=(RedBlackNode<T>)nodeToRemoved.greater;

  if (lesser.id != null && greater.id != null) {

    RedBlackNode<T> greatestInLesser=(RedBlackNode<T>)this.getGreatest(lesser);

    if (greatestInLesser == null || greatestInLesser.id == null)     greatestInLesser=lesser;

    replaceValueOnly(nodeToRemoved,greatestInLesser);

    nodeToRemoved=greatestInLesser;

    lesser=(RedBlackNode<T>)nodeToRemoved.lesser;

    greater=(RedBlackNode<T>)nodeToRemoved.greater;

  }

  RedBlackNode<T> child=(RedBlackNode<T>)((lesser.id != null) ? lesser : greater);

  if (nodeToRemoved.color == BLACK) {

    if (child.color == BLACK)     nodeToRemoved.color=RED;

    boolean result=balanceAfterDelete(nodeToRemoved);

    if (!result)     return nodeToRemoved;

  }

  replaceWithChild(nodeToRemoved,child);

  child.id=id;

  if (root == nodeToRemoved) {

    root.parent=null;

    ((RedBlackNode<T>)root).color=BLACK;

    if (nodeToRemoved.isLeaf())     root=null;

  }

  nodeToRemoved=child;

  size--;

  return nodeToRemoved;

}

Location: RedBlackTree.java

Content: 

/** 

 * Replace value of nodeToReplaceWith with nodeToReplace.

 * @param nodeToReplace will get value of nodeToReplaceWith.

 * @param nodeToReplaceWith will get value NULLed.

 */

private void replaceValueOnly(RedBlackNode<T> nodeToReplace,RedBlackNode<T> nodeToReplaceWith){

  nodeToReplace.id=nodeToReplaceWith.id;

  nodeToReplaceWith.id=null;

}

Location: RedBlackTree.java

Content: 

/** 

 * Replace entire contents of nodeToReplace with nodeToReplaceWith.

 * @param nodeToReplace will get it's contents replace with nodeToReplaceWith contents.

 * @param nodeToReplaceWith will not be changed.

 */

private void replaceWithChild(RedBlackNode<T> nodeToReplace,RedBlackNode<T> nodeToReplaceWith){

  nodeToReplace.id=nodeToReplaceWith.id;

  nodeToReplace.color=nodeToReplaceWith.color;

  nodeToReplace.lesser=nodeToReplaceWith.lesser;

  if (nodeToReplace.lesser != null)   nodeToReplace.lesser.parent=nodeToReplace;

  nodeToReplace.greater=nodeToReplaceWith.greater;

  if (nodeToReplace.greater != null)   nodeToReplace.greater.parent=nodeToReplace;

}

Location: RedBlackTree.java

Content: 

/** 

 * {@inheritDoc}

 */

@Override protected boolean validateNode(Node<T> node){

  RedBlackNode<T> rbNode=(RedBlackNode<T>)node;

  RedBlackNode<T> lesser=(RedBlackNode<T>)rbNode.lesser;

  RedBlackNode<T> greater=(RedBlackNode<T>)rbNode.greater;

  if (rbNode.isLeaf() && rbNode.color == RED) {

    return false;

  }

  if (rbNode.color == RED) {

    if (lesser.color == RED)     return false;

    if (greater.color == RED)     return false;

  }

  if (!lesser.isLeaf()) {

    boolean lesserCheck=lesser.id.compareTo(rbNode.id) <= 0;

    if (!lesserCheck)     return false;

    lesserCheck=this.validateNode(lesser);

    if (!lesserCheck)     return false;

  }

  if (!greater.isLeaf()) {

    boolean greaterCheck=greater.id.compareTo(rbNode.id) > 0;

    if (!greaterCheck)     return false;

    greaterCheck=this.validateNode(greater);

    if (!greaterCheck)     return false;

  }

  return true;

}

