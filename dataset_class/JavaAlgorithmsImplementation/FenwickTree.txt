Location: FenwickTree.java

Content: 

public FenwickTree(List<D> data){

  int n=0;

  for (  Data d : data)   if (d.index > n)   n=d.index;

  n=next(n + 1);

  array=new Object[n];

  for (  D d : data)   update(d.index,d);

}

Location: FenwickTree.java

Content: 

private D lookup(int index){

  index++;

  index=Math.min(array.length - 1,index);

  if (index <= 0)   return null;

  D res=null;

  while (index > 0) {

    if (res == null) {

      final D data=(D)array[index];

      if (data != null)       res=(D)data.copy();

    }

 else {

      res.combined((D)array[index]);

    }

    index=prev(index);

  }

  return res;

}

Location: FenwickTree.java

Content: 

private static final int next(int x){

  return 2 * x - prev(x);

}

Location: FenwickTree.java

Content: 

private static final int prev(int x){

  return x & (x - 1);

}

Location: FenwickTree.java

Content: 

/** 

 * Stabbing query

 * @param index index for query

 * @return data at index.

 */

public D query(int index){

  return query(index,index);

}

Location: FenwickTree.java

Content: 

/** 

 * Range query

 * @param start start of range (inclusive)

 * @param end end of range (inclusive)

 * @return data for range.

 */

public D query(int start,int end){

  final D e=lookup(end);

  final D s=lookup(start - 1);

  final D c=(D)e.copy();

  if (s != null)   c.separate(s);

  return c;

}

Location: FenwickTree.java

Content: 

private void update(int index,D value){

  index++;

  while (index < array.length) {

    D data=(D)array[index];

    if (data == null) {

      data=(D)value.copy();

      data.index=index;

      array[index]=data;

    }

 else {

      data.combined(value);

    }

    index=next(index);

  }

}

