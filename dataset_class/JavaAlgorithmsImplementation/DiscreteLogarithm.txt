Location: DiscreteLogarithm.java

Content: 

/** 

 * Returns DiscreteLogarithm.NO_SOLUTION when a solution cannot be found

 */

public static final long countDiscreteLogarithm(final long a,final long b,final long p){

  final long s=(long)sqrt(p) + 1;

  final long b_1=pow(b,p - 2,p);

  generateSet(a,b_1,p,s,set);

  return getDiscreteLogarithm(set,s,a,p);

}

Location: DiscreteLogarithm.java

Content: 

private DiscreteLogarithm(){

}

Location: DiscreteLogarithm.java

Content: 

private static final void generateSet(long a,long b_1,long p,long s,HashMap<Long,Long> set){

  set.clear();

  for (long i=0; i < s; ++i) {

    final long first=(pow(a,i,p) * b_1) % p;

    if (!set.containsKey(first))     set.put(first,i);

  }

}

Location: DiscreteLogarithm.java

Content: 

private static final long getDiscreteLogarithm(HashMap<Long,Long> set,long s,long a,long p){

  for (long i=0; i < s; ++i) {

    long el=pow(a,(i * s) % p,p);

    el=pow(el,p - 2,p);

    if (set.containsKey(el))     return i * s + set.get(el);

  }

  return NO_SOLUTION;

}

Location: DiscreteLogarithm.java

Content: 

private static final long pow(long a,long x,long p){

  if (x == 0)   return 1;

  if (x == 1)   return a % p;

  if (x % 2 != 0)   return (a * pow(a,x - 1,p)) % p;

  final long temp=pow(a,x / 2,p) % p;

  return (temp * temp) % p;

}

