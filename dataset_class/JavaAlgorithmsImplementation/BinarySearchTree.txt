Location: BinarySearchTree.java

Content: 

/** 

 * Default constructor.

 */

public BinarySearchTree(){

  this.creator=new INodeCreator<T>(){

    /** 

 * {@inheritDoc}

 */

    @Override public Node<T> createNewNode(    Node<T> parent,    T id){

      return (new Node<T>(parent,id));

    }

  }

;

}

Location: BinarySearchTree.java

Content: 

/** 

 * Constructor with external Node creator.

 */

public BinarySearchTree(INodeCreator<T> creator){

  this.creator=creator;

}

Location: BinarySearchTree.java

Content: 

/** 

 * Get an array representation of the tree in breath first search order.

 * @return breath first search sorted array representing the tree.

 */

public T[] getBFS(){

  return getBFS(this.root,this.size);

}

Location: BinarySearchTree.java

Content: 

/** 

 * Get an array representation of the tree in breath first search order.

 * @param start rooted node

 * @param size of tree rooted at start

 * @return breath first search sorted array representing the tree.

 */

public static <T extends Comparable<T>>T[] getBFS(Node<T> start,int size){

  final Queue<Node<T>> queue=new ArrayDeque<Node<T>>();

  final T[] values=(T[])Array.newInstance(start.id.getClass(),size);

  int count=0;

  Node<T> node=start;

  while (node != null) {

    values[count++]=node.id;

    if (node.lesser != null)     queue.add(node.lesser);

    if (node.greater != null)     queue.add(node.greater);

    if (!queue.isEmpty())     node=queue.remove();

 else     node=null;

  }

  return values;

}

Location: BinarySearchTree.java

Content: 

/** 

 * Get an array representation of the tree in-order.

 * @param order of search

 * @return order sorted array representing the tree.

 */

public T[] getDFS(DepthFirstSearchOrder order){

  return getDFS(order,this.root,this.size);

}

Location: BinarySearchTree.java

Content: 

/** 

 * Get an array representation of the tree in-order.

 * @param order of search

 * @param start rooted node

 * @param size of tree rooted at start

 * @return order sorted array representing the tree.

 */

public static <T extends Comparable<T>>T[] getDFS(DepthFirstSearchOrder order,Node<T> start,int size){

  final Set<Node<T>> added=new HashSet<Node<T>>(2);

  final T[] nodes=(T[])Array.newInstance(start.id.getClass(),size);

  int index=0;

  Node<T> node=start;

  while (index < size && node != null) {

    Node<T> parent=node.parent;

    Node<T> lesser=(node.lesser != null && !added.contains(node.lesser)) ? node.lesser : null;

    Node<T> greater=(node.greater != null && !added.contains(node.greater)) ? node.greater : null;

    if (parent == null && lesser == null && greater == null) {

      if (!added.contains(node))       nodes[index++]=node.id;

      break;

    }

    if (order == DepthFirstSearchOrder.inOrder) {

      if (lesser != null) {

        node=lesser;

      }

 else {

        if (!added.contains(node)) {

          nodes[index++]=node.id;

          added.add(node);

        }

        if (greater != null) {

          node=greater;

        }

 else         if (added.contains(node)) {

          node=parent;

        }

 else {

          node=null;

        }

      }

    }

 else     if (order == DepthFirstSearchOrder.preOrder) {

      if (!added.contains(node)) {

        nodes[index++]=node.id;

        added.add(node);

      }

      if (lesser != null) {

        node=lesser;

      }

 else       if (greater != null) {

        node=greater;

      }

 else       if (added.contains(node)) {

        node=parent;

      }

 else {

        node=null;

      }

    }

 else {

      if (lesser != null) {

        node=lesser;

      }

 else {

        if (greater != null) {

          node=greater;

        }

 else {

          nodes[index++]=node.id;

          added.add(node);

          node=parent;

        }

      }

    }

  }

  return nodes;

}

Location: BinarySearchTree.java

Content: 

/** 

 * Get greatest node in sub-tree rooted at startingNode. The search does not include startingNode in it's results.

 * @param startingNode Root of tree to search.

 * @return Node<T> which represents the greatest node in the startingNodesub-tree or NULL if startingNode has no greater children.

 */

protected Node<T> getGreatest(Node<T> startingNode){

  if (startingNode == null)   return null;

  Node<T> greater=startingNode.greater;

  while (greater != null && greater.id != null) {

    Node<T> node=greater.greater;

    if (node != null && node.id != null)     greater=node;

 else     break;

  }

  return greater;

}

Location: BinarySearchTree.java

Content: 

/** 

 * Get least node in sub-tree rooted at startingNode. The search does not include startingNode in it's results.

 * @param startingNode Root of tree to search.

 * @return Node<T> which represents the least node in the startingNodesub-tree or NULL if startingNode has no lesser children.

 */

protected Node<T> getLeast(Node<T> startingNode){

  if (startingNode == null)   return null;

  Node<T> lesser=startingNode.lesser;

  while (lesser != null && lesser.id != null) {

    Node<T> node=lesser.lesser;

    if (node != null && node.id != null)     lesser=node;

 else     break;

  }

  return lesser;

}

Location: BinarySearchTree.java

Content: 

/** 

 * Get an array representation of the tree in level order.

 * @return level order sorted array representing the tree.

 */

public T[] getLevelOrder(){

  return getBFS();

}

Location: BinarySearchTree.java

Content: 

/** 

 * Get the proper replacement node according to the binary search tree algorithm from the tree.

 * @param nodeToRemoved Node<T> to find a replacement for.

 * @return Node<T> which can be used to replace nodeToRemoved. nodeToRemovedshould NOT be NULL.

 */

protected Node<T> getReplacementNode(Node<T> nodeToRemoved){

  Node<T> replacement=null;

  if (nodeToRemoved.greater != null && nodeToRemoved.lesser != null) {

    if (modifications % 2 != 0) {

      replacement=this.getGreatest(nodeToRemoved.lesser);

      if (replacement == null)       replacement=nodeToRemoved.lesser;

    }

 else {

      replacement=this.getLeast(nodeToRemoved.greater);

      if (replacement == null)       replacement=nodeToRemoved.greater;

    }

    modifications++;

  }

 else   if (nodeToRemoved.lesser != null && nodeToRemoved.greater == null) {

    replacement=nodeToRemoved.lesser;

  }

 else   if (nodeToRemoved.greater != null && nodeToRemoved.lesser == null) {

    replacement=nodeToRemoved.greater;

  }

  return replacement;

}

Location: BinarySearchTree.java

Content: 

/** 

 * Get an array representation of the tree in sorted order.

 * @return sorted array representing the tree.

 */

public T[] getSorted(){

  return getDFS(DepthFirstSearchOrder.inOrder);

}

Location: BinarySearchTree.java

Content: 

/** 

 * Replace nodeToRemoved with replacementNode in the tree.

 * @param nodeToRemoved Node<T> to remove replace in the tree. nodeToRemoved should NOT be NULL.

 * @param replacementNode Node<T> to replace nodeToRemoved in the tree. replacementNode can be NULL.

 */

protected void replaceNodeWithNode(Node<T> nodeToRemoved,Node<T> replacementNode){

  if (replacementNode != null) {

    Node<T> replacementNodeLesser=replacementNode.lesser;

    Node<T> replacementNodeGreater=replacementNode.greater;

    Node<T> nodeToRemoveLesser=nodeToRemoved.lesser;

    if (nodeToRemoveLesser != null && nodeToRemoveLesser != replacementNode) {

      replacementNode.lesser=nodeToRemoveLesser;

      nodeToRemoveLesser.parent=replacementNode;

    }

    Node<T> nodeToRemoveGreater=nodeToRemoved.greater;

    if (nodeToRemoveGreater != null && nodeToRemoveGreater != replacementNode) {

      replacementNode.greater=nodeToRemoveGreater;

      nodeToRemoveGreater.parent=replacementNode;

    }

    Node<T> replacementParent=replacementNode.parent;

    if (replacementParent != null && replacementParent != nodeToRemoved) {

      Node<T> replacementParentLesser=replacementParent.lesser;

      Node<T> replacementParentGreater=replacementParent.greater;

      if (replacementParentLesser != null && replacementParentLesser == replacementNode) {

        replacementParent.lesser=replacementNodeGreater;

        if (replacementNodeGreater != null)         replacementNodeGreater.parent=replacementParent;

      }

 else       if (replacementParentGreater != null && replacementParentGreater == replacementNode) {

        replacementParent.greater=replacementNodeLesser;

        if (replacementNodeLesser != null)         replacementNodeLesser.parent=replacementParent;

      }

    }

  }

  Node<T> parent=nodeToRemoved.parent;

  if (parent == null) {

    root=replacementNode;

    if (root != null)     root.parent=null;

  }

 else   if (parent.lesser != null && (parent.lesser.id.compareTo(nodeToRemoved.id) == 0)) {

    parent.lesser=replacementNode;

    if (replacementNode != null)     replacementNode.parent=parent;

  }

 else   if (parent.greater != null && (parent.greater.id.compareTo(nodeToRemoved.id) == 0)) {

    parent.greater=replacementNode;

    if (replacementNode != null)     replacementNode.parent=parent;

  }

  size--;

}

Location: BinarySearchTree.java

Content: 

/** 

 * Rotate tree left at sub-tree rooted at node.

 * @param node Root of tree to rotate left.

 */

protected void rotateLeft(Node<T> node){

  Node<T> parent=node.parent;

  Node<T> greater=node.greater;

  Node<T> lesser=greater.lesser;

  greater.lesser=node;

  node.parent=greater;

  node.greater=lesser;

  if (lesser != null)   lesser.parent=node;

  if (parent != null) {

    if (node == parent.lesser) {

      parent.lesser=greater;

    }

 else     if (node == parent.greater) {

      parent.greater=greater;

    }

 else {

      throw new RuntimeException("Yikes! I'm not related to my parent. " + node.toString());

    }

    greater.parent=parent;

  }

 else {

    root=greater;

    root.parent=null;

  }

}

Location: BinarySearchTree.java

Content: 

/** 

 * Rotate tree right at sub-tree rooted at node.

 * @param node Root of tree to rotate right.

 */

protected void rotateRight(Node<T> node){

  Node<T> parent=node.parent;

  Node<T> lesser=node.lesser;

  Node<T> greater=lesser.greater;

  lesser.greater=node;

  node.parent=lesser;

  node.lesser=greater;

  if (greater != null)   greater.parent=node;

  if (parent != null) {

    if (node == parent.lesser) {

      parent.lesser=lesser;

    }

 else     if (node == parent.greater) {

      parent.greater=lesser;

    }

 else {

      throw new RuntimeException("Yikes! I'm not related to my parent. " + node.toString());

    }

    lesser.parent=parent;

  }

 else {

    root=lesser;

    root.parent=null;

  }

}

