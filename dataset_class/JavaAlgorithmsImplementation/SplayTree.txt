Location: SplayTree.java

Content: 

/** 

 * Splay the tree at the node.

 * @param node to splay at.

 */

private void splay(Node<T> node){

  Node<T> parent=node.parent;

  Node<T> grandParent=(parent != null) ? parent.parent : null;

  if (parent != null && parent == root) {

    grandParent=parent.parent;

    root=node;

    node.parent=null;

    if (parent != null) {

      if (node == parent.lesser) {

        parent.lesser=node.greater;

        if (node.greater != null)         node.greater.parent=parent;

        node.greater=parent;

        parent.parent=node;

      }

 else {

        parent.greater=node.lesser;

        if (node.lesser != null)         node.lesser.parent=parent;

        node.lesser=parent;

        parent.parent=node;

      }

    }

    return;

  }

  if (parent != null && grandParent != null) {

    Node<T> greatGrandParent=grandParent.parent;

    if (greatGrandParent != null && greatGrandParent.lesser == grandParent) {

      greatGrandParent.lesser=node;

      node.parent=greatGrandParent;

    }

 else     if (greatGrandParent != null && greatGrandParent.greater == grandParent) {

      greatGrandParent.greater=node;

      node.parent=greatGrandParent;

    }

 else {

      root=node;

      node.parent=null;

    }

    if ((node == parent.lesser && parent == grandParent.lesser) || (node == parent.greater && parent == grandParent.greater)) {

      if (node == parent.lesser) {

        Node<T> nodeGreater=node.greater;

        node.greater=parent;

        parent.parent=node;

        parent.lesser=nodeGreater;

        if (nodeGreater != null)         nodeGreater.parent=parent;

        Node<T> parentGreater=parent.greater;

        parent.greater=grandParent;

        grandParent.parent=parent;

        grandParent.lesser=parentGreater;

        if (parentGreater != null)         parentGreater.parent=grandParent;

      }

 else {

        Node<T> nodeLesser=node.lesser;

        node.lesser=parent;

        parent.parent=node;

        parent.greater=nodeLesser;

        if (nodeLesser != null)         nodeLesser.parent=parent;

        Node<T> parentLesser=parent.lesser;

        parent.lesser=grandParent;

        grandParent.parent=parent;

        grandParent.greater=parentLesser;

        if (parentLesser != null)         parentLesser.parent=grandParent;

      }

      return;

    }

    if (node == parent.lesser) {

      Node<T> nodeLesser=node.greater;

      Node<T> nodeGreater=node.lesser;

      node.greater=parent;

      parent.parent=node;

      node.lesser=grandParent;

      grandParent.parent=node;

      parent.lesser=nodeLesser;

      if (nodeLesser != null)       nodeLesser.parent=parent;

      grandParent.greater=nodeGreater;

      if (nodeGreater != null)       nodeGreater.parent=grandParent;

      return;

    }

    Node<T> nodeLesser=node.lesser;

    Node<T> nodeGreater=node.greater;

    node.lesser=parent;

    parent.parent=node;

    node.greater=grandParent;

    grandParent.parent=node;

    parent.greater=nodeLesser;

    if (nodeLesser != null)     nodeLesser.parent=parent;

    grandParent.lesser=nodeGreater;

    if (nodeGreater != null)     nodeGreater.parent=grandParent;

  }

}

