Location: LCPArray.java

Content: 

public ArrayList<Integer> getLCPArray(){

  if (lcp == null)   LCPAlgorithm();

  return lcp;

}

Location: LCPArray.java

Content: 

private void getLCPfromLCPR(ArrayList<Integer> LCPR){

  final ArrayList<Integer> suffixArrayList=suffixArray.getSuffixArray();

  final int length=suffixArrayList.size();

  lcp=new ArrayList<Integer>();

  lcp.add(null);

  for (int i=1; i < length; i++)   lcp.add(LCPR.get(suffixArrayList.get(i)));

}

Location: LCPArray.java

Content: 

private ArrayList<Integer> getLCPR(){

  final ArrayList<Integer> KMRArrayList=suffixArray.getKMRarray();

  final ArrayList<Integer> suffixArrayList=suffixArray.getSuffixArray();

  final String string=suffixArray.getString();

  final int length=KMRArrayList.size();

  final ArrayList<Integer> LCPR=new ArrayList<Integer>();

  int startingValue=0;

  for (int i=0; i < length; i++) {

    if (KMRArrayList.get(i).equals(0)) {

      LCPR.add(0);

      startingValue=0;

    }

 else {

      int LCPRValue=startingValue;

      final int predecessor=suffixArrayList.get(KMRArrayList.get(i) - 1);

      while (string.charAt(i + LCPRValue) == string.charAt(predecessor + LCPRValue))       LCPRValue++;

      LCPR.add(LCPRValue);

      startingValue=LCPRValue - 1 > 0 ? LCPRValue - 1 : 0;

    }

  }

  return LCPR;

}

Location: LCPArray.java

Content: 

private void LCPAlgorithm(){

  final ArrayList<Integer> LCPR=getLCPR();

  getLCPfromLCPR(LCPR);

}

Location: LCPArray.java

Content: 

public LCPArray(C sequence){

  this(sequence,DEFAULT_END_SEQ_CHAR);

}

Location: LCPArray.java

Content: 

public LCPArray(C sequence,char endChar){

  endSeqChar=endChar;

  suffixArray=new SuffixArray(sequence,endSeqChar);

}

