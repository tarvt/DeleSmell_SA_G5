Location: LongestIncreasingSubsequence.java

Content: 

/** 

 * Longest increasing subsequence solved using dynamic programming. 

 */

public static int[] getLongestIncreasingSubsequence(int[] X){

  final int[] P=new int[X.length];

  final int[] M=new int[X.length + 1];

  int L=0;

  for (int i=0; i < X.length; i++) {

    int lo=1;

    int hi=L;

    while (lo <= hi) {

      final int mid=(int)Math.ceil((lo + hi) / 2);

      if (X[M[mid]] < X[i])       lo=mid + 1;

 else       hi=mid - 1;

    }

    final int newL=lo;

    P[i]=M[newL - 1];

    M[newL]=i;

    if (newL > L) {

      L=newL;

    }

  }

  final int[] S=new int[L];

  int k=M[L];

  for (int i=L - 1; i >= 0; i--) {

    S[i]=X[k];

    k=P[k];

  }

  return S;

}

Location: LongestIncreasingSubsequence.java

Content: 

private LongestIncreasingSubsequence(){

}

