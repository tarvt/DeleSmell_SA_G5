Location: SortsTiming.java

Content: 

private static final boolean check(Integer[] array){

  for (int i=1; i < array.length; i++) {

    if (array[i - 1] > array[i])     return false;

  }

  return true;

}

Location: SortsTiming.java

Content: 

private static final void collectGarbage(){

  try {

    System.gc();

    System.gc();

    System.gc();

    Thread.sleep(fSLEEP_INTERVAL);

    System.runFinalization();

    Thread.sleep(fSLEEP_INTERVAL);

  }

 catch (  InterruptedException ex) {

    ex.printStackTrace();

  }

}

Location: SortsTiming.java

Content: 

public static final String printWithPivot(Integer[] array,int pivotIndex,int start,int length){

  final Integer[] clone=array.clone();

  StringBuilder builder=new StringBuilder();

  for (int i=0; i < length; i++) {

    int e=clone[start + i];

    if (i == pivotIndex)     builder.append("`" + e + "` ");

 else     builder.append(e + " ");

  }

  return builder.toString();

}

Location: SortsTiming.java

Content: 

public static final String print(Integer[] array){

  return print(array,0,array.length);

}

Location: SortsTiming.java

Content: 

public static final String print(Integer[] array,int start,int length){

  final Integer[] clone=array.clone();

  StringBuilder builder=new StringBuilder();

  for (int i=0; i < length; i++) {

    int e=clone[start + i];

    builder.append(e + " ");

  }

  return builder.toString();

}

Location: SortsTiming.java

Content: 

private static final void putOutTheGarbage(){

  collectGarbage();

  collectGarbage();

  collectGarbage();

}

Location: SortsTiming.java

Content: 

private static final int runTest(Testable testable,Integer[] unsorted,Integer[] sorted,String[] names,double[] results,int count){

  names[count]=testable.getName();

  long bInsertion=System.nanoTime();

  Integer[] result=testable.sort(unsorted.clone());

  if (checkResults && !check(result))   System.err.println(testable.getName() + " failed.");

  long aInsertion=System.nanoTime();

  double diff=(aInsertion - bInsertion) / 1000000d / 1000d;

  System.out.println("Random: " + testable.getName() + "="+ FORMAT.format(diff)+ " secs");

  if (showResultingArray)   showResultingArray(unsorted,result);

  results[0]=diff;

  putOutTheGarbage();

  bInsertion=System.nanoTime();

  result=testable.sort(sorted.clone());

  if (checkResults && !check(result))   System.err.println(testable.getName() + " failed.");

  aInsertion=System.nanoTime();

  diff=(aInsertion - bInsertion) / 1000000d / 1000d;

  System.out.println("Sorted: " + testable.getName() + "="+ FORMAT.format(diff)+ " secs");

  if (showResultingArray)   showResultingArray(sorted,result);

  results[1]=diff;

  putOutTheGarbage();

  bInsertion=System.nanoTime();

  result=testable.sort(reverse.clone());

  if (checkResults && !check(result))   System.err.println(testable.getName() + " failed.");

  aInsertion=System.nanoTime();

  diff=(aInsertion - bInsertion) / 1000000d / 1000d;

  System.out.println("Reverse sorted: " + testable.getName() + "="+ FORMAT.format(diff)+ " secs");

  if (showResultingArray)   showResultingArray(reverse,result);

  results[2]=diff;

  putOutTheGarbage();

  System.out.println();

  System.out.flush();

  return count + 1;

}

Location: SortsTiming.java

Content: 

private static final void showComparison(){

  StringBuilder resultsBuilder=new StringBuilder();

  resultsBuilder.append("Number of integers = ").append(SIZE).append("\n");

  String format="%-32s%-15s%-15s%-15s\n";

  Formatter formatter=new Formatter(resultsBuilder,Locale.US);

  formatter.format(format,"Algorithm","Random","Sorted","Reverse Sorted");

  for (int i=0; i < names.length; i++) {

    if (names[i] == null)     break;

    formatter.format(format,names[i],FORMAT.format(results[i][0]),FORMAT.format(results[i][1]),FORMAT.format(results[i][2]));

  }

  formatter.close();

  System.out.println(resultsBuilder.toString());

}

Location: SortsTiming.java

Content: 

private static final void showResultingArray(Integer[] u,Integer[] r){

  System.out.println("Unsorted: " + print(u));

  System.out.println("Sorted: " + print(r));

  System.out.flush();

}

