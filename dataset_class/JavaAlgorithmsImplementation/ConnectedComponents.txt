Location: ConnectedComponents.java

Content: 

/** 

 * Finds the connected components subsets of the Graph.

 * @param graph to find connected components.

 * @return List of connected components in the Graph.

 */

public static final <T extends Comparable<T>>List<List<Vertex<T>>> getConnectedComponents(Graph<T> graph){

  if (graph == null)   throw new IllegalArgumentException("Graph is NULL.");

  if (graph.getType() != Graph.TYPE.DIRECTED)   throw new IllegalArgumentException("Cannot perform a connected components search on a non-directed graph. graph type = " + graph.getType());

  final Map<Vertex<T>,Integer> map=new HashMap<Vertex<T>,Integer>();

  final List<List<Vertex<T>>> list=new ArrayList<List<Vertex<T>>>();

  int c=0;

  for (  Vertex<T> v : graph.getVertices())   if (map.get(v) == null)   visit(map,list,v,c++);

  return list;

}

Location: ConnectedComponents.java

Content: 

private static final <T extends Comparable<T>>void visit(Map<Vertex<T>,Integer> map,List<List<Vertex<T>>> list,Vertex<T> v,int c){

  map.put(v,c);

  List<Vertex<T>> r=null;

  if (c == list.size()) {

    r=new ArrayList<Vertex<T>>();

    list.add(r);

  }

 else {

    r=list.get(c);

  }

  r.add(v);

  if (v.getEdges().size() > 0) {

    boolean found=false;

    for (    Edge<T> e : v.getEdges()) {

      final Vertex<T> to=e.getToVertex();

      if (map.get(to) == null) {

        visit(map,list,to,c);

        found=true;

      }

      if (found)       break;

    }

  }

}

