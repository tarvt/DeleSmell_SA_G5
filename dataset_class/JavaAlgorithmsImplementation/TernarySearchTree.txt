Location: TernarySearchTree.java

Content: 

private Node insert(Node parent,Node node,C value,int idx){

  if (idx >= value.length())   return null;

  final char c=value.charAt(idx);

  final boolean isWord=(idx == (value.length() - 1));

  if (node == null) {

    node=this.creator.createNewNode(parent,c,isWord);

    if (isWord)     size++;

  }

 else   if (c == node.character && isWord && !node.isWord) {

    node.isWord=true;

    size++;

  }

  if (c < node.character) {

    node.loKid=insert(node,node.loKid,value,idx);

  }

 else   if (c > node.character) {

    node.hiKid=insert(node,node.hiKid,value,idx);

  }

 else   if (idx < (value.length() - 1)) {

    node.kid=insert(node,node.kid,value,++idx);

  }

  return node;

}

Location: TernarySearchTree.java

Content: 

private Node search(Node node,C value,int idx){

  if (node == null || idx >= value.length())   return null;

  final char c=value.charAt(idx);

  if (c < node.character)   return search(node.loKid,value,idx);

  if (c > node.character)   return search(node.hiKid,value,idx);

  if (idx < (value.length() - 1)) {

    return search(node.kid,value,++idx);

  }

  return node;

}

Location: TernarySearchTree.java

Content: 

public TernarySearchTree(){

  this.creator=new INodeCreator(){

    /** 

 * {@inheritDoc}

 */

    @Override public Node createNewNode(    Node parent,    Character character,    boolean isWord){

      return (new Node(parent,character,isWord));

    }

  }

;

}

Location: TernarySearchTree.java

Content: 

/** 

 * Constructor with external Node creator.

 */

public TernarySearchTree(INodeCreator creator){

  this.creator=creator;

}

Location: TernarySearchTree.java

Content: 

private boolean validate(Node node){

  boolean result=false;

  if (node.loKid != null) {

    if (node.loKid.character >= node.character)     return false;

    result=validate(node.loKid);

    if (!result)     return false;

  }

  if (node.kid != null) {

    result=validate(node.kid);

    if (!result)     return false;

  }

  if (node.hiKid != null) {

    if (node.hiKid.character <= node.character)     return false;

    result=validate(node.hiKid);

    if (!result)     return false;

  }

  return true;

}

