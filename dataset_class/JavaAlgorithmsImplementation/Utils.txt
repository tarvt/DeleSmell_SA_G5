Location: Utils.java

Content: 

public static TestData generateTestData(int data_size){

  TestData data=new TestData(data_size);

  StringBuilder builder=new StringBuilder();

  data.unsorted=new Integer[data_size];

  java.util.Set<Integer> set=new java.util.HashSet<Integer>();

  builder.append("Array=");

  for (int i=0; i < data_size; i++) {

    Integer j=RANDOM.nextInt(data.random_size);

    boolean found=true;

    while (found) {

      if (set.contains(j)) {

        j=RANDOM.nextInt(data.random_size);

      }

 else {

        data.unsorted[i]=j;

        set.add(j);

        found=false;

      }

    }

    data.unsorted[i]=j;

    if (i != data_size - 1)     builder.append(j).append(',');

  }

  set.clear();

  set=null;

  builder.append('\n');

  data.string=builder.toString();

  data.sorted=Arrays.copyOf(data.unsorted,data.unsorted.length);

  Arrays.sort(data.sorted);

  return data;

}

Location: Utils.java

Content: 

public static void handleError(Object obj){

  System.err.println("Object={\n" + obj.toString() + "\n}");

  throw new RuntimeException("Error in test.");

}

Location: Utils.java

Content: 

public static void handleError(Object[] data,Object obj){

  System.err.println("Data={");

  for (  Object o : data)   System.err.print(o.toString() + ", ");

  System.err.println("\n}");

  System.err.println("Object={\n" + obj.toString() + "\n}");

  throw new RuntimeException("Error in test.");

}

Location: Utils.java

Content: 

public static final <T>T parseT(final Integer value,final Class<T> type){

  T returnValue=null;

  if (type == null) {

    throw new NullPointerException("Type can not be null");

  }

 else   if (Integer.class.equals(type)) {

    returnValue=type.cast(value);

  }

 else   if (String.class.equals(type)) {

    returnValue=type.cast(String.valueOf(value));

  }

 else {

    throw new IllegalArgumentException("Unsupported type " + type.getName());

  }

  return returnValue;

}

Location: Utils.java

Content: 

public static TestData testData(int... integers){

  TestData data=new TestData(integers.length);

  StringBuilder builder=new StringBuilder();

  data.unsorted=new Integer[integers.length];

  java.util.Set<Integer> set=new java.util.HashSet<Integer>();

  builder.append("Array=");

  for (int i=0; i < integers.length; i++) {

    Integer j=integers[i];

    data.unsorted[i]=j;

    if (i != integers.length - 1)     builder.append(j).append(',');

  }

  set.clear();

  set=null;

  builder.append('\n');

  data.string=builder.toString();

  data.sorted=Arrays.copyOf(data.unsorted,data.unsorted.length);

  Arrays.sort(data.sorted);

  return data;

}

