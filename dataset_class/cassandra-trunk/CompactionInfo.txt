Location: CompactionInfo.java

Content: 

private CompactionInfo(TableMetadata metadata,OperationType tasktype,long completed,long total,Unit unit,UUID compactionId,Collection<SSTableReader> sstables){

  this.tasktype=tasktype;

  this.completed=completed;

  this.total=total;

  this.metadata=metadata;

  this.unit=unit;

  this.compactionId=compactionId;

  this.sstables=ImmutableSet.copyOf(sstables);

}

Location: CompactionInfo.java

Content: 

public CompactionInfo(TableMetadata metadata,OperationType tasktype,long bytesComplete,long totalBytes,UUID compactionId,Collection<SSTableReader> sstables){

  this(metadata,tasktype,bytesComplete,totalBytes,Unit.BYTES,compactionId,sstables);

}

Location: CompactionInfo.java

Content: 

/** 

 * @return A copy of this CompactionInfo with updated progress. 

 */

public CompactionInfo forProgress(long complete,long total){

  return new CompactionInfo(metadata,tasktype,complete,total,unit,compactionId,sstables);

}

Location: CompactionInfo.java

Content: 

public long getCompleted(){

  return completed;

}

Location: CompactionInfo.java

Content: 

public Optional<String> getKeyspace(){

  return Optional.ofNullable(metadata != null ? metadata.keyspace : null);

}

Location: CompactionInfo.java

Content: 

public Optional<String> getTable(){

  return Optional.ofNullable(metadata != null ? metadata.name : null);

}

Location: CompactionInfo.java

Content: 

public TableMetadata getTableMetadata(){

  return metadata;

}

Location: CompactionInfo.java

Content: 

public UUID getTaskId(){

  return compactionId;

}

Location: CompactionInfo.java

Content: 

public OperationType getTaskType(){

  return tasktype;

}

Location: CompactionInfo.java

Content: 

public long getTotal(){

  return total;

}

Location: CompactionInfo.java

Content: 

public Unit getUnit(){

  return unit;

}

Location: CompactionInfo.java

Content: 

boolean shouldStop(Predicate<SSTableReader> sstablePredicate){

  if (sstables.isEmpty()) {

    return true;

  }

  return sstables.stream().anyMatch(sstablePredicate);

}

Location: CompactionInfo.java

Content: 

/** 

 * Special compaction info where we always need to cancel the compaction - for example ViewBuilderTask and AutoSavingCache where we don't know the sstables at construction

 */

public static CompactionInfo withoutSSTables(TableMetadata metadata,OperationType tasktype,long completed,long total,Unit unit,UUID compactionId){

  return new CompactionInfo(metadata,tasktype,completed,total,unit,compactionId,ImmutableSet.of());

}

