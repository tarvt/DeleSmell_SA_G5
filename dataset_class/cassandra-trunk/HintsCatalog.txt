Location: HintsCatalog.java

Content: 

/** 

 * Delete all hints for the specified host id. Will not delete the files that are currently being dispatched, or written to.

 */

void deleteAllHints(UUID hostId){

  HintsStore store=stores.get(hostId);

  if (store != null)   store.deleteAllHints();

}

Location: HintsCatalog.java

Content: 

void exciseStore(UUID hostId){

  deleteAllHints(hostId);

  stores.remove(hostId);

}

Location: HintsCatalog.java

Content: 

void fsyncDirectory(){

  int fd=NativeLibrary.tryOpenDirectory(hintsDirectory.getAbsolutePath());

  if (fd != -1) {

    try {

      SyncUtil.trySync(fd);

      NativeLibrary.tryCloseFD(fd);

    }

 catch (    FSError e) {

      logger.error("Unable to sync directory {}",hintsDirectory.getAbsolutePath(),e);

      FileUtils.handleFSErrorAndPropagate(e);

    }

  }

 else   if (!FBUtilities.isWindows) {

    logger.error("Unable to open directory {}",hintsDirectory.getAbsolutePath());

    FileUtils.handleFSErrorAndPropagate(new FSWriteError(new IOException(String.format("Unable to open hint directory %s",hintsDirectory.getAbsolutePath())),hintsDirectory.getAbsolutePath()));

  }

}

Location: HintsCatalog.java

Content: 

@Nullable HintsStore getNullable(UUID hostId){

  return stores.get(hostId);

}

Location: HintsCatalog.java

Content: 

ImmutableMap<String,Object> getWriterParams(){

  return writerParams;

}

Location: HintsCatalog.java

Content: 

HintsStore get(UUID hostId){

  HintsStore store=stores.get(hostId);

  return store == null ? stores.computeIfAbsent(hostId,(id) -> HintsStore.create(id,hintsDirectory,writerParams,Collections.emptyList())) : store;

}

Location: HintsCatalog.java

Content: 

/** 

 * @return true if at least one of the stores has a file pending dispatch

 */

boolean hasFiles(){

  return stores().anyMatch(HintsStore::hasFiles);

}

Location: HintsCatalog.java

Content: 

private HintsCatalog(File hintsDirectory,ImmutableMap<String,Object> writerParams,Map<UUID,List<HintsDescriptor>> descriptors){

  this.hintsDirectory=hintsDirectory;

  this.writerParams=writerParams;

  this.stores=new ConcurrentHashMap<>();

  for (  Map.Entry<UUID,List<HintsDescriptor>> entry : descriptors.entrySet())   stores.put(entry.getKey(),HintsStore.create(entry.getKey(),hintsDirectory,writerParams,entry.getValue()));

}

Location: HintsCatalog.java

Content: 

/** 

 * Loads hints stores from a given directory.

 */

static HintsCatalog load(File hintsDirectory,ImmutableMap<String,Object> writerParams){

  try (Stream<Path> list=Files.list(hintsDirectory.toPath())){

    Map<UUID,List<HintsDescriptor>> stores=list.filter(HintsDescriptor::isHintFileName).map(HintsDescriptor::readFromFileQuietly).filter(Optional::isPresent).map(Optional::get).collect(groupingBy(h -> h.hostId));

    return new HintsCatalog(hintsDirectory,writerParams,stores);

  }

 catch (  IOException e) {

    throw new FSReadError(e,hintsDirectory);

  }

}

Location: HintsCatalog.java

Content: 

void maybeLoadStores(Iterable<UUID> hostIds){

  for (  UUID hostId : hostIds)   get(hostId);

}

Location: HintsCatalog.java

Content: 

Stream<HintsStore> stores(){

  return stores.values().stream();

}

