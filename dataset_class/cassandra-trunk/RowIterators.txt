Location: RowIterators.java

Content: 

public static void digest(RowIterator iterator,Digest digest){

  digest.update(iterator.partitionKey().getKey());

  iterator.columns().regulars.digest(digest);

  iterator.columns().statics.digest(digest);

  digest.updateWithBoolean(iterator.isReverseOrder());

  iterator.staticRow().digest(digest);

  while (iterator.hasNext())   iterator.next().digest(digest);

}

Location: RowIterators.java

Content: 

/** 

 * Wraps the provided iterator so it logs the returned rows for debugging purposes. <p> Note that this is only meant for debugging as this can log a very large amount of logging at INFO.

 */

public static RowIterator loggingIterator(RowIterator iterator,final String id){

  TableMetadata metadata=iterator.metadata();

  logger.info("[{}] Logging iterator on {}.{}, partition key={}, reversed={}",id,metadata.keyspace,metadata.name,metadata.partitionKeyType.getString(iterator.partitionKey().getKey()),iterator.isReverseOrder());

class Log extends Transformation {

    @Override public Row applyToStatic(    Row row){

      if (!row.isEmpty())       logger.info("[{}] {}",id,row.toString(metadata));

      return row;

    }

    @Override public Row applyToRow(    Row row){

      logger.info("[{}] {}",id,row.toString(metadata));

      return row;

    }

  }

  return Transformation.apply(iterator,new Log());

}

Location: RowIterators.java

Content: 

private RowIterators(){

}

Location: RowIterators.java

Content: 

/** 

 * Filter the provided iterator to only include cells that are selected by the user.

 * @param iterator the iterator to filter.

 * @param filter the {@code ColumnFilter} to use when deciding which cells are queried by the user. This should be the filterthat was used when querying  {@code iterator}.

 * @return the filtered iterator..

 */

public static RowIterator withOnlyQueriedData(RowIterator iterator,ColumnFilter filter){

  if (filter.allFetchedColumnsAreQueried())   return iterator;

  return Transformation.apply(iterator,new WithOnlyQueriedData(filter));

}

