Location: TokenMetadata.java

Content: 

public void addBootstrapTokens(Collection<Token> tokens,InetAddressAndPort endpoint){

  addBootstrapTokens(tokens,endpoint,null);

}

Location: TokenMetadata.java

Content: 

private void addBootstrapTokens(Collection<Token> tokens,InetAddressAndPort endpoint,InetAddressAndPort original){

  assert tokens != null && !tokens.isEmpty();

  assert endpoint != null;

  lock.writeLock().lock();

  try {

    InetAddressAndPort oldEndpoint;

    for (    Token token : tokens) {

      oldEndpoint=bootstrapTokens.get(token);

      if (oldEndpoint != null && !oldEndpoint.equals(endpoint))       throw new RuntimeException("Bootstrap Token collision between " + oldEndpoint + " and "+ endpoint+ " (token "+ token);

      oldEndpoint=tokenToEndpointMap.get(token);

      if (oldEndpoint != null && !oldEndpoint.equals(endpoint) && !oldEndpoint.equals(original))       throw new RuntimeException("Bootstrap Token collision between " + oldEndpoint + " and "+ endpoint+ " (token "+ token);

    }

    bootstrapTokens.removeValue(endpoint);

    for (    Token token : tokens)     bootstrapTokens.put(token,endpoint);

  }

  finally {

    lock.writeLock().unlock();

  }

}

Location: TokenMetadata.java

Content: 

@Deprecated public void addBootstrapToken(Token token,InetAddressAndPort endpoint){

  addBootstrapTokens(Collections.singleton(token),endpoint);

}

Location: TokenMetadata.java

Content: 

public void addLeavingEndpoint(InetAddressAndPort endpoint){

  assert endpoint != null;

  lock.writeLock().lock();

  try {

    leavingEndpoints.add(endpoint);

  }

  finally {

    lock.writeLock().unlock();

  }

}

Location: TokenMetadata.java

Content: 

/** 

 * Add a new moving endpoint

 * @param token token which is node moving to

 * @param endpoint address of the moving node

 */

public void addMovingEndpoint(Token token,InetAddressAndPort endpoint){

  assert endpoint != null;

  lock.writeLock().lock();

  try {

    movingEndpoints.add(Pair.create(token,endpoint));

  }

  finally {

    lock.writeLock().unlock();

  }

}

Location: TokenMetadata.java

Content: 

public void addReplaceTokens(Collection<Token> replacingTokens,InetAddressAndPort newNode,InetAddressAndPort oldNode){

  assert replacingTokens != null && !replacingTokens.isEmpty();

  assert newNode != null && oldNode != null;

  lock.writeLock().lock();

  try {

    Collection<Token> oldNodeTokens=tokenToEndpointMap.inverse().get(oldNode);

    if (!replacingTokens.containsAll(oldNodeTokens) || !oldNodeTokens.containsAll(replacingTokens)) {

      throw new RuntimeException(String.format("Node %s is trying to replace node %s with tokens %s with a " + "different set of tokens %s.",newNode,oldNode,oldNodeTokens,replacingTokens));

    }

    logger.debug("Replacing {} with {}",newNode,oldNode);

    replacementToOriginal.put(newNode,oldNode);

    addBootstrapTokens(replacingTokens,newNode,oldNode);

  }

  finally {

    lock.writeLock().unlock();

  }

}

Location: TokenMetadata.java

Content: 

/** 

 * Return a cached TokenMetadata with only tokenToEndpointMap, i.e., the same as cloneOnlyTokenMap but uses a cached copy that is invalided when the ring changes, so in the common case no extra locking is required. Callers must *NOT* mutate the returned metadata object.

 */

public TokenMetadata cachedOnlyTokenMap(){

  TokenMetadata tm=cachedTokenMap.get();

  if (tm != null)   return tm;

synchronized (this) {

    if ((tm=cachedTokenMap.get()) != null)     return tm;

    tm=cloneOnlyTokenMap();

    cachedTokenMap.set(tm);

    return tm;

  }

}

Location: TokenMetadata.java

Content: 

/** 

 * Calculate pending ranges according to bootsrapping and leaving nodes. Reasoning is: (1) When in doubt, it is better to write too much to a node than too little. That is, if there are multiple nodes moving, calculate the biggest ranges a node could have. Cleaning up unneeded data afterwards is better than missing writes during movement. (2) When a node leaves, ranges for other nodes can only grow (a node might get additional ranges, but it will not lose any of its current ranges as a result of a leave). Therefore we will first remove _all_ leaving tokens for the sake of calculation and then check what ranges would go where if all nodes are to leave. This way we get the biggest possible ranges with regard current leave operations, covering all subsets of possible final range values. (3) When a node bootstraps, ranges of other nodes can only get smaller. Without doing complex calculations to see if multiple bootstraps overlap, we simply base calculations on the same token ring used before (reflecting situation after all leave operations have completed). Bootstrapping nodes will be added and removed one by one to that metadata and checked what their ranges would be. This will give us the biggest possible ranges the node could have. It might be that other bootstraps make our actual final ranges smaller, but it does not matter as we can clean up the data afterwards. NOTE: This is heavy and ineffective operation. This will be done only once when a node changes state in the cluster, so it should be manageable.

 */

public void calculatePendingRanges(AbstractReplicationStrategy strategy,String keyspaceName){

  long startedAt=System.currentTimeMillis();

synchronized (pendingRanges) {

    TokenMetadataDiagnostics.pendingRangeCalculationStarted(this,keyspaceName);

    BiMultiValMap<Token,InetAddressAndPort> bootstrapTokensClone;

    Set<InetAddressAndPort> leavingEndpointsClone;

    Set<Pair<Token,InetAddressAndPort>> movingEndpointsClone;

    TokenMetadata metadata;

    lock.readLock().lock();

    try {

      if (bootstrapTokens.isEmpty() && leavingEndpoints.isEmpty() && movingEndpoints.isEmpty()) {

        if (logger.isTraceEnabled())         logger.trace("No bootstrapping, leaving or moving nodes -> empty pending ranges for {}",keyspaceName);

        if (bootstrapTokens.isEmpty() && leavingEndpoints.isEmpty() && movingEndpoints.isEmpty()) {

          if (logger.isTraceEnabled())           logger.trace("No bootstrapping, leaving or moving nodes -> empty pending ranges for {}",keyspaceName);

          pendingRanges.put(keyspaceName,new PendingRangeMaps());

          return;

        }

      }

      bootstrapTokensClone=new BiMultiValMap<>(this.bootstrapTokens);

      leavingEndpointsClone=new HashSet<>(this.leavingEndpoints);

      movingEndpointsClone=new HashSet<>(this.movingEndpoints);

      metadata=this.cloneOnlyTokenMap();

    }

  finally {

      lock.readLock().unlock();

    }

    pendingRanges.put(keyspaceName,calculatePendingRanges(strategy,metadata,bootstrapTokensClone,leavingEndpointsClone,movingEndpointsClone));

    if (logger.isDebugEnabled())     logger.debug("Starting pending range calculation for {}",keyspaceName);

    long took=System.currentTimeMillis() - startedAt;

    if (logger.isDebugEnabled())     logger.debug("Pending range calculation for {} completed (took: {}ms)",keyspaceName,took);

    if (logger.isTraceEnabled())     logger.trace("Calculated pending ranges for {}:\n{}",keyspaceName,(pendingRanges.isEmpty() ? "<empty>" : printPendingRanges()));

  }

}

Location: TokenMetadata.java

Content: 

/** 

 * @see TokenMetadata#calculatePendingRanges(AbstractReplicationStrategy,String)

 */

private static PendingRangeMaps calculatePendingRanges(AbstractReplicationStrategy strategy,TokenMetadata metadata,BiMultiValMap<Token,InetAddressAndPort> bootstrapTokens,Set<InetAddressAndPort> leavingEndpoints,Set<Pair<Token,InetAddressAndPort>> movingEndpoints){

  PendingRangeMaps newPendingRanges=new PendingRangeMaps();

  RangesByEndpoint addressRanges=strategy.getAddressReplicas(metadata);

  TokenMetadata allLeftMetadata=removeEndpoints(metadata.cloneOnlyTokenMap(),leavingEndpoints);

  Set<Range<Token>> removeAffectedRanges=new HashSet<>();

  for (  InetAddressAndPort endpoint : leavingEndpoints)   removeAffectedRanges.addAll(addressRanges.get(endpoint).ranges());

  for (  Range<Token> range : removeAffectedRanges) {

    EndpointsForRange currentReplicas=strategy.calculateNaturalReplicas(range.right,metadata);

    EndpointsForRange newReplicas=strategy.calculateNaturalReplicas(range.right,allLeftMetadata);

    for (    Replica newReplica : newReplicas) {

      if (currentReplicas.endpoints().contains(newReplica.endpoint()))       continue;

      for (      Replica pendingReplica : newReplica.subtractSameReplication(addressRanges.get(newReplica.endpoint())))       newPendingRanges.addPendingRange(range,pendingReplica);

    }

  }

  Multimap<InetAddressAndPort,Token> bootstrapAddresses=bootstrapTokens.inverse();

  for (  InetAddressAndPort endpoint : bootstrapAddresses.keySet()) {

    Collection<Token> tokens=bootstrapAddresses.get(endpoint);

    TokenMetadata cloned=allLeftMetadata.cloneOnlyTokenMap();

    cloned.updateNormalTokens(tokens,endpoint);

    for (    Replica replica : strategy.getAddressReplicas(cloned,endpoint)) {

      newPendingRanges.addPendingRange(replica.range(),replica);

    }

  }

  for (  Pair<Token,InetAddressAndPort> moving : movingEndpoints) {

    Set<Replica> moveAffectedReplicas=new HashSet<>();

    InetAddressAndPort endpoint=moving.right;

    for (    Replica replica : strategy.getAddressReplicas(allLeftMetadata,endpoint)) {

      moveAffectedReplicas.add(replica);

    }

    allLeftMetadata.updateNormalToken(moving.left,endpoint);

    for (    Replica replica : strategy.getAddressReplicas(allLeftMetadata,endpoint)) {

      moveAffectedReplicas.add(replica);

    }

    for (    Replica replica : moveAffectedReplicas) {

      Set<InetAddressAndPort> currentEndpoints=strategy.calculateNaturalReplicas(replica.range().right,metadata).endpoints();

      Set<InetAddressAndPort> newEndpoints=strategy.calculateNaturalReplicas(replica.range().right,allLeftMetadata).endpoints();

      Set<InetAddressAndPort> difference=Sets.difference(newEndpoints,currentEndpoints);

      for (      final InetAddressAndPort address : difference) {

        RangesAtEndpoint newReplicas=strategy.getAddressReplicas(allLeftMetadata,address);

        RangesAtEndpoint oldReplicas=strategy.getAddressReplicas(metadata,address);

        newReplicas=newReplicas.filter(r -> !oldReplicas.contains(r));

        for (        Replica newReplica : newReplicas) {

          for (          Replica pendingReplica : newReplica.subtractSameReplication(oldReplicas)) {

            newPendingRanges.addPendingRange(pendingReplica.range(),pendingReplica);

          }

        }

      }

    }

    allLeftMetadata.removeEndpoint(endpoint);

  }

  return newPendingRanges;

}

Location: TokenMetadata.java

Content: 

/** 

 * used by tests 

 */

public void clearUnsafe(){

  lock.writeLock().lock();

  try {

    tokenToEndpointMap.clear();

    endpointToHostIdMap.clear();

    bootstrapTokens.clear();

    leavingEndpoints.clear();

    pendingRanges.clear();

    movingEndpoints.clear();

    sortedTokens.clear();

    topology=Topology.empty();

    invalidateCachedRings();

  }

  finally {

    lock.writeLock().unlock();

  }

}

Location: TokenMetadata.java

Content: 

/** 

 * Create a copy of TokenMetadata with tokenToEndpointMap reflecting situation after all current leave operations have finished.

 * @return new token metadata

 */

public TokenMetadata cloneAfterAllLeft(){

  lock.readLock().lock();

  try {

    return removeEndpoints(cloneOnlyTokenMap(),leavingEndpoints);

  }

  finally {

    lock.readLock().unlock();

  }

}

Location: TokenMetadata.java

Content: 

/** 

 * Create a copy of TokenMetadata with tokenToEndpointMap reflecting situation after all current leave, and move operations have finished.

 * @return new token metadata

 */

public TokenMetadata cloneAfterAllSettled(){

  lock.readLock().lock();

  try {

    TokenMetadata metadata=cloneOnlyTokenMap();

    for (    InetAddressAndPort endpoint : leavingEndpoints)     metadata.removeEndpoint(endpoint);

    for (    Pair<Token,InetAddressAndPort> pair : movingEndpoints)     metadata.updateNormalToken(pair.left,pair.right);

    return metadata;

  }

  finally {

    lock.readLock().unlock();

  }

}

Location: TokenMetadata.java

Content: 

/** 

 * Create a copy of TokenMetadata with only tokenToEndpointMap. That is, pending ranges, bootstrap tokens and leaving endpoints are not included in the copy.

 */

public TokenMetadata cloneOnlyTokenMap(){

  lock.readLock().lock();

  try {

    return new TokenMetadata(SortedBiMultiValMap.create(tokenToEndpointMap),HashBiMap.create(endpointToHostIdMap),topology,partitioner);

  }

  finally {

    lock.readLock().unlock();

  }

}

Location: TokenMetadata.java

Content: 

/** 

 * To be used by tests only (via  {@link org.apache.cassandra.service.StorageService#setPartitionerUnsafe}).

 */

@VisibleForTesting public TokenMetadata cloneWithNewPartitioner(IPartitioner newPartitioner){

  return new TokenMetadata(tokenToEndpointMap,endpointToHostIdMap,topology,newPartitioner);

}

Location: TokenMetadata.java

Content: 

public DecoratedKey decorateKey(ByteBuffer key){

  return partitioner.decorateKey(key);

}

Location: TokenMetadata.java

Content: 

public static int firstTokenIndex(final ArrayList<Token> ring,Token start,boolean insertMin){

  assert ring.size() > 0;

  int i=Collections.binarySearch(ring,start);

  if (i < 0) {

    i=(i + 1) * (-1);

    if (i >= ring.size())     i=insertMin ? -1 : 0;

  }

  return i;

}

Location: TokenMetadata.java

Content: 

public static Token firstToken(final ArrayList<Token> ring,Token start){

  return ring.get(firstTokenIndex(ring,start,false));

}

Location: TokenMetadata.java

Content: 

public Set<InetAddressAndPort> getAllEndpoints(){

  lock.readLock().lock();

  try {

    return ImmutableSet.copyOf(endpointToHostIdMap.keySet());

  }

  finally {

    lock.readLock().unlock();

  }

}

Location: TokenMetadata.java

Content: 

/** 

 * @return a copy of the bootstrapping tokens map 

 */

public BiMultiValMap<Token,InetAddressAndPort> getBootstrapTokens(){

  lock.readLock().lock();

  try {

    return new BiMultiValMap<>(bootstrapTokens);

  }

  finally {

    lock.readLock().unlock();

  }

}

Location: TokenMetadata.java

Content: 

/** 

 * Return the end-point for a unique host ID 

 */

public InetAddressAndPort getEndpointForHostId(UUID hostId){

  lock.readLock().lock();

  try {

    return endpointToHostIdMap.inverse().get(hostId);

  }

  finally {

    lock.readLock().unlock();

  }

}

Location: TokenMetadata.java

Content: 

/** 

 * @return a copy of the endpoint-to-id map for read-only operations 

 */

public Map<InetAddressAndPort,UUID> getEndpointToHostIdMapForReading(){

  lock.readLock().lock();

  try {

    Map<InetAddressAndPort,UUID> readMap=new HashMap<>();

    readMap.putAll(endpointToHostIdMap);

    return readMap;

  }

  finally {

    lock.readLock().unlock();

  }

}

Location: TokenMetadata.java

Content: 

/** 

 * @return an endpoint to token multimap representation of tokenToEndpointMap (a copy) 

 */

public Multimap<InetAddressAndPort,Token> getEndpointToTokenMapForReading(){

  lock.readLock().lock();

  try {

    Multimap<InetAddressAndPort,Token> cloned=HashMultimap.create();

    for (    Map.Entry<Token,InetAddressAndPort> entry : tokenToEndpointMap.entrySet())     cloned.put(entry.getValue(),entry.getKey());

    return cloned;

  }

  finally {

    lock.readLock().unlock();

  }

}

Location: TokenMetadata.java

Content: 

public InetAddressAndPort getEndpoint(Token token){

  lock.readLock().lock();

  try {

    return tokenToEndpointMap.get(token);

  }

  finally {

    lock.readLock().unlock();

  }

}

Location: TokenMetadata.java

Content: 

/** 

 * Return the unique host ID for an end-point. 

 */

public UUID getHostId(InetAddressAndPort endpoint){

  lock.readLock().lock();

  try {

    return endpointToHostIdMap.get(endpoint);

  }

  finally {

    lock.readLock().unlock();

  }

}

Location: TokenMetadata.java

Content: 

/** 

 * caller should not modify leavingEndpoints 

 */

public Set<InetAddressAndPort> getLeavingEndpoints(){

  lock.readLock().lock();

  try {

    return ImmutableSet.copyOf(leavingEndpoints);

  }

  finally {

    lock.readLock().unlock();

  }

}

Location: TokenMetadata.java

Content: 

/** 

 * Endpoints which are migrating to the new tokens

 * @return set of addresses of moving endpoints

 */

public Set<Pair<Token,InetAddressAndPort>> getMovingEndpoints(){

  lock.readLock().lock();

  try {

    return ImmutableSet.copyOf(movingEndpoints);

  }

  finally {

    lock.readLock().unlock();

  }

}

Location: TokenMetadata.java

Content: 

/** 

 * @return a (stable copy, won't be modified) Token to Endpoint map for all the normal and bootstrapping nodesin the cluster.

 */

public Map<Token,InetAddressAndPort> getNormalAndBootstrappingTokenToEndpointMap(){

  lock.readLock().lock();

  try {

    Map<Token,InetAddressAndPort> map=new HashMap<>(tokenToEndpointMap.size() + bootstrapTokens.size());

    map.putAll(tokenToEndpointMap);

    map.putAll(bootstrapTokens);

    return map;

  }

  finally {

    lock.readLock().unlock();

  }

}

Location: TokenMetadata.java

Content: 

public EndpointsByRange getPendingRangesMM(String keyspaceName){

  EndpointsByRange.Builder byRange=new EndpointsByRange.Builder();

  PendingRangeMaps pendingRangeMaps=this.pendingRanges.get(keyspaceName);

  if (pendingRangeMaps != null) {

    for (    Map.Entry<Range<Token>,EndpointsForRange.Builder> entry : pendingRangeMaps) {

      byRange.putAll(entry.getKey(),entry.getValue(),Conflict.ALL);

    }

  }

  return byRange.build();

}

Location: TokenMetadata.java

Content: 

/** 

 * a mutable map may be returned but caller should not modify it 

 */

public PendingRangeMaps getPendingRanges(String keyspaceName){

  return this.pendingRanges.get(keyspaceName);

}

Location: TokenMetadata.java

Content: 

public RangesAtEndpoint getPendingRanges(String keyspaceName,InetAddressAndPort endpoint){

  RangesAtEndpoint.Builder builder=RangesAtEndpoint.builder(endpoint);

  for (  Map.Entry<Range<Token>,Replica> entry : getPendingRangesMM(keyspaceName).flattenEntries()) {

    Replica replica=entry.getValue();

    if (replica.endpoint().equals(endpoint)) {

      builder.add(replica,Conflict.DUPLICATE);

    }

  }

  return builder.build();

}

Location: TokenMetadata.java

Content: 

public Token getPredecessor(Token token){

  List<Token> tokens=sortedTokens();

  int index=Collections.binarySearch(tokens,token);

  assert index >= 0 : token + " not found in " + tokenToEndpointMapKeysAsStrings();

  return index == 0 ? tokens.get(tokens.size() - 1) : tokens.get(index - 1);

}

Location: TokenMetadata.java

Content: 

@Deprecated public Range<Token> getPrimaryRangeFor(Token right){

  return getPrimaryRangesFor(Arrays.asList(right)).iterator().next();

}

Location: TokenMetadata.java

Content: 

public Collection<Range<Token>> getPrimaryRangesFor(Collection<Token> tokens){

  Collection<Range<Token>> ranges=new ArrayList<>(tokens.size());

  for (  Token right : tokens)   ranges.add(new Range<>(getPredecessor(right),right));

  return ranges;

}

Location: TokenMetadata.java

Content: 

public Optional<InetAddressAndPort> getReplacementNode(InetAddressAndPort endpoint){

  lock.readLock().lock();

  try {

    return Optional.ofNullable(replacementToOriginal.inverse().get(endpoint));

  }

  finally {

    lock.readLock().unlock();

  }

}

Location: TokenMetadata.java

Content: 

public Optional<InetAddressAndPort> getReplacingNode(InetAddressAndPort endpoint){

  lock.readLock().lock();

  try {

    return Optional.ofNullable((replacementToOriginal.get(endpoint)));

  }

  finally {

    lock.readLock().unlock();

  }

}

Location: TokenMetadata.java

Content: 

public long getRingVersion(){

  return ringVersion;

}

Location: TokenMetadata.java

Content: 

public int getSizeOfAllEndpoints(){

  lock.readLock().lock();

  try {

    return endpointToHostIdMap.size();

  }

  finally {

    lock.readLock().unlock();

  }

}

Location: TokenMetadata.java

Content: 

public int getSizeOfLeavingEndpoints(){

  lock.readLock().lock();

  try {

    return leavingEndpoints.size();

  }

  finally {

    lock.readLock().unlock();

  }

}

Location: TokenMetadata.java

Content: 

public int getSizeOfMovingEndpoints(){

  lock.readLock().lock();

  try {

    return movingEndpoints.size();

  }

  finally {

    lock.readLock().unlock();

  }

}

Location: TokenMetadata.java

Content: 

public Token getSuccessor(Token token){

  List<Token> tokens=sortedTokens();

  int index=Collections.binarySearch(tokens,token);

  assert index >= 0 : token + " not found in " + tokenToEndpointMapKeysAsStrings();

  return (index == (tokens.size() - 1)) ? tokens.get(0) : tokens.get(index + 1);

}

Location: TokenMetadata.java

Content: 

public Collection<Token> getTokens(InetAddressAndPort endpoint){

  assert endpoint != null;

  assert isMember(endpoint);

  lock.readLock().lock();

  try {

    return new ArrayList<>(tokenToEndpointMap.inverse().get(endpoint));

  }

  finally {

    lock.readLock().unlock();

  }

}

Location: TokenMetadata.java

Content: 

@Deprecated public Token getToken(InetAddressAndPort endpoint){

  return getTokens(endpoint).iterator().next();

}

Location: TokenMetadata.java

Content: 

/** 

 * @return the Topology map of nodes to DCs + RacksThis is only allowed when a copy has been made of TokenMetadata, to avoid concurrent modifications when Topology methods are subsequently used by the caller.

 */

public Topology getTopology(){

  assert this != StorageService.instance.getTokenMetadata();

  return topology;

}

Location: TokenMetadata.java

Content: 

/** 

 * @deprecated retained for benefit of old tests

 */

@Deprecated public EndpointsForToken getWriteEndpoints(Token token,String keyspaceName,EndpointsForToken natural){

  EndpointsForToken pending=pendingEndpointsForToken(token,keyspaceName);

  return ReplicaLayout.forTokenWrite(natural,pending).all();

}

Location: TokenMetadata.java

Content: 

public void invalidateCachedRings(){

  ringVersion++;

  cachedTokenMap.set(null);

}

Location: TokenMetadata.java

Content: 

public boolean isLeaving(InetAddressAndPort endpoint){

  assert endpoint != null;

  lock.readLock().lock();

  try {

    return leavingEndpoints.contains(endpoint);

  }

  finally {

    lock.readLock().unlock();

  }

}

Location: TokenMetadata.java

Content: 

public boolean isMember(InetAddressAndPort endpoint){

  assert endpoint != null;

  lock.readLock().lock();

  try {

    return tokenToEndpointMap.inverse().containsKey(endpoint);

  }

  finally {

    lock.readLock().unlock();

  }

}

Location: TokenMetadata.java

Content: 

public boolean isMoving(InetAddressAndPort endpoint){

  assert endpoint != null;

  lock.readLock().lock();

  try {

    for (    Pair<Token,InetAddressAndPort> pair : movingEndpoints) {

      if (pair.right.equals(endpoint))       return true;

    }

    return false;

  }

  finally {

    lock.readLock().unlock();

  }

}

Location: TokenMetadata.java

Content: 

public EndpointsForToken pendingEndpointsForToken(Token token,String keyspaceName){

  PendingRangeMaps pendingRangeMaps=this.pendingRanges.get(keyspaceName);

  if (pendingRangeMaps == null)   return EndpointsForToken.empty(token);

  return pendingRangeMaps.pendingEndpointsFor(token);

}

Location: TokenMetadata.java

Content: 

/** 

 * @return the number of nodes bootstrapping into source's primary range 

 */

public int pendingRangeChanges(InetAddressAndPort source){

  int n=0;

  Collection<Range<Token>> sourceRanges=getPrimaryRangesFor(getTokens(source));

  lock.readLock().lock();

  try {

    for (    Token token : bootstrapTokens.keySet())     for (    Range<Token> range : sourceRanges)     if (range.contains(token))     n++;

  }

  finally {

    lock.readLock().unlock();

  }

  return n;

}

Location: TokenMetadata.java

Content: 

public void removeBootstrapTokens(Collection<Token> tokens){

  assert tokens != null && !tokens.isEmpty();

  lock.writeLock().lock();

  try {

    for (    Token token : tokens)     bootstrapTokens.remove(token);

  }

  finally {

    lock.writeLock().unlock();

  }

}

Location: TokenMetadata.java

Content: 

private static TokenMetadata removeEndpoints(TokenMetadata allLeftMetadata,Set<InetAddressAndPort> leavingEndpoints){

  for (  InetAddressAndPort endpoint : leavingEndpoints)   allLeftMetadata.removeEndpoint(endpoint);

  return allLeftMetadata;

}

Location: TokenMetadata.java

Content: 

public void removeEndpoint(InetAddressAndPort endpoint){

  assert endpoint != null;

  lock.writeLock().lock();

  try {

    bootstrapTokens.removeValue(endpoint);

    tokenToEndpointMap.removeValue(endpoint);

    topology=topology.unbuild().removeEndpoint(endpoint).build();

    leavingEndpoints.remove(endpoint);

    if (replacementToOriginal.remove(endpoint) != null) {

      logger.debug("Node {} failed during replace.",endpoint);

    }

    endpointToHostIdMap.remove(endpoint);

    sortedTokens=sortTokens();

    invalidateCachedRings();

  }

  finally {

    lock.writeLock().unlock();

  }

}

Location: TokenMetadata.java

Content: 

/** 

 * Remove pair of token/address from moving endpoints

 * @param endpoint address of the moving node

 */

public void removeFromMoving(InetAddressAndPort endpoint){

  assert endpoint != null;

  lock.writeLock().lock();

  try {

    for (    Pair<Token,InetAddressAndPort> pair : movingEndpoints) {

      if (pair.right.equals(endpoint)) {

        movingEndpoints.remove(pair);

        break;

      }

    }

    invalidateCachedRings();

  }

  finally {

    lock.writeLock().unlock();

  }

}

Location: TokenMetadata.java

Content: 

/** 

 * iterator over the Tokens in the given ring, starting with the token for the node owning start (which does not have to be a Token in the ring)

 * @param includeMin True if the minimum token should be returned in the ring even if it has no owner.

 */

public static Iterator<Token> ringIterator(final ArrayList<Token> ring,Token start,boolean includeMin){

  if (ring.isEmpty())   return includeMin ? Iterators.singletonIterator(start.getPartitioner().getMinimumToken()) : Collections.emptyIterator();

  final boolean insertMin=includeMin && !ring.get(0).isMinimum();

  final int startIndex=firstTokenIndex(ring,start,insertMin);

  return new AbstractIterator<Token>(){

    int j=startIndex;

    protected Token computeNext(){

      if (j < -1)       return endOfData();

      try {

        if (j == -1)         return start.getPartitioner().getMinimumToken();

        return ring.get(j);

      }

  finally {

        j++;

        if (j == ring.size())         j=insertMin ? -1 : 0;

        if (j == startIndex)         j=-2;

      }

    }

  }

;

}

Location: TokenMetadata.java

Content: 

public ArrayList<Token> sortedTokens(){

  return sortedTokens;

}

Location: TokenMetadata.java

Content: 

private ArrayList<Token> sortTokens(){

  return new ArrayList<>(tokenToEndpointMap.keySet());

}

Location: TokenMetadata.java

Content: 

public TokenMetadata(){

  this(SortedBiMultiValMap.create(),HashBiMap.create(),Topology.empty(),DatabaseDescriptor.getPartitioner());

}

Location: TokenMetadata.java

Content: 

private TokenMetadata(BiMultiValMap<Token,InetAddressAndPort> tokenToEndpointMap,BiMap<InetAddressAndPort,UUID> endpointsMap,Topology topology,IPartitioner partitioner){

  this.tokenToEndpointMap=tokenToEndpointMap;

  this.topology=topology;

  this.partitioner=partitioner;

  endpointToHostIdMap=endpointsMap;

  sortedTokens=sortTokens();

}

Location: TokenMetadata.java

Content: 

public TokenMetadata(IEndpointSnitch snitch){

  this(SortedBiMultiValMap.create(),HashBiMap.create(),Topology.builder(() -> snitch).build(),DatabaseDescriptor.getPartitioner());

}

Location: TokenMetadata.java

Content: 

private String tokenToEndpointMapKeysAsStrings(){

  lock.readLock().lock();

  try {

    return StringUtils.join(tokenToEndpointMap.keySet(),", ");

  }

  finally {

    lock.readLock().unlock();

  }

}

Location: TokenMetadata.java

Content: 

/** 

 * Store an end-point to host ID mapping.  Each ID must be unique, and cannot be changed after the fact.

 */

public void updateHostId(UUID hostId,InetAddressAndPort endpoint){

  assert hostId != null;

  assert endpoint != null;

  lock.writeLock().lock();

  try {

    InetAddressAndPort storedEp=endpointToHostIdMap.inverse().get(hostId);

    if (storedEp != null) {

      if (!storedEp.equals(endpoint) && (FailureDetector.instance.isAlive(storedEp))) {

        throw new RuntimeException(String.format("Host ID collision between active endpoint %s and %s (id=%s)",storedEp,endpoint,hostId));

      }

    }

    UUID storedId=endpointToHostIdMap.get(endpoint);

    if ((storedId != null) && (!storedId.equals(hostId)))     logger.warn("Changing {}'s host ID from {} to {}",endpoint,storedId,hostId);

    endpointToHostIdMap.forcePut(endpoint,hostId);

  }

  finally {

    lock.writeLock().unlock();

  }

}

Location: TokenMetadata.java

Content: 

public void updateNormalTokens(Collection<Token> tokens,InetAddressAndPort endpoint){

  Multimap<InetAddressAndPort,Token> endpointTokens=HashMultimap.create();

  for (  Token token : tokens)   endpointTokens.put(endpoint,token);

  updateNormalTokens(endpointTokens);

}

Location: TokenMetadata.java

Content: 

/** 

 * Update token map with a set of token/endpoint pairs in normal state. Prefer this whenever there are multiple pairs to update, as each update (whether a single or multiple) is expensive (CASSANDRA-3831).

 */

public void updateNormalTokens(Multimap<InetAddressAndPort,Token> endpointTokens){

  if (endpointTokens.isEmpty())   return;

  lock.writeLock().lock();

  try {

    boolean shouldSortTokens=false;

    Topology.Builder topologyBuilder=topology.unbuild();

    for (    InetAddressAndPort endpoint : endpointTokens.keySet()) {

      Collection<Token> tokens=endpointTokens.get(endpoint);

      assert tokens != null && !tokens.isEmpty();

      bootstrapTokens.removeValue(endpoint);

      tokenToEndpointMap.removeValue(endpoint);

      topologyBuilder.addEndpoint(endpoint);

      leavingEndpoints.remove(endpoint);

      replacementToOriginal.remove(endpoint);

      removeFromMoving(endpoint);

      for (      Token token : tokens) {

        InetAddressAndPort prev=tokenToEndpointMap.put(token,endpoint);

        if (!endpoint.equals(prev)) {

          if (prev != null)           logger.warn("Token {} changing ownership from {} to {}",token,prev,endpoint);

          shouldSortTokens=true;

        }

      }

    }

    topology=topologyBuilder.build();

    if (shouldSortTokens)     sortedTokens=sortTokens();

  }

  finally {

    lock.writeLock().unlock();

  }

}

Location: TokenMetadata.java

Content: 

/** 

 * Update token map with a single token/endpoint pair in normal state.

 */

public void updateNormalToken(Token token,InetAddressAndPort endpoint){

  updateNormalTokens(Collections.singleton(token),endpoint);

}

Location: TokenMetadata.java

Content: 

/** 

 * This is called when the snitch properties for many endpoints are updated, it will update the topology mappings of any endpoints whose snitch has changed, see CASSANDRA-10238.

 */

public Topology updateTopology(){

  lock.writeLock().lock();

  try {

    logger.info("Updating topology for all endpoints that have changed");

    topology=topology.unbuild().updateEndpoints().build();

    invalidateCachedRings();

    return topology;

  }

  finally {

    lock.writeLock().unlock();

  }

}

Location: TokenMetadata.java

Content: 

/** 

 * This is called when the snitch properties for this endpoint are updated, see CASSANDRA-10238.

 */

public Topology updateTopology(InetAddressAndPort endpoint){

  assert endpoint != null;

  lock.writeLock().lock();

  try {

    logger.info("Updating topology for {}",endpoint);

    topology=topology.unbuild().updateEndpoint(endpoint).build();

    invalidateCachedRings();

    return topology;

  }

  finally {

    lock.writeLock().unlock();

  }

}

