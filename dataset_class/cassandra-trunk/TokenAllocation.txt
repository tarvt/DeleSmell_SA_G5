Location: TokenAllocation.java

Content: 

public static Collection<Token> allocateTokens(final TokenMetadata tokenMetadata,final AbstractReplicationStrategy rs,final InetAddressAndPort endpoint,int numTokens){

  return create(tokenMetadata,rs,numTokens).allocate(endpoint);

}

Location: TokenAllocation.java

Content: 

public static Collection<Token> allocateTokens(final TokenMetadata tokenMetadata,final int replicas,final InetAddressAndPort endpoint,int numTokens){

  return create(DatabaseDescriptor.getEndpointSnitch(),tokenMetadata,replicas,numTokens).allocate(endpoint);

}

Location: TokenAllocation.java

Content: 

Collection<Token> allocate(InetAddressAndPort endpoint){

  StrategyAdapter strategy=getOrCreateStrategy(endpoint);

  Collection<Token> tokens=strategy.createAllocator().addUnit(endpoint,numTokens);

  tokens=strategy.adjustForCrossDatacenterClashes(tokens);

  SummaryStatistics os=strategy.replicatedOwnershipStats();

  tokenMetadata.updateNormalTokens(tokens,endpoint);

  SummaryStatistics ns=strategy.replicatedOwnershipStats();

  logger.info("Selected tokens {}",tokens);

  logger.debug("Replicated node load in datacenter before allocation {}",statToString(os));

  logger.debug("Replicated node load in datacenter after allocation {}",statToString(ns));

  double stdDevGrowth=ns.getStandardDeviation() - os.getStandardDeviation();

  if (stdDevGrowth > TokenAllocation.WARN_STDEV_GROWTH) {

    logger.warn(String.format("Growth of %.2f%% in token ownership standard deviation after allocation above warning threshold of %d%%",stdDevGrowth * 100,(int)(TokenAllocation.WARN_STDEV_GROWTH * 100)));

  }

  return tokens;

}

Location: TokenAllocation.java

Content: 

private StrategyAdapter createStrategy(IEndpointSnitch snitch,String dc,String rack,int replicas,boolean groupByRack){

  return new StrategyAdapter(){

    @Override public int replicas(){

      return replicas;

    }

    @Override public Object getGroup(    InetAddressAndPort unit){

      return groupByRack ? snitch.getRack(unit) : unit;

    }

    @Override public boolean inAllocationRing(    InetAddressAndPort other){

      return (dc == null || dc.equals(snitch.getDatacenter(other))) && (rack == null || rack.equals(snitch.getRack(other)));

    }

  }

;

}

Location: TokenAllocation.java

Content: 

private StrategyAdapter createStrategy(final SimpleStrategy rs){

  return createStrategy(rs.snitch,null,null,rs.getReplicationFactor().allReplicas,false);

}

Location: TokenAllocation.java

Content: 

private StrategyAdapter createStrategy(String dc,String rack){

  if (replicationStrategy instanceof NetworkTopologyStrategy)   return createStrategy(tokenMetadata,(NetworkTopologyStrategy)replicationStrategy,dc,rack);

  if (replicationStrategy instanceof SimpleStrategy)   return createStrategy((SimpleStrategy)replicationStrategy);

  throw new ConfigurationException("Token allocation does not support replication strategy " + replicationStrategy.getClass().getSimpleName());

}

Location: TokenAllocation.java

Content: 

private StrategyAdapter createStrategy(TokenMetadata tokenMetadata,NetworkTopologyStrategy strategy,String dc,String rack){

  int replicas=strategy.getReplicationFactor(dc).allReplicas;

  Topology topology=tokenMetadata.getTopology();

  int racks=topology.getDatacenterRacks().get(dc) != null && topology.getDatacenterRacks().get(dc).containsKey(rack) ? topology.getDatacenterRacks().get(dc).asMap().size() : 1;

  if (replicas <= 1) {

    return createStrategy(strategy.snitch,dc,null,1,false);

  }

 else   if (racks == replicas) {

    return createStrategy(strategy.snitch,dc,rack,1,false);

  }

 else   if (racks > replicas) {

    return createStrategy(strategy.snitch,dc,null,replicas,true);

  }

 else   if (racks == 1) {

    return createStrategy(strategy.snitch,dc,null,replicas,false);

  }

  throw new ConfigurationException(String.format("Token allocation failed: the number of racks %d in datacenter %s is lower than its replication factor %d.",racks,dc,replicas));

}

Location: TokenAllocation.java

Content: 

static TokenAllocation create(IEndpointSnitch snitch,TokenMetadata tokenMetadata,int replicas,int numTokens){

  HashMap<String,String> options=new HashMap<>();

  options.put(snitch.getLocalDatacenter(),Integer.toString(replicas));

  NetworkTopologyStrategy fakeReplicationStrategy=new NetworkTopologyStrategy(null,tokenMetadata,snitch,options);

  TokenAllocation allocator=new TokenAllocation(tokenMetadata,fakeReplicationStrategy,numTokens);

  return allocator;

}

Location: TokenAllocation.java

Content: 

static TokenAllocation create(TokenMetadata tokenMetadata,AbstractReplicationStrategy rs,int numTokens){

  return new TokenAllocation(tokenMetadata,rs,numTokens);

}

Location: TokenAllocation.java

Content: 

SummaryStatistics getAllocationRingOwnership(InetAddressAndPort endpoint){

  return getOrCreateStrategy(endpoint).replicatedOwnershipStats();

}

Location: TokenAllocation.java

Content: 

SummaryStatistics getAllocationRingOwnership(String datacenter,String rack){

  return getOrCreateStrategy(datacenter,rack).replicatedOwnershipStats();

}

Location: TokenAllocation.java

Content: 

private StrategyAdapter getOrCreateStrategy(InetAddressAndPort endpoint){

  String dc=replicationStrategy.snitch.getDatacenter(endpoint);

  String rack=replicationStrategy.snitch.getRack(endpoint);

  return getOrCreateStrategy(dc,rack);

}

Location: TokenAllocation.java

Content: 

private StrategyAdapter getOrCreateStrategy(String dc,String rack){

  return strategyByRackDc.computeIfAbsent(dc,k -> new HashMap<>()).computeIfAbsent(rack,k -> createStrategy(dc,rack));

}

Location: TokenAllocation.java

Content: 

static String statToString(SummaryStatistics stat){

  return String.format("max %.2f min %.2f stddev %.4f",stat.getMax() / stat.getMean(),stat.getMin() / stat.getMean(),stat.getStandardDeviation());

}

Location: TokenAllocation.java

Content: 

private TokenAllocation(TokenMetadata tokenMetadata,AbstractReplicationStrategy replicationStrategy,int numTokens){

  this.tokenMetadata=tokenMetadata.cloneOnlyTokenMap();

  this.replicationStrategy=replicationStrategy;

  this.numTokens=numTokens;

}

