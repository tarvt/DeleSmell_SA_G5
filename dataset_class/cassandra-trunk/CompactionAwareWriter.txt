Location: CompactionAwareWriter.java

Content: 

public CompactionAwareWriter(ColumnFamilyStore cfs,Directories directories,LifecycleTransaction txn,Set<SSTableReader> nonExpiredSSTables,boolean keepOriginals){

  this.cfs=cfs;

  this.directories=directories;

  this.nonExpiredSSTables=nonExpiredSSTables;

  this.txn=txn;

  estimatedTotalKeys=SSTableReader.getApproximateKeyCount(nonExpiredSSTables);

  maxAge=CompactionTask.getMaxDataAge(nonExpiredSSTables);

  sstableWriter=SSTableRewriter.construct(cfs,txn,keepOriginals,maxAge);

  minRepairedAt=CompactionTask.getMinRepairedAt(nonExpiredSSTables);

  pendingRepair=CompactionTask.getPendingRepair(nonExpiredSSTables);

  isTransient=CompactionTask.getIsTransient(nonExpiredSSTables);

  DiskBoundaries db=cfs.getDiskBoundaries();

  diskBoundaries=db.positions;

  locations=db.directories;

  locationIndex=-1;

}

Location: CompactionAwareWriter.java

Content: 

@Deprecated public CompactionAwareWriter(ColumnFamilyStore cfs,Directories directories,LifecycleTransaction txn,Set<SSTableReader> nonExpiredSSTables,boolean offline,boolean keepOriginals){

  this(cfs,directories,txn,nonExpiredSSTables,keepOriginals);

}

Location: CompactionAwareWriter.java

Content: 

/** 

 * Return a directory where we can expect expectedWriteSize to fit.

 * @param sstables the sstables to compact

 * @return

 */

public Directories.DataDirectory getWriteDirectory(Iterable<SSTableReader> sstables,long estimatedWriteSize){

  Descriptor descriptor=null;

  for (  SSTableReader sstable : sstables) {

    if (descriptor == null)     descriptor=sstable.descriptor;

    if (!descriptor.directory.equals(sstable.descriptor.directory)) {

      logger.trace("All sstables not from the same disk - putting results in {}",descriptor.directory);

      break;

    }

  }

  Directories.DataDirectory d=getDirectories().getDataDirectoryForFile(descriptor);

  if (d != null) {

    long availableSpace=d.getAvailableSpace();

    if (availableSpace < estimatedWriteSize)     throw new RuntimeException(String.format("Not enough space to write %s to %s (%s available)",FBUtilities.prettyPrintMemory(estimatedWriteSize),d.location,FBUtilities.prettyPrintMemory(availableSpace)));

    logger.trace("putting compaction results in {}",descriptor.directory);

    return d;

  }

  d=getDirectories().getWriteableLocation(estimatedWriteSize);

  if (d == null)   throw new RuntimeException(String.format("Not enough disk space to store %s",FBUtilities.prettyPrintMemory(estimatedWriteSize)));

  return d;

}

Location: CompactionAwareWriter.java

Content: 

protected abstract boolean realAppend(UnfilteredRowIterator partition);

Location: CompactionAwareWriter.java

Content: 

/** 

 * Implementations of this method should finish the current sstable writer and start writing to this directory. Called once before starting to append and then whenever we see a need to start writing to another directory.

 * @param directory

 */

protected abstract void switchCompactionLocation(Directories.DataDirectory directory);

