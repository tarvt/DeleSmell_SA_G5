Location: SafeMemoryWriter.java

Content: 

public SafeMemory currentBuffer(){

  return memory;

}

Location: SafeMemoryWriter.java

Content: 

private void resizeTo(long newCapacity){

  if (newCapacity != capacity()) {

    long position=length();

    ByteOrder order=buffer.order();

    SafeMemory oldBuffer=memory;

    memory=this.memory.copy(newCapacity);

    buffer=tailBuffer(memory);

    int newPosition=(int)(position - tailOffset(memory));

    buffer.position(newPosition);

    buffer.order(order);

    oldBuffer.free();

  }

}

Location: SafeMemoryWriter.java

Content: 

@SuppressWarnings("resource") public SafeMemoryWriter(long initialCapacity){

  this(new SafeMemory(initialCapacity));

}

Location: SafeMemoryWriter.java

Content: 

private SafeMemoryWriter(SafeMemory memory){

  super(tailBuffer(memory).order(ByteOrder.BIG_ENDIAN));

  this.memory=memory;

}

Location: SafeMemoryWriter.java

Content: 

private static ByteBuffer tailBuffer(Memory memory){

  return memory.asByteBuffer(tailOffset(memory),(int)Math.min(memory.size,Integer.MAX_VALUE));

}

Location: SafeMemoryWriter.java

Content: 

private static long tailOffset(Memory memory){

  return Math.max(0,memory.size - Integer.MAX_VALUE);

}

Location: SafeMemoryWriter.java

Content: 

public void trim(){

  resizeTo(length());

}

