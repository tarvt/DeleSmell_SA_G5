Location: LZ4Compressor.java

Content: 

private LZ4Compressor(String type,Integer compressionLevel){

  this.compressorType=type;

  this.compressionLevel=compressionLevel;

  final LZ4Factory lz4Factory=LZ4Factory.fastestInstance();

switch (type) {

case LZ4_HIGH_COMPRESSOR:

{

      compressor=lz4Factory.highCompressor(compressionLevel);

      this.recommendedUses=ImmutableSet.of(Uses.GENERAL);

      break;

    }

case LZ4_FAST_COMPRESSOR:

default :

{

    compressor=lz4Factory.fastCompressor();

    this.recommendedUses=ImmutableSet.copyOf(EnumSet.allOf(Uses.class));

  }

}

decompressor=lz4Factory.safeDecompressor();

}

Location: LZ4Compressor.java

Content: 

public static Integer validateCompressionLevel(String compressionLevel) throws ConfigurationException {

  if (compressionLevel == null)   return DEFAULT_HIGH_COMPRESSION_LEVEL;

  ConfigurationException ex=new ConfigurationException("Invalid value [" + compressionLevel + "] for parameter '"+ LZ4_HIGH_COMPRESSION_LEVEL+ "'. Value must be between 1 and 17.");

  Integer level;

  try {

    level=Integer.valueOf(compressionLevel);

  }

 catch (  NumberFormatException e) {

    throw ex;

  }

  if (level < 1 || level > 17) {

    throw ex;

  }

  return level;

}

Location: LZ4Compressor.java

Content: 

public static String validateCompressorType(String compressorType) throws ConfigurationException {

  if (compressorType == null)   return DEFAULT_LZ4_COMPRESSOR_TYPE;

  if (!VALID_COMPRESSOR_TYPES.contains(compressorType)) {

    throw new ConfigurationException(String.format("Invalid compressor type '%s' specified for LZ4 parameter '%s'. " + "Valid options are %s.",compressorType,LZ4_COMPRESSOR_TYPE,VALID_COMPRESSOR_TYPES.toString()));

  }

 else {

    return compressorType;

  }

}

