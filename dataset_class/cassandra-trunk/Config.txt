Location: Config.java

Content: 

public static Supplier<Config> getOverrideLoadConfig(){

  return overrideLoadConfig;

}

Location: Config.java

Content: 

/** 

 * @deprecated migrate to {@link DatabaseDescriptor#isClientInitialized()}

 */

@Deprecated public static boolean isClientMode(){

  return isClientMode;

}

Location: Config.java

Content: 

public static void log(Config config){

  Map<String,String> configMap=new TreeMap<>();

  for (  Field field : Config.class.getFields()) {

    if (Modifier.isFinal(field.getModifiers()))     continue;

    String name=field.getName();

    if (SENSITIVE_KEYS.contains(name)) {

      configMap.put(name,"<REDACTED>");

      continue;

    }

    String value;

    try {

      value=field.get(config).toString();

    }

 catch (    NullPointerException|IllegalAccessException npe) {

      value="null";

    }

    configMap.put(name,value);

  }

  logger.info("Node configuration:[{}]",Joiner.on("; ").join(configMap.entrySet()));

}

Location: Config.java

Content: 

/** 

 * Client mode means that the process is a pure client, that uses C* code base but does not read or write local C* database files.

 * @deprecated migrate to {@link DatabaseDescriptor#clientInitialization(boolean)}

 */

@Deprecated public static void setClientMode(boolean clientMode){

  isClientMode=clientMode;

}

Location: Config.java

Content: 

public static void setOverrideLoadConfig(Supplier<Config> loadConfig){

  overrideLoadConfig=loadConfig;

}

