Location: ColumnSubselection.java

Content: 

protected ColumnSubselection(ColumnMetadata column){

  this.column=column;

}

Location: ColumnSubselection.java

Content: 

/** 

 * Given a path, return -1 if the path is before anything selected by this subselection, 0 if it is selected by this subselection and 1 if the path is after anything selected by this subselection.

 */

public abstract int compareInclusionOf(CellPath path);

Location: ColumnSubselection.java

Content: 

public int compareTo(ColumnSubselection other){

  assert other.column().name.equals(column().name);

  return column().cellPathComparator().compare(comparisonPath(),other.comparisonPath());

}

Location: ColumnSubselection.java

Content: 

protected abstract CellPath comparisonPath();

Location: ColumnSubselection.java

Content: 

public static ColumnSubselection element(ColumnMetadata column,CellPath elt){

  assert column.isComplex() && column.type instanceof CollectionType;

  assert elt.size() == 1;

  return new Element(column,elt);

}

Location: ColumnSubselection.java

Content: 

public static ColumnSubselection slice(ColumnMetadata column,CellPath from,CellPath to){

  assert column.isComplex() && column.type instanceof CollectionType;

  assert from.size() <= 1 && to.size() <= 1;

  return new Slice(column,from,to);

}

