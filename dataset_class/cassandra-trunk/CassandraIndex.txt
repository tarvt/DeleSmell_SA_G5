Location: CassandraIndex.java

Content: 

private Clustering<?> buildIndexClustering(ByteBuffer rowKey,Clustering<?> clustering,Cell<?> cell){

  return buildIndexClusteringPrefix(rowKey,clustering,cell == null ? null : cell.path()).build();

}

Location: CassandraIndex.java

Content: 

protected CassandraIndex(ColumnFamilyStore baseCfs,IndexMetadata indexDef){

  this.baseCfs=baseCfs;

  setMetadata(indexDef);

}

Location: CassandraIndex.java

Content: 

/** 

 * Specific to internal indexes, this is called by a searcher when it encounters a stale entry in the index

 * @param indexKey the partition key in the index table

 * @param indexClustering the clustering in the index table

 * @param deletion deletion timestamp etc

 * @param ctx the write context under which to perform the deletion

 */

public void deleteStaleEntry(DecoratedKey indexKey,Clustering<?> indexClustering,DeletionTime deletion,WriteContext ctx){

  doDelete(indexKey,indexClustering,deletion,ctx);

  logger.trace("Removed index entry for stale value {}",indexKey);

}

Location: CassandraIndex.java

Content: 

/** 

 * Called when deleting entries on non-primary key columns

 */

private void delete(ByteBuffer rowKey,Clustering<?> clustering,Cell<?> cell,WriteContext ctx,int nowInSec){

  DecoratedKey valueKey=getIndexKeyFor(getIndexedValue(rowKey,clustering,cell));

  doDelete(valueKey,buildIndexClustering(rowKey,clustering,cell),new DeletionTime(cell.timestamp(),nowInSec),ctx);

}

Location: CassandraIndex.java

Content: 

/** 

 * Called when deleting entries from indexes on primary key columns

 */

private void delete(ByteBuffer rowKey,Clustering<?> clustering,DeletionTime deletion,WriteContext ctx){

  DecoratedKey valueKey=getIndexKeyFor(getIndexedValue(rowKey,clustering,null));

  doDelete(valueKey,buildIndexClustering(rowKey,clustering,null),deletion,ctx);

}

Location: CassandraIndex.java

Content: 

private void doDelete(DecoratedKey indexKey,Clustering<?> indexClustering,DeletionTime deletion,WriteContext ctx){

  Row row=BTreeRow.emptyDeletedRow(indexClustering,Row.Deletion.regular(deletion));

  PartitionUpdate upd=partitionUpdate(indexKey,row);

  indexCfs.getWriteHandler().write(upd,ctx,UpdateTransaction.NO_OP);

  logger.trace("Removed index entry for value {}",indexKey);

}

Location: CassandraIndex.java

Content: 

private Callable<?> getBuildIndexTask(){

  return () -> {

    hongshuai();

    baseCfs.forceBlockingFlush();

    try (ColumnFamilyStore.RefViewFragment viewFragment=baseCfs.selectAndReference(View.selectFunction(SSTableSet.CANONICAL));Refs<SSTableReader> sstables=viewFragment.refs){

      if (sstables.isEmpty()) {

        logger.info("No SSTable data for {}.{} to build index {} from, marking empty index as built",baseCfs.metadata.keyspace,baseCfs.metadata.name,metadata.name);

        return;

      }

      logger.info("Submitting index build of {} for data in {}",metadata.name,getSSTableNames(sstables));

      SecondaryIndexBuilder builder=new CollatedViewIndexBuilder(baseCfs,Collections.singleton(this),new ReducingKeyIterator(sstables),ImmutableSet.copyOf(sstables));

      Future<?> future=CompactionManager.instance.submitIndexBuild(builder);

      FBUtilities.waitOnFuture(future);

      indexCfs.forceBlockingFlush();

    }

     logger.info("Index build of {} complete",metadata.name);

    return null;

  }

;

}

Location: CassandraIndex.java

Content: 

static CassandraIndexFunctions getFunctions(IndexMetadata indexDef,Pair<ColumnMetadata,IndexTarget.Type> target){

  if (indexDef.isKeys())   return CassandraIndexFunctions.KEYS_INDEX_FUNCTIONS;

  ColumnMetadata indexedColumn=target.left;

  if (indexedColumn.type.isCollection() && indexedColumn.type.isMultiCell()) {

switch (((CollectionType)indexedColumn.type).kind) {

case LIST:

      return CassandraIndexFunctions.COLLECTION_VALUE_INDEX_FUNCTIONS;

case SET:

    return CassandraIndexFunctions.COLLECTION_KEY_INDEX_FUNCTIONS;

case MAP:

switch (target.right) {

case KEYS:

    return CassandraIndexFunctions.COLLECTION_KEY_INDEX_FUNCTIONS;

case KEYS_AND_VALUES:

  return CassandraIndexFunctions.COLLECTION_ENTRY_INDEX_FUNCTIONS;

case VALUES:

return CassandraIndexFunctions.COLLECTION_VALUE_INDEX_FUNCTIONS;

}

throw new AssertionError();

}

}

switch (indexedColumn.kind) {

case CLUSTERING:

return CassandraIndexFunctions.CLUSTERING_COLUMN_INDEX_FUNCTIONS;

case REGULAR:

case STATIC:

return CassandraIndexFunctions.REGULAR_COLUMN_INDEX_FUNCTIONS;

case PARTITION_KEY:

return CassandraIndexFunctions.PARTITION_KEY_INDEX_FUNCTIONS;

}

throw new AssertionError();

}

Location: CassandraIndex.java

Content: 

public ColumnFamilyStore getIndexCfs(){

  return indexCfs;

}

Location: CassandraIndex.java

Content: 

public ClusteringComparator getIndexComparator(){

  return indexCfs.metadata().comparator;

}

Location: CassandraIndex.java

Content: 

public ColumnMetadata getIndexedColumn(){

  return indexedColumn;

}

Location: CassandraIndex.java

Content: 

private ByteBuffer getIndexedValue(ByteBuffer rowKey,Clustering<?> clustering,Cell<?> cell){

  return getIndexedValue(rowKey,clustering,cell == null ? null : cell.path(),cell == null ? null : cell.buffer());

}

Location: CassandraIndex.java

Content: 

private DecoratedKey getIndexKeyFor(ByteBuffer value){

  return indexCfs.decorateKey(value);

}

Location: CassandraIndex.java

Content: 

private static String getSSTableNames(Collection<SSTableReader> sstables){

  return StreamSupport.stream(sstables.spliterator(),false).map(SSTableReader::toString).collect(Collectors.joining(", "));

}

Location: CassandraIndex.java

Content: 

private Optional<RowFilter.Expression> getTargetExpression(List<RowFilter.Expression> expressions){

  return expressions.stream().filter(this::supportsExpression).findFirst();

}

Location: CassandraIndex.java

Content: 

/** 

 * Construct the TableMetadata for an index table, the clustering columns in the index table vary dependent on the kind of the indexed value.

 * @param baseCfsMetadata

 * @param indexMetadata

 * @return

 */

public static TableMetadata indexCfsMetadata(TableMetadata baseCfsMetadata,IndexMetadata indexMetadata){

  Pair<ColumnMetadata,IndexTarget.Type> target=TargetParser.parse(baseCfsMetadata,indexMetadata);

  CassandraIndexFunctions utils=getFunctions(indexMetadata,target);

  ColumnMetadata indexedColumn=target.left;

  AbstractType<?> indexedValueType=utils.getIndexedValueType(indexedColumn);

  TableMetadata.Builder builder=TableMetadata.builder(baseCfsMetadata.keyspace,baseCfsMetadata.indexTableName(indexMetadata),baseCfsMetadata.id).kind(TableMetadata.Kind.INDEX).partitioner(new LocalPartitioner(indexedValueType)).addPartitionKeyColumn(indexedColumn.name,indexedColumn.type).addClusteringColumn("partition_key",baseCfsMetadata.partitioner.partitionOrdering());

  builder=utils.addIndexClusteringColumns(builder,baseCfsMetadata,indexedColumn);

  return builder.build().updateIndexTableMetadata(baseCfsMetadata.params);

}

Location: CassandraIndex.java

Content: 

/** 

 * Called when adding a new entry to the index

 */

private void insert(ByteBuffer rowKey,Clustering<?> clustering,Cell<?> cell,LivenessInfo info,WriteContext ctx){

  DecoratedKey valueKey=getIndexKeyFor(getIndexedValue(rowKey,clustering,cell));

  Row row=BTreeRow.noCellLiveRow(buildIndexClustering(rowKey,clustering,cell),info);

  PartitionUpdate upd=partitionUpdate(valueKey,row);

  indexCfs.getWriteHandler().write(upd,ctx,UpdateTransaction.NO_OP);

  logger.trace("Inserted entry into index for value {}",valueKey);

}

Location: CassandraIndex.java

Content: 

private boolean isBuilt(){

  return SystemKeyspace.isIndexBuilt(baseCfs.keyspace.getName(),metadata.name);

}

Location: CassandraIndex.java

Content: 

private boolean isPrimaryKeyIndex(){

  return indexedColumn.isPrimaryKeyColumn();

}

Location: CassandraIndex.java

Content: 

/** 

 * Factory method for new CassandraIndex instances

 * @param baseCfs

 * @param indexMetadata

 * @return

 */

public static CassandraIndex newIndex(ColumnFamilyStore baseCfs,IndexMetadata indexMetadata){

  return getFunctions(indexMetadata,TargetParser.parse(baseCfs.metadata(),indexMetadata)).newIndexInstance(baseCfs,indexMetadata);

}

Location: CassandraIndex.java

Content: 

private PartitionUpdate partitionUpdate(DecoratedKey valueKey,Row row){

  return PartitionUpdate.singleRowUpdate(indexCfs.metadata(),valueKey,row);

}

Location: CassandraIndex.java

Content: 

private void setMetadata(IndexMetadata indexDef){

  metadata=indexDef;

  Pair<ColumnMetadata,IndexTarget.Type> target=TargetParser.parse(baseCfs.metadata(),indexDef);

  functions=getFunctions(indexDef,target);

  TableMetadataRef tableRef=TableMetadataRef.forOfflineTools(indexCfsMetadata(baseCfs.metadata(),indexDef));

  indexCfs=ColumnFamilyStore.createColumnFamilyStore(baseCfs.keyspace,tableRef.name,tableRef,baseCfs.getTracker().loadsstables);

  indexedColumn=target.left;

}

Location: CassandraIndex.java

Content: 

private boolean supportsExpression(RowFilter.Expression expression){

  return supportsExpression(expression.column(),expression.operator());

}

Location: CassandraIndex.java

Content: 

private void validateClusterings(PartitionUpdate update) throws InvalidRequestException {

  assert indexedColumn.isClusteringColumn();

  for (  Row row : update)   validateIndexedValue(getIndexedValue(null,row.clustering(),null));

}

Location: CassandraIndex.java

Content: 

private void validateIndexedValue(ByteBuffer value){

  if (value != null && value.remaining() >= FBUtilities.MAX_UNSIGNED_SHORT)   throw new InvalidRequestException(String.format("Cannot index value of size %d for index %s on %s(%s) (maximum allowed size=%d)",value.remaining(),metadata.name,baseCfs.metadata,indexedColumn.name.toString(),FBUtilities.MAX_UNSIGNED_SHORT));

}

Location: CassandraIndex.java

Content: 

private void validatePartitionKey(DecoratedKey partitionKey) throws InvalidRequestException {

  assert indexedColumn.isPartitionKey();

  validateIndexedValue(getIndexedValue(partitionKey.getKey(),null,null));

}

Location: CassandraIndex.java

Content: 

private void validateRows(Iterable<Row> rows){

  assert !indexedColumn.isPrimaryKeyColumn();

  for (  Row row : rows) {

    if (indexedColumn.isComplex()) {

      ComplexColumnData data=row.getComplexColumnData(indexedColumn);

      if (data != null) {

        for (        Cell<?> cell : data) {

          validateIndexedValue(getIndexedValue(null,null,cell.path(),cell.buffer()));

        }

      }

    }

 else {

      validateIndexedValue(getIndexedValue(null,null,row.getCell(indexedColumn)));

    }

  }

}

Location: CassandraIndex.java

Content: 

@Override public void validate(ReadCommand command) throws InvalidRequestException {

  Optional<RowFilter.Expression> target=getTargetExpression(command.rowFilter().getExpressions());

  if (target.isPresent()) {

    ByteBuffer indexValue=target.get().getIndexValue();

    checkFalse(indexValue.remaining() > FBUtilities.MAX_UNSIGNED_SHORT,"Index expression values may not be larger than 64K");

  }

}

