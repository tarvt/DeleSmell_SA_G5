Location: HintsStore.java

Content: 

InetAddressAndPort address(){

  return StorageService.instance.getEndpointForHostId(hostId);

}

Location: HintsStore.java

Content: 

void cleanUp(HintsDescriptor descriptor){

  dispatchPositions.remove(descriptor);

}

Location: HintsStore.java

Content: 

void closeWriter(){

  if (hintsWriter != null) {

    hintsWriter.close();

    offerLast(hintsWriter.descriptor());

    hintsWriter=null;

    SyncUtil.trySyncDir(hintsDirectory);

  }

}

Location: HintsStore.java

Content: 

static HintsStore create(UUID hostId,File hintsDirectory,ImmutableMap<String,Object> writerParams,List<HintsDescriptor> descriptors){

  descriptors.sort((d1,d2) -> Long.compare(d1.timestamp,d2.timestamp));

  return new HintsStore(hostId,hintsDirectory,writerParams,descriptors);

}

Location: HintsStore.java

Content: 

void delete(HintsDescriptor descriptor){

  File hintsFile=new File(hintsDirectory,descriptor.fileName());

  if (hintsFile.delete())   logger.info("Deleted hint file {}",descriptor.fileName());

 else   logger.error("Failed to delete hint file {}",descriptor.fileName());

  new File(hintsDirectory,descriptor.checksumFileName()).delete();

}

Location: HintsStore.java

Content: 

void fsyncWriter(){

  if (hintsWriter != null)   hintsWriter.fsync();

}

Location: HintsStore.java

Content: 

InputPosition getDispatchOffset(HintsDescriptor descriptor){

  return dispatchPositions.get(descriptor);

}

Location: HintsStore.java

Content: 

@VisibleForTesting int getDispatchQueueSize(){

  return dispatchDequeue.size();

}

Location: HintsStore.java

Content: 

HintsWriter getOrOpenWriter(){

  if (hintsWriter == null)   hintsWriter=openWriter();

  return hintsWriter;

}

Location: HintsStore.java

Content: 

HintsWriter getWriter(){

  return hintsWriter;

}

Location: HintsStore.java

Content: 

private HintsStore(UUID hostId,File hintsDirectory,ImmutableMap<String,Object> writerParams,List<HintsDescriptor> descriptors){

  this.hostId=hostId;

  this.hintsDirectory=hintsDirectory;

  this.writerParams=writerParams;

  dispatchPositions=new ConcurrentHashMap<>();

  dispatchDequeue=new ConcurrentLinkedDeque<>(descriptors);

  corruptedFiles=new ConcurrentLinkedQueue<>();

  lastUsedTimestamp=descriptors.stream().mapToLong(d -> d.timestamp).max().orElse(0L);

}

Location: HintsStore.java

Content: 

boolean isWriting(){

  return hintsWriter != null;

}

Location: HintsStore.java

Content: 

void markCorrupted(HintsDescriptor descriptor){

  corruptedFiles.add(descriptor);

}

Location: HintsStore.java

Content: 

void markDispatchOffset(HintsDescriptor descriptor,InputPosition inputPosition){

  dispatchPositions.put(descriptor,inputPosition);

}

Location: HintsStore.java

Content: 

void offerFirst(HintsDescriptor descriptor){

  dispatchDequeue.offerFirst(descriptor);

}

Location: HintsStore.java

Content: 

void offerLast(HintsDescriptor descriptor){

  dispatchDequeue.offerLast(descriptor);

}

Location: HintsStore.java

Content: 

private HintsWriter openWriter(){

  lastUsedTimestamp=Math.max(System.currentTimeMillis(),lastUsedTimestamp + 1);

  HintsDescriptor descriptor=new HintsDescriptor(hostId,lastUsedTimestamp,writerParams);

  try {

    return HintsWriter.create(hintsDirectory,descriptor);

  }

 catch (  IOException e) {

    throw new FSWriteError(e,descriptor.fileName());

  }

}

