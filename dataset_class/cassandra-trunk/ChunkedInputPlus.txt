Location: ChunkedInputPlus.java

Content: 

private ChunkedInputPlus(PeekingIterator<ShareableBytes> iter){

  super(iter.peek().get());

  this.iter=iter;

}

Location: ChunkedInputPlus.java

Content: 

/** 

 * Creates a  {@link ChunkedInputPlus} from the provided {@link ShareableBytes} buffers.The provided iterable <em>must</em> contain at least one buffer.

 */

static ChunkedInputPlus of(Iterable<ShareableBytes> buffers){

  PeekingIterator<ShareableBytes> iter=Iterators.peekingIterator(buffers.iterator());

  if (!iter.hasNext())   throw new IllegalArgumentException();

  return new ChunkedInputPlus(iter);

}

Location: ChunkedInputPlus.java

Content: 

/** 

 * Returns the number of unconsumed bytes. Will release any outstanding buffers and consume the underlying iterator. Should only be used for sanity checking, once the input is no longer needed, as it will implicitly close the input.

 */

int remainder(){

  buffer=null;

  int bytes=0;

  while (iter.hasNext()) {

    ShareableBytes chunk=iter.peek();

    bytes+=chunk.remaining();

    chunk.release();

    iter.next();

  }

  return bytes;

}

