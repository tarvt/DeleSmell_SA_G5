Location: OnDiskBlock.java

Content: 

protected abstract T cast(MappedBuffer data);

Location: OnDiskBlock.java

Content: 

public TokenTree getBlockIndex(){

  return combinedIndex;

}

Location: OnDiskBlock.java

Content: 

protected long getTermPosition(int idx){

  return getTermPosition(blockIndex,idx,blockIndexSize);

}

Location: OnDiskBlock.java

Content: 

static long getTermPosition(MappedBuffer data,int idx,int indexSize){

  idx<<=1;

  assert idx < indexSize;

  return data.position() + indexSize + data.getShort(data.position() + idx);

}

Location: OnDiskBlock.java

Content: 

@SuppressWarnings("resource") protected T getTerm(int index){

  MappedBuffer dup=blockIndex.duplicate();

  long startsAt=getTermPosition(index);

  if (termCount() - 1 == index)   dup.position(startsAt);

 else   dup.position(startsAt).limit(getTermPosition(index + 1));

  return cast(dup);

}

Location: OnDiskBlock.java

Content: 

public int maxOffset(OnDiskIndex.IteratorOrder order){

  return minOffset(order) == 0 ? termCount() - 1 : 0;

}

Location: OnDiskBlock.java

Content: 

public int minOffset(OnDiskIndex.IteratorOrder order){

  return order == OnDiskIndex.IteratorOrder.DESC ? 0 : termCount() - 1;

}

Location: OnDiskBlock.java

Content: 

public OnDiskBlock(Descriptor descriptor,MappedBuffer block,BlockType blockType){

  blockIndex=block;

  if (blockType == BlockType.POINTER) {

    hasCombinedIndex=false;

    combinedIndex=null;

    blockIndexSize=block.getInt() << 1;

    return;

  }

  long blockOffset=block.position();

  int combinedIndexOffset=block.getInt(blockOffset + OnDiskIndexBuilder.BLOCK_SIZE);

  hasCombinedIndex=(combinedIndexOffset >= 0);

  long blockIndexOffset=blockOffset + OnDiskIndexBuilder.BLOCK_SIZE + 4+ combinedIndexOffset;

  combinedIndex=hasCombinedIndex ? new TokenTree(descriptor,blockIndex.duplicate().position(blockIndexOffset)) : null;

  blockIndexSize=block.getInt() * 2;

}

Location: OnDiskBlock.java

Content: 

public SearchResult<T> search(AbstractType<?> comparator,ByteBuffer query){

  int cmp=-1, start=0, end=termCount() - 1, middle=0;

  T element=null;

  while (start <= end) {

    middle=start + ((end - start) >> 1);

    element=getTerm(middle);

    cmp=element.compareTo(comparator,query);

    if (cmp == 0)     return new SearchResult<>(element,cmp,middle);

 else     if (cmp < 0)     start=middle + 1;

 else     end=middle - 1;

  }

  return new SearchResult<>(element,cmp,middle);

}

Location: OnDiskBlock.java

Content: 

protected int termCount(){

  return blockIndexSize >> 1;

}

