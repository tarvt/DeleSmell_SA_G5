Location: BootstrapDiagnostics.java

Content: 

private BootstrapDiagnostics(){

}

Location: BootstrapDiagnostics.java

Content: 

private static boolean isEnabled(BootstrapEventType type){

  return service.isEnabled(BootstrapEvent.class,type);

}

Location: BootstrapDiagnostics.java

Content: 

static void tokensAllocated(InetAddressAndPort address,TokenMetadata metadata,int rf,int numTokens,Collection<Token> tokens){

  if (isEnabled(BootstrapEventType.TOKENS_ALLOCATED))   service.publish(new BootstrapEvent(BootstrapEventType.TOKENS_ALLOCATED,address,metadata.cloneOnlyTokenMap(),null,rf,numTokens,ImmutableList.copyOf(tokens)));

}

Location: BootstrapDiagnostics.java

Content: 

static void tokensAllocated(InetAddressAndPort address,TokenMetadata metadata,String allocationKeyspace,int numTokens,Collection<Token> tokens){

  if (isEnabled(BootstrapEventType.TOKENS_ALLOCATED))   service.publish(new BootstrapEvent(BootstrapEventType.TOKENS_ALLOCATED,address,metadata.cloneOnlyTokenMap(),allocationKeyspace,null,numTokens,ImmutableList.copyOf(tokens)));

}

Location: BootstrapDiagnostics.java

Content: 

static void useRandomTokens(InetAddressAndPort address,TokenMetadata metadata,int numTokens,Collection<Token> tokens){

  if (isEnabled(BootstrapEventType.BOOTSTRAP_USING_RANDOM_TOKENS))   service.publish(new BootstrapEvent(BootstrapEventType.BOOTSTRAP_USING_RANDOM_TOKENS,address,metadata.cloneOnlyTokenMap(),null,null,numTokens,ImmutableList.copyOf(tokens)));

}

Location: BootstrapDiagnostics.java

Content: 

static void useSpecifiedTokens(InetAddressAndPort address,String allocationKeyspace,Collection<Token> initialTokens,int numTokens){

  if (isEnabled(BootstrapEventType.BOOTSTRAP_USING_SPECIFIED_TOKENS))   service.publish(new BootstrapEvent(BootstrapEventType.BOOTSTRAP_USING_SPECIFIED_TOKENS,address,null,allocationKeyspace,null,numTokens,ImmutableList.copyOf(initialTokens)));

}

