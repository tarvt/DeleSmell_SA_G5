Location: CommitLog.java

Content: 

/** 

 * Add a Mutation to the commit log. If CDC is enabled, this can fail.

 * @param mutation the Mutation to add to the log

 * @throws CDCWriteException

 */

public CommitLogPosition add(Mutation mutation) throws CDCWriteException {

  assert mutation != null;

  mutation.validateSize(MessagingService.current_version,ENTRY_OVERHEAD_SIZE);

  try (DataOutputBuffer dob=DataOutputBuffer.scratchBuffer.get()){

    Mutation.serializer.serialize(mutation,dob,MessagingService.current_version);

    int size=dob.getLength();

    int totalSize=size + ENTRY_OVERHEAD_SIZE;

    Allocation alloc=segmentManager.allocate(mutation,totalSize);

    CRC32 checksum=new CRC32();

    final ByteBuffer buffer=alloc.getBuffer();

    try (BufferedDataOutputStreamPlus dos=new DataOutputBufferFixed(buffer)){

      dos.writeInt(size);

      updateChecksumInt(checksum,size);

      buffer.putInt((int)checksum.getValue());

      dos.write(dob.getData(),0,size);

      updateChecksum(checksum,buffer,buffer.position() - size,size);

      buffer.putInt((int)checksum.getValue());

    }

 catch (    IOException e) {

      throw new FSWriteError(e,alloc.getSegment().getPath());

    }

 finally {

      alloc.markWritten();

    }

    executor.finishWriteFor(alloc);

    return alloc.getCommitLogPosition();

  }

 catch (  IOException e) {

    throw new FSWriteError(e,segmentManager.allocatingFrom().getPath());

  }

}

Location: CommitLog.java

Content: 

@VisibleForTesting CommitLog(CommitLogArchiver archiver){

  this(archiver,DatabaseDescriptor.getCommitLogSegmentMgrProvider());

}

Location: CommitLog.java

Content: 

@VisibleForTesting CommitLog(CommitLogArchiver archiver,Function<CommitLog,AbstractCommitLogSegmentManager> segmentManagerProvider){

  this.configuration=new Configuration(DatabaseDescriptor.getCommitLogCompression(),DatabaseDescriptor.getEncryptionContext());

  DatabaseDescriptor.createAllDirectories();

  this.archiver=archiver;

  metrics=new CommitLogMetrics();

switch (DatabaseDescriptor.getCommitLogSync()) {

case periodic:

    executor=new PeriodicCommitLogService(this);

  break;

case batch:

executor=new BatchCommitLogService(this);

break;

case group:

executor=new GroupCommitLogService(this);

break;

default :

throw new IllegalArgumentException("Unknown commitlog service type: " + DatabaseDescriptor.getCommitLogSync());

}

segmentManager=segmentManagerProvider.apply(this);

metrics.attach(executor,segmentManager);

}

Location: CommitLog.java

Content: 

private static CommitLog construct(){

  CommitLog log=new CommitLog(CommitLogArchiver.construct(),DatabaseDescriptor.getCommitLogSegmentMgrProvider());

  MBeanWrapper.instance.registerMBean(log,"org.apache.cassandra.db:type=Commitlog");

  return log;

}

Location: CommitLog.java

Content: 

/** 

 * Modifies the per-CF dirty cursors of any commit log segments for the column family according to the position given. Discards any commit log segments that are no longer used.

 * @param id         the table that was flushed

 * @param lowerBound the lowest covered replay position of the flush

 * @param lowerBound the highest covered replay position of the flush

 */

public void discardCompletedSegments(final TableId id,final CommitLogPosition lowerBound,final CommitLogPosition upperBound){

  logger.trace("discard completed log segments for {}-{}, table {}",lowerBound,upperBound,id);

  for (Iterator<CommitLogSegment> iter=segmentManager.getActiveSegments().iterator(); iter.hasNext(); ) {

    CommitLogSegment segment=iter.next();

    segment.markClean(id,lowerBound,upperBound);

    if (segment.isUnused()) {

      logger.debug("Commit log segment {} is unused",segment);

      segmentManager.archiveAndDiscard(segment);

    }

 else {

      if (logger.isTraceEnabled())       logger.trace("Not safe to delete{} commit log segment {}; dirty is {}",(iter.hasNext() ? "" : " active"),segment,segment.dirtyString());

    }

    if (segment.contains(upperBound))     break;

  }

}

Location: CommitLog.java

Content: 

/** 

 * Flushes all dirty CFs, waiting for them to free and recycle any segments they were retaining

 */

public void forceRecycleAllSegments(){

  segmentManager.forceRecycleAll(Collections.emptyList());

}

Location: CommitLog.java

Content: 

/** 

 * Flushes all dirty CFs, waiting for them to free and recycle any segments they were retaining

 */

public void forceRecycleAllSegments(Iterable<TableId> droppedTables){

  segmentManager.forceRecycleAll(droppedTables);

}

Location: CommitLog.java

Content: 

@Override public long getActiveContentSize(){

  long size=0;

  for (  CommitLogSegment seg : segmentManager.getActiveSegments())   size+=seg.contentSize();

  return size;

}

Location: CommitLog.java

Content: 

@Override public long getActiveOnDiskSize(){

  return segmentManager.onDiskSize();

}

Location: CommitLog.java

Content: 

@Override public Map<String,Double> getActiveSegmentCompressionRatios(){

  Map<String,Double> segmentRatios=new TreeMap<>();

  for (  CommitLogSegment seg : segmentManager.getActiveSegments())   segmentRatios.put(seg.getName(),1.0 * seg.onDiskSize() / seg.contentSize());

  return segmentRatios;

}

Location: CommitLog.java

Content: 

public List<String> getActiveSegmentNames(){

  Collection<CommitLogSegment> segments=segmentManager.getActiveSegments();

  List<String> segmentNames=new ArrayList<>(segments.size());

  for (  CommitLogSegment seg : segments)   segmentNames.add(seg.getName());

  return segmentNames;

}

Location: CommitLog.java

Content: 

@Override public String getArchiveCommand(){

  return archiver.archiveCommand;

}

Location: CommitLog.java

Content: 

public List<String> getArchivingSegmentNames(){

  return new ArrayList<>(archiver.archivePending.keySet());

}

Location: CommitLog.java

Content: 

@Override public String getRestoreCommand(){

  return archiver.restoreCommand;

}

Location: CommitLog.java

Content: 

@Override public String getRestoreDirectories(){

  return archiver.restoreDirectories;

}

Location: CommitLog.java

Content: 

@Override public long getRestorePointInTime(){

  return archiver.restorePointInTime;

}

Location: CommitLog.java

Content: 

@Override public String getRestorePrecision(){

  return archiver.precision.toString();

}

Location: CommitLog.java

Content: 

@VisibleForTesting public static boolean handleCommitError(String message,Throwable t){

  JVMStabilityInspector.inspectCommitLogThrowable(t);

switch (DatabaseDescriptor.getCommitFailurePolicy()) {

case die:

case stop:

    StorageService.instance.stopTransports();

case stop_commit:

  logger.error(String.format("%s. Commit disk failure policy is %s; terminating thread",message,DatabaseDescriptor.getCommitFailurePolicy()),t);

return false;

case ignore:

logger.error(message,t);

return true;

default :

throw new AssertionError(DatabaseDescriptor.getCommitFailurePolicy());

}

}

Location: CommitLog.java

Content: 

/** 

 * Perform recovery on a list of commit log files.

 * @param clogs   the list of commit log files to replay

 * @return the number of mutations replayed

 */

public int recoverFiles(File... clogs) throws IOException {

  CommitLogReplayer replayer=CommitLogReplayer.construct(this);

  replayer.replayFiles(clogs);

  return replayer.blockForWrites();

}

Location: CommitLog.java

Content: 

public void recoverPath(String path) throws IOException {

  CommitLogReplayer replayer=CommitLogReplayer.construct(this);

  replayer.replayPath(new File(path),false);

  replayer.blockForWrites();

}

Location: CommitLog.java

Content: 

/** 

 * Perform recovery on commit logs located in the directory specified by the config file.

 * @return the number of mutations replayed

 * @throws IOException

 */

public int recoverSegmentsOnDisk() throws IOException {

  FilenameFilter unmanagedFilesFilter=(dir,name) -> CommitLogDescriptor.isValid(name) && CommitLogSegment.shouldReplay(name);

  for (  File file : new File(segmentManager.storageDirectory).listFiles(unmanagedFilesFilter)) {

    archiver.maybeArchive(file.getPath(),file.getName());

    archiver.maybeWaitForArchiving(file.getName());

  }

  assert archiver.archivePending.isEmpty() : "Not all commit log archive tasks were completed before restore";

  archiver.maybeRestoreArchive();

  File[] files=new File(segmentManager.storageDirectory).listFiles(unmanagedFilesFilter);

  int replayed=0;

  if (files.length == 0) {

    logger.info("No commitlog files found; skipping replay");

  }

 else {

    Arrays.sort(files,new CommitLogSegmentFileComparator());

    logger.info("Replaying {}",StringUtils.join(files,", "));

    replayed=recoverFiles(files);

    logger.info("Log replay complete, {} replayed mutations",replayed);

    for (    File f : files)     segmentManager.handleReplayedSegment(f);

  }

  return replayed;

}

Location: CommitLog.java

Content: 

/** 

 * Perform recovery on a single commit log. Kept w/sub-optimal name due to coupling w/MBean / JMX

 */

public void recover(String path) throws IOException {

  recoverPath(path);

}

Location: CommitLog.java

Content: 

/** 

 * FOR TESTING PURPOSES.

 */

@VisibleForTesting synchronized public void resetConfiguration(){

  configuration=new Configuration(DatabaseDescriptor.getCommitLogCompression(),DatabaseDescriptor.getEncryptionContext());

}

Location: CommitLog.java

Content: 

/** 

 * FOR TESTING PURPOSES

 * @return the number of files recovered

 */

@VisibleForTesting synchronized public int resetUnsafe(boolean deleteSegments) throws IOException {

  stopUnsafe(deleteSegments);

  resetConfiguration();

  return restartUnsafe();

}

Location: CommitLog.java

Content: 

/** 

 * FOR TESTING PURPOSES

 */

@VisibleForTesting synchronized public int restartUnsafe() throws IOException {

  started=false;

  return start().recoverSegmentsOnDisk();

}

Location: CommitLog.java

Content: 

/** 

 * FOR TESTING PURPOSES

 */

@VisibleForTesting synchronized public void stopUnsafe(boolean deleteSegments){

  if (!started)   return;

  started=false;

  executor.shutdown();

  try {

    executor.awaitTermination();

  }

 catch (  InterruptedException e) {

    throw new RuntimeException(e);

  }

  segmentManager.stopUnsafe(deleteSegments);

  CommitLogSegment.resetReplayLimit();

  if (DatabaseDescriptor.isCDCEnabled() && deleteSegments)   for (  File f : new File(DatabaseDescriptor.getCDCLogLocation()).listFiles())   FileUtils.deleteWithConfirm(f);

}

Location: CommitLog.java

Content: 

/** 

 * Forces a disk flush on the commit log files that need it.  Blocking.

 */

public void sync(boolean flush) throws IOException {

  segmentManager.sync(flush);

}

