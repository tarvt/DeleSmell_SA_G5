Location: PropertyFileSnitch.java

Content: 

/** 

 * Get the raw information about an end point

 * @param endpoint endpoint to process

 * @return a array of string with the first index being the data center and the second being the rack

 */

public static String[] getEndpointInfo(InetAddressAndPort endpoint){

  String[] rawEndpointInfo=getRawEndpointInfo(endpoint);

  if (rawEndpointInfo == null)   throw new RuntimeException("Unknown host " + endpoint + " with no default configured");

  return rawEndpointInfo;

}

Location: PropertyFileSnitch.java

Content: 

private static String[] getRawEndpointInfo(InetAddressAndPort endpoint){

  String[] value=endpointMap.get(endpoint);

  if (value == null) {

    logger.trace("Could not find end point information for {}, will use default",endpoint);

    return defaultDCRack;

  }

  return value;

}

Location: PropertyFileSnitch.java

Content: 

/** 

 * We cannot update rack or data-center for a live node, see CASSANDRA-10243.

 * @param reloadedMap - the new map of hosts to dc:rack properties

 * @param reloadedDefaultDCRack - the default dc:rack or null if no default

 * @return true if we can continue updating (no live host had dc or rack updated)

 */

private static boolean livenessCheck(HashMap<InetAddressAndPort,String[]> reloadedMap,String[] reloadedDefaultDCRack){

  Set<InetAddressAndPort> hosts=Arrays.equals(defaultDCRack,reloadedDefaultDCRack) ? Sets.intersection(StorageService.instance.getLiveRingMembers(),Sets.union(endpointMap.keySet(),reloadedMap.keySet())) : StorageService.instance.getLiveRingMembers();

  for (  InetAddressAndPort host : hosts) {

    String[] origValue=endpointMap.containsKey(host) ? endpointMap.get(host) : defaultDCRack;

    String[] updateValue=reloadedMap.containsKey(host) ? reloadedMap.get(host) : reloadedDefaultDCRack;

    if (!Arrays.equals(origValue,updateValue)) {

      logger.error("Cannot update data center or rack from {} to {} for live host {}, property file NOT RELOADED",origValue,updateValue,host);

      return false;

    }

  }

  return true;

}

Location: PropertyFileSnitch.java

Content: 

public PropertyFileSnitch() throws ConfigurationException {

  this(DEFAULT_REFRESH_PERIOD_IN_SECONDS);

}

Location: PropertyFileSnitch.java

Content: 

public PropertyFileSnitch(int refreshPeriodInSeconds) throws ConfigurationException {

  reloadConfiguration(false);

  try {

    FBUtilities.resourceToFile(SNITCH_PROPERTIES_FILENAME);

    Runnable runnable=new WrappedRunnable(){

      protected void runMayThrow() throws ConfigurationException {

        reloadConfiguration(true);

      }

    }

;

    ResourceWatcher.watch(SNITCH_PROPERTIES_FILENAME,runnable,refreshPeriodInSeconds * 1000);

  }

 catch (  ConfigurationException ex) {

    logger.error("{} found, but does not look like a plain file. Will not watch it for changes",SNITCH_PROPERTIES_FILENAME);

  }

}

Location: PropertyFileSnitch.java

Content: 

public void reloadConfiguration(boolean isUpdate) throws ConfigurationException {

  HashMap<InetAddressAndPort,String[]> reloadedMap=new HashMap<>();

  String[] reloadedDefaultDCRack=null;

  Properties properties=new Properties();

  try (InputStream stream=getClass().getClassLoader().getResourceAsStream(SNITCH_PROPERTIES_FILENAME)){

    properties.load(stream);

  }

 catch (  Exception e) {

    throw new ConfigurationException("Unable to read " + SNITCH_PROPERTIES_FILENAME,e);

  }

  for (  Map.Entry<Object,Object> entry : properties.entrySet()) {

    String key=(String)entry.getKey();

    String value=(String)entry.getValue();

    if ("default".equals(key)) {

      String[] newDefault=value.split(":");

      if (newDefault.length < 2)       reloadedDefaultDCRack=new String[]{"default","default"};

 else       reloadedDefaultDCRack=new String[]{newDefault[0].trim(),newDefault[1].trim()};

    }

 else {

      InetAddressAndPort host;

      String hostString=StringUtils.remove(key,'/');

      try {

        host=InetAddressAndPort.getByName(hostString);

      }

 catch (      UnknownHostException e) {

        throw new ConfigurationException("Unknown host " + hostString,e);

      }

      String[] token=value.split(":");

      if (token.length < 2)       token=new String[]{"default","default"};

 else       token=new String[]{token[0].trim(),token[1].trim()};

      reloadedMap.put(host,token);

    }

  }

  InetAddressAndPort broadcastAddress=FBUtilities.getBroadcastAddressAndPort();

  String[] localInfo=reloadedMap.get(broadcastAddress);

  if (reloadedDefaultDCRack == null && localInfo == null)   throw new ConfigurationException(String.format("Snitch definitions at %s do not define a location for " + "this node's broadcast address %s, nor does it provides a default",SNITCH_PROPERTIES_FILENAME,broadcastAddress));

  InetAddressAndPort localAddress=FBUtilities.getLocalAddressAndPort();

  if (!localAddress.equals(broadcastAddress) && !reloadedMap.containsKey(localAddress))   reloadedMap.put(localAddress,localInfo);

  if (isUpdate && !livenessCheck(reloadedMap,reloadedDefaultDCRack))   return;

  if (logger.isTraceEnabled()) {

    StringBuilder sb=new StringBuilder();

    for (    Map.Entry<InetAddressAndPort,String[]> entry : reloadedMap.entrySet())     sb.append(entry.getKey()).append(':').append(Arrays.toString(entry.getValue())).append(", ");

    logger.trace("Loaded network topology from property file: {}",StringUtils.removeEnd(sb.toString(),", "));

  }

  defaultDCRack=reloadedDefaultDCRack;

  endpointMap=reloadedMap;

  if (StorageService.instance != null) {

    if (isUpdate)     StorageService.instance.updateTopology();

 else     StorageService.instance.getTokenMetadata().invalidateCachedRings();

  }

  if (gossipStarted)   StorageService.instance.gossipSnitchInfo();

}

