Location: AuthenticatedUser.java

Content: 

public AuthenticatedUser(String name){

  this.name=name;

  this.role=RoleResource.role(name);

}

Location: AuthenticatedUser.java

Content: 

/** 

 * Check whether this user has login privileges. LOGIN is not inherited from granted roles, so must be directly granted to the primary role for this user

 * @return true if the user is permitted to login, false otherwise.

 */

public boolean canLogin(){

  return Roles.canLogin(getPrimaryRole());

}

Location: AuthenticatedUser.java

Content: 

public Set<Permission> getPermissions(IResource resource){

  return permissionsCache.getPermissions(this,resource);

}

Location: AuthenticatedUser.java

Content: 

public RoleResource getPrimaryRole(){

  return role;

}

Location: AuthenticatedUser.java

Content: 

/** 

 * Get the detailed info on roles granted to the user via IRoleManager

 * @return a set of Role objects detailing the roles granted to the user

 */

public Set<Role> getRoleDetails(){

  return Roles.getRoleDetails(role);

}

Location: AuthenticatedUser.java

Content: 

/** 

 * Get the roles that have been granted to the user via the IRoleManager

 * @return a set of identifiers for the roles that have been granted to the user

 */

public Set<RoleResource> getRoles(){

  return Roles.getRoles(role);

}

Location: AuthenticatedUser.java

Content: 

/** 

 * Verify that there is not DC level restriction on this user accessing this node. Further extends the login privilege check by verifying that the primary role for this user is permitted to perform operations in the local (to this node) datacenter. Like LOGIN, this is not inherited from granted roles.

 * @return true if the user is permitted to access nodes in this node's datacenter, false otherwise

 */

public boolean hasLocalAccess(){

  return networkAuthCache.get(this.getPrimaryRole()).canAccess(Datacenters.thisDatacenter());

}

Location: AuthenticatedUser.java

Content: 

/** 

 * If IAuthenticator doesn't require authentication, this method may return true.

 */

public boolean isAnonymous(){

  return this == ANONYMOUS_USER;

}

Location: AuthenticatedUser.java

Content: 

/** 

 * Checks the user's superuser status. Only a superuser is allowed to perform CREATE USER and DROP USER queries. Im most cased, though not necessarily, a superuser will have Permission.ALL on every resource (depends on IAuthorizer implementation).

 */

public boolean isSuper(){

  return !isAnonymous() && Roles.hasSuperuserStatus(role);

}

Location: AuthenticatedUser.java

Content: 

/** 

 * Some internal operations are performed on behalf of Cassandra itself, in those cases the system user should be used where an identity is required see CreateRoleStatement#execute() and overrides of AlterSchemaStatement#createdResources()

 */

public boolean isSystem(){

  return this == SYSTEM_USER;

}

