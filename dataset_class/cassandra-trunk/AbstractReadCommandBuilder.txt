Location: AbstractReadCommandBuilder.java

Content: 

AbstractReadCommandBuilder(ColumnFamilyStore cfs){

  this.cfs=cfs;

  this.nowInSeconds=FBUtilities.nowInSeconds();

}

Location: AbstractReadCommandBuilder.java

Content: 

private ByteBuffer bb(Object value,AbstractType<?> type){

  return value instanceof ByteBuffer ? (ByteBuffer)value : ((AbstractType)type).decompose(value);

}

Location: AbstractReadCommandBuilder.java

Content: 

public AbstractReadCommandBuilder columns(String... columns){

  if (this.columns == null)   this.columns=Sets.newHashSetWithExpectedSize(columns.length);

  for (  String column : columns)   this.columns.add(ColumnIdentifier.getInterned(column,true));

  return this;

}

Location: AbstractReadCommandBuilder.java

Content: 

public AbstractReadCommandBuilder filterOn(String column,Operator op,Object value){

  ColumnMetadata def=cfs.metadata().getColumn(ColumnIdentifier.getInterned(column,true));

  assert def != null;

  AbstractType<?> type=def.type;

  if (op == Operator.CONTAINS)   type=forValues(type);

 else   if (op == Operator.CONTAINS_KEY)   type=forKeys(type);

  this.filter.add(def,op,bb(value,type));

  return this;

}

Location: AbstractReadCommandBuilder.java

Content: 

private AbstractType<?> forKeys(AbstractType<?> collectionType){

  assert collectionType instanceof CollectionType;

  CollectionType ct=(CollectionType)collectionType;

switch (ct.kind) {

case LIST:

case MAP:

    return ct.nameComparator();

}

throw new AssertionError();

}

Location: AbstractReadCommandBuilder.java

Content: 

private AbstractType<?> forValues(AbstractType<?> collectionType){

  assert collectionType instanceof CollectionType;

  CollectionType ct=(CollectionType)collectionType;

switch (ct.kind) {

case LIST:

case MAP:

    return ct.valueComparator();

case SET:

  return ct.nameComparator();

}

throw new AssertionError();

}

Location: AbstractReadCommandBuilder.java

Content: 

public AbstractReadCommandBuilder fromExcl(Object... values){

  assert lowerClusteringBound == null && clusterings == null;

  this.lowerClusteringBound=ClusteringBound.create(cfs.metadata().comparator,true,false,values);

  return this;

}

Location: AbstractReadCommandBuilder.java

Content: 

public AbstractReadCommandBuilder fromIncl(Object... values){

  assert lowerClusteringBound == null && clusterings == null;

  this.lowerClusteringBound=ClusteringBound.create(cfs.metadata().comparator,true,true,values);

  return this;

}

Location: AbstractReadCommandBuilder.java

Content: 

public AbstractReadCommandBuilder includeRow(Object... values){

  assert lowerClusteringBound == null && upperClusteringBound == null;

  if (this.clusterings == null)   this.clusterings=new TreeSet<>(cfs.metadata().comparator);

  this.clusterings.add(cfs.metadata().comparator.make(values));

  return this;

}

Location: AbstractReadCommandBuilder.java

Content: 

protected ColumnFilter makeColumnFilter(){

  if (columns == null || columns.isEmpty())   return ColumnFilter.all(cfs.metadata());

  ColumnFilter.Builder filter=ColumnFilter.selectionBuilder();

  for (  ColumnIdentifier column : columns)   filter.add(cfs.metadata().getColumn(column));

  return filter.build();

}

Location: AbstractReadCommandBuilder.java

Content: 

protected ClusteringIndexFilter makeFilter(){

  if (cfs.metadata().isStaticCompactTable())   return new ClusteringIndexNamesFilter(new TreeSet<>(cfs.metadata().comparator),reversed);

  if (clusterings != null) {

    return new ClusteringIndexNamesFilter(clusterings,reversed);

  }

 else {

    Slice slice=Slice.make(lowerClusteringBound == null ? BufferClusteringBound.BOTTOM : lowerClusteringBound,upperClusteringBound == null ? BufferClusteringBound.TOP : upperClusteringBound);

    return new ClusteringIndexSliceFilter(Slices.with(cfs.metadata().comparator,slice),reversed);

  }

}

Location: AbstractReadCommandBuilder.java

Content: 

protected DataLimits makeLimits(){

  DataLimits limits=cqlLimit < 0 ? DataLimits.NONE : DataLimits.cqlLimits(cqlLimit);

  if (pagingLimit >= 0)   limits=limits.forPaging(pagingLimit);

  return limits;

}

Location: AbstractReadCommandBuilder.java

Content: 

public AbstractReadCommandBuilder reverse(){

  this.reversed=true;

  return this;

}

Location: AbstractReadCommandBuilder.java

Content: 

public AbstractReadCommandBuilder toExcl(Object... values){

  assert upperClusteringBound == null && clusterings == null;

  this.upperClusteringBound=ClusteringBound.create(cfs.metadata().comparator,false,false,values);

  return this;

}

Location: AbstractReadCommandBuilder.java

Content: 

public AbstractReadCommandBuilder toIncl(Object... values){

  assert upperClusteringBound == null && clusterings == null;

  this.upperClusteringBound=ClusteringBound.create(cfs.metadata().comparator,false,true,values);

  return this;

}

Location: AbstractReadCommandBuilder.java

Content: 

public AbstractReadCommandBuilder withLimit(int newLimit){

  this.cqlLimit=newLimit;

  return this;

}

Location: AbstractReadCommandBuilder.java

Content: 

public AbstractReadCommandBuilder withNowInSeconds(int nowInSec){

  this.nowInSeconds=nowInSec;

  return this;

}

Location: AbstractReadCommandBuilder.java

Content: 

public AbstractReadCommandBuilder withPagingLimit(int newLimit){

  this.pagingLimit=newLimit;

  return this;

}

