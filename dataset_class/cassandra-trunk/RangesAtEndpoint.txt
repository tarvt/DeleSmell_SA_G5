Location: RangesAtEndpoint.java

Content: 

public static Builder builder(InetAddressAndPort endpoint){

  return new Builder(endpoint);

}

Location: RangesAtEndpoint.java

Content: 

public static Builder builder(InetAddressAndPort endpoint,int capacity){

  return new Builder(endpoint,capacity);

}

Location: RangesAtEndpoint.java

Content: 

/** 

 * @return a map of all Ranges, to their owning Replica instanceThis method is threadsafe, though it is not synchronised

 */

public Map<Range<Token>,Replica> byRange(){

  ReplicaMap<Range<Token>> map=byRange;

  if (map == null)   byRange=map=rangeMap(list);

  return map;

}

Location: RangesAtEndpoint.java

Content: 

public static Collector<Replica,Builder,RangesAtEndpoint> collector(InetAddressAndPort endpoint){

  return collector(ImmutableSet.of(),() -> new Builder(endpoint));

}

Location: RangesAtEndpoint.java

Content: 

/** 

 * @return concatenate two DISJOINT collections together

 */

public static RangesAtEndpoint concat(RangesAtEndpoint replicas,RangesAtEndpoint extraReplicas){

  return AbstractReplicaCollection.concat(replicas,extraReplicas,NONE);

}

Location: RangesAtEndpoint.java

Content: 

public boolean contains(Range<Token> range,boolean isFull){

  Replica replica=byRange().get(range);

  return replica != null && replica.isFull() == isFull;

}

Location: RangesAtEndpoint.java

Content: 

@Override public boolean contains(Replica replica){

  return replica != null && Objects.equals(byRange().get(replica.range()),replica);

}

Location: RangesAtEndpoint.java

Content: 

public static RangesAtEndpoint copyOf(List<Replica> replicas){

  if (replicas.isEmpty())   throw new IllegalArgumentException("Must specify a non-empty collection of replicas");

  return builder(replicas.get(0).endpoint(),replicas.size()).addAll(replicas).build();

}

Location: RangesAtEndpoint.java

Content: 

public static RangesAtEndpoint empty(InetAddressAndPort endpoint){

  return new RangesAtEndpoint(endpoint,EMPTY_LIST,EMPTY_MAP);

}

Location: RangesAtEndpoint.java

Content: 

public InetAddressAndPort endpoint(){

  return endpoint;

}

Location: RangesAtEndpoint.java

Content: 

@Override public Set<InetAddressAndPort> endpoints(){

  return Collections.unmodifiableSet(list.isEmpty() ? Collections.emptySet() : Collections.singleton(endpoint));

}

Location: RangesAtEndpoint.java

Content: 

public static boolean isDummyList(RangesAtEndpoint ranges){

  return all(ranges,range -> range.endpoint().getHostAddress(true).equals("0.0.0.0:0"));

}

Location: RangesAtEndpoint.java

Content: 

@Override public ReplicaCollection.Builder<RangesAtEndpoint> newBuilder(int initialCapacity){

  return new Builder(endpoint,initialCapacity);

}

Location: RangesAtEndpoint.java

Content: 

public static RangesAtEndpoint of(Replica... replicas){

  return copyOf(Arrays.asList(replicas));

}

Location: RangesAtEndpoint.java

Content: 

public RangesAtEndpoint onlyFull(){

  RangesAtEndpoint result=onlyFull;

  if (onlyFull == null)   onlyFull=result=filter(Replica::isFull);

  return result;

}

Location: RangesAtEndpoint.java

Content: 

public RangesAtEndpoint onlyTransient(){

  RangesAtEndpoint result=onlyTransient;

  if (onlyTransient == null)   onlyTransient=result=filter(Replica::isTransient);

  return result;

}

Location: RangesAtEndpoint.java

Content: 

private static ReplicaMap<Range<Token>> rangeMap(ReplicaList list){

  return new ReplicaMap<>(list,Replica::range);

}

Location: RangesAtEndpoint.java

Content: 

/** 

 * @return a set of all unique RangesThis method is threadsafe, though it is not synchronised

 */

public Set<Range<Token>> ranges(){

  return byRange().keySet();

}

Location: RangesAtEndpoint.java

Content: 

private RangesAtEndpoint(InetAddressAndPort endpoint,ReplicaList list,ReplicaMap<Range<Token>> byRange){

  super(list);

  this.endpoint=endpoint;

  this.byRange=byRange;

  assert endpoint != null;

}

Location: RangesAtEndpoint.java

Content: 

@Override protected RangesAtEndpoint snapshot(ReplicaList newList){

  if (newList.isEmpty())   return empty(endpoint);

  ReplicaMap<Range<Token>> byRange=null;

  if (this.byRange != null && list.isSubList(newList))   byRange=this.byRange.forSubList(newList);

  return new RangesAtEndpoint(endpoint,newList,byRange);

}

Location: RangesAtEndpoint.java

Content: 

/** 

 * Use of this method to synthesize Replicas is almost always wrong. In repair it turns out the concerns of transient vs non-transient are handled at a higher level, but eventually repair needs to ask streaming to actually move the data and at that point it doesn't have a great handle on what the replicas are and it doesn't really matter. Streaming expects to be given Replicas with each replica indicating what type of data (transient or not transient) should be sent. So in this one instance we can lie to streaming and pretend all the replicas are full and use a dummy address and it doesn't matter because streaming doesn't rely on the address for anything other than debugging and full is a valid value for transientness because streaming is selecting candidate tables from the repair/unrepaired set already.

 * @param ranges

 * @return

 */

@VisibleForTesting public static RangesAtEndpoint toDummyList(Collection<Range<Token>> ranges){

  InetAddressAndPort dummy;

  try {

    dummy=InetAddressAndPort.getByNameOverrideDefaults("0.0.0.0",0);

  }

 catch (  UnknownHostException e) {

    throw new RuntimeException(e);

  }

  return ranges.stream().map(range -> new Replica(dummy,range,true)).collect(collector(dummy));

}

Location: RangesAtEndpoint.java

Content: 

/** 

 * @return if there are no wrap around ranges contained in this RangesAtEndpoint, return self;otherwise, return a RangesAtEndpoint covering the same logical portions of the ring, but with those ranges unwrapped

 */

public RangesAtEndpoint unwrap(){

  int wrapAroundCount=0;

  for (  Replica replica : this) {

    if (replica.range().isWrapAround())     ++wrapAroundCount;

  }

  assert wrapAroundCount <= 1;

  if (wrapAroundCount == 0)   return snapshot();

  RangesAtEndpoint.Builder builder=builder(endpoint,size() + wrapAroundCount);

  for (  Replica replica : this) {

    if (!replica.range().isWrapAround()) {

      builder.add(replica);

      continue;

    }

    for (    Range<Token> range : replica.range().unwrap())     builder.add(replica.decorateSubrange(range));

  }

  return builder.build();

}

