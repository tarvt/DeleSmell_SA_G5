Location: AbstractCompositeType.java

Content: 

protected AbstractCompositeType(){

  super(ComparisonType.CUSTOM);

}

Location: AbstractCompositeType.java

Content: 

public static String escape(String input){

  if (input.isEmpty())   return input;

  String res=COLON_PAT.matcher(input).replaceAll(ESCAPED_COLON);

  char last=res.charAt(res.length() - 1);

  return last == '\\' || last == '!' ? res + '!' : res;

}

Location: AbstractCompositeType.java

Content: 

static List<String> split(String input){

  if (input.isEmpty())   return Collections.<String>emptyList();

  List<String> res=new ArrayList<String>();

  int prev=0;

  for (int i=0; i < input.length(); i++) {

    if (input.charAt(i) != ':' || (i > 0 && input.charAt(i - 1) == '\\'))     continue;

    res.add(input.substring(prev,i));

    prev=i + 1;

  }

  res.add(input.substring(prev,input.length()));

  return res;

}

Location: AbstractCompositeType.java

Content: 

static String unescape(String input){

  if (input.isEmpty())   return input;

  String res=ESCAPED_COLON_PAT.matcher(input).replaceAll(COLON);

  char last=res.charAt(res.length() - 1);

  return last == '!' ? res.substring(0,res.length() - 1) : res;

}

