Location: OutboundConnection.java

Content: 

/** 

 * Try to acquire the necessary resource permits for a number of pending bytes for this connection. Since the owner limit is shared amongst multiple connections, our semantics cannot be super trivial. Were they per-connection, we could simply perform an atomic increment of the queue size, then allocate any excess we need in the reserve, and on release free everything we see from both. Since we are coordinating two independent atomic variables we have to track every byte we allocate in reserve and ensure it is matched by a corresponding released byte. We also need to be sure we do not permit another releasing thread to release reserve bytes we have not yet - and may never - actually reserve. As such, we have to first check if we would need reserve bytes, then allocate them *before* we increment our queue size.  We only increment the queue size if the reserve bytes are definitely not needed, or we could first obtain them.  If in the process of obtaining any reserve bytes the queue size changes, we have some bytes that are reserved for us, but may be a different number to that we need.  So we must continue to track these. In the happy path, this is still efficient as we simply CAS

 */

private Outcome acquireCapacity(long bytes){

  return acquireCapacity(1,bytes);

}

Location: OutboundConnection.java

Content: 

private Outcome acquireCapacity(long count,long bytes){

  long increment=pendingCountAndBytes(count,bytes);

  long unusedClaimedReserve=0;

  Outcome outcome=null;

  loop:   while (true) {

    long current=pendingCountAndBytes;

    if (isMaxPendingCount(current)) {

      outcome=INSUFFICIENT_ENDPOINT;

      break;

    }

    long next=current + increment;

    if (pendingBytes(next) <= pendingCapacityInBytes) {

      if (pendingCountAndBytesUpdater.compareAndSet(this,current,next)) {

        outcome=SUCCESS;

        break;

      }

      continue;

    }

    State state=this.state;

    if (state.isConnecting() && state.connecting().isFailingToConnect) {

      outcome=INSUFFICIENT_ENDPOINT;

      break;

    }

    long requiredReserve=min(bytes,pendingBytes(next) - pendingCapacityInBytes);

    if (unusedClaimedReserve < requiredReserve) {

      long extraGlobalReserve=requiredReserve - unusedClaimedReserve;

switch (outcome=reserveCapacityInBytes.tryAllocate(extraGlobalReserve)) {

case INSUFFICIENT_ENDPOINT:

case INSUFFICIENT_GLOBAL:

        break loop;

case SUCCESS:

      unusedClaimedReserve+=extraGlobalReserve;

  }

}

if (pendingCountAndBytesUpdater.compareAndSet(this,current,next)) {

  unusedClaimedReserve-=requiredReserve;

  break;

}

}

if (unusedClaimedReserve > 0) reserveCapacityInBytes.release(unusedClaimedReserve);

return outcome;

}

Location: OutboundConnection.java

Content: 

private static Runnable andThen(Runnable a,Runnable b){

  if (a == null || b == null)   return a == null ? b : a;

  return () -> {

    a.run();

    b.run();

  }

;

}

Location: OutboundConnection.java

Content: 

private int canonicalSize(Message<?> message){

  return message.serializedSize(current_version);

}

Location: OutboundConnection.java

Content: 

/** 

 * Permanently close this connection. Immediately prevent any new messages from being enqueued - these will throw ClosedChannelException. The close itself happens asynchronously on the eventLoop, so a Future is returned to help callers wait for its completion. The flushQueue parameter indicates if any outstanding messages should be delivered before closing the connection. - If false, any already flushed or in-progress messages are completed, and the remaining messages are cleared before the connection is promptly torn down. - If true, we attempt delivery of all queued messages.  If necessary, we will continue to open new connections to the remote host until they have been delivered.  Only if we continue to fail to open a connection for an extended period of time will we drop any outstanding messages and close the connection.

 */

public Future<Void> close(boolean flushQueue){

  Promise<Void> closing=AsyncPromise.uncancellable(eventLoop);

  if (!closingUpdater.compareAndSet(this,null,closing))   return this.closing;

  Runnable eventLoopCleanup=() -> {

    Runnable onceNotConnecting=() -> {

      State state=this.state;

      this.state=State.CLOSED;

      try {

        delivery.terminate();

        if (state.isDisconnected()) {

          state.disconnected().maintenance.cancel(true);

          closing.setSuccess(null);

        }

 else {

          assert state.isEstablished();

          state.established().channel.close().addListener(new PromiseNotifier<>(closing));

        }

      }

 catch (      Throwable t) {

        closing.trySuccess(null);

        try {

          if (state.isEstablished())           state.established().channel.close();

        }

 catch (        Throwable t2) {

          t.addSuppressed(t2);

          logger.error("Failed to close connection cleanly:",t);

        }

        throw t;

      }

    }

;

    if (state.isConnecting()) {

      Connecting connecting=state.connecting();

      connecting.cancel();

      connecting.attempt.addListener(future -> onceNotConnecting.run());

    }

 else {

      onceNotConnecting.run();

    }

  }

;

  Runnable clearQueue=() -> {

    CountDownLatch done=new CountDownLatch(1);

    queue.runEventually(withLock -> {

      withLock.consume(this::onClosed);

      done.countDown();

    }

);

    Uninterruptibles.awaitUninterruptibly(done);

  }

;

  if (flushQueue) {

class FinishDelivery implements Runnable {

      public void run(){

        if (!hasPending())         delivery.stopAndRunOnEventLoop(eventLoopCleanup);

 else         delivery.stopAndRun(() -> {

          if (state.isConnecting() && state.connecting().isFailingToConnect)           clearQueue.run();

          run();

        }

);

      }

    }

    delivery.stopAndRun(new FinishDelivery());

  }

 else {

    delivery.stopAndRunOnEventLoop(() -> {

      clearQueue.run();

      eventLoopCleanup.run();

    }

);

  }

  return closing;

}

Location: OutboundConnection.java

Content: 

public long connectionAttempts(){

  return connectionAttempts;

}

Location: OutboundConnection.java

Content: 

/** 

 * Schedule a safe close of the provided channel, if it has not already been closed. This means ensuring that delivery has stopped so that we do not corrupt or interrupt any in progress transmissions. The actual closing of the channel is performed asynchronously, to simplify our internal state management and promptly get the connection going again; the close is considered to have succeeded as soon as we have set our internal state.

 */

private void disconnectGracefully(Established closeIfIs){

  delivery.stopAndRunOnEventLoop(() -> disconnectNow(closeIfIs));

}

Location: OutboundConnection.java

Content: 

/** 

 * The channel is already known to be invalid, so there's no point waiting for a clean break in delivery. Delivery will be executed again as soon as we have logically closed the channel; we do not wait for the channel to actually be closed. The Future returned _does_ wait for the channel to be completely closed, so that callers can wait to be sure all writes have been completed either successfully or not.

 */

private Future<?> disconnectNow(Established closeIfIs){

  return runOnEventLoop(() -> {

    if (state == closeIfIs) {

      setDisconnected();

      if (hasPending())       delivery.execute();

      closeIfIs.channel.close().addListener(future -> {

        if (!future.isSuccess())         logger.info("Problem closing channel {}",closeIfIs,future.cause());

      }

);

    }

  }

);

}

Location: OutboundConnection.java

Content: 

public long dropped(){

  return overloadedCount + expiredCount;

}

Location: OutboundConnection.java

Content: 

/** 

 * This is the main entry point for enqueuing a message to be sent to the remote peer.

 */

public void enqueue(Message message) throws ClosedChannelException {

  if (isClosing())   throw new ClosedChannelException();

  final int canonicalSize=canonicalSize(message);

  if (canonicalSize > DatabaseDescriptor.getInternodeMaxMessageSizeInBytes())   throw new Message.OversizedMessageException(canonicalSize);

  submittedUpdater.incrementAndGet(this);

switch (acquireCapacity(canonicalSize)) {

case INSUFFICIENT_ENDPOINT:

    if (queue.maybePruneExpired() && SUCCESS == acquireCapacity(canonicalSize))     break;

case INSUFFICIENT_GLOBAL:

  onOverloaded(message);

return;

}

queue.add(message);

delivery.execute();

if (isClosing() && queue.remove(message)) {

releaseCapacity(1,canonicalSize);

throw new ClosedChannelException();

}

}

Location: OutboundConnection.java

Content: 

public boolean hasPending(){

  return 0 != pendingCountAndBytes;

}

Location: OutboundConnection.java

Content: 

private String id(boolean includeReal){

  State state=this.state;

  if (!includeReal || !state.isEstablished())   return id();

  Established established=state.established();

  Channel channel=established.channel;

  OutboundConnectionSettings settings=established.settings;

  return SocketFactory.channelId(settings.from,(InetSocketAddress)channel.localAddress(),settings.to,(InetSocketAddress)channel.remoteAddress(),type,channel.id().asShortText());

}

Location: OutboundConnection.java

Content: 

/** 

 * Attempt to open a new channel to the remote endpoint. Most of the actual work is performed by OutboundConnectionInitiator, this method just manages our book keeping on either success or failure. This method is only to be invoked by the eventLoop, and the inner class' methods should only be evaluated by the eventtLoop

 */

Future<?> initiate(){

class Initiate {

    /** 

 * If we fail to connect, we want to try and connect again before any messages timeout. However, we update this each time to ensure we do not retry unreasonably often, and settle on a periodicity that might lead to timeouts in some aggressive systems.

 */

    long retryRateMillis=DatabaseDescriptor.getMinRpcTimeout(MILLISECONDS) / 2;

    int messagingVersion=template.endpointToVersion().get(template.to);

    OutboundConnectionSettings settings;

    /** 

 * If we failed for any reason, try again

 */

    void onFailure(    Throwable cause){

      if (cause instanceof ConnectException)       noSpamLogger.info("{} failed to connect",id(),cause);

 else       noSpamLogger.error("{} failed to connect",id(),cause);

      JVMStabilityInspector.inspectThrowable(cause);

      if (hasPending()) {

        Promise<Result<MessagingSuccess>> result=new AsyncPromise<>(eventLoop);

        state=new Connecting(state.disconnected(),result,eventLoop.schedule(() -> attempt(result),max(100,retryRateMillis),MILLISECONDS));

        retryRateMillis=min(1000,retryRateMillis * 2);

      }

 else {

        state=Disconnected.dormant(state.disconnected().maintenance);

      }

    }

    void onCompletedHandshake(    Result<MessagingSuccess> result){

switch (result.outcome) {

case SUCCESS:

        assert !state.isClosed();

      MessagingSuccess success=result.success();

    debug.onConnect(success.messagingVersion,settings);

  state.disconnected().maintenance.cancel(false);

FrameEncoder.PayloadAllocator payloadAllocator=success.allocator;

Channel channel=success.channel;

Established established=new Established(messagingVersion,channel,payloadAllocator,settings);

state=established;

channel.pipeline().addLast("handleExceptionalStates",new ChannelInboundHandlerAdapter(){

@Override public void channelInactive(ChannelHandlerContext ctx){

disconnectNow(established);

ctx.fireChannelInactive();

}

@Override public void exceptionCaught(ChannelHandlerContext ctx,Throwable cause){

try {

invalidateChannel(established,cause);

}

 catch (Throwable t) {

logger.error("Unexpected exception in {}.exceptionCaught",this.getClass().getSimpleName(),t);

}

}

}

);

++successfulConnections;

logger.info("{} successfully connected, version = {}, framing = {}, encryption = {}",id(true),success.messagingVersion,settings.framing,encryptionConnectionSummary(channel));

break;

case RETRY:

if (logger.isTraceEnabled()) logger.trace("{} incorrect legacy peer version predicted; reconnecting",id());

messagingVersion=result.retry().withMessagingVersion;

settings.endpointToVersion.set(settings.to,messagingVersion);

initiate();

break;

case INCOMPATIBLE:

Throwable t=new IOException(String.format("Incompatible peer: %s, messaging version: %s",settings.to,result.incompatible().maxMessagingVersion));

t.fillInStackTrace();

onFailure(t);

break;

default :

throw new AssertionError();

}

}

/** 

 * Initiate all the actions required to establish a working, valid connection. This includes opening the socket, negotiating the internode messaging handshake, and setting up the working Netty  {@link Channel}. However, this method will not block for all those actions: it will only kick off the connection attempt, setting the @{link #connecting} future to track its completion. Note: this should only be invoked on the event loop.

 */

private void attempt(Promise<Result<MessagingSuccess>> result){

++connectionAttempts;

int knownMessagingVersion=messagingVersion();

if (knownMessagingVersion != messagingVersion) {

logger.trace("Endpoint version changed from {} to {} since connection initialized, updating.",messagingVersion,knownMessagingVersion);

messagingVersion=knownMessagingVersion;

}

settings=template;

if (messagingVersion > settings.acceptVersions.max) messagingVersion=settings.acceptVersions.max;

settings=settings.withLegacyPortIfNecessary(messagingVersion);

initiateMessaging(eventLoop,type,settings,messagingVersion,result).addListener(future -> {

if (future.isCancelled()) return;

if (future.isSuccess()) onCompletedHandshake((Result<MessagingSuccess>)future.getNow());

 else onFailure(future.cause());

}

);

}

Future<Result<MessagingSuccess>> initiate(){

Promise<Result<MessagingSuccess>> result=new AsyncPromise<>(eventLoop);

state=new Connecting(state.disconnected(),result);

attempt(result);

return result;

}

}

return new Initiate().initiate();

}

Location: OutboundConnection.java

Content: 

/** 

 * Close any currently open connection, forcing a reconnect if there are messages outstanding (or leaving it closed for now otherwise)

 */

public boolean interrupt(){

  State state=this.state;

  if (!state.isEstablished())   return false;

  disconnectGracefully(state.established());

  return true;

}

Location: OutboundConnection.java

Content: 

private void invalidateChannel(Established established,Throwable cause){

  JVMStabilityInspector.inspectThrowable(cause);

  if (state != established)   return;

  if (isCausedByConnectionReset(cause))   logger.info("{} channel closed by provider",id(),cause);

 else   logger.error("{} channel in potentially inconsistent state after error; closing",id(),cause);

  disconnectNow(established);

}

Location: OutboundConnection.java

Content: 

boolean isClosed(){

  return state.isClosed();

}

Location: OutboundConnection.java

Content: 

boolean isClosing(){

  return closing != null;

}

Location: OutboundConnection.java

Content: 

public boolean isConnected(){

  State state=this.state;

  return state.isEstablished() && state.established().isConnected();

}

Location: OutboundConnection.java

Content: 

private static boolean isMaxPendingCount(long pendingCountAndBytes){

  return (pendingCountAndBytes & (-1L << pendingByteBits)) == (-1L << pendingByteBits);

}

Location: OutboundConnection.java

Content: 

@VisibleForTesting int messagingVersion(){

  State state=this.state;

  return state.isEstablished() ? state.established().messagingVersion : template.endpointToVersion().get(template.to);

}

Location: OutboundConnection.java

Content: 

/** 

 * Take any necessary cleanup action after a message has been selected to be discarded from the queue on close. Note that this is only for messages that were queued prior to closing without graceful flush, OR for those that are unceremoniously dropped when we decide close has been trying to complete for too long.

 */

private void onClosed(Message<?> message){

  releaseCapacity(1,canonicalSize(message));

  callbacks.onDiscardOnClose(message,template.to);

}

Location: OutboundConnection.java

Content: 

/** 

 * Take any necessary cleanup action after a message has been selected to be discarded from the queue. Only to be invoked while holding OutboundMessageQueue.WithLock

 */

private boolean onExpired(Message<?> message){

  releaseCapacity(1,canonicalSize(message));

  expiredCount+=1;

  expiredBytes+=canonicalSize(message);

  noSpamLogger.warn("{} dropping message of type {} whose timeout expired before reaching the network",id(),message.verb());

  callbacks.onExpired(message,template.to);

  return true;

}

Location: OutboundConnection.java

Content: 

/** 

 * Take any necessary cleanup action after a message has been selected to be discarded from the queue. Only to be invoked by the delivery thread

 */

private void onFailedSerialize(Message<?> message,int messagingVersion,int bytesWrittenToNetwork,Throwable t){

  JVMStabilityInspector.inspectThrowable(t);

  releaseCapacity(1,canonicalSize(message));

  errorCount+=1;

  errorBytes+=message.serializedSize(messagingVersion);

  logger.warn("{} dropping message of type {} due to error",id(),message.verb(),t);

  callbacks.onFailedSerialize(message,template.to,messagingVersion,bytesWrittenToNetwork,t);

}

Location: OutboundConnection.java

Content: 

private void onOverloaded(Message<?> message){

  overloadedCountUpdater.incrementAndGet(this);

  int canonicalSize=canonicalSize(message);

  overloadedBytesUpdater.addAndGet(this,canonicalSize);

  noSpamLogger.warn("{} overloaded; dropping {} message (queue: {} local, {} endpoint, {} global)",this,FBUtilities.prettyPrintMemory(canonicalSize),readablePendingBytes,readableReserveEndpointUsing,readableReserveGlobalUsing);

  callbacks.onOverloaded(message,template.to);

}

Location: OutboundConnection.java

Content: 

OutboundConnection(ConnectionType type,OutboundConnectionSettings settings,EndpointAndGlobal reserveCapacityInBytes){

  this.template=settings.withDefaults(ConnectionCategory.MESSAGING);

  this.type=type;

  this.eventLoop=template.socketFactory.defaultGroup().next();

  this.pendingCapacityInBytes=template.applicationSendQueueCapacityInBytes;

  this.reserveCapacityInBytes=reserveCapacityInBytes;

  this.callbacks=template.callbacks;

  this.debug=template.debug;

  this.queue=new OutboundMessageQueue(approxTime,this::onExpired);

  this.delivery=type == ConnectionType.LARGE_MESSAGES ? new LargeMessageDelivery(template.socketFactory.synchronousWorkExecutor) : new EventLoopDelivery();

  setDisconnected();

}

Location: OutboundConnection.java

Content: 

public long overloadedBytes(){

  return overloadedBytes;

}

Location: OutboundConnection.java

Content: 

public long overloadedCount(){

  return overloadedCount;

}

Location: OutboundConnection.java

Content: 

public long pendingBytes(){

  return pendingBytes(pendingCountAndBytes);

}

Location: OutboundConnection.java

Content: 

private static long pendingBytes(long pendingCountAndBytes){

  return pendingCountAndBytes & (-1L >>> (64 - pendingByteBits));

}

Location: OutboundConnection.java

Content: 

public int pendingCount(){

  return pendingCount(pendingCountAndBytes);

}

Location: OutboundConnection.java

Content: 

private static long pendingCountAndBytes(long pendingCount,long pendingBytes){

  return (pendingCount << pendingByteBits) | pendingBytes;

}

Location: OutboundConnection.java

Content: 

private static int pendingCount(long pendingCountAndBytes){

  return (int)(pendingCountAndBytes >>> pendingByteBits);

}

Location: OutboundConnection.java

Content: 

/** 

 * Change the IP address on which we connect to the peer. We will attempt to connect to the new address if there was a previous connection, and new incoming messages as well as existing  {@link #queue} messages will be sent there.Any outstanding messages in the existing channel will still be sent to the previous address (we won't/can't move them from one channel to another). Returns null if the connection is closed.

 */

Future<Void> reconnectWith(OutboundConnectionSettings reconnectWith){

  OutboundConnectionSettings newTemplate=reconnectWith.withDefaults(ConnectionCategory.MESSAGING);

  if (newTemplate.socketFactory != template.socketFactory)   throw new IllegalArgumentException();

  if (newTemplate.callbacks != template.callbacks)   throw new IllegalArgumentException();

  if (!Objects.equals(newTemplate.applicationSendQueueCapacityInBytes,template.applicationSendQueueCapacityInBytes))   throw new IllegalArgumentException();

  if (!Objects.equals(newTemplate.applicationSendQueueReserveEndpointCapacityInBytes,template.applicationSendQueueReserveEndpointCapacityInBytes))   throw new IllegalArgumentException();

  if (newTemplate.applicationSendQueueReserveGlobalCapacityInBytes != template.applicationSendQueueReserveGlobalCapacityInBytes)   throw new IllegalArgumentException();

  logger.info("{} updating connection settings",id());

  Promise<Void> done=AsyncPromise.uncancellable(eventLoop);

  delivery.stopAndRunOnEventLoop(() -> {

    template=newTemplate;

    if (state.isEstablished()) {

      disconnectNow(state.established());

    }

 else     if (state.isConnecting()) {

      state.connecting().cancel();

      initiate();

    }

    done.setSuccess(null);

  }

);

  return done;

}

Location: OutboundConnection.java

Content: 

/** 

 * Mark a number of pending bytes as flushed to the network, releasing their capacity for new outbound messages.

 */

private void releaseCapacity(long count,long bytes){

  long decrement=pendingCountAndBytes(count,bytes);

  long prev=pendingCountAndBytesUpdater.getAndAdd(this,-decrement);

  if (pendingBytes(prev) > pendingCapacityInBytes) {

    long excess=min(pendingBytes(prev) - pendingCapacityInBytes,bytes);

    reserveCapacityInBytes.release(excess);

  }

}

Location: OutboundConnection.java

Content: 

/** 

 * Returns a future that completes when we are _maybe_ reconnected. The connection attempt is guaranteed to have completed (successfully or not) by the time any listeners are invoked, so if a reconnection attempt is needed, it is already scheduled.

 */

private Future<?> requestConnect(){

{

    State state=this.state;

    if (state.isConnecting())     return state.connecting().attempt;

  }

  Promise<Object> promise=AsyncPromise.uncancellable(eventLoop);

  runOnEventLoop(() -> {

    if (isClosed()) {

      promise.tryFailure(new ClosedChannelException());

    }

 else     if (state.isEstablished() && state.established().isConnected()) {

      promise.trySuccess(null);

    }

 else {

      if (state.isEstablished())       setDisconnected();

      if (!state.isConnecting()) {

        assert eventLoop.inEventLoop();

        assert !isConnected();

        initiate().addListener(new PromiseNotifier<>(promise));

      }

 else {

        state.connecting().attempt.addListener(new PromiseNotifier<>(promise));

      }

    }

  }

);

  return promise;

}

Location: OutboundConnection.java

Content: 

/** 

 * Run the task immediately if we are the eventLoop, otherwise queue it for execution on the eventLoop.

 */

private Future<?> runOnEventLoop(Runnable runnable){

  if (!eventLoop.inEventLoop())   return eventLoop.submit(runnable);

  runnable.run();

  return new SucceededFuture<>(eventLoop,null);

}

Location: OutboundConnection.java

Content: 

/** 

 * Schedule this connection to be permanently closed; only one close may be scheduled, any future scheduled closes are referred to the original triggering one (which may have a different schedule)

 */

Future<Void> scheduleClose(long time,TimeUnit unit,boolean flushQueue){

  Promise<Void> scheduledClose=AsyncPromise.uncancellable(eventLoop);

  if (!scheduledCloseUpdater.compareAndSet(this,null,scheduledClose))   return this.scheduledClose;

  eventLoop.schedule(() -> close(flushQueue).addListener(new PromiseNotifier<>(scheduledClose)),time,unit);

  return scheduledClose;

}

Location: OutboundConnection.java

Content: 

public long sentBytes(){

  return sentBytes;

}

Location: OutboundConnection.java

Content: 

public long sentCount(){

  return sentCount;

}

Location: OutboundConnection.java

Content: 

/** 

 * Schedules regular cleaning of the connection's state while it is disconnected from its remote endpoint. To be run only by the eventLoop or in the constructor

 */

private void setDisconnected(){

  assert state == null || state.isEstablished();

  state=Disconnected.dormant(eventLoop.scheduleAtFixedRate(queue::maybePruneExpired,100L,100L,TimeUnit.MILLISECONDS));

}

Location: OutboundConnection.java

Content: 

@VisibleForTesting OutboundConnectionSettings settings(){

  State state=this.state;

  return state.isEstablished() ? state.established().settings : template;

}

Location: OutboundConnection.java

Content: 

public long submittedCount(){

  return submittedCount;

}

Location: OutboundConnection.java

Content: 

public long successfulConnections(){

  return successfulConnections;

}

Location: OutboundConnection.java

Content: 

@Override public String toString(){

  return id();

}

Location: OutboundConnection.java

Content: 

@VisibleForTesting public ConnectionType type(){

  return type;

}

Location: OutboundConnection.java

Content: 

@VisibleForTesting boolean unsafeAcquireCapacity(long amount){

  return SUCCESS == acquireCapacity(amount);

}

Location: OutboundConnection.java

Content: 

@VisibleForTesting boolean unsafeAcquireCapacity(long count,long amount){

  return SUCCESS == acquireCapacity(count,amount);

}

Location: OutboundConnection.java

Content: 

@VisibleForTesting Channel unsafeGetChannel(){

  State state=this.state;

  return state.isEstablished() ? state.established().channel : null;

}

Location: OutboundConnection.java

Content: 

@VisibleForTesting Limit unsafeGetEndpointReserveLimits(){

  return reserveCapacityInBytes.endpoint;

}

Location: OutboundConnection.java

Content: 

@VisibleForTesting void unsafeReleaseCapacity(long amount){

  releaseCapacity(1,amount);

}

Location: OutboundConnection.java

Content: 

@VisibleForTesting void unsafeReleaseCapacity(long count,long amount){

  releaseCapacity(count,amount);

}

Location: OutboundConnection.java

Content: 

@VisibleForTesting void unsafeRunOnDelivery(Runnable run){

  delivery.stopAndRun(run);

}

