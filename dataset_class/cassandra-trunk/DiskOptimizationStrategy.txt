Location: DiskOptimizationStrategy.java

Content: 

/** 

 * Round up to the next multiple of 4k but no more than  {@link #MAX_BUFFER_SIZE}.

 */

default int roundBufferSize(long size){

  if (size <= 0)   return MIN_BUFFER_SIZE;

  size=(size + MIN_BUFFER_SIZE_MASK) & ~MIN_BUFFER_SIZE_MASK;

  return (int)Math.min(size,MAX_BUFFER_SIZE);

}

Location: DiskOptimizationStrategy.java

Content: 

/** 

 * Round either up or down to the next power of two, which is required by the {@link org.apache.cassandra.cache.ChunkCache.CachingRebufferer}, but capping between  {@link #MIN_BUFFER_SIZE}and  {@link #MAX_BUFFER_SIZE}.

 * @param size - the size to round to a power of two, normally this is a buffer size that was previouslyreturned by a  {@link #bufferSize(long)}.

 * @param roundUp - whether to round up or down

 * @return a value rounded to a power of two but never bigger than {@link #MAX_BUFFER_SIZE} or smaller than {@link #MIN_BUFFER_SIZE}.

 */

static int roundForCaching(int size,boolean roundUp){

  if (size <= MIN_BUFFER_SIZE)   return MIN_BUFFER_SIZE;

  int ret=roundUp ? 1 << (32 - Integer.numberOfLeadingZeros(size - 1)) : Integer.highestOneBit(size);

  return Math.min(MAX_BUFFER_SIZE,ret);

}

