Location: KeysIndex.java

Content: 

public TableMetadata.Builder addIndexClusteringColumns(TableMetadata.Builder builder,TableMetadataRef baseMetadata,ColumnMetadata cfDef){

  return builder;

}

Location: KeysIndex.java

Content: 

protected <T>CBuilder buildIndexClusteringPrefix(ByteBuffer partitionKey,ClusteringPrefix<T> prefix,CellPath path){

  CBuilder builder=CBuilder.create(getIndexComparator());

  builder.add(partitionKey,ByteBufferAccessor.instance);

  return builder;

}

Location: KeysIndex.java

Content: 

private <V>int compare(ByteBuffer left,Cell<V> right){

  return indexedColumn.type.compare(left,ByteBufferAccessor.instance,right.value(),right.accessor());

}

Location: KeysIndex.java

Content: 

public IndexEntry decodeEntry(DecoratedKey indexedValue,Row indexEntry){

  throw new UnsupportedOperationException("KEYS indexes do not use a specialized index entry format");

}

Location: KeysIndex.java

Content: 

protected ByteBuffer getIndexedValue(ByteBuffer partitionKey,Clustering<?> clustering,CellPath path,ByteBuffer cellValue){

  return cellValue;

}

Location: KeysIndex.java

Content: 

public boolean isStale(Row row,ByteBuffer indexValue,int nowInSec){

  if (row == null)   return true;

  Cell<?> cell=row.getCell(indexedColumn);

  return (cell == null || !cell.isLive(nowInSec) || compare(indexValue,cell) != 0);

}

Location: KeysIndex.java

Content: 

public KeysIndex(ColumnFamilyStore baseCfs,IndexMetadata indexDef){

  super(baseCfs,indexDef);

}

