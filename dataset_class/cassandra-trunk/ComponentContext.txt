Location: ComponentContext.java

Content: 

/** 

 * @return file channel to be streamed, either original component or hardlinked component.

 */

public FileChannel channel(Descriptor descriptor,Component component,long size) throws IOException {

  String toTransfer=hardLinks.containsKey(component) ? hardLinks.get(component).getPath() : descriptor.filenameFor(component);

  @SuppressWarnings("resource") FileChannel channel=new RandomAccessFile(toTransfer,"r").getChannel();

  assert size == channel.size() : String.format("Entire sstable streaming expects %s file size to be %s but got %s.",component,size,channel.size());

  return channel;

}

Location: ComponentContext.java

Content: 

private ComponentContext(Map<Component,File> hardLinks,ComponentManifest manifest){

  this.hardLinks=hardLinks;

  this.manifest=manifest;

}

Location: ComponentContext.java

Content: 

public ComponentManifest manifest(){

  return manifest;

}

