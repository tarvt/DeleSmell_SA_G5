Location: Relation.java

Content: 

/** 

 * Checks if the operator of this relation is a <code>CONTAINS_KEY</code>.

 * @return <code>true</code>  if the operator of this relation is a <code>CONTAINS_KEY</code>, <code>false</code>otherwise.

 */

public final boolean isContainsKey(){

  return relationType == Operator.CONTAINS_KEY;

}

Location: Relation.java

Content: 

public Operator operator(){

  return relationType;

}

Location: Relation.java

Content: 

/** 

 * Converts this <code>Relation</code> into a <code>Restriction</code>.

 * @param table the Column Family meta data

 * @param boundNames the variables specification where to collect the bind variables

 * @return the <code>Restriction</code> corresponding to this <code>Relation</code>

 * @throws InvalidRequestException if this <code>Relation</code> is not valid

 */

public final Restriction toRestriction(TableMetadata table,VariableSpecifications boundNames){

switch (relationType) {

case EQ:

    return newEQRestriction(table,boundNames);

case LT:

  return newSliceRestriction(table,boundNames,Bound.END,false);

case LTE:

return newSliceRestriction(table,boundNames,Bound.END,true);

case GTE:

return newSliceRestriction(table,boundNames,Bound.START,true);

case GT:

return newSliceRestriction(table,boundNames,Bound.START,false);

case IN:

return newINRestriction(table,boundNames);

case CONTAINS:

return newContainsRestriction(table,boundNames,false);

case CONTAINS_KEY:

return newContainsRestriction(table,boundNames,true);

case IS_NOT:

return newIsNotRestriction(table,boundNames);

case LIKE_PREFIX:

case LIKE_SUFFIX:

case LIKE_CONTAINS:

case LIKE_MATCHES:

case LIKE:

return newLikeRestriction(table,boundNames,relationType);

default :

throw invalidRequest("Unsupported \"!=\" relation: %s",this);

}

}

Location: Relation.java

Content: 

/** 

 * Converts the specified <code>Raw</code> terms into a <code>Term</code>s.

 * @param receivers the columns to which the values must be associated at

 * @param raws the raw terms to convert

 * @param keyspace the keyspace name

 * @param boundNames the variables specification where to collect the bind variables

 * @return the <code>Term</code>s corresponding to the specified <code>Raw</code> terms

 * @throws InvalidRequestException if the <code>Raw</code> terms are not valid

 */

protected final List<Term> toTerms(List<? extends ColumnSpecification> receivers,List<? extends Term.Raw> raws,String keyspace,VariableSpecifications boundNames){

  if (raws == null)   return null;

  List<Term> terms=new ArrayList<>(raws.size());

  for (int i=0, m=raws.size(); i < m; i++)   terms.add(toTerm(receivers,raws.get(i),keyspace,boundNames));

  return terms;

}

Location: Relation.java

Content: 

/** 

 * Converts the specified <code>Raw</code> into a <code>Term</code>.

 * @param receivers the columns to which the values must be associated at

 * @param raw the raw term to convert

 * @param keyspace the keyspace name

 * @param boundNames the variables specification where to collect the bind variables

 * @return the <code>Term</code> corresponding to the specified <code>Raw</code>

 * @throws InvalidRequestException if the <code>Raw</code> term is not valid

 */

protected abstract Term toTerm(List<? extends ColumnSpecification> receivers,Term.Raw raw,String keyspace,VariableSpecifications boundNames);

