Location: Terms.java

Content: 

/** 

 * Adds all functions (native and user-defined) of the specified terms to the list.

 * @param functions the list to add to

 */

public static void addFunctions(Iterable<Term> terms,List<Function> functions){

  for (  Term term : terms) {

    if (term != null)     term.addFunctionsTo(functions);

  }

}

Location: Terms.java

Content: 

public static ByteBuffer asBytes(String keyspace,String term,AbstractType type){

  ColumnSpecification receiver=new ColumnSpecification(keyspace,"--dummy--",new ColumnIdentifier("(dummy)",true),type);

  Term.Raw rawTerm=CQLFragmentParser.parseAny(CqlParser::term,term,"CQL term");

  return rawTerm.prepare(keyspace,receiver).bindAndGet(QueryOptions.DEFAULT);

}

Location: Terms.java

Content: 

/** 

 * Creates a  {@code Terms} for the specified list marker.

 * @param marker the list  marker

 * @param type the element type

 * @return a {@code Terms} for the specified list marker

 */

public static Terms ofListMarker(final Lists.Marker marker,final AbstractType<?> type){

  return new Terms(){

    @Override public void addFunctionsTo(    List<Function> functions){

    }

    @Override public void collectMarkerSpecification(    VariableSpecifications boundNames){

      marker.collectMarkerSpecification(boundNames);

    }

    @Override public List<ByteBuffer> bindAndGet(    QueryOptions options){

      Terminal terminal=marker.bind(options);

      if (terminal == null)       return null;

      if (terminal == Constants.UNSET_VALUE)       return UNSET_LIST;

      return ((MultiItemTerminal)terminal).getElements();

    }

    @Override public List<Terminal> bind(    QueryOptions options){

      Terminal terminal=marker.bind(options);

      if (terminal == null)       return null;

      if (terminal == Constants.UNSET_VALUE)       return UNSET_LIST;

      java.util.function.Function<ByteBuffer,Term.Terminal> deserializer=deserializer(options.getProtocolVersion());

      List<ByteBuffer> boundValues=((MultiItemTerminal)terminal).getElements();

      List<Term.Terminal> values=new ArrayList<>(boundValues.size());

      for (int i=0, m=boundValues.size(); i < m; i++) {

        ByteBuffer buffer=boundValues.get(i);

        Term.Terminal value=buffer == null ? null : deserializer.apply(buffer);

        values.add(value);

      }

      return values;

    }

    public java.util.function.Function<ByteBuffer,Term.Terminal> deserializer(    ProtocolVersion version){

      if (type.isCollection()) {

switch (((CollectionType<?>)type).kind) {

case LIST:

          return e -> Lists.Value.fromSerialized(e,(ListType<?>)type,version);

case SET:

        return e -> Sets.Value.fromSerialized(e,(SetType<?>)type,version);

case MAP:

      return e -> Maps.Value.fromSerialized(e,(MapType<?,?>)type,version);

  }

  throw new AssertionError();

}

return e -> new Constants.Value(e);

}

}

;

}

Location: Terms.java

Content: 

/** 

 * Creates a  {@code Terms} containing a set of {@code Term}.

 * @param term the {@code Term}

 * @return a {@code Terms} containing a set of {@code Term}.

 */

public static Terms of(final List<Term> terms){

  return new Terms(){

    @Override public void addFunctionsTo(    List<Function> functions){

      addFunctions(terms,functions);

    }

    @Override public void collectMarkerSpecification(    VariableSpecifications boundNames){

      for (int i=0, m=terms.size(); i < m; i++) {

        Term term=terms.get(i);

        term.collectMarkerSpecification(boundNames);

      }

    }

    @Override public List<Terminal> bind(    QueryOptions options){

      int size=terms.size();

      List<Terminal> terminals=new ArrayList<>(size);

      for (int i=0; i < size; i++) {

        Term term=terms.get(i);

        terminals.add(term.bind(options));

      }

      return terminals;

    }

    @Override public List<ByteBuffer> bindAndGet(    QueryOptions options){

      int size=terms.size();

      List<ByteBuffer> buffers=new ArrayList<>(size);

      for (int i=0; i < size; i++) {

        Term term=terms.get(i);

        buffers.add(term.bindAndGet(options));

      }

      return buffers;

    }

  }

;

}

Location: Terms.java

Content: 

/** 

 * Creates a  {@code Terms} containing a single {@code Term}.

 * @param term the {@code Term}

 * @return a {@code Terms} containing a single {@code Term}.

 */

public static Terms of(final Term term){

  return new Terms(){

    @Override public void addFunctionsTo(    List<Function> functions){

      term.addFunctionsTo(functions);

    }

    @Override public void collectMarkerSpecification(    VariableSpecifications boundNames){

      term.collectMarkerSpecification(boundNames);

    }

    @Override public List<ByteBuffer> bindAndGet(    QueryOptions options){

      return Collections.singletonList(term.bindAndGet(options));

    }

    @Override public List<Terminal> bind(    QueryOptions options){

      return Collections.singletonList(term.bind(options));

    }

  }

;

}

