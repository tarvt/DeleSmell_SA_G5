Location: ReplicationAwareTokenAllocator.java

Content: 

public Collection<Token> addUnit(Unit newUnit,int numTokens){

  assert !unitToTokens.containsKey(newUnit);

  if (unitCount() < replicas)   return generateSplits(newUnit,numTokens);

  if (numTokens > sortedTokens.size())   return generateSplits(newUnit,numTokens);

  double optTokenOwnership=optimalTokenOwnership(numTokens);

  Map<Object,GroupInfo> groups=Maps.newHashMap();

  Map<Unit,UnitInfo<Unit>> unitInfos=createUnitInfos(groups);

  if (groups.size() < replicas) {

    return generateSplits(newUnit,numTokens);

  }

  UnitInfo<Unit> newUnitInfo=new UnitInfo<>(newUnit,numTokens * optTokenOwnership,groups,strategy);

  TokenInfo<Unit> tokens=createTokenInfos(unitInfos,newUnitInfo.group);

  newUnitInfo.tokenCount=numTokens;

  CandidateInfo<Unit> candidates=createCandidates(tokens,newUnitInfo,optTokenOwnership);

  PriorityQueue<Weighted<CandidateInfo<Unit>>> improvements=new PriorityQueue<>(sortedTokens.size());

  CandidateInfo<Unit> candidate=candidates;

  do {

    double impr=evaluateImprovement(candidate,optTokenOwnership,1.0 / numTokens);

    improvements.add(new Weighted<>(impr,candidate));

    candidate=candidate.next;

  }

 while (candidate != candidates);

  CandidateInfo<Unit> bestToken=improvements.remove().value;

  for (int vn=1; ; ++vn) {

    candidates=bestToken.removeFrom(candidates);

    confirmCandidate(bestToken);

    if (vn == numTokens)     break;

    while (true) {

      bestToken=improvements.remove().value;

      double impr=evaluateImprovement(bestToken,optTokenOwnership,(vn + 1.0) / numTokens);

      Weighted<CandidateInfo<Unit>> next=improvements.peek();

      if (next == null || impr >= next.weight)       break;

      improvements.add(new Weighted<>(impr,bestToken));

    }

  }

  ImmutableList<Token> newTokens=ImmutableList.copyOf(unitToTokens.get(newUnit));

  TokenAllocatorDiagnostics.unitedAdded(this,numTokens,unitToTokens,sortedTokens,newTokens,newUnit);

  return newTokens;

}

Location: ReplicationAwareTokenAllocator.java

Content: 

/** 

 * Applies the ownership adjustment for the given element, updating tracked unit ownership and returning the change of variance.

 */

private double applyOwnershipAdjustment(BaseTokenInfo<Unit,?> curr,UnitInfo<Unit> currUnit,Token replicationStart,Token replicationEnd,double optTokenOwnership,UnitAdjustmentTracker<Unit> unitTracker){

  double oldOwnership=curr.replicatedOwnership;

  double newOwnership=replicationStart.size(replicationEnd);

  double tokenCount=currUnit.tokenCount;

  assert tokenCount > 0;

  unitTracker.add(currUnit,newOwnership - oldOwnership);

  return (sq(newOwnership - optTokenOwnership) - sq(oldOwnership - optTokenOwnership)) / sq(tokenCount);

}

Location: ReplicationAwareTokenAllocator.java

Content: 

/** 

 * Incorporates the selected candidate into the ring, adjusting ownership information and calculated token information.

 */

private void confirmCandidate(CandidateInfo<Unit> candidate){

  UnitInfo<Unit> newUnit=candidate.owningUnit;

  Token newToken=candidate.token;

  sortedTokens.put(newToken,newUnit.unit);

  unitToTokens.put(newUnit.unit,newToken);

  TokenInfo<Unit> prev=candidate.prevInRing();

  TokenInfo<Unit> newTokenInfo=new TokenInfo<>(newToken,newUnit);

  newTokenInfo.replicatedOwnership=candidate.replicatedOwnership;

  newTokenInfo.insertAfter(prev,prev);

  populateTokenInfoAndAdjustUnit(newTokenInfo,newUnit.group);

  ReplicationVisitor replicationVisitor=new ReplicationVisitor();

  assert newTokenInfo.next == candidate.split;

  for (TokenInfo<Unit> curr=newTokenInfo.next; !replicationVisitor.visitedAll(); curr=curr.next) {

    candidate=candidate.next;

    populateCandidate(candidate);

    if (!replicationVisitor.add(curr.owningUnit.group))     continue;

    populateTokenInfoAndAdjustUnit(curr,newUnit.group);

  }

  replicationVisitor.clean();

}

Location: ReplicationAwareTokenAllocator.java

Content: 

private CandidateInfo<Unit> createCandidates(TokenInfo<Unit> tokens,UnitInfo<Unit> newUnitInfo,double initialTokenOwnership){

  TokenInfo<Unit> curr=tokens;

  CandidateInfo<Unit> first=null;

  CandidateInfo<Unit> prev=null;

  do {

    CandidateInfo<Unit> candidate=new CandidateInfo<Unit>(partitioner.midpoint(curr.prev.token,curr.token),curr,newUnitInfo);

    first=candidate.insertAfter(first,prev);

    candidate.replicatedOwnership=initialTokenOwnership;

    populateCandidate(candidate);

    prev=candidate;

    curr=curr.next;

  }

 while (curr != tokens);

  prev.next=first;

  return first;

}

Location: ReplicationAwareTokenAllocator.java

Content: 

/** 

 * Construct the token ring as a CircularList of TokenInfo, and populate the ownership of the UnitInfo's provided

 */

private TokenInfo<Unit> createTokenInfos(Map<Unit,UnitInfo<Unit>> units,GroupInfo newUnitGroup){

  TokenInfo<Unit> prev=null;

  TokenInfo<Unit> first=null;

  for (  Map.Entry<Token,Unit> en : sortedTokens.entrySet()) {

    Token t=en.getKey();

    UnitInfo<Unit> ni=units.get(en.getValue());

    TokenInfo<Unit> ti=new TokenInfo<>(t,ni);

    first=ti.insertAfter(first,prev);

    prev=ti;

  }

  TokenInfo<Unit> curr=first;

  do {

    populateTokenInfoAndAdjustUnit(curr,newUnitGroup);

    curr=curr.next;

  }

 while (curr != first);

  TokenAllocatorDiagnostics.tokenInfosCreated(this,unitToTokens,first);

  return first;

}

Location: ReplicationAwareTokenAllocator.java

Content: 

/** 

 * Evaluates the improvement in variance for both units and individual tokens when candidate is inserted into the ring.

 */

private double evaluateImprovement(CandidateInfo<Unit> candidate,double optTokenOwnership,double newUnitMult){

  double tokenChange=0;

  UnitInfo<Unit> candidateUnit=candidate.owningUnit;

  Token candidateEnd=candidate.token;

  UnitAdjustmentTracker<Unit> unitTracker=new UnitAdjustmentTracker<>(candidateUnit);

  tokenChange+=applyOwnershipAdjustment(candidate,candidateUnit,candidate.replicationStart,candidateEnd,optTokenOwnership,unitTracker);

  ReplicationVisitor replicationVisitor=new ReplicationVisitor();

  for (TokenInfo<Unit> curr=candidate.split; !replicationVisitor.visitedAll(); curr=curr.next) {

    UnitInfo<Unit> currUnit=curr.owningUnit;

    if (!replicationVisitor.add(currUnit.group))     continue;

    Token replicationEnd=curr.token;

    Token replicationStart=findUpdatedReplicationStart(curr,candidate);

    tokenChange+=applyOwnershipAdjustment(curr,currUnit,replicationStart,replicationEnd,optTokenOwnership,unitTracker);

  }

  replicationVisitor.clean();

  double nodeChange=unitTracker.calculateUnitChange(newUnitMult,optTokenOwnership);

  return -(tokenChange + nodeChange);

}

Location: ReplicationAwareTokenAllocator.java

Content: 

/** 

 * Returns the start of the replication span for the token  {@code curr} when {@code candidate} is inserted into thering.

 */

private Token findUpdatedReplicationStart(TokenInfo<Unit> curr,CandidateInfo<Unit> candidate){

  return furtherStartToken(curr.replicationThreshold,candidate.token,curr.token);

}

Location: ReplicationAwareTokenAllocator.java

Content: 

/** 

 * Selects from  {@code t1},  {@code t2} the token that forms a bigger range with {@code towards} as the upper bound,taking into account wrapping. Unlike Token.size(), equality is taken to mean "same as" rather than covering the whole range.

 */

private static Token furtherStartToken(Token t1,Token t2,Token towards){

  if (t1.equals(towards))   return t2;

  if (t2.equals(towards))   return t1;

  return t1.size(towards) > t2.size(towards) ? t1 : t2;

}

Location: ReplicationAwareTokenAllocator.java

Content: 

/** 

 * Selects tokens by repeatedly splitting the largest range in the ring at the given ratio. This is used to choose tokens for the first nodes in the ring where the algorithm cannot be applied (e.g. when number of nodes < RF). It generates a reasonably chaotic initial token split, after which the algorithm behaves well for an unbounded number of nodes.

 */

@Override Collection<Token> generateSplits(Unit newUnit,int numTokens){

  Collection<Token> tokens=super.generateSplits(newUnit,numTokens);

  unitToTokens.putAll(newUnit,tokens);

  TokenAllocatorDiagnostics.splitsGenerated(this,numTokens,unitToTokens,sortedTokens,newUnit,tokens);

  return tokens;

}

Location: ReplicationAwareTokenAllocator.java

Content: 

public int getReplicas(){

  return replicas;

}

Location: ReplicationAwareTokenAllocator.java

Content: 

private double optimalTokenOwnership(int tokensToAdd){

  return 1.0 * replicas / (sortedTokens.size() + tokensToAdd);

}

Location: ReplicationAwareTokenAllocator.java

Content: 

private void populateCandidate(CandidateInfo<Unit> candidate){

  populateTokenInfo(candidate,candidate.owningUnit.group);

}

Location: ReplicationAwareTokenAllocator.java

Content: 

private void populateTokenInfoAndAdjustUnit(TokenInfo<Unit> populate,GroupInfo newUnitGroup){

  Token replicationStart=populateTokenInfo(populate,newUnitGroup);

  double newOwnership=replicationStart.size(populate.token);

  double oldOwnership=populate.replicatedOwnership;

  populate.replicatedOwnership=newOwnership;

  populate.owningUnit.ownership+=newOwnership - oldOwnership;

}

Location: ReplicationAwareTokenAllocator.java

Content: 

/** 

 * Calculates the  {@code replicationStart} of a token, as well as {@code replicationThreshold} which is chosen in a waythat permits  {@code findUpdatedReplicationStart} to quickly identify changes in ownership.

 */

private Token populateTokenInfo(BaseTokenInfo<Unit,?> token,GroupInfo newUnitGroup){

  GroupInfo tokenGroup=token.owningUnit.group;

  PopulateVisitor visitor=new PopulateVisitor();

  Token replicationStart;

  Token replicationThreshold=token.token;

  GroupInfo currGroup;

  for (TokenInfo<Unit> curr=token.prevInRing(); ; curr=curr.prev) {

    replicationStart=curr.token;

    currGroup=curr.owningUnit.group;

    if (!visitor.add(currGroup))     continue;

    if (visitor.visitedAll())     break;

    replicationThreshold=replicationStart;

    if (currGroup == tokenGroup)     break;

  }

  if (newUnitGroup == tokenGroup)   replicationThreshold=token.token;

 else   if (newUnitGroup != currGroup && visitor.seen(newUnitGroup))   replicationThreshold=replicationStart;

  visitor.clean();

  token.replicationThreshold=replicationThreshold;

  token.replicationStart=replicationStart;

  return replicationStart;

}

Location: ReplicationAwareTokenAllocator.java

Content: 

/** 

 * For testing, remove the given unit preserving correct state of the allocator.

 */

void removeUnit(Unit n){

  Collection<Token> tokens=unitToTokens.removeAll(n);

  sortedTokens.keySet().removeAll(tokens);

  TokenAllocatorDiagnostics.unitRemoved(this,n,unitToTokens,sortedTokens);

}

Location: ReplicationAwareTokenAllocator.java

Content: 

ReplicationAwareTokenAllocator(NavigableMap<Token,Unit> sortedTokens,ReplicationStrategy<Unit> strategy,IPartitioner partitioner){

  super(sortedTokens,strategy,partitioner);

  unitToTokens=HashMultimap.create();

  for (  Map.Entry<Token,Unit> en : sortedTokens.entrySet())   unitToTokens.put(en.getValue(),en.getKey());

  this.replicas=strategy.replicas();

}

Location: ReplicationAwareTokenAllocator.java

Content: 

private static double sq(double d){

  return d * d;

}

Location: ReplicationAwareTokenAllocator.java

Content: 

public int unitCount(){

  return unitToTokens.asMap().size();

}

