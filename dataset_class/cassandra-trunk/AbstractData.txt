Location: AbstractData.java

Content: 

@SuppressWarnings("unchecked") protected AbstractData(ProtocolVersion protocolVersion,int size){

  super(protocolVersion);

  this.wrapped=(T)this;

  this.values=new ByteBuffer[size];

}

Location: AbstractData.java

Content: 

protected AbstractData(ProtocolVersion protocolVersion,T wrapped,ByteBuffer[] values){

  super(protocolVersion);

  this.wrapped=wrapped;

  this.values=values;

}

Location: AbstractData.java

Content: 

protected AbstractData(ProtocolVersion protocolVersion,T wrapped,int size){

  this(protocolVersion,wrapped,new ByteBuffer[size]);

}

Location: AbstractData.java

Content: 

@Override public T setBool(int i,boolean v){

  TypeCodec<Boolean> codec=codecFor(i,Boolean.class);

  ByteBuffer bb;

  if (codec instanceof TypeCodec.PrimitiveBooleanCodec)   bb=((TypeCodec.PrimitiveBooleanCodec)codec).serializeNoBoxing(v,protocolVersion);

 else   bb=codec.serialize(v,protocolVersion);

  return setValue(i,bb);

}

Location: AbstractData.java

Content: 

@Override public T setBool(String name,boolean v){

  for (  int i : getAllIndexesOf(name)) {

    setBool(i,v);

  }

  return wrapped;

}

Location: AbstractData.java

Content: 

@Override public T setBytesUnsafe(int i,ByteBuffer v){

  return setValue(i,v == null ? null : v.duplicate());

}

Location: AbstractData.java

Content: 

@Override public T setBytesUnsafe(String name,ByteBuffer v){

  ByteBuffer value=v == null ? null : v.duplicate();

  for (  int i : getAllIndexesOf(name)) {

    setValue(i,value);

  }

  return wrapped;

}

Location: AbstractData.java

Content: 

@Override public T setBytes(int i,ByteBuffer v){

  return setValue(i,codecFor(i,ByteBuffer.class).serialize(v,protocolVersion));

}

Location: AbstractData.java

Content: 

@Override public T setBytes(String name,ByteBuffer v){

  for (  int i : getAllIndexesOf(name)) {

    setBytes(i,v);

  }

  return wrapped;

}

Location: AbstractData.java

Content: 

@Override public T setByte(int i,byte v){

  TypeCodec<Byte> codec=codecFor(i,Byte.class);

  ByteBuffer bb;

  if (codec instanceof TypeCodec.PrimitiveByteCodec)   bb=((TypeCodec.PrimitiveByteCodec)codec).serializeNoBoxing(v,protocolVersion);

 else   bb=codec.serialize(v,protocolVersion);

  return setValue(i,bb);

}

Location: AbstractData.java

Content: 

@Override public T setByte(String name,byte v){

  for (  int i : getAllIndexesOf(name)) {

    setByte(i,v);

  }

  return wrapped;

}

Location: AbstractData.java

Content: 

@Override public T setDate(int i,LocalDate v){

  return setValue(i,codecFor(i,LocalDate.class).serialize(v,protocolVersion));

}

Location: AbstractData.java

Content: 

@Override public T setDate(String name,LocalDate v){

  for (  int i : getAllIndexesOf(name)) {

    setDate(i,v);

  }

  return wrapped;

}

Location: AbstractData.java

Content: 

@Override public T setDecimal(int i,BigDecimal v){

  return setValue(i,codecFor(i,BigDecimal.class).serialize(v,protocolVersion));

}

Location: AbstractData.java

Content: 

@Override public T setDecimal(String name,BigDecimal v){

  for (  int i : getAllIndexesOf(name)) {

    setDecimal(i,v);

  }

  return wrapped;

}

Location: AbstractData.java

Content: 

@Override public T setDouble(int i,double v){

  TypeCodec<Double> codec=codecFor(i,Double.class);

  ByteBuffer bb;

  if (codec instanceof TypeCodec.PrimitiveDoubleCodec)   bb=((TypeCodec.PrimitiveDoubleCodec)codec).serializeNoBoxing(v,protocolVersion);

 else   bb=codec.serialize(v,protocolVersion);

  return setValue(i,bb);

}

Location: AbstractData.java

Content: 

@Override public T setDouble(String name,double v){

  for (  int i : getAllIndexesOf(name)) {

    setDouble(i,v);

  }

  return wrapped;

}

Location: AbstractData.java

Content: 

@Override public T setFloat(int i,float v){

  TypeCodec<Float> codec=codecFor(i,Float.class);

  ByteBuffer bb;

  if (codec instanceof TypeCodec.PrimitiveFloatCodec)   bb=((TypeCodec.PrimitiveFloatCodec)codec).serializeNoBoxing(v,protocolVersion);

 else   bb=codec.serialize(v,protocolVersion);

  return setValue(i,bb);

}

Location: AbstractData.java

Content: 

@Override public T setFloat(String name,float v){

  for (  int i : getAllIndexesOf(name)) {

    setFloat(i,v);

  }

  return wrapped;

}

Location: AbstractData.java

Content: 

@Override public T setInet(int i,InetAddress v){

  return setValue(i,codecFor(i,InetAddress.class).serialize(v,protocolVersion));

}

Location: AbstractData.java

Content: 

@Override public T setInet(String name,InetAddress v){

  for (  int i : getAllIndexesOf(name)) {

    setInet(i,v);

  }

  return wrapped;

}

Location: AbstractData.java

Content: 

@Override public T setInt(int i,int v){

  TypeCodec<Integer> codec=codecFor(i,Integer.class);

  ByteBuffer bb;

  if (codec instanceof TypeCodec.PrimitiveIntCodec)   bb=((TypeCodec.PrimitiveIntCodec)codec).serializeNoBoxing(v,protocolVersion);

 else   bb=codec.serialize(v,protocolVersion);

  return setValue(i,bb);

}

Location: AbstractData.java

Content: 

@Override public T setInt(String name,int v){

  for (  int i : getAllIndexesOf(name)) {

    setInt(i,v);

  }

  return wrapped;

}

Location: AbstractData.java

Content: 

@Override @SuppressWarnings("unchecked") public <E>T setList(int i,List<E> v){

  return setValue(i,codecFor(i).serialize(v,protocolVersion));

}

Location: AbstractData.java

Content: 

@Override public <E>T setList(int i,List<E> v,Class<E> elementsClass){

  return setValue(i,codecFor(i,TypeTokens.listOf(elementsClass)).serialize(v,protocolVersion));

}

Location: AbstractData.java

Content: 

@Override public <E>T setList(int i,List<E> v,TypeToken<E> elementsType){

  return setValue(i,codecFor(i,TypeTokens.listOf(elementsType)).serialize(v,protocolVersion));

}

Location: AbstractData.java

Content: 

@Override public <E>T setList(String name,List<E> v){

  for (  int i : getAllIndexesOf(name)) {

    setList(i,v);

  }

  return wrapped;

}

Location: AbstractData.java

Content: 

@Override public <E>T setList(String name,List<E> v,Class<E> elementsClass){

  for (  int i : getAllIndexesOf(name)) {

    setList(i,v,elementsClass);

  }

  return wrapped;

}

Location: AbstractData.java

Content: 

@Override public <E>T setList(String name,List<E> v,TypeToken<E> elementsType){

  for (  int i : getAllIndexesOf(name)) {

    setList(i,v,elementsType);

  }

  return wrapped;

}

Location: AbstractData.java

Content: 

@Override public T setLong(int i,long v){

  TypeCodec<Long> codec=codecFor(i,Long.class);

  ByteBuffer bb;

  if (codec instanceof TypeCodec.PrimitiveLongCodec)   bb=((TypeCodec.PrimitiveLongCodec)codec).serializeNoBoxing(v,protocolVersion);

 else   bb=codec.serialize(v,protocolVersion);

  return setValue(i,bb);

}

Location: AbstractData.java

Content: 

@Override public T setLong(String name,long v){

  for (  int i : getAllIndexesOf(name)) {

    setLong(i,v);

  }

  return wrapped;

}

Location: AbstractData.java

Content: 

@SuppressWarnings("unchecked") @Override public <K,V>T setMap(int i,Map<K,V> v){

  return setValue(i,codecFor(i).serialize(v,protocolVersion));

}

Location: AbstractData.java

Content: 

@Override public <K,V>T setMap(int i,Map<K,V> v,Class<K> keysClass,Class<V> valuesClass){

  return setValue(i,codecFor(i,TypeTokens.mapOf(keysClass,valuesClass)).serialize(v,protocolVersion));

}

Location: AbstractData.java

Content: 

@Override public <K,V>T setMap(int i,Map<K,V> v,TypeToken<K> keysType,TypeToken<V> valuesType){

  return setValue(i,codecFor(i,TypeTokens.mapOf(keysType,valuesType)).serialize(v,protocolVersion));

}

Location: AbstractData.java

Content: 

@Override public <K,V>T setMap(String name,Map<K,V> v){

  for (  int i : getAllIndexesOf(name)) {

    setMap(i,v);

  }

  return wrapped;

}

Location: AbstractData.java

Content: 

@Override public <K,V>T setMap(String name,Map<K,V> v,Class<K> keysClass,Class<V> valuesClass){

  for (  int i : getAllIndexesOf(name)) {

    setMap(i,v,keysClass,valuesClass);

  }

  return wrapped;

}

Location: AbstractData.java

Content: 

@Override public <K,V>T setMap(String name,Map<K,V> v,TypeToken<K> keysType,TypeToken<V> valuesType){

  for (  int i : getAllIndexesOf(name)) {

    setMap(i,v,keysType,valuesType);

  }

  return wrapped;

}

Location: AbstractData.java

Content: 

@Override @SuppressWarnings("unchecked") public <E>T setSet(int i,Set<E> v){

  return setValue(i,codecFor(i).serialize(v,protocolVersion));

}

Location: AbstractData.java

Content: 

@Override public <E>T setSet(int i,Set<E> v,Class<E> elementsClass){

  return setValue(i,codecFor(i,TypeTokens.setOf(elementsClass)).serialize(v,protocolVersion));

}

Location: AbstractData.java

Content: 

@Override public <E>T setSet(int i,Set<E> v,TypeToken<E> elementsType){

  return setValue(i,codecFor(i,TypeTokens.setOf(elementsType)).serialize(v,protocolVersion));

}

Location: AbstractData.java

Content: 

@Override public <E>T setSet(String name,Set<E> v){

  for (  int i : getAllIndexesOf(name)) {

    setSet(i,v);

  }

  return wrapped;

}

Location: AbstractData.java

Content: 

@Override public <E>T setSet(String name,Set<E> v,Class<E> elementsClass){

  for (  int i : getAllIndexesOf(name)) {

    setSet(i,v,elementsClass);

  }

  return wrapped;

}

Location: AbstractData.java

Content: 

@Override public <E>T setSet(String name,Set<E> v,TypeToken<E> elementsType){

  for (  int i : getAllIndexesOf(name)) {

    setSet(i,v,elementsType);

  }

  return wrapped;

}

Location: AbstractData.java

Content: 

@Override public T setShort(int i,short v){

  TypeCodec<Short> codec=codecFor(i,Short.class);

  ByteBuffer bb;

  if (codec instanceof TypeCodec.PrimitiveShortCodec)   bb=((TypeCodec.PrimitiveShortCodec)codec).serializeNoBoxing(v,protocolVersion);

 else   bb=codec.serialize(v,protocolVersion);

  return setValue(i,bb);

}

Location: AbstractData.java

Content: 

@Override public T setShort(String name,short v){

  for (  int i : getAllIndexesOf(name)) {

    setShort(i,v);

  }

  return wrapped;

}

Location: AbstractData.java

Content: 

@Override public T setString(int i,String v){

  return setValue(i,codecFor(i,String.class).serialize(v,protocolVersion));

}

Location: AbstractData.java

Content: 

@Override public T setString(String name,String v){

  for (  int i : getAllIndexesOf(name)) {

    setString(i,v);

  }

  return wrapped;

}

Location: AbstractData.java

Content: 

@Override public T setTimestamp(int i,Date v){

  return setValue(i,codecFor(i,Date.class).serialize(v,protocolVersion));

}

Location: AbstractData.java

Content: 

@Override public T setTimestamp(String name,Date v){

  for (  int i : getAllIndexesOf(name)) {

    setTimestamp(i,v);

  }

  return wrapped;

}

Location: AbstractData.java

Content: 

@Override public T setTime(int i,long v){

  TypeCodec<Long> codec=codecFor(i,Long.class);

  ByteBuffer bb;

  if (codec instanceof TypeCodec.PrimitiveLongCodec)   bb=((TypeCodec.PrimitiveLongCodec)codec).serializeNoBoxing(v,protocolVersion);

 else   bb=codec.serialize(v,protocolVersion);

  return setValue(i,bb);

}

Location: AbstractData.java

Content: 

@Override public T setTime(String name,long v){

  for (  int i : getAllIndexesOf(name)) {

    setTime(i,v);

  }

  return wrapped;

}

Location: AbstractData.java

Content: 

@Override public T setToNull(int i){

  return setValue(i,null);

}

Location: AbstractData.java

Content: 

@Override public T setToNull(String name){

  for (  int i : getAllIndexesOf(name)) {

    setToNull(i);

  }

  return wrapped;

}

Location: AbstractData.java

Content: 

@Override public T setTupleValue(int i,TupleValue v){

  return setValue(i,codecFor(i,TupleValue.class).serialize(v,protocolVersion));

}

Location: AbstractData.java

Content: 

@Override public T setTupleValue(String name,TupleValue v){

  for (  int i : getAllIndexesOf(name)) {

    setTupleValue(i,v);

  }

  return wrapped;

}

Location: AbstractData.java

Content: 

@Override public T setUDTValue(int i,UDTValue v){

  return setValue(i,codecFor(i,UDTValue.class).serialize(v,protocolVersion));

}

Location: AbstractData.java

Content: 

@Override public T setUDTValue(String name,UDTValue v){

  for (  int i : getAllIndexesOf(name)) {

    setUDTValue(i,v);

  }

  return wrapped;

}

Location: AbstractData.java

Content: 

@Override public T setUUID(int i,UUID v){

  return setValue(i,codecFor(i,UUID.class).serialize(v,protocolVersion));

}

Location: AbstractData.java

Content: 

@Override public T setUUID(String name,UUID v){

  for (  int i : getAllIndexesOf(name)) {

    setUUID(i,v);

  }

  return wrapped;

}

Location: AbstractData.java

Content: 

private T setValue(int i,ByteBuffer value){

  values[i]=value;

  return wrapped;

}

Location: AbstractData.java

Content: 

@Override public T setVarint(int i,BigInteger v){

  return setValue(i,codecFor(i,BigInteger.class).serialize(v,protocolVersion));

}

Location: AbstractData.java

Content: 

@Override public T setVarint(String name,BigInteger v){

  for (  int i : getAllIndexesOf(name)) {

    setVarint(i,v);

  }

  return wrapped;

}

Location: AbstractData.java

Content: 

@Override public <V>T set(int i,V v,Class<V> targetClass){

  return set(i,v,codecFor(i,targetClass));

}

Location: AbstractData.java

Content: 

@Override public <V>T set(int i,V v,TypeCodec<V> codec){

  checkType(i,codec.getCqlType().getName());

  return setValue(i,codec.serialize(v,protocolVersion));

}

Location: AbstractData.java

Content: 

@Override public <V>T set(int i,V v,TypeToken<V> targetType){

  return set(i,v,codecFor(i,targetType));

}

Location: AbstractData.java

Content: 

@Override public <V>T set(String name,V v,Class<V> targetClass){

  for (  int i : getAllIndexesOf(name)) {

    set(i,v,targetClass);

  }

  return wrapped;

}

Location: AbstractData.java

Content: 

@Override public <V>T set(String name,V v,TypeCodec<V> codec){

  for (  int i : getAllIndexesOf(name)) {

    set(i,v,codec);

  }

  return wrapped;

}

Location: AbstractData.java

Content: 

@Override public <V>T set(String name,V v,TypeToken<V> targetType){

  for (  int i : getAllIndexesOf(name)) {

    set(i,v,targetType);

  }

  return wrapped;

}

