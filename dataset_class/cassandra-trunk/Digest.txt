Location: Digest.java

Content: 

public byte[] digest(){

  return hasher.hash().asBytes();

}

Location: Digest.java

Content: 

Digest(Hasher hasher){

  this.hasher=hasher;

}

Location: Digest.java

Content: 

public static Digest forReadResponse(){

  return new Digest(md5());

}

Location: Digest.java

Content: 

public static Digest forRepairedDataTracking(){

  return new Digest(Hashing.crc32c().newHasher()){

    @Override public <V>Digest updateWithCounterContext(    V context,    ValueAccessor<V> accessor){

      if (CounterContext.instance().hasLegacyShards(context,accessor))       return this;

      return super.updateWithCounterContext(context,accessor);

    }

  }

;

}

Location: Digest.java

Content: 

public static Digest forSchema(){

  return new Digest(md5());

}

Location: Digest.java

Content: 

public static Digest forValidator(){

  return new Digest(Hashing.concatenating(Hashing.murmur3_128(1000),Hashing.murmur3_128(2000)).newHasher());

}

Location: Digest.java

Content: 

public long inputBytes(){

  return inputBytes;

}

Location: Digest.java

Content: 

@SuppressWarnings("deprecation") private static Hasher md5(){

  return Hashing.md5().newHasher();

}

Location: Digest.java

Content: 

public Digest updateWithBoolean(boolean val){

  updateWithByte(val ? 0 : 1);

  return this;

}

Location: Digest.java

Content: 

public Digest updateWithByte(int val){

  hasher.putByte((byte)(val & 0xFF));

  inputBytes++;

  return this;

}

Location: Digest.java

Content: 

/** 

 * Update the digest with the content of a counter context. Note that this skips the header entirely since the header information has local meaning only, while digests are meant for comparison across nodes. This means in particular that we always have: updateDigest(ctx) == updateDigest(clearAllLocal(ctx))

 */

public <V>Digest updateWithCounterContext(V context,ValueAccessor<V> accessor){

  if (accessor.isEmpty(context))   return this;

  int pos=CounterContext.headerLength(context,accessor);

  int len=accessor.size(context) - pos;

  accessor.digest(context,pos,len,this);

  return this;

}

Location: Digest.java

Content: 

public Digest updateWithInt(int val){

  hasher.putByte((byte)((val >>> 24) & 0xFF));

  hasher.putByte((byte)((val >>> 16) & 0xFF));

  hasher.putByte((byte)((val >>> 8) & 0xFF));

  hasher.putByte((byte)((val >>> 0) & 0xFF));

  inputBytes+=4;

  return this;

}

Location: Digest.java

Content: 

public Digest updateWithLong(long val){

  hasher.putByte((byte)((val >>> 56) & 0xFF));

  hasher.putByte((byte)((val >>> 48) & 0xFF));

  hasher.putByte((byte)((val >>> 40) & 0xFF));

  hasher.putByte((byte)((val >>> 32) & 0xFF));

  hasher.putByte((byte)((val >>> 24) & 0xFF));

  hasher.putByte((byte)((val >>> 16) & 0xFF));

  hasher.putByte((byte)((val >>> 8) & 0xFF));

  hasher.putByte((byte)((val >>> 0) & 0xFF));

  inputBytes+=8;

  return this;

}

Location: Digest.java

Content: 

/** 

 * Update the digest with the bytes from the supplied buffer. This does not modify the position of the supplied buffer, so callers are not required to duplicate() the source buffer before calling

 */

public Digest update(ByteBuffer input){

  return update(input,input.position(),input.remaining());

}

Location: Digest.java

Content: 

/** 

 * Update the digest with the bytes sliced from the supplied buffer. This does not modify the position of the supplied buffer, so callers are not required to duplicate() the source buffer before calling

 */

public Digest update(ByteBuffer input,int pos,int len){

  if (len <= 0)   return this;

  if (input.hasArray()) {

    byte[] b=input.array();

    int ofs=input.arrayOffset();

    hasher.putBytes(b,ofs + pos,len);

    inputBytes+=len;

  }

 else {

    byte[] tempArray=localBuffer.get();

    while (len > 0) {

      int chunk=Math.min(len,tempArray.length);

      FastByteOperations.copy(input,pos,tempArray,0,chunk);

      hasher.putBytes(tempArray,0,chunk);

      len-=chunk;

      pos+=chunk;

      inputBytes+=chunk;

    }

  }

  return this;

}

Location: Digest.java

Content: 

public Digest update(byte[] input,int offset,int len){

  hasher.putBytes(input,offset,len);

  inputBytes+=len;

  return this;

}

Location: Digest.java

Content: 

public <V>Digest update(V input,ValueAccessor<V> accessor){

  accessor.digest(input,this);

  return this;

}

