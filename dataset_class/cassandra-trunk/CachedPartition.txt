Location: CachedPartition.java

Content: 

/** 

 * The number of rows that were live at the time the partition was cached. See  {@link org.apache.cassandra.db.ColumnFamilyStore#isFilterFullyCoveredBy} to see why we need this.

 * @return the number of rows in this partition that were live at the time thepartition was cached (this can be different from the number of live rows now due to expiring cells).

 */

public int cachedLiveRows();

Location: CachedPartition.java

Content: 

/** 

 * The last row in this cached partition (in order words, the row with the biggest clustering that the partition contains).

 * @return the last row of the partition, or {@code null} if the partition is empty.

 */

public Row lastRow();

Location: CachedPartition.java

Content: 

/** 

 * The number of  {@code Row} objects in this cached partition.Please note that this is <b>not</b> the number of <em>live</em> rows since some of the row may only contains deleted (or expired) information.

 * @return the number of row in the partition.

 */

public int rowCount();

Location: CachedPartition.java

Content: 

/** 

 * The number of rows in this cached partition that have at least one non-expiring non-deleted cell. Note that this is generally not a very meaningful number, but this is used by {@link org.apache.cassandra.db.filter.DataLimits#hasEnoughLiveData} as an optimization.

 * @return the number of row that have at least one non-expiring non-deleted cell.

 */

public int rowsWithNonExpiringCells();

