Location: BootStrapper.java

Content: 

static Collection<Token> allocateTokens(final TokenMetadata metadata,InetAddressAndPort address,int rf,int numTokens,long schemaWaitDelay){

  StorageService.instance.waitForSchema(schemaWaitDelay);

  if (!FBUtilities.getBroadcastAddressAndPort().equals(InetAddressAndPort.getLoopbackAddress()))   Gossiper.waitToSettle();

  Collection<Token> tokens=TokenAllocation.allocateTokens(metadata,rf,address,numTokens);

  BootstrapDiagnostics.tokensAllocated(address,metadata,rf,numTokens,tokens);

  return tokens;

}

Location: BootStrapper.java

Content: 

static Collection<Token> allocateTokens(final TokenMetadata metadata,InetAddressAndPort address,String allocationKeyspace,int numTokens,long schemaWaitDelay){

  StorageService.instance.waitForSchema(schemaWaitDelay);

  if (!FBUtilities.getBroadcastAddressAndPort().equals(InetAddressAndPort.getLoopbackAddress()))   Gossiper.waitToSettle();

  Keyspace ks=Keyspace.open(allocationKeyspace);

  if (ks == null)   throw new ConfigurationException("Problem opening token allocation keyspace " + allocationKeyspace);

  AbstractReplicationStrategy rs=ks.getReplicationStrategy();

  Collection<Token> tokens=TokenAllocation.allocateTokens(metadata,rs,address,numTokens);

  BootstrapDiagnostics.tokensAllocated(address,metadata,allocationKeyspace,numTokens,tokens);

  return tokens;

}

Location: BootStrapper.java

Content: 

public BootStrapper(InetAddressAndPort address,Collection<Token> tokens,TokenMetadata tmd){

  assert address != null;

  assert tokens != null && !tokens.isEmpty();

  this.address=address;

  this.tokens=tokens;

  this.tokenMetadata=tmd;

}

Location: BootStrapper.java

Content: 

public ListenableFuture<StreamState> bootstrap(StreamStateStore stateStore,boolean useStrictConsistency){

  logger.trace("Beginning bootstrap process");

  RangeStreamer streamer=new RangeStreamer(tokenMetadata,tokens,address,StreamOperation.BOOTSTRAP,useStrictConsistency,DatabaseDescriptor.getEndpointSnitch(),stateStore,true,DatabaseDescriptor.getStreamingConnectionsPerHost());

  for (  String keyspaceName : Schema.instance.getNonLocalStrategyKeyspaces()) {

    AbstractReplicationStrategy strategy=Keyspace.open(keyspaceName).getReplicationStrategy();

    streamer.addRanges(keyspaceName,strategy.getPendingAddressRanges(tokenMetadata,tokens,address));

  }

  StreamResultFuture bootstrapStreamResult=streamer.fetchAsync();

  bootstrapStreamResult.addEventListener(new StreamEventHandler(){

    private final AtomicInteger receivedFiles=new AtomicInteger();

    private final AtomicInteger totalFilesToReceive=new AtomicInteger();

    @Override public void handleStreamEvent(    StreamEvent event){

switch (event.eventType) {

case STREAM_PREPARED:

        StreamEvent.SessionPreparedEvent prepared=(StreamEvent.SessionPreparedEvent)event;

      int currentTotal=totalFilesToReceive.addAndGet((int)prepared.session.getTotalFilesToReceive());

    ProgressEvent prepareProgress=new ProgressEvent(ProgressEventType.PROGRESS,receivedFiles.get(),currentTotal,"prepare with " + prepared.session.peer + " complete");

  fireProgressEvent("bootstrap",prepareProgress);

break;

case FILE_PROGRESS:

StreamEvent.ProgressEvent progress=(StreamEvent.ProgressEvent)event;

if (progress.progress.isCompleted()) {

int received=receivedFiles.incrementAndGet();

ProgressEvent currentProgress=new ProgressEvent(ProgressEventType.PROGRESS,received,totalFilesToReceive.get(),"received file " + progress.progress.fileName);

fireProgressEvent("bootstrap",currentProgress);

}

break;

case STREAM_COMPLETE:

StreamEvent.SessionCompleteEvent completeEvent=(StreamEvent.SessionCompleteEvent)event;

ProgressEvent completeProgress=new ProgressEvent(ProgressEventType.PROGRESS,receivedFiles.get(),totalFilesToReceive.get(),"session with " + completeEvent.peer + " complete");

fireProgressEvent("bootstrap",completeProgress);

break;

}

}

@Override public void onSuccess(StreamState streamState){

ProgressEventType type;

String message;

if (streamState.hasFailedSession()) {

type=ProgressEventType.ERROR;

message="Some bootstrap stream failed";

}

 else {

type=ProgressEventType.SUCCESS;

message="Bootstrap streaming success";

}

ProgressEvent currentProgress=new ProgressEvent(type,receivedFiles.get(),totalFilesToReceive.get(),message);

fireProgressEvent("bootstrap",currentProgress);

}

@Override public void onFailure(Throwable throwable){

ProgressEvent currentProgress=new ProgressEvent(ProgressEventType.ERROR,receivedFiles.get(),totalFilesToReceive.get(),throwable.getMessage());

fireProgressEvent("bootstrap",currentProgress);

}

}

);

return bootstrapStreamResult;

}

Location: BootStrapper.java

Content: 

/** 

 * if initialtoken was specified, use that (split on comma). otherwise, if allocationKeyspace is specified use the token allocation algorithm to generate suitable tokens else choose num_tokens tokens at random

 */

public static Collection<Token> getBootstrapTokens(final TokenMetadata metadata,InetAddressAndPort address,long schemaWaitDelay) throws ConfigurationException {

  String allocationKeyspace=DatabaseDescriptor.getAllocateTokensForKeyspace();

  Integer allocationLocalRf=DatabaseDescriptor.getAllocateTokensForLocalRf();

  Collection<String> initialTokens=DatabaseDescriptor.getInitialTokens();

  if (initialTokens.size() > 0 && allocationKeyspace != null)   logger.warn("manually specified tokens override automatic allocation");

  if (initialTokens.size() > 0) {

    Collection<Token> tokens=getSpecifiedTokens(metadata,initialTokens);

    BootstrapDiagnostics.useSpecifiedTokens(address,allocationKeyspace,tokens,DatabaseDescriptor.getNumTokens());

    return tokens;

  }

  int numTokens=DatabaseDescriptor.getNumTokens();

  if (numTokens < 1)   throw new ConfigurationException("num_tokens must be >= 1");

  if (allocationKeyspace != null)   return allocateTokens(metadata,address,allocationKeyspace,numTokens,schemaWaitDelay);

  if (allocationLocalRf != null)   return allocateTokens(metadata,address,allocationLocalRf,numTokens,schemaWaitDelay);

  if (numTokens == 1)   logger.warn("Picking random token for a single vnode.  You should probably add more vnodes and/or use the automatic token allocation mechanism.");

  Collection<Token> tokens=getRandomTokens(metadata,numTokens);

  BootstrapDiagnostics.useRandomTokens(address,metadata,numTokens,tokens);

  return tokens;

}

Location: BootStrapper.java

Content: 

public static Collection<Token> getRandomTokens(TokenMetadata metadata,int numTokens){

  Set<Token> tokens=new HashSet<>(numTokens);

  while (tokens.size() < numTokens) {

    Token token=metadata.partitioner.getRandomToken();

    if (metadata.getEndpoint(token) == null)     tokens.add(token);

  }

  logger.info("Generated random tokens. tokens are {}",tokens);

  return tokens;

}

Location: BootStrapper.java

Content: 

private static Collection<Token> getSpecifiedTokens(final TokenMetadata metadata,Collection<String> initialTokens){

  logger.info("tokens manually specified as {}",initialTokens);

  List<Token> tokens=new ArrayList<>(initialTokens.size());

  for (  String tokenString : initialTokens) {

    Token token=metadata.partitioner.getTokenFactory().fromString(tokenString);

    if (metadata.getEndpoint(token) != null)     throw new ConfigurationException("Bootstrapping to existing token " + tokenString + " is not allowed (decommission/removenode the old node first).");

    tokens.add(token);

  }

  return tokens;

}

