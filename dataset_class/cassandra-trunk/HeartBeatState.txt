Location: HeartBeatState.java

Content: 

public static HeartBeatState empty(){

  return new HeartBeatState(0,EMPTY_VERSION);

}

Location: HeartBeatState.java

Content: 

void forceHighestPossibleVersionUnsafe(){

  version=Integer.MAX_VALUE;

}

Location: HeartBeatState.java

Content: 

void forceNewerGenerationUnsafe(){

  generation+=1;

}

Location: HeartBeatState.java

Content: 

int getGeneration(){

  return generation;

}

Location: HeartBeatState.java

Content: 

int getHeartBeatVersion(){

  return version;

}

Location: HeartBeatState.java

Content: 

public HeartBeatState(HeartBeatState other){

  generation=other.generation;

  version=other.version;

}

Location: HeartBeatState.java

Content: 

HeartBeatState(int gen){

  this(gen,0);

}

Location: HeartBeatState.java

Content: 

public HeartBeatState(int gen,int ver){

  generation=gen;

  version=ver;

}

Location: HeartBeatState.java

Content: 

public long serializedSize(HeartBeatState state,int version){

  return TypeSizes.sizeof(state.getGeneration()) + TypeSizes.sizeof(state.getHeartBeatVersion());

}

Location: HeartBeatState.java

Content: 

public void serialize(HeartBeatState hbState,DataOutputPlus out,int version) throws IOException {

  out.writeInt(hbState.getGeneration());

  out.writeInt(hbState.getHeartBeatVersion());

}

Location: HeartBeatState.java

Content: 

void updateHeartBeat(){

  version=VersionGenerator.getNextVersion();

}

