Location: AbstractRow.java

Content: 

public void digest(Digest digest){

  digest.updateWithByte(kind().ordinal());

  clustering().digest(digest);

  deletion().digest(digest);

  primaryKeyLivenessInfo().digest(digest);

  apply(ColumnData::digest,digest);

}

Location: AbstractRow.java

Content: 

@Override public boolean hasLiveData(int nowInSec,boolean enforceStrictLiveness){

  if (primaryKeyLivenessInfo().isLive(nowInSec))   return true;

 else   if (enforceStrictLiveness)   return false;

  return Iterables.any(cells(),cell -> cell.isLive(nowInSec));

}

Location: AbstractRow.java

Content: 

public boolean isStatic(){

  return clustering() == Clustering.STATIC_CLUSTERING;

}

Location: AbstractRow.java

Content: 

public String toString(TableMetadata metadata){

  return toString(metadata,false);

}

Location: AbstractRow.java

Content: 

private <V>void validateClustering(TableMetadata metadata,Clustering<V> clustering){

  ValueAccessor<V> accessor=clustering.accessor();

  for (int i=0; i < clustering.size(); i++) {

    V value=clustering.get(i);

    if (value != null) {

      try {

        metadata.comparator.subtype(i).validate(value,accessor);

      }

 catch (      Exception e) {

        throw new MarshalException("comparator #" + i + " '"+ metadata.comparator.subtype(i)+ "' in '"+ metadata+ "' didn't validate",e);

      }

    }

  }

}

