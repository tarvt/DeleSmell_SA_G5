Location: OutboundSink.java

Content: 

public void accept(Message<?> message,InetAddressAndPort to,ConnectionType connectionType){

  sink.accept(message,to,connectionType);

}

Location: OutboundSink.java

Content: 

public void add(BiPredicate<Message<?>,InetAddressAndPort> allow){

  sinkUpdater.updateAndGet(this,sink -> new Filtered(allow,sink));

}

Location: OutboundSink.java

Content: 

private static Sink clear(Sink sink){

  while (sink instanceof OutboundSink.Filtered)   sink=((OutboundSink.Filtered)sink).next;

  return sink;

}

Location: OutboundSink.java

Content: 

OutboundSink(Sink sink){

  this.sink=sink;

}

Location: OutboundSink.java

Content: 

public void remove(BiPredicate<Message<?>,InetAddressAndPort> allow){

  sinkUpdater.updateAndGet(this,sink -> without(sink,allow));

}

Location: OutboundSink.java

Content: 

private static Sink without(Sink sink,BiPredicate<Message<?>,InetAddressAndPort> condition){

  if (!(sink instanceof Filtered))   return sink;

  Filtered filtered=(Filtered)sink;

  Sink next=without(filtered.next,condition);

  return condition.equals(filtered.condition) ? next : next == filtered.next ? sink : new Filtered(filtered.condition,next);

}

