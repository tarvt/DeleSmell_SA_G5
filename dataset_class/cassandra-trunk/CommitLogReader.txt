Location: CommitLogReader.java

Content: 

public CommitLogReader(){

  checksum=new CRC32();

  invalidMutations=new HashMap<>();

  buffer=new byte[4096];

}

Location: CommitLogReader.java

Content: 

static List<File> filterCommitLogFiles(File[] toFilter){

  List<File> filtered=new ArrayList<>(toFilter.length);

  for (  File file : toFilter) {

    try {

      if (shouldSkip(file)) {

        logger.info("Skipping playback of empty log: {}",file.getName());

      }

 else {

        filtered.add(file);

      }

    }

 catch (    Exception e) {

      filtered.add(file);

    }

  }

  return filtered;

}

Location: CommitLogReader.java

Content: 

public Set<Map.Entry<TableId,AtomicInteger>> getInvalidMutations(){

  return invalidMutations.entrySet();

}

Location: CommitLogReader.java

Content: 

/** 

 * Reads all passed in files with no minimum, no start, and no mutation limit.

 */

public void readAllFiles(CommitLogReadHandler handler,File[] files) throws IOException {

  readAllFiles(handler,files,CommitLogPosition.NONE);

}

Location: CommitLogReader.java

Content: 

/** 

 * Reads all passed in files with minPosition, no start, and no mutation limit.

 */

public void readAllFiles(CommitLogReadHandler handler,File[] files,CommitLogPosition minPosition) throws IOException {

  List<File> filteredLogs=filterCommitLogFiles(files);

  int i=0;

  for (  File file : filteredLogs) {

    i++;

    readCommitLogSegment(handler,file,minPosition,ALL_MUTATIONS,i == filteredLogs.size());

  }

}

Location: CommitLogReader.java

Content: 

/** 

 * Reads passed in file fully

 */

public void readCommitLogSegment(CommitLogReadHandler handler,File file,boolean tolerateTruncation) throws IOException {

  readCommitLogSegment(handler,file,CommitLogPosition.NONE,ALL_MUTATIONS,tolerateTruncation);

}

Location: CommitLogReader.java

Content: 

/** 

 * Reads all mutations from passed in file from minPosition

 */

public void readCommitLogSegment(CommitLogReadHandler handler,File file,CommitLogPosition minPosition,boolean tolerateTruncation) throws IOException {

  readCommitLogSegment(handler,file,minPosition,ALL_MUTATIONS,tolerateTruncation);

}

Location: CommitLogReader.java

Content: 

/** 

 * Reads mutations from file, handing them off to handler

 * @param handler Handler that will take action based on deserialized Mutations

 * @param file CommitLogSegment file to read

 * @param minPosition Optional minimum CommitLogPosition - all segments with id larger or matching w/greater position will be read

 * @param mutationLimit Optional limit on # of mutations to replay. Local ALL_MUTATIONS serves as marker to play all.

 * @param tolerateTruncation Whether or not we should allow truncation of this file or throw if EOF found

 * @throws IOException

 */

public void readCommitLogSegment(CommitLogReadHandler handler,File file,CommitLogPosition minPosition,int mutationLimit,boolean tolerateTruncation) throws IOException {

  CommitLogDescriptor desc=CommitLogDescriptor.fromFileName(file.getName());

  try (RandomAccessReader reader=RandomAccessReader.open(file)){

    final long segmentIdFromFilename=desc.id;

    try {

      desc=CommitLogDescriptor.readHeader(reader,DatabaseDescriptor.getEncryptionContext());

    }

 catch (    Exception e) {

      desc=null;

    }

    if (desc == null) {

      handler.handleUnrecoverableError(new CommitLogReadException(String.format("Could not read commit log descriptor in file %s",file),CommitLogReadErrorReason.UNRECOVERABLE_DESCRIPTOR_ERROR,tolerateTruncation));

      return;

    }

    if (segmentIdFromFilename != desc.id) {

      if (handler.shouldSkipSegmentOnError(new CommitLogReadException(String.format("Segment id mismatch (filename %d, descriptor %d) in file %s",segmentIdFromFilename,desc.id,file),CommitLogReadErrorReason.RECOVERABLE_DESCRIPTOR_ERROR,false))) {

        return;

      }

    }

    if (shouldSkipSegmentId(file,desc,minPosition))     return;

    CommitLogSegmentReader segmentReader;

    try {

      segmentReader=new CommitLogSegmentReader(handler,desc,reader,tolerateTruncation);

    }

 catch (    Exception e) {

      handler.handleUnrecoverableError(new CommitLogReadException(String.format("Unable to create segment reader for commit log file: %s",e),CommitLogReadErrorReason.UNRECOVERABLE_UNKNOWN_ERROR,tolerateTruncation));

      return;

    }

    try {

      ReadStatusTracker statusTracker=new ReadStatusTracker(mutationLimit,tolerateTruncation);

      for (      CommitLogSegmentReader.SyncSegment syncSegment : segmentReader) {

        statusTracker.tolerateErrorsInSection=tolerateTruncation & syncSegment.toleratesErrorsInSection;

        if (desc.id == minPosition.segmentId && syncSegment.endPosition < minPosition.position)         continue;

        statusTracker.errorContext=String.format("Next section at %d in %s",syncSegment.fileStartPosition,desc.fileName());

        readSection(handler,syncSegment.input,minPosition,syncSegment.endPosition,statusTracker,desc);

        if (!statusTracker.shouldContinue())         break;

      }

    }

 catch (    RuntimeException re) {

      if (re.getCause() instanceof IOException)       throw (IOException)re.getCause();

      throw re;

    }

    logger.info("Finished reading {}",file);

  }

 }

Location: CommitLogReader.java

Content: 

/** 

 * Reads passed in file fully, up to mutationLimit count

 */

@VisibleForTesting public void readCommitLogSegment(CommitLogReadHandler handler,File file,int mutationLimit,boolean tolerateTruncation) throws IOException {

  readCommitLogSegment(handler,file,CommitLogPosition.NONE,mutationLimit,tolerateTruncation);

}

Location: CommitLogReader.java

Content: 

/** 

 * Deserializes and passes a Mutation to the ICommitLogReadHandler requested

 * @param handler Handler that will take action based on deserialized Mutations

 * @param inputBuffer raw byte array w/Mutation data

 * @param size deserialized size of mutation

 * @param minPosition We need to suppress replay of mutations that are before the required minPosition

 * @param entryLocation filePointer offset of end of mutation within CommitLogSegment

 * @param desc CommitLogDescriptor being worked on

 */

@VisibleForTesting protected void readMutation(CommitLogReadHandler handler,byte[] inputBuffer,int size,CommitLogPosition minPosition,final int entryLocation,final CommitLogDescriptor desc) throws IOException {

  boolean shouldReplay=entryLocation > minPosition.position;

  final Mutation mutation;

  try (RebufferingInputStream bufIn=new DataInputBuffer(inputBuffer,0,size)){

    mutation=Mutation.serializer.deserialize(bufIn,desc.getMessagingVersion(),DeserializationHelper.Flag.LOCAL);

    for (    PartitionUpdate upd : mutation.getPartitionUpdates())     upd.validate();

  }

 catch (  UnknownTableException ex) {

    if (ex.id == null)     return;

    AtomicInteger i=invalidMutations.get(ex.id);

    if (i == null) {

      i=new AtomicInteger(1);

      invalidMutations.put(ex.id,i);

    }

 else     i.incrementAndGet();

    return;

  }

catch (  Throwable t) {

    JVMStabilityInspector.inspectThrowable(t);

    Path p=Files.createTempFile("mutation","dat");

    try (DataOutputStream out=new DataOutputStream(Files.newOutputStream(p))){

      out.write(inputBuffer,0,size);

    }

     handler.handleUnrecoverableError(new CommitLogReadException(String.format("Unexpected error deserializing mutation; saved to %s.  " + "This may be caused by replaying a mutation against a table with the same name but incompatible schema.  " + "Exception follows: %s",p.toString(),t),CommitLogReadErrorReason.MUTATION_ERROR,false));

    return;

  }

  if (logger.isTraceEnabled())   logger.trace("Read mutation for {}.{}: {}",mutation.getKeyspaceName(),mutation.key(),"{" + StringUtils.join(mutation.getPartitionUpdates().iterator(),", ") + "}");

  if (shouldReplay)   handler.handleMutation(mutation,size,entryLocation,desc);

}

Location: CommitLogReader.java

Content: 

/** 

 * Reads a section of a file containing mutations

 * @param handler Handler that will take action based on deserialized Mutations

 * @param reader FileDataInput / logical buffer containing commitlog mutations

 * @param minPosition CommitLogPosition indicating when we should start actively replaying mutations

 * @param end logical numeric end of the segment being read

 * @param statusTracker ReadStatusTracker with current state of mutation count, error state, etc

 * @param desc Descriptor for CommitLog serialization

 */

private void readSection(CommitLogReadHandler handler,FileDataInput reader,CommitLogPosition minPosition,int end,ReadStatusTracker statusTracker,CommitLogDescriptor desc) throws IOException {

  if (desc.id == minPosition.segmentId && reader.getFilePointer() < minPosition.position)   reader.seek(minPosition.position);

  while (statusTracker.shouldContinue() && reader.getFilePointer() < end && !reader.isEOF()) {

    long mutationStart=reader.getFilePointer();

    if (logger.isTraceEnabled())     logger.trace("Reading mutation at {}",mutationStart);

    long claimedCRC32;

    int serializedSize;

    try {

      if (end - reader.getFilePointer() < 4) {

        logger.trace("Not enough bytes left for another mutation in this CommitLog section, continuing");

        statusTracker.requestTermination();

        return;

      }

      serializedSize=reader.readInt();

      if (serializedSize == LEGACY_END_OF_SEGMENT_MARKER) {

        logger.trace("Encountered end of segment marker at {}",reader.getFilePointer());

        statusTracker.requestTermination();

        return;

      }

      if (serializedSize < 10) {

        if (handler.shouldSkipSegmentOnError(new CommitLogReadException(String.format("Invalid mutation size %d at %d in %s",serializedSize,mutationStart,statusTracker.errorContext),CommitLogReadErrorReason.MUTATION_ERROR,statusTracker.tolerateErrorsInSection))) {

          statusTracker.requestTermination();

        }

        return;

      }

      long claimedSizeChecksum=CommitLogFormat.calculateClaimedChecksum(reader,desc.version);

      checksum.reset();

      CommitLogFormat.updateChecksum(checksum,serializedSize,desc.version);

      if (checksum.getValue() != claimedSizeChecksum) {

        if (handler.shouldSkipSegmentOnError(new CommitLogReadException(String.format("Mutation size checksum failure at %d in %s",mutationStart,statusTracker.errorContext),CommitLogReadErrorReason.MUTATION_ERROR,statusTracker.tolerateErrorsInSection))) {

          statusTracker.requestTermination();

        }

        return;

      }

      if (serializedSize > buffer.length)       buffer=new byte[(int)(1.2 * serializedSize)];

      reader.readFully(buffer,0,serializedSize);

      claimedCRC32=CommitLogFormat.calculateClaimedCRC32(reader,desc.version);

    }

 catch (    EOFException eof) {

      if (handler.shouldSkipSegmentOnError(new CommitLogReadException(String.format("Unexpected end of segment at %d in %s",mutationStart,statusTracker.errorContext),CommitLogReadErrorReason.EOF,statusTracker.tolerateErrorsInSection))) {

        statusTracker.requestTermination();

      }

      return;

    }

    checksum.update(buffer,0,serializedSize);

    if (claimedCRC32 != checksum.getValue()) {

      if (handler.shouldSkipSegmentOnError(new CommitLogReadException(String.format("Mutation checksum failure at %d in %s",mutationStart,statusTracker.errorContext),CommitLogReadErrorReason.MUTATION_ERROR,statusTracker.tolerateErrorsInSection))) {

        statusTracker.requestTermination();

      }

      continue;

    }

    long mutationPosition=reader.getFilePointer();

    readMutation(handler,buffer,serializedSize,minPosition,(int)mutationPosition,desc);

    if (mutationPosition >= minPosition.position)     statusTracker.addProcessedMutation();

  }

}

Location: CommitLogReader.java

Content: 

/** 

 * Any segment with id >= minPosition.segmentId is a candidate for read.

 */

private boolean shouldSkipSegmentId(File file,CommitLogDescriptor desc,CommitLogPosition minPosition){

  logger.debug("Reading {} (CL version {}, messaging version {}, compression {})",file.getPath(),desc.version,desc.getMessagingVersion(),desc.compression);

  if (minPosition.segmentId > desc.id) {

    logger.trace("Skipping read of fully-flushed {}",file);

    return true;

  }

  return false;

}

Location: CommitLogReader.java

Content: 

private static boolean shouldSkip(File file) throws IOException, ConfigurationException {

  try (RandomAccessReader reader=RandomAccessReader.open(file)){

    CommitLogDescriptor.readHeader(reader,DatabaseDescriptor.getEncryptionContext());

    int end=reader.readInt();

    long filecrc=reader.readInt() & 0xffffffffL;

    return end == 0 && filecrc == 0;

  }

 }

