Location: StandardAnalyzer.java

Content: 

protected String getFilteredCurrentToken() throws IOException {

  String token=getToken();

  Object pipelineRes;

  while (true) {

    pipelineRes=FilterPipelineExecutor.execute(filterPipeline,token);

    if (pipelineRes != null)     break;

    boolean reachedEOF=incrementToken();

    if (!reachedEOF)     break;

    token=getToken();

  }

  return (String)pipelineRes;

}

Location: StandardAnalyzer.java

Content: 

public String getToken(){

  return scanner.getText();

}

Location: StandardAnalyzer.java

Content: 

public final boolean incrementToken() throws IOException {

  while (true) {

    TokenType currentTokenType=TokenType.fromValue(scanner.getNextToken());

    if (currentTokenType == TokenType.EOF)     return false;

    if (scanner.yylength() <= options.getMaxTokenLength() && scanner.yylength() >= options.getMinTokenLength())     return true;

  }

}

Location: StandardAnalyzer.java

Content: 

@VisibleForTesting protected void init(StandardTokenizerOptions options){

  init(options,UTF8Type.instance);

}

Location: StandardAnalyzer.java

Content: 

public void init(StandardTokenizerOptions tokenizerOptions,AbstractType validator){

  this.validator=validator;

  this.options=tokenizerOptions;

  this.filterPipeline=getFilterPipeline();

  Reader reader=new InputStreamReader(new DataInputBuffer(ByteBufferUtil.EMPTY_BYTE_BUFFER,false),StandardCharsets.UTF_8);

  this.scanner=new StandardTokenizerImpl(reader);

  this.inputReader=reader;

}

Location: StandardAnalyzer.java

Content: 

@VisibleForTesting public void reset(InputStream input){

  this.next=null;

  Reader reader=new InputStreamReader(input,StandardCharsets.UTF_8);

  scanner.yyreset(reader);

  this.inputReader=reader;

}

