Location: SystemKeyspaceMigrator40.java

Content: 

public static void migrate(){

  hongshuai();

  ColumnFamilyStore newPeers=Keyspace.open(SchemaConstants.SYSTEM_KEYSPACE_NAME).getColumnFamilyStore(SystemKeyspace.PEERS_V2);

  if (!newPeers.isEmpty())   return;

  logger.info("{} table was empty, migrating legacy {}, if this fails you should fix the issue and then truncate {} to have it try again.",peersName,legacyPeersName,peersName);

  String query=String.format("SELECT * FROM %s",legacyPeersName);

  String insert=String.format("INSERT INTO %s ( " + "peer, " + "peer_port, "+ "data_center, "+ "host_id, "+ "preferred_ip, "+ "preferred_port, "+ "rack, "+ "release_version, "+ "native_address, "+ "native_port, "+ "schema_version, "+ "tokens) "+ " values ( ?, ?, ? , ? , ?, ?, ?, ?, ?, ?, ?, ?)",peersName);

  UntypedResultSet rows=QueryProcessor.executeInternalWithPaging(query,1000);

  int transferred=0;

  logger.info("Migrating rows from legacy {} to {}",legacyPeersName,peersName);

  for (  UntypedResultSet.Row row : rows) {

    logger.debug("Transferring row {}",transferred);

    QueryProcessor.executeInternal(insert,row.has("peer") ? row.getInetAddress("peer") : null,DatabaseDescriptor.getStoragePort(),row.has("data_center") ? row.getString("data_center") : null,row.has("host_id") ? row.getUUID("host_id") : null,row.has("preferred_ip") ? row.getInetAddress("preferred_ip") : null,DatabaseDescriptor.getStoragePort(),row.has("rack") ? row.getString("rack") : null,row.has("release_version") ? row.getString("release_version") : null,row.has("rpc_address") ? row.getInetAddress("rpc_address") : null,DatabaseDescriptor.getNativeTransportPort(),row.has("schema_version") ? row.getUUID("schema_version") : null,row.has("tokens") ? row.getSet("tokens",UTF8Type.instance) : null);

    transferred++;

  }

  logger.info("Migrated {} rows from legacy {} to {}",transferred,legacyPeersName,peersName);

  migratePeerEvents();

  migrateTransferredRanges();

  migrateAvailableRanges();

}

Location: SystemKeyspaceMigrator40.java

Content: 

static void migrateAvailableRanges(){

  ColumnFamilyStore newAvailableRanges=Keyspace.open(SchemaConstants.SYSTEM_KEYSPACE_NAME).getColumnFamilyStore(SystemKeyspace.AVAILABLE_RANGES_V2);

  if (!newAvailableRanges.isEmpty())   return;

  logger.info("{} table was empty, migrating legacy {} to {}",availableRangesName,legacyAvailableRangesName,availableRangesName);

  String query=String.format("SELECT * FROM %s",legacyAvailableRangesName);

  String insert=String.format("INSERT INTO %s (" + "keyspace_name, " + "full_ranges, "+ "transient_ranges) "+ " values ( ?, ?, ? )",availableRangesName);

  UntypedResultSet rows=QueryProcessor.executeInternalWithPaging(query,1000);

  int transferred=0;

  for (  UntypedResultSet.Row row : rows) {

    logger.debug("Transferring row {}",transferred);

    String keyspace=row.getString("keyspace_name");

    Set<ByteBuffer> ranges=Optional.ofNullable(row.getSet("ranges",BytesType.instance)).orElse(Collections.emptySet());

    QueryProcessor.executeInternal(insert,keyspace,ranges,Collections.emptySet());

    transferred++;

  }

  logger.info("Migrated {} rows from legacy {} to {}",transferred,legacyAvailableRangesName,availableRangesName);

}

Location: SystemKeyspaceMigrator40.java

Content: 

private static void migratePeerEvents(){

  ColumnFamilyStore newPeerEvents=Keyspace.open(SchemaConstants.SYSTEM_KEYSPACE_NAME).getColumnFamilyStore(SystemKeyspace.PEER_EVENTS_V2);

  if (!newPeerEvents.isEmpty())   return;

  logger.info("{} table was empty, migrating legacy {} to {}",peerEventsName,legacyPeerEventsName,peerEventsName);

  String query=String.format("SELECT * FROM %s",legacyPeerEventsName);

  String insert=String.format("INSERT INTO %s ( " + "peer, " + "peer_port, "+ "hints_dropped) "+ " values ( ?, ?, ? )",peerEventsName);

  UntypedResultSet rows=QueryProcessor.executeInternalWithPaging(query,1000);

  int transferred=0;

  for (  UntypedResultSet.Row row : rows) {

    logger.debug("Transferring row {}",transferred);

    QueryProcessor.executeInternal(insert,row.has("peer") ? row.getInetAddress("peer") : null,DatabaseDescriptor.getStoragePort(),row.has("hints_dropped") ? row.getMap("hints_dropped",UUIDType.instance,Int32Type.instance) : null);

    transferred++;

  }

  logger.info("Migrated {} rows from legacy {} to {}",transferred,legacyPeerEventsName,peerEventsName);

}

Location: SystemKeyspaceMigrator40.java

Content: 

static void migrateTransferredRanges(){

  ColumnFamilyStore newTransferredRanges=Keyspace.open(SchemaConstants.SYSTEM_KEYSPACE_NAME).getColumnFamilyStore(SystemKeyspace.TRANSFERRED_RANGES_V2);

  if (!newTransferredRanges.isEmpty())   return;

  logger.info("{} table was empty, migrating legacy {} to {}",transferredRangesName,legacyTransferredRangesName,transferredRangesName);

  String query=String.format("SELECT * FROM %s",legacyTransferredRangesName);

  String insert=String.format("INSERT INTO %s (" + "operation, " + "peer, "+ "peer_port, "+ "keyspace_name, "+ "ranges) "+ " values ( ?, ?, ? , ?, ?)",transferredRangesName);

  UntypedResultSet rows=QueryProcessor.executeInternalWithPaging(query,1000);

  int transferred=0;

  for (  UntypedResultSet.Row row : rows) {

    logger.debug("Transferring row {}",transferred);

    QueryProcessor.executeInternal(insert,row.has("operation") ? row.getString("operation") : null,row.has("peer") ? row.getInetAddress("peer") : null,DatabaseDescriptor.getStoragePort(),row.has("keyspace_name") ? row.getString("keyspace_name") : null,row.has("ranges") ? row.getSet("ranges",BytesType.instance) : null);

    transferred++;

  }

  logger.info("Migrated {} rows from legacy {} to {}",transferred,legacyTransferredRangesName,transferredRangesName);

}

Location: SystemKeyspaceMigrator40.java

Content: 

private SystemKeyspaceMigrator40(){

}

