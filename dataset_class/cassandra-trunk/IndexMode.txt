Location: IndexMode.java

Content: 

public AbstractAnalyzer getAnalyzer(AbstractType<?> validator){

  AbstractAnalyzer analyzer=new NoOpAnalyzer();

  try {

    if (isAnalyzed) {

      if (analyzerClass != null)       analyzer=(AbstractAnalyzer)analyzerClass.newInstance();

 else       if (TOKENIZABLE_TYPES.contains(validator))       analyzer=new StandardAnalyzer();

    }

  }

 catch (  InstantiationException|IllegalAccessException e) {

    logger.error("Failed to create new instance of analyzer with class [{}]",analyzerClass.getName(),e);

  }

  return analyzer;

}

Location: IndexMode.java

Content: 

public static IndexMode getMode(ColumnMetadata column,Map<String,String> indexOptions) throws ConfigurationException {

  if (indexOptions == null || indexOptions.isEmpty())   return IndexMode.NOT_INDEXED;

  Mode mode;

  try {

    mode=indexOptions.get(INDEX_MODE_OPTION) == null ? Mode.PREFIX : Mode.mode(indexOptions.get(INDEX_MODE_OPTION));

  }

 catch (  IllegalArgumentException e) {

    throw new ConfigurationException("Incorrect index mode: " + indexOptions.get(INDEX_MODE_OPTION));

  }

  boolean isAnalyzed=false;

  Class analyzerClass=null;

  try {

    if (indexOptions.get(INDEX_ANALYZER_CLASS_OPTION) != null) {

      analyzerClass=Class.forName(indexOptions.get(INDEX_ANALYZER_CLASS_OPTION));

      isAnalyzed=indexOptions.get(INDEX_ANALYZED_OPTION) == null ? true : Boolean.parseBoolean(indexOptions.get(INDEX_ANALYZED_OPTION));

    }

 else     if (indexOptions.get(INDEX_ANALYZED_OPTION) != null) {

      isAnalyzed=Boolean.parseBoolean(indexOptions.get(INDEX_ANALYZED_OPTION));

    }

  }

 catch (  ClassNotFoundException e) {

    logger.error("Failed to find specified analyzer class [{}]. Falling back to default analyzer",indexOptions.get(INDEX_ANALYZER_CLASS_OPTION));

  }

  boolean isLiteral=false;

  try {

    String literalOption=indexOptions.get(INDEX_IS_LITERAL_OPTION);

    AbstractType<?> validator=column.cellValueType();

    isLiteral=literalOption == null ? (validator instanceof UTF8Type || validator instanceof AsciiType) : Boolean.parseBoolean(literalOption);

  }

 catch (  Exception e) {

    logger.error("failed to parse {} option, defaulting to 'false'.",INDEX_IS_LITERAL_OPTION);

  }

  long maxMemBytes=indexOptions.get(INDEX_MAX_FLUSH_MEMORY_OPTION) == null ? DEFAULT_MAX_MEM_BYTES : 1048576L * Long.parseLong(indexOptions.get(INDEX_MAX_FLUSH_MEMORY_OPTION));

  if (maxMemBytes > 100L * 1073741824) {

    logger.error("{} configured as {} is above 100GB, reverting to default 1GB",INDEX_MAX_FLUSH_MEMORY_OPTION,maxMemBytes);

    maxMemBytes=DEFAULT_MAX_MEM_BYTES;

  }

  return new IndexMode(mode,isLiteral,isAnalyzed,analyzerClass,maxMemBytes);

}

Location: IndexMode.java

Content: 

public static IndexMode getMode(ColumnMetadata column,Optional<IndexMetadata> config) throws ConfigurationException {

  return getMode(column,config.isPresent() ? config.get().options : null);

}

Location: IndexMode.java

Content: 

private IndexMode(Mode mode,boolean isLiteral,boolean isAnalyzed,Class analyzerClass,long maxMemBytes){

  this.mode=mode;

  this.isLiteral=isLiteral;

  this.isAnalyzed=isAnalyzed;

  this.analyzerClass=analyzerClass;

  this.maxCompactionFlushMemoryInBytes=maxMemBytes;

}

Location: IndexMode.java

Content: 

public boolean supports(Op operator){

  return mode.supports(operator);

}

Location: IndexMode.java

Content: 

public static void validateAnalyzer(Map<String,String> indexOptions,ColumnMetadata cd) throws ConfigurationException {

  if (indexOptions.containsKey(INDEX_ANALYZER_CLASS_OPTION)) {

    Class<?> analyzerClass;

    try {

      analyzerClass=Class.forName(indexOptions.get(INDEX_ANALYZER_CLASS_OPTION));

    }

 catch (    ClassNotFoundException e) {

      throw new ConfigurationException(String.format("Invalid analyzer class option specified [%s]",indexOptions.get(INDEX_ANALYZER_CLASS_OPTION)));

    }

    AbstractAnalyzer analyzer;

    try {

      analyzer=(AbstractAnalyzer)analyzerClass.newInstance();

      if (!analyzer.isCompatibleWith(cd.type))       throw new ConfigurationException(String.format("%s does not support type %s",analyzerClass.getSimpleName(),cd.type.asCQL3Type()));

    }

 catch (    InstantiationException|IllegalAccessException e) {

      throw new ConfigurationException(String.format("Unable to initialize analyzer class option specified [%s]",analyzerClass.getSimpleName()));

    }

  }

}

