Location: StatementRestrictions.java

Content: 

private void addRestriction(Restriction restriction){

  ColumnMetadata def=restriction.getFirstColumn();

  if (def.isPartitionKey())   partitionKeyRestrictions=partitionKeyRestrictions.mergeWith(restriction);

 else   if (def.isClusteringColumn())   clusteringColumnsRestrictions=clusteringColumnsRestrictions.mergeWith(restriction);

 else   nonPrimaryKeyRestrictions=nonPrimaryKeyRestrictions.addRestriction((SingleRestriction)restriction);

}

Location: StatementRestrictions.java

Content: 

/** 

 * Checks if restrictions on the clustering key have IN restrictions.

 * @return <code>true</code> if the restrictions on the clustering key have IN restrictions,<code>false</code> otherwise.

 */

public boolean clusteringKeyRestrictionsHasIN(){

  return clusteringColumnsRestrictions.hasIN();

}

Location: StatementRestrictions.java

Content: 

/** 

 * Creates a new empty <code>StatementRestrictions</code>.

 * @param type the type of statement

 * @param table the column family meta data

 * @return a new empty <code>StatementRestrictions</code>.

 */

public static StatementRestrictions empty(StatementType type,TableMetadata table){

  return new StatementRestrictions(type,table,false);

}

Location: StatementRestrictions.java

Content: 

/** 

 * Returns the bounds (start or end) of the clustering columns.

 * @param b the bound type

 * @param options the query options

 * @return the bounds (start or end) of the clustering columns

 */

public NavigableSet<ClusteringBound<?>> getClusteringColumnsBounds(Bound b,QueryOptions options){

  return clusteringColumnsRestrictions.boundsAsClustering(b,options);

}

Location: StatementRestrictions.java

Content: 

/** 

 * Returns the requested clustering columns.

 * @param options the query options

 * @return the requested clustering columns

 */

public NavigableSet<Clustering<?>> getClusteringColumns(QueryOptions options){

  if (table.isStaticCompactTable())   return BTreeSet.empty(table.comparator);

  return clusteringColumnsRestrictions.valuesAsClustering(options);

}

Location: StatementRestrictions.java

Content: 

public IndexRestrictions getIndexRestrictions(){

  return filterRestrictions;

}

Location: StatementRestrictions.java

Content: 

private AbstractBounds<PartitionPosition> getPartitionKeyBoundsForTokenRestrictions(IPartitioner p,QueryOptions options){

  Token startToken=getTokenBound(Bound.START,options,p);

  Token endToken=getTokenBound(Bound.END,options,p);

  boolean includeStart=partitionKeyRestrictions.isInclusive(Bound.START);

  boolean includeEnd=partitionKeyRestrictions.isInclusive(Bound.END);

  int cmp=startToken.compareTo(endToken);

  if (!startToken.isMinimum() && !endToken.isMinimum() && (cmp > 0 || (cmp == 0 && (!includeStart || !includeEnd))))   return null;

  PartitionPosition start=includeStart ? startToken.minKeyBound() : startToken.maxKeyBound();

  PartitionPosition end=includeEnd ? endToken.maxKeyBound() : endToken.minKeyBound();

  return new Range<>(start,end);

}

Location: StatementRestrictions.java

Content: 

private AbstractBounds<PartitionPosition> getPartitionKeyBounds(IPartitioner p,QueryOptions options){

  if (partitionKeyRestrictions.needFiltering(table))   return new Range<>(p.getMinimumToken().minKeyBound(),p.getMinimumToken().maxKeyBound());

  ByteBuffer startKeyBytes=getPartitionKeyBound(Bound.START,options);

  ByteBuffer finishKeyBytes=getPartitionKeyBound(Bound.END,options);

  PartitionPosition startKey=PartitionPosition.ForKey.get(startKeyBytes,p);

  PartitionPosition finishKey=PartitionPosition.ForKey.get(finishKeyBytes,p);

  if (startKey.compareTo(finishKey) > 0 && !finishKey.isMinimum())   return null;

  if (partitionKeyRestrictions.isInclusive(Bound.START)) {

    return partitionKeyRestrictions.isInclusive(Bound.END) ? new Bounds<>(startKey,finishKey) : new IncludingExcludingBounds<>(startKey,finishKey);

  }

  return partitionKeyRestrictions.isInclusive(Bound.END) ? new Range<>(startKey,finishKey) : new ExcludingBounds<>(startKey,finishKey);

}

Location: StatementRestrictions.java

Content: 

/** 

 * Returns the partition key bounds.

 * @param options the query options

 * @return the partition key bounds

 */

public AbstractBounds<PartitionPosition> getPartitionKeyBounds(QueryOptions options){

  IPartitioner p=table.partitioner;

  if (partitionKeyRestrictions.isOnToken()) {

    return getPartitionKeyBoundsForTokenRestrictions(p,options);

  }

  return getPartitionKeyBounds(p,options);

}

Location: StatementRestrictions.java

Content: 

/** 

 * Returns the specified bound of the partition key.

 * @param b the boundary type

 * @param options the query options

 * @return the specified bound of the partition key

 */

private ByteBuffer getPartitionKeyBound(Bound b,QueryOptions options){

  return partitionKeyRestrictions.bounds(b,options).get(0);

}

Location: StatementRestrictions.java

Content: 

/** 

 * Returns the partition keys for which the data is requested.

 * @param options the query options

 * @return the partition keys for which the data is requested.

 */

public List<ByteBuffer> getPartitionKeys(final QueryOptions options){

  return partitionKeyRestrictions.values(options);

}

Location: StatementRestrictions.java

Content: 

/** 

 * Returns the partition key components that are not restricted.

 * @return the partition key components that are not restricted.

 */

private Collection<ColumnIdentifier> getPartitionKeyUnrestrictedComponents(){

  List<ColumnMetadata> list=new ArrayList<>(table.partitionKeyColumns());

  list.removeAll(partitionKeyRestrictions.getColumnDefs());

  return ColumnMetadata.toIdentifiers(list);

}

Location: StatementRestrictions.java

Content: 

public RowFilter getRowFilter(IndexRegistry indexRegistry,QueryOptions options){

  if (filterRestrictions.isEmpty())   return RowFilter.NONE;

  RowFilter filter=RowFilter.create();

  for (  Restrictions restrictions : filterRestrictions.getRestrictions())   restrictions.addRowFilterTo(filter,indexRegistry,options);

  for (  CustomIndexExpression expression : filterRestrictions.getCustomIndexExpressions())   expression.addToRowFilter(filter,table,options);

  return filter;

}

Location: StatementRestrictions.java

Content: 

private Token getTokenBound(Bound b,QueryOptions options,IPartitioner p){

  if (!partitionKeyRestrictions.hasBound(b))   return p.getMinimumToken();

  ByteBuffer value=partitionKeyRestrictions.bounds(b,options).get(0);

  checkNotNull(value,"Invalid null token value");

  return p.getTokenFactory().fromByteArray(value);

}

Location: StatementRestrictions.java

Content: 

/** 

 * Returns the clustering columns that are not restricted.

 * @return the clustering columns that are not restricted.

 */

private Collection<ColumnIdentifier> getUnrestrictedClusteringColumns(){

  List<ColumnMetadata> missingClusteringColumns=new ArrayList<>(table.clusteringColumns());

  missingClusteringColumns.removeAll(new LinkedList<>(clusteringColumnsRestrictions.getColumnDefs()));

  return ColumnMetadata.toIdentifiers(missingClusteringColumns);

}

Location: StatementRestrictions.java

Content: 

/** 

 * Checks that all the primary key columns (partition key and clustering columns) are restricted by an equality relation ('=' or 'IN').

 * @return <code>true</code> if all the primary key columns are restricted by an equality relation.

 */

public boolean hasAllPKColumnsRestrictedByEqualities(){

  return !isPartitionKeyRestrictionsOnToken() && !partitionKeyRestrictions.hasUnrestrictedPartitionKeyComponents(table) && (partitionKeyRestrictions.hasOnlyEqualityRestrictions())&& !hasUnrestrictedClusteringColumns()&& (clusteringColumnsRestrictions.hasOnlyEqualityRestrictions());

}

Location: StatementRestrictions.java

Content: 

/** 

 * Checks if the query has some restrictions on the clustering columns.

 * @return <code>true</code> if the query has some restrictions on the clustering columns,<code>false</code> otherwise.

 */

public boolean hasClusteringColumnsRestrictions(){

  return !clusteringColumnsRestrictions.isEmpty();

}

Location: StatementRestrictions.java

Content: 

/** 

 * Checks if the restrictions contain any non-primary key restrictions

 * @return <code>true</code> if the restrictions contain any non-primary key restrictions, <code>false</code> otherwise.

 */

public boolean hasNonPrimaryKeyRestrictions(){

  return !nonPrimaryKeyRestrictions.isEmpty();

}

Location: StatementRestrictions.java

Content: 

public boolean hasPartitionKeyRestrictions(){

  return !partitionKeyRestrictions.isEmpty();

}

Location: StatementRestrictions.java

Content: 

/** 

 * Checks if one of the restrictions applies to a regular column.

 * @return {@code true} if one of the restrictions applies to a regular column, {@code false} otherwise.

 */

public boolean hasRegularColumnsRestrictions(){

  return hasRegularColumnsRestrictions;

}

Location: StatementRestrictions.java

Content: 

/** 

 * Checks if some clustering columns are not restricted.

 * @return <code>true</code> if some clustering columns are not restricted, <code>false</code> otherwise.

 */

private boolean hasUnrestrictedClusteringColumns(){

  return table.clusteringColumns().size() != clusteringColumnsRestrictions.size();

}

Location: StatementRestrictions.java

Content: 

/** 

 * Checks if the query returns a range of columns.

 * @return <code>true</code> if the query returns a range of columns, <code>false</code> otherwise.

 */

public boolean isColumnRange(){

  int numberOfClusteringColumns=table.clusteringColumns().size();

  if (table.isStaticCompactTable()) {

    numberOfClusteringColumns=0;

  }

  return clusteringColumnsRestrictions.size() < numberOfClusteringColumns || !clusteringColumnsRestrictions.hasOnlyEqualityRestrictions();

}

Location: StatementRestrictions.java

Content: 

/** 

 * Checks if the specified column is restricted by an EQ restriction.

 * @param columnDef the column definition

 * @return <code>true</code> if the specified column is restricted by an EQ restiction, <code>false</code>otherwise.

 */

public boolean isColumnRestrictedByEq(ColumnMetadata columnDef){

  Set<Restriction> restrictions=getRestrictions(columnDef.kind).getRestrictions(columnDef);

  return restrictions.stream().filter(SingleRestriction.class::isInstance).anyMatch(p -> ((SingleRestriction)p).isEQ());

}

Location: StatementRestrictions.java

Content: 

/** 

 * Checks if the query request a range of partition keys.

 * @return <code>true</code> if the query request a range of partition keys, <code>false</code> otherwise.

 */

public boolean isKeyRange(){

  return this.isKeyRange;

}

Location: StatementRestrictions.java

Content: 

/** 

 * Checks if the restrictions on the partition key are token restrictions.

 * @return <code>true</code> if the restrictions on the partition key are token restrictions,<code>false</code> otherwise.

 */

public boolean isPartitionKeyRestrictionsOnToken(){

  return partitionKeyRestrictions.isOnToken();

}

Location: StatementRestrictions.java

Content: 

/** 

 * @return true if column is restricted by some restriction, false otherwise

 */

public boolean isRestricted(ColumnMetadata column){

  if (notNullColumns.contains(column))   return true;

  return getRestrictions(column.kind).getColumnDefs().contains(column);

}

Location: StatementRestrictions.java

Content: 

/** 

 * Checks if the restrictions on the partition key has IN restrictions.

 * @return <code>true</code> the restrictions on the partition key has an IN restriction, <code>false</code>otherwise.

 */

public boolean keyIsInRelation(){

  return partitionKeyRestrictions.hasIN();

}

Location: StatementRestrictions.java

Content: 

/** 

 * Checks if the query need to use filtering.

 * @return <code>true</code> if the query need to use filtering, <code>false</code> otherwise.

 */

public boolean needFiltering(){

  int numberOfRestrictions=filterRestrictions.getCustomIndexExpressions().size();

  for (  Restrictions restrictions : filterRestrictions.getRestrictions())   numberOfRestrictions+=restrictions.size();

  return numberOfRestrictions > 1 || (numberOfRestrictions == 0 && !clusteringColumnsRestrictions.isEmpty()) || (numberOfRestrictions != 0 && nonPrimaryKeyRestrictions.hasMultipleContains());

}

Location: StatementRestrictions.java

Content: 

/** 

 * Returns the non-PK column that are restricted.  If includeNotNullRestrictions is true, columns that are restricted by an IS NOT NULL restriction will be included, otherwise they will not be included (unless another restriction applies to them).

 */

public Set<ColumnMetadata> nonPKRestrictedColumns(boolean includeNotNullRestrictions){

  Set<ColumnMetadata> columns=new HashSet<>();

  for (  Restrictions r : filterRestrictions.getRestrictions()) {

    for (    ColumnMetadata def : r.getColumnDefs())     if (!def.isPrimaryKeyColumn())     columns.add(def);

  }

  if (includeNotNullRestrictions) {

    for (    ColumnMetadata def : notNullColumns) {

      if (!def.isPrimaryKeyColumn())       columns.add(def);

    }

  }

  return columns;

}

Location: StatementRestrictions.java

Content: 

/** 

 * @return the set of columns that have an IS NOT NULL restriction on them

 */

public Set<ColumnMetadata> notNullColumns(){

  return notNullColumns;

}

Location: StatementRestrictions.java

Content: 

/** 

 * Processes the clustering column restrictions.

 * @param hasQueriableIndex <code>true</code> if some of the queried data are indexed, <code>false</code> otherwise

 * @param selectsOnlyStaticColumns <code>true</code> if the selected or modified columns are all statics,<code>false</code> otherwise.

 */

private void processClusteringColumnsRestrictions(boolean hasQueriableIndex,boolean selectsOnlyStaticColumns,boolean forView,boolean allowFiltering){

  checkFalse(!type.allowClusteringColumnSlices() && clusteringColumnsRestrictions.hasSlice(),"Slice restrictions are not supported on the clustering columns in %s statements",type);

  if (!type.allowClusteringColumnSlices() && (!table.isCompactTable() || (table.isCompactTable() && !hasClusteringColumnsRestrictions()))) {

    if (!selectsOnlyStaticColumns && hasUnrestrictedClusteringColumns())     throw invalidRequest("Some clustering keys are missing: %s",Joiner.on(", ").join(getUnrestrictedClusteringColumns()));

  }

 else {

    checkFalse(clusteringColumnsRestrictions.hasContains() && !hasQueriableIndex && !allowFiltering,"Clustering columns can only be restricted with CONTAINS with a secondary index or filtering");

    if (hasClusteringColumnsRestrictions() && clusteringColumnsRestrictions.needFiltering()) {

      if (hasQueriableIndex || forView) {

        usesSecondaryIndexing=true;

      }

 else       if (!allowFiltering) {

        List<ColumnMetadata> clusteringColumns=table.clusteringColumns();

        List<ColumnMetadata> restrictedColumns=new LinkedList<>(clusteringColumnsRestrictions.getColumnDefs());

        for (int i=0, m=restrictedColumns.size(); i < m; i++) {

          ColumnMetadata clusteringColumn=clusteringColumns.get(i);

          ColumnMetadata restrictedColumn=restrictedColumns.get(i);

          if (!clusteringColumn.equals(restrictedColumn)) {

            throw invalidRequest("PRIMARY KEY column \"%s\" cannot be restricted as preceding column \"%s\" is not restricted",restrictedColumn.name,clusteringColumn.name);

          }

        }

      }

    }

  }

}

Location: StatementRestrictions.java

Content: 

private void processCustomIndexExpressions(List<CustomIndexExpression> expressions,VariableSpecifications boundNames,IndexRegistry indexRegistry){

  if (expressions.size() > 1)   throw new InvalidRequestException(IndexRestrictions.MULTIPLE_EXPRESSIONS);

  CustomIndexExpression expression=expressions.get(0);

  QualifiedName name=expression.targetIndex;

  if (name.hasKeyspace() && !name.getKeyspace().equals(table.keyspace))   throw IndexRestrictions.invalidIndex(expression.targetIndex,table);

  if (!table.indexes.has(expression.targetIndex.getName()))   throw IndexRestrictions.indexNotFound(expression.targetIndex,table);

  Index index=indexRegistry.getIndex(table.indexes.get(expression.targetIndex.getName()).get());

  if (!index.getIndexMetadata().isCustom())   throw IndexRestrictions.nonCustomIndexInExpression(expression.targetIndex);

  AbstractType<?> expressionType=index.customExpressionValueType();

  if (expressionType == null)   throw IndexRestrictions.customExpressionNotSupported(expression.targetIndex);

  expression.prepareValue(table,expressionType,boundNames);

  filterRestrictions.add(expression);

}

Location: StatementRestrictions.java

Content: 

private void processPartitionKeyRestrictions(boolean hasQueriableIndex,boolean allowFiltering,boolean forView){

  if (!type.allowPartitionKeyRanges()) {

    checkFalse(partitionKeyRestrictions.isOnToken(),"The token function cannot be used in WHERE clauses for %s statements",type);

    if (partitionKeyRestrictions.hasUnrestrictedPartitionKeyComponents(table))     throw invalidRequest("Some partition key parts are missing: %s",Joiner.on(", ").join(getPartitionKeyUnrestrictedComponents()));

    checkFalse(partitionKeyRestrictions.hasSlice(),"Only EQ and IN relation are supported on the partition key (unless you use the token() function)" + " for %s statements",type);

  }

 else {

    if (partitionKeyRestrictions.isOnToken())     isKeyRange=true;

    if (partitionKeyRestrictions.isEmpty() && partitionKeyRestrictions.hasUnrestrictedPartitionKeyComponents(table)) {

      isKeyRange=true;

      usesSecondaryIndexing=hasQueriableIndex;

    }

    if (partitionKeyRestrictions.needFiltering(table)) {

      if (!allowFiltering && !forView && !hasQueriableIndex)       throw new InvalidRequestException(REQUIRES_ALLOW_FILTERING_MESSAGE);

      if (partitionKeyRestrictions.hasIN())       throw new InvalidRequestException("IN restrictions are not supported when the query involves filtering");

      isKeyRange=true;

      usesSecondaryIndexing=hasQueriableIndex;

    }

  }

}

Location: StatementRestrictions.java

Content: 

private StatementRestrictions(StatementType type,TableMetadata table,boolean allowFiltering){

  this.type=type;

  this.table=table;

  this.partitionKeyRestrictions=new PartitionKeySingleRestrictionSet(table.partitionKeyAsClusteringComparator());

  this.clusteringColumnsRestrictions=new ClusteringColumnRestrictions(table,allowFiltering);

  this.nonPrimaryKeyRestrictions=new RestrictionSet();

  this.notNullColumns=new HashSet<>();

}

Location: StatementRestrictions.java

Content: 

public StatementRestrictions(StatementType type,TableMetadata table,WhereClause whereClause,VariableSpecifications boundNames,boolean selectsOnlyStaticColumns,boolean allowFiltering,boolean forView){

  this(type,table,whereClause,boundNames,selectsOnlyStaticColumns,type.allowUseOfSecondaryIndices(),allowFiltering,forView);

}

Location: StatementRestrictions.java

Content: 

public StatementRestrictions(StatementType type,TableMetadata table,WhereClause whereClause,VariableSpecifications boundNames,boolean selectsOnlyStaticColumns,boolean allowUseOfSecondaryIndices,boolean allowFiltering,boolean forView){

  this(type,table,allowFiltering);

  IndexRegistry indexRegistry=null;

  if (type.allowUseOfSecondaryIndices())   indexRegistry=IndexRegistry.obtain(table);

  for (  Relation relation : whereClause.relations) {

    if (relation.operator() == Operator.IS_NOT) {

      if (!forView)       throw new InvalidRequestException("Unsupported restriction: " + relation);

      this.notNullColumns.addAll(relation.toRestriction(table,boundNames).getColumnDefs());

    }

 else     if (relation.isLIKE()) {

      Restriction restriction=relation.toRestriction(table,boundNames);

      if (!type.allowUseOfSecondaryIndices() || !restriction.hasSupportingIndex(indexRegistry))       throw new InvalidRequestException(String.format("LIKE restriction is only supported on properly " + "indexed columns. %s is not valid.",relation.toString()));

      addRestriction(restriction);

    }

 else {

      addRestriction(relation.toRestriction(table,boundNames));

    }

  }

  hasRegularColumnsRestrictions=nonPrimaryKeyRestrictions.hasRestrictionFor(ColumnMetadata.Kind.REGULAR);

  boolean hasQueriableClusteringColumnIndex=false;

  boolean hasQueriableIndex=false;

  if (allowUseOfSecondaryIndices) {

    if (whereClause.containsCustomExpressions())     processCustomIndexExpressions(whereClause.expressions,boundNames,indexRegistry);

    hasQueriableClusteringColumnIndex=clusteringColumnsRestrictions.hasSupportingIndex(indexRegistry);

    hasQueriableIndex=!filterRestrictions.getCustomIndexExpressions().isEmpty() || hasQueriableClusteringColumnIndex || partitionKeyRestrictions.hasSupportingIndex(indexRegistry)|| nonPrimaryKeyRestrictions.hasSupportingIndex(indexRegistry);

  }

  processPartitionKeyRestrictions(hasQueriableIndex,allowFiltering,forView);

  if (usesSecondaryIndexing || partitionKeyRestrictions.needFiltering(table))   filterRestrictions.add(partitionKeyRestrictions);

  if (selectsOnlyStaticColumns && hasClusteringColumnsRestrictions()) {

    if (type.isDelete() || type.isUpdate())     throw invalidRequest("Invalid restrictions on clustering columns since the %s statement modifies only static columns",type);

    if (type.isSelect())     throw invalidRequest("Cannot restrict clustering columns when selecting only static columns");

  }

  processClusteringColumnsRestrictions(hasQueriableIndex,selectsOnlyStaticColumns,forView,allowFiltering);

  if (isKeyRange && hasQueriableClusteringColumnIndex)   usesSecondaryIndexing=true;

  if (usesSecondaryIndexing || clusteringColumnsRestrictions.needFiltering())   filterRestrictions.add(clusteringColumnsRestrictions);

  if (!nonPrimaryKeyRestrictions.isEmpty()) {

    if (!type.allowNonPrimaryKeyInWhereClause()) {

      Collection<ColumnIdentifier> nonPrimaryKeyColumns=ColumnMetadata.toIdentifiers(nonPrimaryKeyRestrictions.getColumnDefs());

      throw invalidRequest("Non PRIMARY KEY columns found in where clause: %s ",Joiner.on(", ").join(nonPrimaryKeyColumns));

    }

    if (hasQueriableIndex)     usesSecondaryIndexing=true;

 else     if (!allowFiltering)     throw invalidRequest(StatementRestrictions.REQUIRES_ALLOW_FILTERING_MESSAGE);

    filterRestrictions.add(nonPrimaryKeyRestrictions);

  }

  if (usesSecondaryIndexing)   validateSecondaryIndexSelections();

}

Location: StatementRestrictions.java

Content: 

/** 

 * Checks if the secondary index need to be queried.

 * @return <code>true</code> if the secondary index need to be queried, <code>false</code> otherwise.

 */

public boolean usesSecondaryIndexing(){

  return this.usesSecondaryIndexing;

}

Location: StatementRestrictions.java

Content: 

private void validateSecondaryIndexSelections(){

  checkFalse(keyIsInRelation(),"Select on indexed columns and with IN clause for the PRIMARY KEY are not supported");

}

