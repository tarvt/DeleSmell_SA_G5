Location: PendingRepairHolder.java

Content: 

public Iterable<PendingRepairManager> getManagers(){

  return managers;

}

Location: PendingRepairHolder.java

Content: 

AbstractCompactionTask getNextRepairFinishedTask(){

  List<TaskSupplier> repairFinishedSuppliers=getRepairFinishedTaskSuppliers();

  if (!repairFinishedSuppliers.isEmpty()) {

    Collections.sort(repairFinishedSuppliers);

    for (    TaskSupplier supplier : repairFinishedSuppliers) {

      AbstractCompactionTask task=supplier.getTask();

      if (task != null)       return task;

    }

  }

  return null;

}

Location: PendingRepairHolder.java

Content: 

private ArrayList<TaskSupplier> getRepairFinishedTaskSuppliers(){

  ArrayList<TaskSupplier> suppliers=new ArrayList<>(managers.size());

  for (  PendingRepairManager manager : managers) {

    int numPending=manager.getNumPendingRepairFinishedTasks();

    if (numPending > 0) {

      suppliers.add(new TaskSupplier(numPending,manager::getNextRepairFinishedTask));

    }

  }

  return suppliers;

}

Location: PendingRepairHolder.java

Content: 

Iterable<AbstractCompactionStrategy> getStrategiesFor(UUID session){

  List<AbstractCompactionStrategy> strategies=new ArrayList<>(managers.size());

  for (  PendingRepairManager manager : managers) {

    AbstractCompactionStrategy strategy=manager.get(session);

    if (strategy != null)     strategies.add(strategy);

  }

  return strategies;

}

Location: PendingRepairHolder.java

Content: 

public boolean hasDataForSession(UUID sessionID){

  return Iterables.any(managers,prm -> prm.hasDataForSession(sessionID));

}

Location: PendingRepairHolder.java

Content: 

public PendingRepairHolder(ColumnFamilyStore cfs,DestinationRouter router,boolean isTransient){

  super(cfs,router);

  this.isTransient=isTransient;

}

