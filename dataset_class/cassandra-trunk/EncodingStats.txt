Location: EncodingStats.java

Content: 

public EncodingStats(long minTimestamp,int minLocalDeletionTime,int minTTL){

  this.minTimestamp=minTimestamp == LivenessInfo.NO_TIMESTAMP ? TIMESTAMP_EPOCH : minTimestamp;

  this.minLocalDeletionTime=minLocalDeletionTime == LivenessInfo.NO_EXPIRATION_TIME ? DELETION_TIME_EPOCH : minLocalDeletionTime;

  this.minTTL=minTTL;

}

Location: EncodingStats.java

Content: 

/** 

 * Merge this stats with another one. <p> The comments of  {@link SerializationHeader#make} applies here too, i.e. the result ofmerging will be not totally accurate but we can live with that.

 */

public EncodingStats mergeWith(EncodingStats that){

  long minTimestamp=this.minTimestamp == TIMESTAMP_EPOCH ? that.minTimestamp : (that.minTimestamp == TIMESTAMP_EPOCH ? this.minTimestamp : Math.min(this.minTimestamp,that.minTimestamp));

  int minDelTime=this.minLocalDeletionTime == DELETION_TIME_EPOCH ? that.minLocalDeletionTime : (that.minLocalDeletionTime == DELETION_TIME_EPOCH ? this.minLocalDeletionTime : Math.min(this.minLocalDeletionTime,that.minLocalDeletionTime));

  int minTTL=this.minTTL == TTL_EPOCH ? that.minTTL : (that.minTTL == TTL_EPOCH ? this.minTTL : Math.min(this.minTTL,that.minTTL));

  return new EncodingStats(minTimestamp,minDelTime,minTTL);

}

Location: EncodingStats.java

Content: 

/** 

 * Merge one or more EncodingStats, that are lazily materialized from some list of arbitrary type by the provided function

 */

public static <V,F extends Function<V,EncodingStats>>EncodingStats merge(List<V> values,F function){

  if (values.size() == 1)   return function.apply(values.get(0));

  Collector collector=new Collector();

  for (int i=0, isize=values.size(); i < isize; i++) {

    V v=values.get(i);

    EncodingStats stats=function.apply(v);

    if (stats.minTimestamp != TIMESTAMP_EPOCH)     collector.updateTimestamp(stats.minTimestamp);

    if (stats.minLocalDeletionTime != DELETION_TIME_EPOCH)     collector.updateLocalDeletionTime(stats.minLocalDeletionTime);

    if (stats.minTTL != TTL_EPOCH)     collector.updateTTL(stats.minTTL);

  }

  return collector.get();

}

