Location: LogReplica.java

Content: 

static LogReplica create(File directory,String fileName){

  int folderFD=NativeLibrary.tryOpenDirectory(directory.getPath());

  if (folderFD == -1 && !FBUtilities.isWindows)   throw new FSReadError(new IOException(String.format("Invalid folder descriptor trying to create log replica %s",directory.getPath())),directory.getPath());

  return new LogReplica(new File(fileName),folderFD);

}

Location: LogReplica.java

Content: 

void delete(){

  LogTransaction.delete(file);

  syncDirectory();

}

Location: LogReplica.java

Content: 

File file(){

  return file;

}

Location: LogReplica.java

Content: 

String getDirectory(){

  return file.getParent();

}

Location: LogReplica.java

Content: 

LogReplica(File file,int directoryDescriptor){

  this.file=file;

  this.directoryDescriptor=directoryDescriptor;

}

Location: LogReplica.java

Content: 

private void printLineWithAnyError(StringBuilder str,String line){

  str.append('\t');

  str.append(line);

  str.append(System.lineSeparator());

  String error=errors.get(line);

  if (error != null) {

    str.append("\t\t***");

    str.append(error);

    str.append(System.lineSeparator());

  }

}

Location: LogReplica.java

Content: 

List<String> readLines(){

  return FileUtils.readLines(file);

}

Location: LogReplica.java

Content: 

void setError(String line,String error){

  errors.put(line,error);

}

Location: LogReplica.java

Content: 

void syncDirectory(){

  try {

    if (directoryDescriptor >= 0)     NativeLibrary.trySync(directoryDescriptor);

  }

 catch (  FSError e) {

    logger.error("Failed to sync directory descriptor {}",directoryDescriptor,e);

    FileUtils.handleFSErrorAndPropagate(e);

  }

}

