Location: Bounds.java

Content: 

public Bounds(T left,T right){

  super(left,right);

  assert !strictlyWrapsAround(left,right) : "[" + left + ","+ right+ "]";

}

Location: Bounds.java

Content: 

/** 

 * Retrieves non-overlapping bounds for the list of input bounds Assume we have the following bounds (brackets representing left/right bound): [   ] [   ]    [   ]   [  ] [   ]         [       ] This method will return the following bounds: [         ]    [          ]

 * @param bounds unsorted bounds to find overlaps

 * @return the non-overlapping bounds

 */

public static <T extends RingPosition<T>>Set<Bounds<T>> getNonOverlappingBounds(Iterable<Bounds<T>> bounds){

  ArrayList<Bounds<T>> sortedBounds=Lists.newArrayList(bounds);

  Collections.sort(sortedBounds,new Comparator<Bounds<T>>(){

    public int compare(    Bounds<T> o1,    Bounds<T> o2){

      return o1.left.compareTo(o2.left);

    }

  }

);

  Set<Bounds<T>> nonOverlappingBounds=Sets.newHashSet();

  PeekingIterator<Bounds<T>> it=Iterators.peekingIterator(sortedBounds.iterator());

  while (it.hasNext()) {

    Bounds<T> beginBound=it.next();

    Bounds<T> endBound=beginBound;

    while (it.hasNext() && endBound.right.compareTo(it.peek().left) >= 0)     endBound=it.next();

    nonOverlappingBounds.add(new Bounds<>(beginBound.left,endBound.right));

  }

  return nonOverlappingBounds;

}

Location: Bounds.java

Content: 

public boolean intersects(Bounds<T> that){

  return contains(that.left) || contains(that.right) || that.contains(left);

}

Location: Bounds.java

Content: 

public static <T extends RingPosition<T>>boolean isInBounds(T token,Iterable<Bounds<T>> bounds){

  assert bounds != null;

  for (  Bounds<T> bound : bounds) {

    if (bound.contains(token)) {

      return true;

    }

  }

  return false;

}

Location: Bounds.java

Content: 

/** 

 * Compute a bounds of keys corresponding to a given bounds of token.

 */

public static Bounds<PartitionPosition> makeRowBounds(Token left,Token right){

  return new Bounds<PartitionPosition>(left.minKeyBound(),right.maxKeyBound());

}

