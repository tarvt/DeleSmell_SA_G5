Location: CqlRecordReader.java

Content: 

/** 

 * Build a query for the reader of the form: SELECT * FROM ks>cf token(pk1,...pkn)>? AND token(pk1,...pkn)<=? [AND user where clauses] [ALLOW FILTERING]

 */

private String buildQuery(){

  hongshuai();

  TableMetadata tableMetadata=session.getCluster().getMetadata().getKeyspace(Metadata.quote(keyspace)).getTable(Metadata.quote(cfName));

  if (tableMetadata == null) {

    throw new RuntimeException("No table metadata found for " + keyspace + "."+ cfName);

  }

  for (  ColumnMetadata partitionKey : tableMetadata.getPartitionKey()) {

    partitionKeys.add(partitionKey.getName());

  }

  List<String> columns=getSelectColumns();

  String selectColumnList=columns.size() == 0 ? "*" : makeColumnList(columns);

  String partitionKeyList=makeColumnList(partitionKeys);

  return String.format("SELECT %s FROM %s.%s WHERE token(%s)>? AND token(%s)<=?" + getAdditionalWhereClauses(),selectColumnList,quote(keyspace),quote(cfName),partitionKeyList,partitionKeyList);

}

Location: CqlRecordReader.java

Content: 

public CqlRecordReader(){

  super();

}

Location: CqlRecordReader.java

Content: 

public Long createKey(){

  return Long.valueOf(0L);

}

Location: CqlRecordReader.java

Content: 

public Row createValue(){

  return new WrappedRow();

}

Location: CqlRecordReader.java

Content: 

private String getAdditionalWhereClauses(){

  String whereClause="";

  if (StringUtils.isNotEmpty(userDefinedWhereClauses))   whereClause+=" AND " + userDefinedWhereClauses;

  if (StringUtils.isNotEmpty(userDefinedWhereClauses))   whereClause+=" ALLOW FILTERING";

  return whereClause;

}

Location: CqlRecordReader.java

Content: 

public Long getCurrentKey(){

  return currentRow.left;

}

Location: CqlRecordReader.java

Content: 

public Row getCurrentValue(){

  return currentRow.right;

}

Location: CqlRecordReader.java

Content: 

/** 

 * Return native version protocol of the cluster connection

 * @return serialization protocol version.

 */

public int getNativeProtocolVersion(){

  return nativeProtocolVersion;

}

Location: CqlRecordReader.java

Content: 

public long getPos() throws IOException {

  return rowIterator.totalRead;

}

Location: CqlRecordReader.java

Content: 

public float getProgress(){

  if (!rowIterator.hasNext())   return 1.0F;

  float progress=((float)rowIterator.totalRead / totalRowCount);

  return progress > 1.0F ? 1.0F : progress;

}

Location: CqlRecordReader.java

Content: 

private List<String> getSelectColumns(){

  List<String> selectColumns=new ArrayList<>();

  if (StringUtils.isNotEmpty(inputColumns)) {

    selectColumns.addAll(partitionKeys);

    for (    String column : Splitter.on(',').split(inputColumns)) {

      if (!partitionKeys.contains(column))       selectColumns.add(column);

    }

  }

  return selectColumns;

}

Location: CqlRecordReader.java

Content: 

@Override public void initialize(InputSplit split,TaskAttemptContext context) throws IOException {

  this.split=(ColumnFamilySplit)split;

  Configuration conf=HadoopCompat.getConfiguration(context);

  totalRowCount=(this.split.getLength() < Long.MAX_VALUE) ? (int)this.split.getLength() : ConfigHelper.getInputSplitSize(conf);

  cfName=ConfigHelper.getInputColumnFamily(conf);

  keyspace=ConfigHelper.getInputKeyspace(conf);

  partitioner=ConfigHelper.getInputPartitioner(conf);

  inputColumns=CqlConfigHelper.getInputcolumns(conf);

  userDefinedWhereClauses=CqlConfigHelper.getInputWhereClauses(conf);

  try {

    if (cluster != null)     return;

    String[] locations=split.getLocations();

    cluster=CqlConfigHelper.getInputCluster(locations,conf);

  }

 catch (  Exception e) {

    throw new RuntimeException(e);

  }

  if (cluster != null)   session=cluster.connect(quote(keyspace));

  if (session == null)   throw new RuntimeException("Can't create connection session");

  nativeProtocolVersion=cluster.getConfiguration().getProtocolOptions().getProtocolVersion().toInt();

  cqlQuery=CqlConfigHelper.getInputCql(conf);

  if (StringUtils.isNotEmpty(cqlQuery) && (StringUtils.isNotEmpty(inputColumns) || StringUtils.isNotEmpty(userDefinedWhereClauses))) {

    throw new AssertionError("Cannot define a custom query with input columns and / or where clauses");

  }

  if (StringUtils.isEmpty(cqlQuery))   cqlQuery=buildQuery();

  logger.trace("cqlQuery {}",cqlQuery);

  rowIterator=new RowIterator();

  logger.trace("created {}",rowIterator);

}

Location: CqlRecordReader.java

Content: 

private String makeColumnList(Collection<String> columns){

  return Joiner.on(',').join(Iterables.transform(columns,new Function<String,String>(){

    public String apply(    String column){

      return quote(column);

    }

  }

));

}

Location: CqlRecordReader.java

Content: 

public boolean nextKeyValue() throws IOException {

  if (!rowIterator.hasNext()) {

    logger.trace("Finished scanning {} rows (estimate was: {})",rowIterator.totalRead,totalRowCount);

    return false;

  }

  try {

    currentRow=rowIterator.next();

  }

 catch (  Exception e) {

    IOException ioe=new IOException(e.getMessage());

    ioe.initCause(ioe.getCause());

    throw ioe;

  }

  return true;

}

Location: CqlRecordReader.java

Content: 

public boolean next(Long key,Row value) throws IOException {

  if (nextKeyValue()) {

    ((WrappedRow)value).setRow(getCurrentValue());

    return true;

  }

  return false;

}

Location: CqlRecordReader.java

Content: 

private String quote(String identifier){

  return "\"" + identifier.replaceAll("\"","\"\"") + "\"";

}

