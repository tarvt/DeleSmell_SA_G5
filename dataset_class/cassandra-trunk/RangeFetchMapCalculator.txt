Location: RangeFetchMapCalculator.java

Content: 

/** 

 * Create edges with infinite capacity b/w range vertex and all its source endpoints which clear the filters

 * @param capacityGraph The Capacity graph on which changes are made

 * @param rangeVertex The range for which we need to add all its source endpoints

 * @param localDCCheck Should add source endpoints from local DC only

 * @return If we were able to add atleast one source for this range after applying filters to endpoints

 */

private boolean addEndpoints(MutableCapacityGraph<Vertex,Integer> capacityGraph,RangeVertex rangeVertex,boolean localDCCheck){

  boolean sourceFound=false;

  Replicas.temporaryAssertFull(rangesWithSources.get(rangeVertex.getRange()));

  for (  Replica replica : rangesWithSources.get(rangeVertex.getRange())) {

    if (passFilters(replica,localDCCheck)) {

      sourceFound=true;

      if (replica.isSelf())       continue;

      final Vertex endpointVertex=new EndpointVertex(replica.endpoint());

      capacityGraph.insertVertex(rangeVertex);

      capacityGraph.insertVertex(endpointVertex);

      capacityGraph.addEdge(rangeVertex,endpointVertex,Integer.MAX_VALUE);

    }

  }

  return sourceFound;

}

Location: RangeFetchMapCalculator.java

Content: 

/** 

 * Add source and destination vertices. Add edges of capacity 1 b/w source and range vertices. Also add edges b/w endpoint vertices and destination vertex with capacity of 'destinationCapacity'

 * @param graph Graph to work on

 * @param destinationCapacity The capacity for edges b/w endpoint vertices and destination

 */

private void addSourceAndDestination(MutableCapacityGraph<Vertex,Integer> graph,int destinationCapacity){

  graph.insertVertex(sourceVertex);

  graph.insertVertex(destinationVertex);

  for (  Vertex vertex : graph.getVertices()) {

    if (vertex.isRangeVertex()) {

      graph.addEdge(sourceVertex,vertex,1);

    }

 else     if (vertex.isEndpointVertex()) {

      graph.addEdge(vertex,destinationVertex,destinationCapacity);

    }

  }

}

Location: RangeFetchMapCalculator.java

Content: 

/** 

 * Find the initial capacity which we want to use b/w machine vertices and destination to keep things optimal

 * @param graph Graph to work on

 * @return  The initial capacity

 */

private int getDestinationLinkCapacity(MutableCapacityGraph<Vertex,Integer> graph){

  double endpointVertices=0;

  double rangeVertices=0;

  for (  Vertex vertex : graph.getVertices()) {

    if (vertex.isEndpointVertex()) {

      endpointVertices++;

    }

 else     if (vertex.isRangeVertex()) {

      rangeVertices++;

    }

  }

  return (int)Math.ceil(rangeVertices / endpointVertices);

}

Location: RangeFetchMapCalculator.java

Content: 

/** 

 * Generate a graph with all ranges and endpoints as vertices. It will create edges b/w a range and its filtered source endpoints It will try to use sources from local DC if possible

 * @return  The generated graph

 */

private MutableCapacityGraph<Vertex,Integer> getGraph(){

  MutableCapacityGraph<Vertex,Integer> capacityGraph=MutableCapacityGraph.create();

  for (  Range<Token> range : rangesWithSources.keySet()) {

    if (trivialRanges.contains(range)) {

      logger.debug("Not optimising trivial range {} for keyspace {}",range,keyspace);

      continue;

    }

    final RangeVertex rangeVertex=new RangeVertex(range);

    boolean sourceFound=addEndpoints(capacityGraph,rangeVertex,true);

    if (!sourceFound) {

      logger.info("Using other DC endpoints for streaming for range: {} and keyspace {}",range,keyspace);

      sourceFound=addEndpoints(capacityGraph,rangeVertex,false);

    }

    if (!sourceFound)     throw new IllegalStateException("Unable to find sufficient sources for streaming range " + range + " in keyspace "+ keyspace);

  }

  return capacityGraph;

}

Location: RangeFetchMapCalculator.java

Content: 

public Multimap<InetAddressAndPort,Range<Token>> getRangeFetchMap(){

  Multimap<InetAddressAndPort,Range<Token>> fetchMap=HashMultimap.create();

  fetchMap.putAll(getRangeFetchMapForNonTrivialRanges());

  fetchMap.putAll(getRangeFetchMapForTrivialRanges(fetchMap));

  return fetchMap;

}

Location: RangeFetchMapCalculator.java

Content: 

@VisibleForTesting Multimap<InetAddressAndPort,Range<Token>> getRangeFetchMapForNonTrivialRanges(){

  MutableCapacityGraph<Vertex,Integer> graph=getGraph();

  addSourceAndDestination(graph,getDestinationLinkCapacity(graph));

  int flow=0;

  MaximumFlowAlgorithmResult<Integer,CapacityEdge<Vertex,Integer>> result=null;

  while (flow < getTotalRangeVertices(graph)) {

    if (flow > 0) {

      incrementCapacity(graph,1);

    }

    MaximumFlowAlgorithm fordFulkerson=FordFulkersonAlgorithm.getInstance(DFSPathFinder.getInstance());

    result=fordFulkerson.calc(graph,sourceVertex,destinationVertex,IntegerNumberSystem.getInstance());

    int newFlow=result.calcTotalFlow();

    assert newFlow > flow;

    flow=newFlow;

  }

  return getRangeFetchMapFromGraphResult(graph,result);

}

Location: RangeFetchMapCalculator.java

Content: 

@VisibleForTesting Multimap<InetAddressAndPort,Range<Token>> getRangeFetchMapForTrivialRanges(Multimap<InetAddressAndPort,Range<Token>> optimisedMap){

  Multimap<InetAddressAndPort,Range<Token>> fetchMap=HashMultimap.create();

  for (  Range<Token> trivialRange : trivialRanges) {

    boolean added=false;

    boolean localDCCheck=true;

    while (!added) {

      EndpointsForRange replicas=rangesWithSources.get(trivialRange).sorted(Comparator.comparingInt(o -> optimisedMap.get(o.endpoint()).size()));

      Replicas.temporaryAssertFull(replicas);

      for (      Replica replica : replicas) {

        if (passFilters(replica,localDCCheck)) {

          added=true;

          if (replica.isSelf())           continue;

          fetchMap.put(replica.endpoint(),trivialRange);

          break;

        }

      }

      if (!added && !localDCCheck)       throw new IllegalStateException("Unable to find sufficient sources for streaming range " + trivialRange + " in keyspace "+ keyspace);

      if (!added)       logger.info("Using other DC endpoints for streaming for range: {} and keyspace {}",trivialRange,keyspace);

      localDCCheck=false;

    }

  }

  return fetchMap;

}

Location: RangeFetchMapCalculator.java

Content: 

/** 

 * Convert the max flow graph to Multimap<InetAddress, Range<Token>> We iterate over all range vertices and find an edge with flow of more than zero connecting to endpoint vertex.

 * @param graph  The graph to convert

 * @param result Flow algorithm result

 * @return  Multi Map of Machine to Ranges

 */

private Multimap<InetAddressAndPort,Range<Token>> getRangeFetchMapFromGraphResult(MutableCapacityGraph<Vertex,Integer> graph,MaximumFlowAlgorithmResult<Integer,CapacityEdge<Vertex,Integer>> result){

  final Multimap<InetAddressAndPort,Range<Token>> rangeFetchMapMap=HashMultimap.create();

  if (result == null)   return rangeFetchMapMap;

  final Function<CapacityEdge<Vertex,Integer>,Integer> flowFunction=result.calcFlowFunction();

  for (  Vertex vertex : graph.getVertices()) {

    if (vertex.isRangeVertex()) {

      boolean sourceFound=false;

      for (      CapacityEdge<Vertex,Integer> e : graph.getEdges(vertex)) {

        if (flowFunction.get(e) > 0) {

          assert !sourceFound;

          sourceFound=true;

          if (e.to().isEndpointVertex())           rangeFetchMapMap.put(((EndpointVertex)e.to()).getEndpoint(),((RangeVertex)vertex).getRange());

 else           if (e.from().isEndpointVertex())           rangeFetchMapMap.put(((EndpointVertex)e.from()).getEndpoint(),((RangeVertex)vertex).getRange());

        }

      }

      assert sourceFound;

    }

  }

  return rangeFetchMapMap;

}

Location: RangeFetchMapCalculator.java

Content: 

private int getTotalRangeVertices(MutableCapacityGraph<Vertex,Integer> graph){

  int count=0;

  for (  Vertex vertex : graph.getVertices()) {

    if (vertex.isRangeVertex()) {

      count++;

    }

  }

  return count;

}

Location: RangeFetchMapCalculator.java

Content: 

/** 

 * This will increase the capacity from endpoint vertices to destination by incrementalCapacity

 * @param graph The graph to work on

 * @param incrementalCapacity Amount by which to increment capacity

 */

private void incrementCapacity(MutableCapacityGraph<Vertex,Integer> graph,int incrementalCapacity){

  for (  Vertex vertex : graph.getVertices()) {

    if (vertex.isEndpointVertex()) {

      graph.addEdge(vertex,destinationVertex,incrementalCapacity);

    }

  }

}

Location: RangeFetchMapCalculator.java

Content: 

private boolean isInLocalDC(Replica replica){

  return DatabaseDescriptor.getLocalDataCenter().equals(DatabaseDescriptor.getEndpointSnitch().getDatacenter(replica));

}

Location: RangeFetchMapCalculator.java

Content: 

static boolean isTrivial(Range<Token> range){

  IPartitioner partitioner=DatabaseDescriptor.getPartitioner();

  if (partitioner.splitter().isPresent()) {

    BigInteger l=partitioner.splitter().get().valueForToken(range.left);

    BigInteger r=partitioner.splitter().get().valueForToken(range.right);

    if (r.compareTo(l) <= 0)     return false;

    if (r.subtract(l).compareTo(BigInteger.valueOf(TRIVIAL_RANGE_LIMIT)) < 0)     return true;

  }

  return false;

}

Location: RangeFetchMapCalculator.java

Content: 

/** 

 * @param replica   Replica to check

 * @param localDCCheck Allow endpoints with local DC

 * @return   True if filters pass this endpoint

 */

private boolean passFilters(final Replica replica,boolean localDCCheck){

  return sourceFilters.apply(replica) && (!localDCCheck || isInLocalDC(replica));

}

Location: RangeFetchMapCalculator.java

Content: 

public RangeFetchMapCalculator(EndpointsByRange rangesWithSources,Collection<RangeStreamer.SourceFilter> sourceFilters,String keyspace){

  this.rangesWithSources=rangesWithSources;

  this.sourceFilters=Predicates.and(sourceFilters);

  this.keyspace=keyspace;

  this.trivialRanges=rangesWithSources.keySet().stream().filter(RangeFetchMapCalculator::isTrivial).collect(Collectors.toSet());

}

