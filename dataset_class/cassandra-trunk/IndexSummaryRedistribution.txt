Location: IndexSummaryRedistribution.java

Content: 

/** 

 * Add hooks to correctly update the storage load metrics once the transaction is closed/aborted

 */

@SuppressWarnings("resource") private void addHooks(ColumnFamilyStore cfs,Map<TableId,LifecycleTransaction> transactions,long oldSize,long newSize){

  LifecycleTransaction txn=transactions.get(cfs.metadata.id);

  txn.runOnCommit(() -> {

    StorageMetrics.load.dec(oldSize);

    cfs.metric.liveDiskSpaceUsed.dec(oldSize);

    cfs.metric.totalDiskSpaceUsed.dec(oldSize);

  }

);

  txn.runOnAbort(() -> {

    long delta=oldSize - newSize;

    StorageMetrics.load.dec(delta);

    cfs.metric.liveDiskSpaceUsed.dec(delta);

    cfs.metric.totalDiskSpaceUsed.dec(delta);

  }

);

}

Location: IndexSummaryRedistribution.java

Content: 

private List<SSTableReader> adjustSamplingLevels(List<SSTableReader> sstables,Map<TableId,LifecycleTransaction> transactions,double totalReadsPerSec,long memoryPoolCapacity) throws IOException {

  List<ResampleEntry> toDownsample=new ArrayList<>(sstables.size() / 4);

  List<ResampleEntry> toUpsample=new ArrayList<>(sstables.size() / 4);

  List<ResampleEntry> forceResample=new ArrayList<>();

  List<ResampleEntry> forceUpsample=new ArrayList<>();

  List<SSTableReader> newSSTables=new ArrayList<>(sstables.size());

  remainingSpace=memoryPoolCapacity;

  for (  SSTableReader sstable : sstables) {

    if (isStopRequested())     throw new CompactionInterruptedException(getCompactionInfo());

    int minIndexInterval=sstable.metadata().params.minIndexInterval;

    int maxIndexInterval=sstable.metadata().params.maxIndexInterval;

    double readsPerSec=sstable.getReadMeter() == null ? 0.0 : sstable.getReadMeter().fifteenMinuteRate();

    long idealSpace=Math.round(remainingSpace * (readsPerSec / totalReadsPerSec));

    int currentNumEntries=sstable.getIndexSummarySize();

    double avgEntrySize=sstable.getIndexSummaryOffHeapSize() / (double)currentNumEntries;

    long targetNumEntries=Math.max(1,Math.round(idealSpace / avgEntrySize));

    int currentSamplingLevel=sstable.getIndexSummarySamplingLevel();

    int maxSummarySize=sstable.getMaxIndexSummarySize();

    if (sstable.getMinIndexInterval() != minIndexInterval) {

      int effectiveSamplingLevel=(int)Math.round(currentSamplingLevel * (minIndexInterval / (double)sstable.getMinIndexInterval()));

      maxSummarySize=(int)Math.round(maxSummarySize * (sstable.getMinIndexInterval() / (double)minIndexInterval));

      logger.trace("min_index_interval changed from {} to {}, so the current sampling level for {} is effectively now {} (was {})",sstable.getMinIndexInterval(),minIndexInterval,sstable,effectiveSamplingLevel,currentSamplingLevel);

      currentSamplingLevel=effectiveSamplingLevel;

    }

    int newSamplingLevel=IndexSummaryBuilder.calculateSamplingLevel(currentSamplingLevel,currentNumEntries,targetNumEntries,minIndexInterval,maxIndexInterval);

    int numEntriesAtNewSamplingLevel=IndexSummaryBuilder.entriesAtSamplingLevel(newSamplingLevel,maxSummarySize);

    double effectiveIndexInterval=sstable.getEffectiveIndexInterval();

    if (logger.isTraceEnabled())     logger.trace("{} has {} reads/sec; ideal space for index summary: {} ({} entries); considering moving " + "from level {} ({} entries, {}) " + "to level {} ({} entries, {})",sstable.getFilename(),readsPerSec,FBUtilities.prettyPrintMemory(idealSpace),targetNumEntries,currentSamplingLevel,currentNumEntries,FBUtilities.prettyPrintMemory((long)(currentNumEntries * avgEntrySize)),newSamplingLevel,numEntriesAtNewSamplingLevel,FBUtilities.prettyPrintMemory((long)(numEntriesAtNewSamplingLevel * avgEntrySize)));

    if (effectiveIndexInterval < minIndexInterval) {

      logger.trace("Forcing resample of {} because the current index interval ({}) is below min_index_interval ({})",sstable,effectiveIndexInterval,minIndexInterval);

      long spaceUsed=(long)Math.ceil(avgEntrySize * numEntriesAtNewSamplingLevel);

      forceResample.add(new ResampleEntry(sstable,spaceUsed,newSamplingLevel));

      remainingSpace-=spaceUsed;

    }

 else     if (effectiveIndexInterval > maxIndexInterval) {

      logger.trace("Forcing upsample of {} because the current index interval ({}) is above max_index_interval ({})",sstable,effectiveIndexInterval,maxIndexInterval);

      newSamplingLevel=Math.max(1,(BASE_SAMPLING_LEVEL * minIndexInterval) / maxIndexInterval);

      numEntriesAtNewSamplingLevel=IndexSummaryBuilder.entriesAtSamplingLevel(newSamplingLevel,sstable.getMaxIndexSummarySize());

      long spaceUsed=(long)Math.ceil(avgEntrySize * numEntriesAtNewSamplingLevel);

      forceUpsample.add(new ResampleEntry(sstable,spaceUsed,newSamplingLevel));

      remainingSpace-=avgEntrySize * numEntriesAtNewSamplingLevel;

    }

 else     if (targetNumEntries >= currentNumEntries * UPSAMPLE_THRESHOLD && newSamplingLevel > currentSamplingLevel) {

      long spaceUsed=(long)Math.ceil(avgEntrySize * numEntriesAtNewSamplingLevel);

      toUpsample.add(new ResampleEntry(sstable,spaceUsed,newSamplingLevel));

      remainingSpace-=avgEntrySize * numEntriesAtNewSamplingLevel;

    }

 else     if (targetNumEntries < currentNumEntries * DOWNSAMPLE_THESHOLD && newSamplingLevel < currentSamplingLevel) {

      long spaceUsed=(long)Math.ceil(avgEntrySize * numEntriesAtNewSamplingLevel);

      toDownsample.add(new ResampleEntry(sstable,spaceUsed,newSamplingLevel));

      remainingSpace-=spaceUsed;

    }

 else {

      logger.trace("SSTable {} is within thresholds of ideal sampling",sstable);

      remainingSpace-=sstable.getIndexSummaryOffHeapSize();

      newSSTables.add(sstable);

      transactions.get(sstable.metadata().id).cancel(sstable);

    }

    totalReadsPerSec-=readsPerSec;

  }

  if (remainingSpace > 0) {

    Pair<List<SSTableReader>,List<ResampleEntry>> result=distributeRemainingSpace(toDownsample,remainingSpace);

    toDownsample=result.right;

    newSSTables.addAll(result.left);

    for (    SSTableReader sstable : result.left)     transactions.get(sstable.metadata().id).cancel(sstable);

  }

  toDownsample.addAll(forceResample);

  toDownsample.addAll(toUpsample);

  toDownsample.addAll(forceUpsample);

  for (  ResampleEntry entry : toDownsample) {

    if (isStopRequested())     throw new CompactionInterruptedException(getCompactionInfo());

    SSTableReader sstable=entry.sstable;

    logger.trace("Re-sampling index summary for {} from {}/{} to {}/{} of the original number of entries",sstable,sstable.getIndexSummarySamplingLevel(),Downsampling.BASE_SAMPLING_LEVEL,entry.newSamplingLevel,Downsampling.BASE_SAMPLING_LEVEL);

    ColumnFamilyStore cfs=Keyspace.open(sstable.metadata().keyspace).getColumnFamilyStore(sstable.metadata().id);

    long oldSize=sstable.bytesOnDisk();

    SSTableReader replacement=sstable.cloneWithNewSummarySamplingLevel(cfs,entry.newSamplingLevel);

    long newSize=replacement.bytesOnDisk();

    newSSTables.add(replacement);

    transactions.get(sstable.metadata().id).update(replacement,true);

    addHooks(cfs,transactions,oldSize,newSize);

  }

  return newSSTables;

}

Location: IndexSummaryRedistribution.java

Content: 

@VisibleForTesting static Pair<List<SSTableReader>,List<ResampleEntry>> distributeRemainingSpace(List<ResampleEntry> toDownsample,long remainingSpace){

  Collections.sort(toDownsample,new Comparator<ResampleEntry>(){

    public int compare(    ResampleEntry o1,    ResampleEntry o2){

      return Double.compare(o1.sstable.getIndexSummaryOffHeapSize() - o1.newSpaceUsed,o2.sstable.getIndexSummaryOffHeapSize() - o2.newSpaceUsed);

    }

  }

);

  int noDownsampleCutoff=0;

  List<SSTableReader> willNotDownsample=new ArrayList<>();

  while (remainingSpace > 0 && noDownsampleCutoff < toDownsample.size()) {

    ResampleEntry entry=toDownsample.get(noDownsampleCutoff);

    long extraSpaceRequired=entry.sstable.getIndexSummaryOffHeapSize() - entry.newSpaceUsed;

    if (extraSpaceRequired <= remainingSpace) {

      logger.trace("Using leftover space to keep {} at the current sampling level ({})",entry.sstable,entry.sstable.getIndexSummarySamplingLevel());

      willNotDownsample.add(entry.sstable);

      remainingSpace-=extraSpaceRequired;

    }

 else {

      break;

    }

    noDownsampleCutoff++;

  }

  return Pair.create(willNotDownsample,toDownsample.subList(noDownsampleCutoff,toDownsample.size()));

}

Location: IndexSummaryRedistribution.java

Content: 

public CompactionInfo getCompactionInfo(){

  return CompactionInfo.withoutSSTables(null,OperationType.INDEX_SUMMARY,(memoryPoolBytes - remainingSpace),memoryPoolBytes,Unit.BYTES,compactionId);

}

Location: IndexSummaryRedistribution.java

Content: 

/** 

 * @param transactions the transactions for the different keyspaces/tables we are to redistribute

 * @param nonRedistributingOffHeapSize the total index summary off heap size for all sstables we were not able to mark compacting (due to them being involved in other compactions)

 * @param memoryPoolBytes size of the memory pool

 */

public IndexSummaryRedistribution(Map<TableId,LifecycleTransaction> transactions,long nonRedistributingOffHeapSize,long memoryPoolBytes){

  this.transactions=transactions;

  this.nonRedistributingOffHeapSize=nonRedistributingOffHeapSize;

  this.memoryPoolBytes=memoryPoolBytes;

  this.compactionId=UUID.randomUUID();

}

Location: IndexSummaryRedistribution.java

Content: 

public boolean isGlobal(){

  return true;

}

Location: IndexSummaryRedistribution.java

Content: 

public List<SSTableReader> redistributeSummaries() throws IOException {

  logger.info("Redistributing index summaries");

  List<SSTableReader> redistribute=new ArrayList<>();

  for (  LifecycleTransaction txn : transactions.values()) {

    redistribute.addAll(txn.originals());

  }

  long total=nonRedistributingOffHeapSize;

  for (  SSTableReader sstable : redistribute)   total+=sstable.getIndexSummaryOffHeapSize();

  logger.trace("Beginning redistribution of index summaries for {} sstables with memory pool size {} MB; current spaced used is {} MB",redistribute.size(),memoryPoolBytes / 1024L / 1024L,total / 1024.0 / 1024.0);

  final Map<SSTableReader,Double> readRates=new HashMap<>(redistribute.size());

  double totalReadsPerSec=0.0;

  for (  SSTableReader sstable : redistribute) {

    if (isStopRequested())     throw new CompactionInterruptedException(getCompactionInfo());

    if (sstable.getReadMeter() != null) {

      Double readRate=sstable.getReadMeter().fifteenMinuteRate();

      totalReadsPerSec+=readRate;

      readRates.put(sstable,readRate);

    }

  }

  logger.trace("Total reads/sec across all sstables in index summary resize process: {}",totalReadsPerSec);

  List<SSTableReader> sstablesByHotness=new ArrayList<>(redistribute);

  Collections.sort(sstablesByHotness,new ReadRateComparator(readRates));

  long remainingBytes=memoryPoolBytes - nonRedistributingOffHeapSize;

  logger.trace("Index summaries for compacting SSTables are using {} MB of space",(memoryPoolBytes - remainingBytes) / 1024.0 / 1024.0);

  List<SSTableReader> newSSTables;

  try (Refs<SSTableReader> refs=Refs.ref(sstablesByHotness)){

    newSSTables=adjustSamplingLevels(sstablesByHotness,transactions,totalReadsPerSec,remainingBytes);

    for (    LifecycleTransaction txn : transactions.values())     txn.finish();

  }

   total=nonRedistributingOffHeapSize;

  for (  SSTableReader sstable : newSSTables)   total+=sstable.getIndexSummaryOffHeapSize();

  if (logger.isTraceEnabled())   logger.trace("Completed resizing of index summaries; current approximate memory used: {}",FBUtilities.prettyPrintMemory(total));

  return newSSTables;

}

