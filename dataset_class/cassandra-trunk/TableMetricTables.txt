Location: TableMetricTables.java

Content: 

/** 

 * Identify the type of Metric it is (gauge, counter etc) abd create the TableMetadata. The column name and type for a counter/gauge is formatted differently based on the units (bytes/time) so allowed to be set.

 */

private static TableMetadata buildMetadata(String keyspace,String table,Function<TableMetrics,? extends Metric> func,String colName,AbstractType colType,String suffix){

  TableMetadata.Builder metadata=TableMetadata.builder(keyspace,table).kind(TableMetadata.Kind.VIRTUAL).addPartitionKeyColumn(KEYSPACE_NAME,UTF8Type.instance).addPartitionKeyColumn(TABLE_NAME,UTF8Type.instance).partitioner(PARTITIONER);

  Keyspace system=Keyspace.system().iterator().next();

  Metric test=func.apply(system.getColumnFamilyStores().iterator().next().metric);

  if (test instanceof Counting) {

    metadata.addRegularColumn(colName,colType);

    if (test instanceof Sampling) {

      metadata.addRegularColumn(P50 + suffix,DoubleType.instance).addRegularColumn(P99 + suffix,DoubleType.instance).addRegularColumn(MAX + suffix,DoubleType.instance);

    }

    if (test instanceof Metered) {

      metadata.addRegularColumn(RATE,DoubleType.instance);

    }

  }

 else   if (test instanceof Gauge) {

    metadata.addRegularColumn(colName,colType);

  }

  return metadata.build();

}

Location: TableMetricTables.java

Content: 

/** 

 * Generates all table metric tables in a collection

 */

public static Collection<VirtualTable> getAll(String name){

  return ImmutableList.of(new LatencyTableMetric(name,"local_read_latency",t -> t.readLatency.latency),new LatencyTableMetric(name,"local_scan_latency",t -> t.rangeLatency.latency),new LatencyTableMetric(name,"coordinator_read_latency",t -> t.coordinatorReadLatency),new LatencyTableMetric(name,"coordinator_scan_latency",t -> t.coordinatorScanLatency),new LatencyTableMetric(name,"local_write_latency",t -> t.writeLatency.latency),new LatencyTableMetric(name,"coordinator_write_latency",t -> t.coordinatorWriteLatency),new HistogramTableMetric(name,"tombstones_per_read",t -> t.tombstoneScannedHistogram.cf),new HistogramTableMetric(name,"rows_per_read",t -> t.liveScannedHistogram.cf),new StorageTableMetric(name,"disk_usage",(  TableMetrics t) -> t.totalDiskSpaceUsed),new StorageTableMetric(name,"max_partition_size",(  TableMetrics t) -> t.maxPartitionSize));

}

