Location: CompactionLogger.java

Content: 

public CompactionLogger(ColumnFamilyStore cfs,CompactionStrategyManager csm){

  csmRef=new WeakReference<>(csm);

  cfsRef=new WeakReference<>(cfs);

}

Location: CompactionLogger.java

Content: 

private ArrayNode compactionStrategyMap(Function<AbstractCompactionStrategy,JsonNode> select){

  ArrayNode node=json.arrayNode();

  forEach(acs -> node.add(select.apply(acs)));

  return node;

}

Location: CompactionLogger.java

Content: 

public void compaction(long startTime,Collection<SSTableReader> input,long endTime,Collection<SSTableReader> output){

  if (enabled.get()) {

    ObjectNode node=json.objectNode();

    node.put("type","compaction");

    describeStrategy(node);

    node.put("start",String.valueOf(startTime));

    node.put("end",String.valueOf(endTime));

    node.set("input",sstableMap(input,this::describeSSTable));

    node.set("output",sstableMap(output,this::describeSSTable));

    serializer.write(node,this::startStrategies,this);

  }

}

Location: CompactionLogger.java

Content: 

private JsonNode describeSSTable(AbstractCompactionStrategy strategy,SSTableReader sstable){

  ObjectNode node=json.objectNode();

  node.put("strategyId",getId(strategy));

  node.set("table",formatSSTable(strategy,sstable));

  return node;

}

Location: CompactionLogger.java

Content: 

private void describeStrategy(ObjectNode node){

  ColumnFamilyStore cfs=cfsRef.get();

  if (cfs == null)   return;

  node.put("keyspace",cfs.keyspace.getName());

  node.put("table",cfs.getTableName());

  node.put("time",System.currentTimeMillis());

}

Location: CompactionLogger.java

Content: 

public void flush(Collection<SSTableReader> sstables){

  if (enabled.get()) {

    ObjectNode node=json.objectNode();

    node.put("type","flush");

    describeStrategy(node);

    node.set("tables",sstableMap(sstables,this::describeSSTable));

    serializer.write(node,this::startStrategies,this);

  }

}

Location: CompactionLogger.java

Content: 

private void forEach(Consumer<AbstractCompactionStrategy> consumer){

  CompactionStrategyManager csm=csmRef.get();

  if (csm == null)   return;

  csm.getStrategies().forEach(l -> l.forEach(consumer));

}

Location: CompactionLogger.java

Content: 

private JsonNode formatSSTables(AbstractCompactionStrategy strategy){

  ArrayNode node=json.arrayNode();

  CompactionStrategyManager csm=csmRef.get();

  ColumnFamilyStore cfs=cfsRef.get();

  if (csm == null || cfs == null)   return node;

  for (  SSTableReader sstable : cfs.getLiveSSTables()) {

    if (csm.getCompactionStrategyFor(sstable) == strategy)     node.add(formatSSTable(strategy,sstable));

  }

  return node;

}

Location: CompactionLogger.java

Content: 

private JsonNode formatSSTable(AbstractCompactionStrategy strategy,SSTableReader sstable){

  ObjectNode node=json.objectNode();

  node.put("generation",sstable.descriptor.generation);

  node.put("version",sstable.descriptor.version.getVersion());

  node.put("size",sstable.onDiskLength());

  JsonNode logResult=strategy.strategyLogger().sstable(sstable);

  if (logResult != null)   node.set("details",logResult);

  return node;

}

Location: CompactionLogger.java

Content: 

private String getId(AbstractCompactionStrategy strategy){

  return compactionStrategyMapping.computeIfAbsent(strategy,s -> String.valueOf(identifier.getAndIncrement()));

}

Location: CompactionLogger.java

Content: 

public void pending(AbstractCompactionStrategy strategy,int remaining){

  if (remaining != 0 && enabled.get()) {

    ObjectNode node=json.objectNode();

    node.put("type","pending");

    describeStrategy(node);

    node.put("strategyId",getId(strategy));

    node.put("pending",remaining);

    serializer.write(node,this::startStrategies,this);

  }

}

Location: CompactionLogger.java

Content: 

private JsonNode shutdownStrategy(AbstractCompactionStrategy strategy){

  ObjectNode node=json.objectNode();

  node.put("strategyId",getId(strategy));

  return node;

}

Location: CompactionLogger.java

Content: 

private ArrayNode sstableMap(Collection<SSTableReader> sstables,CompactionStrategyAndTableFunction csatf){

  CompactionStrategyManager csm=csmRef.get();

  ArrayNode node=json.arrayNode();

  if (csm == null)   return node;

  sstables.forEach(t -> node.add(csatf.apply(csm.getCompactionStrategyFor(t),t)));

  return node;

}

Location: CompactionLogger.java

Content: 

private JsonNode startStrategies(){

  ObjectNode node=json.objectNode();

  node.put("type","enable");

  describeStrategy(node);

  node.set("strategies",compactionStrategyMap(this::startStrategy));

  return node;

}

Location: CompactionLogger.java

Content: 

private JsonNode startStrategy(AbstractCompactionStrategy strategy){

  ObjectNode node=json.objectNode();

  CompactionStrategyManager csm=csmRef.get();

  if (csm == null)   return node;

  node.put("strategyId",getId(strategy));

  node.put("type",strategy.getName());

  node.set("tables",formatSSTables(strategy));

  node.put("repaired",csm.isRepaired(strategy));

  List<String> folders=csm.getStrategyFolders(strategy);

  ArrayNode folderNode=json.arrayNode();

  for (  String folder : folders) {

    folderNode.add(folder);

  }

  node.set("folders",folderNode);

  JsonNode logResult=strategy.strategyLogger().options();

  if (logResult != null)   node.set("options",logResult);

  return node;

}

