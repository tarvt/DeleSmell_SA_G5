Location: CqlClientHelper.java

Content: 

private static void addRange(String keyspace,Metadata metadata,Map<Token,Host> tokenToHost,Map<TokenRange,List<Host>> rangeToReplicas,Token start,Token end){

  Host host=tokenToHost.get(end);

  String dc=host.getDatacenter();

  TokenRange range=metadata.newTokenRange(start,end);

  List<Host> replicas=new ArrayList<>();

  replicas.add(host);

  for (  Host replica : metadata.getReplicas(keyspace,range)) {

    if (dc.equals(replica.getDatacenter()) && !host.equals(replica))     replicas.add(replica);

  }

  List<Host> previous=rangeToReplicas.put(range,replicas);

  if (previous != null)   throw new IllegalStateException("Two hosts (" + host + ", "+ previous+ ") map to the same token range: "+ range);

}

Location: CqlClientHelper.java

Content: 

private CqlClientHelper(){

}

Location: CqlClientHelper.java

Content: 

public static Map<TokenRange,List<Host>> getLocalPrimaryRangeForDC(String keyspace,Metadata metadata,String targetDC){

  Objects.requireNonNull(keyspace,"keyspace");

  Objects.requireNonNull(metadata,"metadata");

  Objects.requireNonNull(targetDC,"targetDC");

  List<Token> tokens=new ArrayList<>();

  Map<Token,Host> tokenToHost=new HashMap<>();

  for (  Host host : metadata.getAllHosts()) {

    if (!targetDC.equals(host.getDatacenter()))     continue;

    for (    Token token : host.getTokens()) {

      Host previous=tokenToHost.putIfAbsent(token,host);

      if (previous != null)       throw new IllegalStateException("Two hosts share the same token; hosts " + host.getHostId() + ":"+ host.getTokens()+ ", "+ previous.getHostId()+ ":"+ previous.getTokens());

      tokens.add(token);

    }

  }

  Collections.sort(tokens);

  Map<TokenRange,List<Host>> rangeToReplicas=new HashMap<>();

  Token start=tokens.get(tokens.size() - 1);

  Token end=tokens.get(0);

  addRange(keyspace,metadata,tokenToHost,rangeToReplicas,start,end);

  for (int i=1; i < tokens.size(); i++) {

    start=tokens.get(i - 1);

    end=tokens.get(i);

    addRange(keyspace,metadata,tokenToHost,rangeToReplicas,start,end);

  }

  return rangeToReplicas;

}

