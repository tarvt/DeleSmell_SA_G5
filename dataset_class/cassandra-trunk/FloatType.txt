Location: FloatType.java

Content: 

public ByteBuffer add(NumberType<?> leftType,ByteBuffer left,NumberType<?> rightType,ByteBuffer right){

  return ByteBufferUtil.bytes(leftType.toFloat(left) + rightType.toFloat(right));

}

Location: FloatType.java

Content: 

public CQL3Type asCQL3Type(){

  return CQL3Type.Native.FLOAT;

}

Location: FloatType.java

Content: 

public <VL,VR>int compareCustom(VL left,ValueAccessor<VL> accessorL,VR right,ValueAccessor<VR> accessorR){

  return compareComposed(left,accessorL,right,accessorR,this);

}

Location: FloatType.java

Content: 

public ByteBuffer divide(NumberType<?> leftType,ByteBuffer left,NumberType<?> rightType,ByteBuffer right){

  return ByteBufferUtil.bytes(leftType.toFloat(left) / rightType.toFloat(right));

}

Location: FloatType.java

Content: 

FloatType(){

  super(ComparisonType.CUSTOM);

}

Location: FloatType.java

Content: 

@Override public Term fromJSONObject(Object parsed) throws MarshalException {

  try {

    if (parsed instanceof String)     return new Constants.Value(fromString((String)parsed));

 else     return new Constants.Value(getSerializer().serialize(((Number)parsed).floatValue()));

  }

 catch (  ClassCastException exc) {

    throw new MarshalException(String.format("Expected a float value, but got a %s: %s",parsed.getClass().getSimpleName(),parsed));

  }

}

Location: FloatType.java

Content: 

public TypeSerializer<Float> getSerializer(){

  return FloatSerializer.instance;

}

Location: FloatType.java

Content: 

public boolean isEmptyValueMeaningless(){

  return true;

}

Location: FloatType.java

Content: 

@Override public boolean isFloatingPoint(){

  return true;

}

Location: FloatType.java

Content: 

public ByteBuffer mod(NumberType<?> leftType,ByteBuffer left,NumberType<?> rightType,ByteBuffer right){

  return ByteBufferUtil.bytes(leftType.toFloat(left) % rightType.toFloat(right));

}

Location: FloatType.java

Content: 

public ByteBuffer multiply(NumberType<?> leftType,ByteBuffer left,NumberType<?> rightType,ByteBuffer right){

  return ByteBufferUtil.bytes(leftType.toFloat(left) * rightType.toFloat(right));

}

Location: FloatType.java

Content: 

public ByteBuffer negate(ByteBuffer input){

  return ByteBufferUtil.bytes(-toFloat(input));

}

Location: FloatType.java

Content: 

public ByteBuffer substract(NumberType<?> leftType,ByteBuffer left,NumberType<?> rightType,ByteBuffer right){

  return ByteBufferUtil.bytes(leftType.toFloat(left) - rightType.toFloat(right));

}

Location: FloatType.java

Content: 

@Override protected double toDouble(ByteBuffer value){

  return toFloat(value);

}

Location: FloatType.java

Content: 

@Override protected float toFloat(ByteBuffer value){

  return ByteBufferUtil.toFloat(value);

}

Location: FloatType.java

Content: 

@Override protected int toInt(ByteBuffer value){

  throw new UnsupportedOperationException();

}

Location: FloatType.java

Content: 

@Override public String toJSONString(ByteBuffer buffer,ProtocolVersion protocolVersion){

  Float value=getSerializer().deserialize(buffer);

  if (value == null)   return "\"\"";

  if (value.isNaN() || value.isInfinite())   return "null";

  return value.toString();

}

Location: FloatType.java

Content: 

@Override public int valueLengthIfFixed(){

  return 4;

}

