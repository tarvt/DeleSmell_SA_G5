Location: InternodeInboundTable.java

Content: 

private void addRow(SimpleDataSet dataSet,InetAddressAndPort addressAndPort,InboundMessageHandlers handlers){

  String dc=DatabaseDescriptor.getEndpointSnitch().getDatacenter(addressAndPort);

  String rack=DatabaseDescriptor.getEndpointSnitch().getRack(addressAndPort);

  dataSet.row(addressAndPort.address,addressAndPort.port,dc,rack).column(USING_BYTES,handlers.usingCapacity()).column(USING_RESERVE_BYTES,handlers.usingEndpointReserveCapacity()).column(CORRUPT_FRAMES_RECOVERED,handlers.corruptFramesRecovered()).column(CORRUPT_FRAMES_UNRECOVERED,handlers.corruptFramesUnrecovered()).column(ERROR_BYTES,handlers.errorBytes()).column(ERROR_COUNT,handlers.errorCount()).column(EXPIRED_BYTES,handlers.expiredBytes()).column(EXPIRED_COUNT,handlers.expiredCount()).column(SCHEDULED_BYTES,handlers.scheduledBytes()).column(SCHEDULED_COUNT,handlers.scheduledCount()).column(PROCESSED_BYTES,handlers.processedBytes()).column(PROCESSED_COUNT,handlers.processedCount()).column(RECEIVED_BYTES,handlers.receivedBytes()).column(RECEIVED_COUNT,handlers.receivedCount()).column(THROTTLED_COUNT,handlers.throttledCount()).column(THROTTLED_NANOS,handlers.throttledNanos());

}

Location: InternodeInboundTable.java

Content: 

InternodeInboundTable(String keyspace){

  super(TableMetadata.builder(keyspace,"internode_inbound").kind(TableMetadata.Kind.VIRTUAL).partitioner(new LocalPartitioner(CompositeType.getInstance(InetAddressType.instance,Int32Type.instance))).addPartitionKeyColumn(ADDRESS,InetAddressType.instance).addPartitionKeyColumn(PORT,Int32Type.instance).addClusteringColumn(DC,UTF8Type.instance).addClusteringColumn(RACK,UTF8Type.instance).addRegularColumn(USING_BYTES,LongType.instance).addRegularColumn(USING_RESERVE_BYTES,LongType.instance).addRegularColumn(CORRUPT_FRAMES_RECOVERED,LongType.instance).addRegularColumn(CORRUPT_FRAMES_UNRECOVERED,LongType.instance).addRegularColumn(ERROR_BYTES,LongType.instance).addRegularColumn(ERROR_COUNT,LongType.instance).addRegularColumn(EXPIRED_BYTES,LongType.instance).addRegularColumn(EXPIRED_COUNT,LongType.instance).addRegularColumn(SCHEDULED_BYTES,LongType.instance).addRegularColumn(SCHEDULED_COUNT,LongType.instance).addRegularColumn(PROCESSED_BYTES,LongType.instance).addRegularColumn(PROCESSED_COUNT,LongType.instance).addRegularColumn(RECEIVED_BYTES,LongType.instance).addRegularColumn(RECEIVED_COUNT,LongType.instance).addRegularColumn(THROTTLED_COUNT,LongType.instance).addRegularColumn(THROTTLED_NANOS,LongType.instance).build());

}

