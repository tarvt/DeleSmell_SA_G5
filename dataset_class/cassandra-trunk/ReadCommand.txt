Location: ReadCommand.java

Content: 

/** 

 * @return Whether this query expects only a transient data response, or a full response

 */

public boolean acceptsTransient(){

  return acceptsTransient;

}

Location: ReadCommand.java

Content: 

/** 

 * Returns a copy of this command with isDigestQuery set to true.

 */

public ReadCommand copyAsDigestQuery(Iterable<Replica> replicas){

  if (any(replicas,Replica::isTransient))   throw new IllegalArgumentException("Can't make a digest request on a transient replica " + Iterables.toString(filter(replicas,Replica::isTransient)));

  return copyAsDigestQuery();

}

Location: ReadCommand.java

Content: 

/** 

 * Returns a copy of this command with isDigestQuery set to true.

 */

public ReadCommand copyAsDigestQuery(Replica replica){

  Preconditions.checkArgument(replica.isFull(),"Can't make a digest request on a transient replica " + replica);

  return copyAsDigestQuery();

}

Location: ReadCommand.java

Content: 

/** 

 * Returns a copy of this command with acceptsTransient set to true.

 */

public ReadCommand copyAsTransientQuery(Iterable<Replica> replicas){

  if (any(replicas,Replica::isFull))   throw new IllegalArgumentException("Can't make a transient request on full replicas: " + Iterables.toString(filter(replicas,Replica::isFull)));

  return copyAsTransientQuery();

}

Location: ReadCommand.java

Content: 

/** 

 * Returns a copy of this command with acceptsTransient set to true.

 */

public ReadCommand copyAsTransientQuery(Replica replica){

  Preconditions.checkArgument(replica.isTransient(),"Can't make a transient request on a full replica: " + replica);

  return copyAsTransientQuery();

}

Location: ReadCommand.java

Content: 

/** 

 * Creates a message for this command.

 */

public Message<ReadCommand> createMessage(boolean trackRepairedData){

  return trackRepairedData ? Message.outWithFlags(verb(),this,MessageFlag.CALL_BACK_ON_FAILURE,MessageFlag.TRACK_REPAIRED_DATA) : Message.outWithFlag(verb(),this,MessageFlag.CALL_BACK_ON_FAILURE);

}

Location: ReadCommand.java

Content: 

@SuppressWarnings("resource") public ReadResponse createResponse(UnfilteredPartitionIterator iterator){

  iterator=RTBoundValidator.validate(iterator,Stage.PROCESSED,true);

  return isDigestQuery() ? ReadResponse.createDigestResponse(iterator,this) : ReadResponse.createDataResponse(iterator,this);

}

Location: ReadCommand.java

Content: 

/** 

 * If the query is a digest one, the requested digest version.

 * @return the requested digest version if the query is a digest. Otherwise, this can returnanything.

 */

public int digestVersion(){

  return digestVersion;

}

Location: ReadCommand.java

Content: 

/** 

 * Executes this command on the local host.

 * @param executionController the execution controller spanning this command

 * @return an iterator over the result of executing this command locally.

 */

@SuppressWarnings("resource") public UnfilteredPartitionIterator executeLocally(ReadExecutionController executionController){

  long startTimeNanos=System.nanoTime();

  ColumnFamilyStore cfs=Keyspace.openAndGetStore(metadata());

  Index index=getIndex(cfs);

  Index.Searcher searcher=null;

  if (index != null) {

    if (!cfs.indexManager.isIndexQueryable(index))     throw new IndexNotAvailableException(index);

    searcher=index.searcherFor(this);

    Tracing.trace("Executing read on {}.{} using index {}",cfs.metadata.keyspace,cfs.metadata.name,index.getIndexMetadata().name);

  }

  if (isTrackingRepairedStatus()) {

    final DataLimits.Counter repairedReadCount=limits().newCounter(nowInSec(),false,selectsFullPartition(),metadata().enforceStrictLiveness()).onlyCount();

    repairedDataInfo=new RepairedDataInfo(repairedReadCount);

  }

  UnfilteredPartitionIterator iterator=(null == searcher) ? queryStorage(cfs,executionController) : searcher.search(executionController);

  iterator=RTBoundValidator.validate(iterator,Stage.MERGED,false);

  try {

    iterator=withStateTracking(iterator);

    iterator=RTBoundValidator.validate(withoutPurgeableTombstones(iterator,cfs),Stage.PURGED,false);

    iterator=withMetricsRecording(iterator,cfs.metric,startTimeNanos);

    RowFilter filter=(null == searcher) ? rowFilter() : index.getPostIndexQueryFilter(rowFilter());

    iterator=filter.filter(iterator,nowInSec());

    if (isTrackingRepairedStatus()) {

      DataLimits.Counter limit=limits().newCounter(nowInSec(),false,selectsFullPartition(),metadata().enforceStrictLiveness());

      iterator=limit.applyTo(iterator);

      iterator=repairedDataInfo.extend(iterator,limit);

    }

 else {

      iterator=limits().filter(iterator,nowInSec(),selectsFullPartition());

    }

    return RTBoundCloser.close(iterator);

  }

 catch (  RuntimeException|Error e) {

    iterator.close();

    throw e;

  }

}

Location: ReadCommand.java

Content: 

public ReadExecutionController executionController(){

  return ReadExecutionController.forCommand(this);

}

Location: ReadCommand.java

Content: 

static IndexMetadata findIndex(TableMetadata table,RowFilter rowFilter){

  if (table.indexes.isEmpty() || rowFilter.isEmpty())   return null;

  ColumnFamilyStore cfs=Keyspace.openAndGetStore(table);

  Index index=cfs.indexManager.getBestIndexFor(rowFilter);

  return null != index ? index.getIndexMetadata() : null;

}

Location: ReadCommand.java

Content: 

public Index getIndex(ColumnFamilyStore cfs){

  return null != index ? cfs.indexManager.getIndex(index) : null;

}

Location: ReadCommand.java

Content: 

/** 

 * Returns a digest of the repaired data read in the execution of this command. If either repaired status tracking is not active or the command has not yet been executed, then this digest will be an empty buffer. Otherwise, it will contain a digest* of the repaired data read, or empty buffer if no repaired data was read.

 * @return digest of the repaired data read in the execution of the command

 */

public ByteBuffer getRepairedDataDigest(){

  return repairedDataInfo.getDigest();

}

Location: ReadCommand.java

Content: 

/** 

 * Index (metadata) chosen for this query. Can be null.

 * @return index (metadata) chosen for this query

 */

@Nullable public IndexMetadata indexMetadata(){

  return index;

}

Location: ReadCommand.java

Content: 

long indexSerializedSize(int version){

  return null != index ? IndexMetadata.serializer.serializedSize(index,version) : 0;

}

Location: ReadCommand.java

Content: 

/** 

 * Whether this query is a digest one or not.

 * @return Whether this query is a digest query.

 */

public boolean isDigestQuery(){

  return isDigestQuery;

}

Location: ReadCommand.java

Content: 

/** 

 * Returns a boolean indicating whether any relevant sstables were skipped during the read that produced the repaired data digest. If true, then no pending repair sessions or partition deletes have influenced the extent of the repaired sstables that went into generating the digest. This indicates whether or not the digest can reliably be used to infer consistency issues between the repaired sets across replicas. If either repaired status tracking is not active or the command has not yet been executed, then this will always return true.

 * @return boolean to indicate confidence in the dwhether or not the digest of the repaired data can bereliably be used to infer inconsistency issues between the repaired sets across replicas.

 */

public boolean isRepairedDataDigestConclusive(){

  return repairedDataInfo.isConclusive();

}

Location: ReadCommand.java

Content: 

/** 

 * Whether or not repaired status of any data read is being tracked or not

 * @return Whether repaired status tracking is active for this command

 */

public boolean isTrackingRepairedStatus(){

  return trackRepairedStatus;

}

Location: ReadCommand.java

Content: 

@SuppressWarnings("resource") InputCollector<UnfilteredRowIterator> iteratorsForPartition(ColumnFamilyStore.ViewFragment view){

  final BiFunction<List<UnfilteredRowIterator>,RepairedDataInfo,UnfilteredRowIterator> merge=(unfilteredRowIterators,repairedDataInfo) -> {

    UnfilteredRowIterator repaired=UnfilteredRowIterators.merge(unfilteredRowIterators);

    return repairedDataInfo.withRepairedDataInfo(repaired);

  }

;

  final Function<UnfilteredRowIterator,UnfilteredPartitionIterator> postLimitPartitions=(rows) -> EmptyIterators.unfilteredPartition(metadata());

  return new InputCollector<>(view,repairedDataInfo,merge,postLimitPartitions,isTrackingRepairedStatus());

}

Location: ReadCommand.java

Content: 

@SuppressWarnings("resource") InputCollector<UnfilteredPartitionIterator> iteratorsForRange(ColumnFamilyStore.ViewFragment view){

  final BiFunction<List<UnfilteredPartitionIterator>,RepairedDataInfo,UnfilteredPartitionIterator> merge=(unfilteredPartitionIterators,repairedDataInfo) -> {

    UnfilteredPartitionIterator repaired=UnfilteredPartitionIterators.merge(unfilteredPartitionIterators,NOOP);

    return repairedDataInfo.withRepairedDataInfo(repaired);

  }

;

  return new InputCollector<>(view,repairedDataInfo,merge,Function.identity(),isTrackingRepairedStatus());

}

Location: ReadCommand.java

Content: 

/** 

 * If the index manager for the CFS determines that there's an applicable 2i that can be used to execute this command, call its (optional) validation method to check that nothing in this command's parameters violates the implementation specific validation rules.

 */

public void maybeValidateIndex(){

  if (null != index)   IndexRegistry.obtain(metadata()).getIndex(index).validate(this);

}

Location: ReadCommand.java

Content: 

protected int oldestUnrepairedTombstone(){

  return oldestUnrepairedTombstone;

}

Location: ReadCommand.java

Content: 

protected ReadCommand(Kind kind,boolean isDigestQuery,int digestVersion,boolean acceptsTransient,TableMetadata metadata,int nowInSec,ColumnFilter columnFilter,RowFilter rowFilter,DataLimits limits,IndexMetadata index){

  super(metadata,nowInSec,columnFilter,rowFilter,limits);

  if (acceptsTransient && isDigestQuery)   throw new IllegalArgumentException("Attempted to issue a digest response to transient replica");

  this.kind=kind;

  this.isDigestQuery=isDigestQuery;

  this.digestVersion=digestVersion;

  this.acceptsTransient=acceptsTransient;

  this.index=index;

}

Location: ReadCommand.java

Content: 

/** 

 * Sets the digest version, for when digest for that command is requested. <p> Note that we allow setting this independently of setting the command as a digest query as this allows us to use the command as a carrier of the digest version even if we only call setIsDigestQuery on some copy of it.

 * @param digestVersion the version for the digest is this command is used for digest query..

 * @return this read command.

 */

public ReadCommand setDigestVersion(int digestVersion){

  this.digestVersion=digestVersion;

  return this;

}

Location: ReadCommand.java

Content: 

/** 

 * Recreate the CQL string corresponding to this query. <p> Note that in general the returned string will not be exactly the original user string, first because there isn't always a single syntax for a given query,  but also because we don't have all the information needed (we know the non-PK columns queried but not the PK ones as internally we query them all). So this shouldn't be relied too strongly, but this should be good enough for debugging purpose which is what this is for.

 */

public String toCQLString(){

  StringBuilder sb=new StringBuilder();

  sb.append("SELECT ").append(columnFilter());

  sb.append(" FROM ").append(metadata().keyspace).append('.').append(metadata().name);

  appendCQLWhereClause(sb);

  if (limits() != DataLimits.NONE)   sb.append(' ').append(limits());

  return sb.toString();

}

Location: ReadCommand.java

Content: 

/** 

 * Activates repaired data tracking for this command. When active, a digest will be created from data read from repaired SSTables. The digests from each replica can then be compared on the coordinator to detect any divergence in their repaired datasets. In this context, an sstable is considered repaired if it is marked repaired or has a pending repair session which has been committed. In addition to the digest, a set of ids for any pending but as yet uncommitted repair sessions is recorded and returned to the coordinator. This is to help reduce false positives caused by compaction lagging which can leave sstables from committed sessions in the pending state for a time.

 */

public void trackRepairedStatus(){

  trackRepairedStatus=true;

}

Location: ReadCommand.java

Content: 

/** 

 * Wraps the provided iterator so that metrics on what is scanned by the command are recorded. This also log warning/trow TombstoneOverwhelmingException if appropriate.

 */

private UnfilteredPartitionIterator withMetricsRecording(UnfilteredPartitionIterator iter,final TableMetrics metric,final long startTimeNanos){

class MetricRecording extends Transformation<UnfilteredRowIterator> {

    private final int failureThreshold=DatabaseDescriptor.getTombstoneFailureThreshold();

    private final int warningThreshold=DatabaseDescriptor.getTombstoneWarnThreshold();

    private final boolean respectTombstoneThresholds=!SchemaConstants.isLocalSystemKeyspace(ReadCommand.this.metadata().keyspace);

    private final boolean enforceStrictLiveness=metadata().enforceStrictLiveness();

    private int liveRows=0;

    private int tombstones=0;

    private DecoratedKey currentKey;

    @Override public UnfilteredRowIterator applyToPartition(    UnfilteredRowIterator iter){

      currentKey=iter.partitionKey();

      return Transformation.apply(iter,this);

    }

    @Override public Row applyToStatic(    Row row){

      return applyToRow(row);

    }

    @Override public Row applyToRow(    Row row){

      boolean hasTombstones=false;

      for (      Cell<?> cell : row.cells()) {

        if (!cell.isLive(ReadCommand.this.nowInSec())) {

          countTombstone(row.clustering());

          hasTombstones=true;

        }

      }

      if (row.hasLiveData(ReadCommand.this.nowInSec(),enforceStrictLiveness))       ++liveRows;

 else       if (!row.primaryKeyLivenessInfo().isLive(ReadCommand.this.nowInSec()) && row.hasDeletion(ReadCommand.this.nowInSec()) && !hasTombstones) {

        countTombstone(row.clustering());

      }

      return row;

    }

    @Override public RangeTombstoneMarker applyToMarker(    RangeTombstoneMarker marker){

      countTombstone(marker.clustering());

      return marker;

    }

    private void countTombstone(    ClusteringPrefix<?> clustering){

      ++tombstones;

      if (tombstones > failureThreshold && respectTombstoneThresholds) {

        String query=ReadCommand.this.toCQLString();

        Tracing.trace("Scanned over {} tombstones for query {}; query aborted (see tombstone_failure_threshold)",failureThreshold,query);

        metric.tombstoneFailures.inc();

        throw new TombstoneOverwhelmingException(tombstones,query,ReadCommand.this.metadata(),currentKey,clustering);

      }

    }

    @Override public void onClose(){

      recordLatency(metric,System.nanoTime() - startTimeNanos);

      metric.tombstoneScannedHistogram.update(tombstones);

      metric.liveScannedHistogram.update(liveRows);

      boolean warnTombstones=tombstones > warningThreshold && respectTombstoneThresholds;

      if (warnTombstones) {

        String msg=String.format("Read %d live rows and %d tombstone cells for query %1.512s; token %s (see tombstone_warn_threshold)",liveRows,tombstones,ReadCommand.this.toCQLString(),currentKey.getToken());

        ClientWarn.instance.warn(msg);

        if (tombstones < failureThreshold) {

          metric.tombstoneWarnings.inc();

        }

        logger.warn(msg);

      }

      Tracing.trace("Read {} live rows and {} tombstone cells{}",liveRows,tombstones,(warnTombstones ? " (see tombstone_warn_threshold)" : ""));

    }

  }

  ;

  return Transformation.apply(iter,new MetricRecording());

}

Location: ReadCommand.java

Content: 

protected UnfilteredPartitionIterator withoutPurgeableTombstones(UnfilteredPartitionIterator iterator,ColumnFamilyStore cfs){

class WithoutPurgeableTombstones extends PurgeFunction {

    public WithoutPurgeableTombstones(){

      super(nowInSec(),cfs.gcBefore(nowInSec()),oldestUnrepairedTombstone(),cfs.getCompactionStrategyManager().onlyPurgeRepairedTombstones(),iterator.metadata().enforceStrictLiveness());

    }

    protected LongPredicate getPurgeEvaluator(){

      return time -> true;

    }

  }

  return Transformation.apply(iterator,new WithoutPurgeableTombstones());

}

Location: ReadCommand.java

Content: 

protected UnfilteredPartitionIterator withStateTracking(UnfilteredPartitionIterator iter){

  return Transformation.apply(iter,new CheckForAbort());

}

