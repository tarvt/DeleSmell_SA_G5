Location: TokenAllocatorDiagnostics.java

Content: 

private static boolean isEnabled(TokenAllocatorEventType type){

  return service.isEnabled(TokenAllocatorEvent.class,type);

}

Location: TokenAllocatorDiagnostics.java

Content: 

static <Unit>void noReplicationTokenAllocatorInstanciated(NoReplicationTokenAllocator<Unit> allocator){

  if (isEnabled(TokenAllocatorEventType.NO_REPLICATION_AWARE_TOKEN_ALLOCATOR_INSTANCIATED))   service.publish(new TokenAllocatorEvent<>(TokenAllocatorEventType.NO_REPLICATION_AWARE_TOKEN_ALLOCATOR_INSTANCIATED,allocator,null,null,null,null,null,null,null));

}

Location: TokenAllocatorDiagnostics.java

Content: 

static <Unit>void replicationTokenAllocatorInstanciated(ReplicationAwareTokenAllocator<Unit> allocator){

  if (isEnabled(TokenAllocatorEventType.REPLICATION_AWARE_TOKEN_ALLOCATOR_INSTANCIATED))   service.publish(new TokenAllocatorEvent<>(TokenAllocatorEventType.REPLICATION_AWARE_TOKEN_ALLOCATOR_INSTANCIATED,allocator,null,null,null,null,null,null,null));

}

Location: TokenAllocatorDiagnostics.java

Content: 

static <Unit>void splitsGenerated(TokenAllocatorBase<Unit> allocator,int numTokens,Multimap<Unit,Token> unitToTokens,NavigableMap<Token,Unit> sortedTokens,Unit newUnit,Collection<Token> tokens){

  if (isEnabled(TokenAllocatorEventType.RANDOM_TOKENS_GENERATED))   service.publish(new TokenAllocatorEvent<>(TokenAllocatorEventType.RANDOM_TOKENS_GENERATED,allocator,numTokens,null,ImmutableMap.copyOf(unitToTokens.asMap()),ImmutableMap.copyOf(sortedTokens),ImmutableList.copyOf(tokens),newUnit,null));

}

Location: TokenAllocatorDiagnostics.java

Content: 

static <Unit>void splitsGenerated(TokenAllocatorBase<Unit> allocator,int numTokens,Queue<Weighted<UnitInfo>> sortedUnits,NavigableMap<Token,Unit> sortedTokens,Unit newUnit,Collection<Token> tokens){

  if (isEnabled(TokenAllocatorEventType.RANDOM_TOKENS_GENERATED))   service.publish(new TokenAllocatorEvent<>(TokenAllocatorEventType.RANDOM_TOKENS_GENERATED,allocator,numTokens,ImmutableList.copyOf(sortedUnits),null,ImmutableMap.copyOf(sortedTokens),ImmutableList.copyOf(tokens),newUnit,null));

}

Location: TokenAllocatorDiagnostics.java

Content: 

private TokenAllocatorDiagnostics(){

}

Location: TokenAllocatorDiagnostics.java

Content: 

static <Unit>void tokenInfosCreated(TokenAllocatorBase<Unit> allocator,Multimap<Unit,Token> unitToTokens,TokenInfo<Unit> tokenInfo){

  if (isEnabled(TokenAllocatorEventType.TOKEN_INFOS_CREATED))   service.publish(new TokenAllocatorEvent<>(TokenAllocatorEventType.TOKEN_INFOS_CREATED,allocator,null,null,ImmutableMap.copyOf(unitToTokens.asMap()),null,null,null,tokenInfo));

}

Location: TokenAllocatorDiagnostics.java

Content: 

static <Unit>void tokenInfosCreated(TokenAllocatorBase<Unit> allocator,Queue<Weighted<UnitInfo>> sortedUnits,Map<Token,Unit> sortedTokens,TokenInfo<Unit> tokenInfo){

  if (isEnabled(TokenAllocatorEventType.TOKEN_INFOS_CREATED))   service.publish(new TokenAllocatorEvent<>(TokenAllocatorEventType.TOKEN_INFOS_CREATED,allocator,null,ImmutableList.copyOf(sortedUnits),null,ImmutableMap.copyOf(sortedTokens),null,null,tokenInfo));

}

Location: TokenAllocatorDiagnostics.java

Content: 

static <Unit>void unitedAdded(TokenAllocatorBase<Unit> allocator,int numTokens,Multimap<Unit,Token> unitToTokens,NavigableMap<Token,Unit> sortedTokens,List<Token> tokens,Unit unit){

  if (isEnabled(TokenAllocatorEventType.UNIT_ADDED))   service.publish(new TokenAllocatorEvent<>(TokenAllocatorEventType.UNIT_ADDED,allocator,numTokens,null,ImmutableMap.copyOf(unitToTokens.asMap()),ImmutableMap.copyOf(sortedTokens),ImmutableList.copyOf(tokens),unit,null));

}

Location: TokenAllocatorDiagnostics.java

Content: 

static <Unit>void unitedAdded(TokenAllocatorBase<Unit> allocator,int numTokens,Queue<Weighted<UnitInfo>> sortedUnits,NavigableMap<Token,Unit> sortedTokens,List<Token> tokens,Unit unit){

  if (isEnabled(TokenAllocatorEventType.UNIT_ADDED))   service.publish(new TokenAllocatorEvent<>(TokenAllocatorEventType.UNIT_ADDED,allocator,numTokens,ImmutableList.copyOf(sortedUnits),null,ImmutableMap.copyOf(sortedTokens),ImmutableList.copyOf(tokens),unit,null));

}

Location: TokenAllocatorDiagnostics.java

Content: 

static <Unit>void unitRemoved(TokenAllocatorBase<Unit> allocator,Unit unit,Multimap<Unit,Token> unitToTokens,Map<Token,Unit> sortedTokens){

  if (isEnabled(TokenAllocatorEventType.UNIT_REMOVED))   service.publish(new TokenAllocatorEvent<>(TokenAllocatorEventType.UNIT_REMOVED,allocator,null,null,ImmutableMap.copyOf(unitToTokens.asMap()),ImmutableMap.copyOf(sortedTokens),null,unit,null));

}

Location: TokenAllocatorDiagnostics.java

Content: 

static <Unit>void unitRemoved(TokenAllocatorBase<Unit> allocator,Unit unit,Queue<Weighted<UnitInfo>> sortedUnits,Map<Token,Unit> sortedTokens){

  if (isEnabled(TokenAllocatorEventType.UNIT_REMOVED))   service.publish(new TokenAllocatorEvent<>(TokenAllocatorEventType.UNIT_REMOVED,allocator,null,ImmutableList.copyOf(sortedUnits),null,ImmutableMap.copyOf(sortedTokens),null,unit,null));

}

