Location: CassandraRoleManager.java

Content: 

public Set<Option> alterableOptions(){

  return alterableOptions;

}

Location: CassandraRoleManager.java

Content: 

public void alterRole(AuthenticatedUser performer,RoleResource role,RoleOptions options){

  String assignments=optionsToAssignments(options.getOptions());

  if (!Strings.isNullOrEmpty(assignments)) {

    process(String.format("UPDATE %s.%s SET %s WHERE role = '%s'",SchemaConstants.AUTH_KEYSPACE_NAME,AuthKeyspace.ROLES,assignments,escape(role.getRoleName())),consistencyForRole(role.getRoleName()));

  }

}

Location: CassandraRoleManager.java

Content: 

public boolean canLogin(RoleResource role){

  try {

    return getRole(role.getRoleName()).canLogin;

  }

 catch (  RequestExecutionException e) {

    logger.debug("Failed to authorize {} for login permission",role.getRoleName());

    throw new UnauthorizedException("Unable to perform authorization of login permission: " + e.getMessage(),e);

  }

}

Location: CassandraRoleManager.java

Content: 

public CassandraRoleManager(){

  supportedOptions=DatabaseDescriptor.getAuthenticator().getClass() == PasswordAuthenticator.class ? ImmutableSet.of(Option.LOGIN,Option.SUPERUSER,Option.PASSWORD) : ImmutableSet.of(Option.LOGIN,Option.SUPERUSER);

  alterableOptions=DatabaseDescriptor.getAuthenticator().getClass().equals(PasswordAuthenticator.class) ? ImmutableSet.of(Option.PASSWORD) : ImmutableSet.<Option>of();

}

Location: CassandraRoleManager.java

Content: 

private Stream<Role> collectRoles(Role role,boolean includeInherited,Predicate<String> distinctFilter){

  if (Roles.isNullRole(role))   return Stream.empty();

  if (!includeInherited)   return Stream.concat(Stream.of(role),role.memberOf.stream().map(this::getRole));

  return Stream.concat(Stream.of(role),role.memberOf.stream().filter(distinctFilter).flatMap(r -> collectRoles(getRole(r),true,distinctFilter)));

}

Location: CassandraRoleManager.java

Content: 

protected static ConsistencyLevel consistencyForRole(String role){

  if (role.equals(DEFAULT_SUPERUSER_NAME))   return ConsistencyLevel.QUORUM;

 else   return ConsistencyLevel.LOCAL_ONE;

}

Location: CassandraRoleManager.java

Content: 

public void createRole(AuthenticatedUser performer,RoleResource role,RoleOptions options) throws RequestValidationException, RequestExecutionException {

  String insertCql=options.getPassword().isPresent() ? String.format("INSERT INTO %s.%s (role, is_superuser, can_login, salted_hash) VALUES ('%s', %s, %s, '%s')",SchemaConstants.AUTH_KEYSPACE_NAME,AuthKeyspace.ROLES,escape(role.getRoleName()),options.getSuperuser().or(false),options.getLogin().or(false),escape(hashpw(options.getPassword().get()))) : String.format("INSERT INTO %s.%s (role, is_superuser, can_login) VALUES ('%s', %s, %s)",SchemaConstants.AUTH_KEYSPACE_NAME,AuthKeyspace.ROLES,escape(role.getRoleName()),options.getSuperuser().or(false),options.getLogin().or(false));

  process(insertCql,consistencyForRole(role.getRoleName()));

}

Location: CassandraRoleManager.java

Content: 

public void dropRole(AuthenticatedUser performer,RoleResource role) throws RequestValidationException, RequestExecutionException {

  process(String.format("DELETE FROM %s.%s WHERE role = '%s'",SchemaConstants.AUTH_KEYSPACE_NAME,AuthKeyspace.ROLES,escape(role.getRoleName())),consistencyForRole(role.getRoleName()));

  removeAllMembers(role.getRoleName());

}

Location: CassandraRoleManager.java

Content: 

private static Predicate<String> filter(){

  final Set<String> seen=new HashSet<>();

  return seen::add;

}

Location: CassandraRoleManager.java

Content: 

public Set<RoleResource> getAllRoles() throws RequestValidationException, RequestExecutionException {

  ImmutableSet.Builder<RoleResource> builder=ImmutableSet.builder();

  UntypedResultSet rows=process(String.format("SELECT role from %s.%s",SchemaConstants.AUTH_KEYSPACE_NAME,AuthKeyspace.ROLES),ConsistencyLevel.QUORUM);

  rows.forEach(row -> builder.add(RoleResource.role(row.getString("role"))));

  return builder.build();

}

Location: CassandraRoleManager.java

Content: 

public Map<String,String> getCustomOptions(RoleResource role){

  return Collections.emptyMap();

}

Location: CassandraRoleManager.java

Content: 

static int getGensaltLogRounds(){

  int rounds=Integer.getInteger(GENSALT_LOG2_ROUNDS_PROPERTY,10);

  if (rounds < 4 || rounds > 31)   throw new ConfigurationException(String.format("Bad value for system property -D%s." + "Please use a value between 4 and 31 inclusively",GENSALT_LOG2_ROUNDS_PROPERTY));

  return rounds;

}

Location: CassandraRoleManager.java

Content: 

public Set<Role> getRoleDetails(RoleResource grantee){

  return collectRoles(getRole(grantee.getRoleName()),true,filter()).collect(Collectors.toSet());

}

Location: CassandraRoleManager.java

Content: 

public Set<RoleResource> getRoles(RoleResource grantee,boolean includeInherited) throws RequestValidationException, RequestExecutionException {

  return collectRoles(getRole(grantee.getRoleName()),includeInherited,filter()).map(r -> r.resource).collect(Collectors.toSet());

}

Location: CassandraRoleManager.java

Content: 

private Role getRole(String name){

  QueryOptions options=QueryOptions.forInternalCalls(consistencyForRole(name),Collections.singletonList(ByteBufferUtil.bytes(name)));

  ResultMessage.Rows rows=select(loadRoleStatement,options);

  if (rows.result.isEmpty())   return Roles.nullRole();

  return ROW_TO_ROLE.apply(UntypedResultSet.create(rows.result).one());

}

Location: CassandraRoleManager.java

Content: 

public void grantRole(AuthenticatedUser performer,RoleResource role,RoleResource grantee) throws RequestValidationException, RequestExecutionException {

  if (getRoles(grantee,true).contains(role))   throw new InvalidRequestException(String.format("%s is a member of %s",grantee.getRoleName(),role.getRoleName()));

  if (getRoles(role,true).contains(grantee))   throw new InvalidRequestException(String.format("%s is a member of %s",role.getRoleName(),grantee.getRoleName()));

  modifyRoleMembership(grantee.getRoleName(),role.getRoleName(),"+");

  process(String.format("INSERT INTO %s.%s (role, member) values ('%s', '%s')",SchemaConstants.AUTH_KEYSPACE_NAME,AuthKeyspace.ROLE_MEMBERS,escape(role.getRoleName()),escape(grantee.getRoleName())),consistencyForRole(role.getRoleName()));

}

Location: CassandraRoleManager.java

Content: 

private static boolean hasExistingRoles() throws RequestExecutionException {

  String defaultSUQuery=String.format("SELECT * FROM %s.%s WHERE role = '%s'",SchemaConstants.AUTH_KEYSPACE_NAME,AuthKeyspace.ROLES,DEFAULT_SUPERUSER_NAME);

  String allUsersQuery=String.format("SELECT * FROM %s.%s LIMIT 1",SchemaConstants.AUTH_KEYSPACE_NAME,AuthKeyspace.ROLES);

  return !QueryProcessor.process(defaultSUQuery,ConsistencyLevel.ONE).isEmpty() || !QueryProcessor.process(defaultSUQuery,ConsistencyLevel.QUORUM).isEmpty() || !QueryProcessor.process(allUsersQuery,ConsistencyLevel.QUORUM).isEmpty();

}

Location: CassandraRoleManager.java

Content: 

private static String hashpw(String password){

  return BCrypt.hashpw(password,BCrypt.gensalt(GENSALT_LOG2_ROUNDS));

}

Location: CassandraRoleManager.java

Content: 

public boolean isExistingRole(RoleResource role){

  return !Roles.isNullRole(getRole(role.getRoleName()));

}

Location: CassandraRoleManager.java

Content: 

public boolean isSuper(RoleResource role){

  try {

    return getRole(role.getRoleName()).isSuper;

  }

 catch (  RequestExecutionException e) {

    logger.debug("Failed to authorize {} for super-user permission",role.getRoleName());

    throw new UnauthorizedException("Unable to perform authorization of super-user permission: " + e.getMessage(),e);

  }

}

Location: CassandraRoleManager.java

Content: 

private void modifyRoleMembership(String grantee,String role,String op) throws RequestExecutionException {

  process(String.format("UPDATE %s.%s SET member_of = member_of %s {'%s'} WHERE role = '%s'",SchemaConstants.AUTH_KEYSPACE_NAME,AuthKeyspace.ROLES,op,escape(role),escape(grantee)),consistencyForRole(grantee));

}

Location: CassandraRoleManager.java

Content: 

private String optionsToAssignments(Map<Option,Object> options){

  return options.entrySet().stream().map(entry -> {

switch (entry.getKey()) {

case LOGIN:

      return String.format("can_login = %s",entry.getValue());

case SUPERUSER:

    return String.format("is_superuser = %s",entry.getValue());

case PASSWORD:

  return String.format("salted_hash = '%s'",escape(hashpw((String)entry.getValue())));

default :

return null;

}

}

).filter(Objects::nonNull).collect(Collectors.joining(","));

}

Location: CassandraRoleManager.java

Content: 

private CQLStatement prepare(String template,String keyspace,String table){

  try {

    return QueryProcessor.parseStatement(String.format(template,keyspace,table)).prepare(ClientState.forInternalCalls());

  }

 catch (  RequestValidationException e) {

    throw new AssertionError(e);

  }

}

Location: CassandraRoleManager.java

Content: 

private void removeAllMembers(String role) throws RequestValidationException, RequestExecutionException {

  UntypedResultSet rows=process(String.format("SELECT member FROM %s.%s WHERE role = '%s'",SchemaConstants.AUTH_KEYSPACE_NAME,AuthKeyspace.ROLE_MEMBERS,escape(role)),consistencyForRole(role));

  if (rows.isEmpty())   return;

  for (  UntypedResultSet.Row row : rows)   modifyRoleMembership(row.getString("member"),role,"-");

  process(String.format("DELETE FROM %s.%s WHERE role = '%s'",SchemaConstants.AUTH_KEYSPACE_NAME,AuthKeyspace.ROLE_MEMBERS,escape(role)),consistencyForRole(role));

}

Location: CassandraRoleManager.java

Content: 

public void revokeRole(AuthenticatedUser performer,RoleResource role,RoleResource revokee) throws RequestValidationException, RequestExecutionException {

  if (!getRoles(revokee,false).contains(role))   throw new InvalidRequestException(String.format("%s is not a member of %s",revokee.getRoleName(),role.getRoleName()));

  modifyRoleMembership(revokee.getRoleName(),role.getRoleName(),"-");

  process(String.format("DELETE FROM %s.%s WHERE role = '%s' and member = '%s'",SchemaConstants.AUTH_KEYSPACE_NAME,AuthKeyspace.ROLE_MEMBERS,escape(role.getRoleName()),escape(revokee.getRoleName())),consistencyForRole(role.getRoleName()));

}

Location: CassandraRoleManager.java

Content: 

protected void scheduleSetupTask(final Callable<Void> setupTask){

  ScheduledExecutors.optionalTasks.schedule(() -> {

    isClusterReady=true;

    try {

      setupTask.call();

    }

 catch (    Exception e) {

      logger.info("Setup task failed with error, rescheduling");

      scheduleSetupTask(setupTask);

    }

  }

,AuthKeyspace.SUPERUSER_SETUP_DELAY,TimeUnit.MILLISECONDS);

}

Location: CassandraRoleManager.java

Content: 

@VisibleForTesting ResultMessage.Rows select(SelectStatement statement,QueryOptions options){

  return statement.execute(QueryState.forInternalCalls(),options,System.nanoTime());

}

Location: CassandraRoleManager.java

Content: 

private static void setupDefaultRole(){

  if (StorageService.instance.getTokenMetadata().sortedTokens().isEmpty())   throw new IllegalStateException("CassandraRoleManager skipped default role setup: no known tokens in ring");

  try {

    if (!hasExistingRoles()) {

      QueryProcessor.process(String.format("INSERT INTO %s.%s (role, is_superuser, can_login, salted_hash) " + "VALUES ('%s', true, true, '%s')",SchemaConstants.AUTH_KEYSPACE_NAME,AuthKeyspace.ROLES,DEFAULT_SUPERUSER_NAME,escape(hashpw(DEFAULT_SUPERUSER_PASSWORD))),consistencyForRole(DEFAULT_SUPERUSER_NAME));

      logger.info("Created default superuser role '{}'",DEFAULT_SUPERUSER_NAME);

    }

  }

 catch (  RequestExecutionException e) {

    logger.warn("CassandraRoleManager skipped default role setup: some nodes were not ready");

    throw e;

  }

}

