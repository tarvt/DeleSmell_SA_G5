Location: CommitLogSegmentManagerCDC.java

Content: 

/** 

 * For use after replay when replayer hard-links / adds tracking of replayed segments

 */

public void addCDCSize(long size){

  cdcSizeTracker.addSize(size);

}

Location: CommitLogSegmentManagerCDC.java

Content: 

/** 

 * Reserve space in the current segment for the provided mutation or, if there isn't space available, create a new segment. For CDC mutations, allocation is expected to throw WTE if the segment disallows CDC mutations.

 * @param mutation Mutation to allocate in segment manager

 * @param size total size (overhead + serialized) of mutation

 * @return the created Allocation object

 * @throws CDCWriteException If segment disallows CDC mutations, we throw

 */

@Override public CommitLogSegment.Allocation allocate(Mutation mutation,int size) throws CDCWriteException {

  CommitLogSegment segment=allocatingFrom();

  CommitLogSegment.Allocation alloc;

  throwIfForbidden(mutation,segment);

  while (null == (alloc=segment.allocate(mutation,size))) {

    advanceAllocatingFrom(segment);

    segment=allocatingFrom();

    throwIfForbidden(mutation,segment);

  }

  if (mutation.trackedByCDC())   segment.setCDCState(CDCState.CONTAINS);

  return alloc;

}

Location: CommitLogSegmentManagerCDC.java

Content: 

public CommitLogSegmentManagerCDC(final CommitLog commitLog,String storageDirectory){

  super(commitLog,storageDirectory);

  cdcSizeTracker=new CDCSizeTracker(this,new File(DatabaseDescriptor.getCDCLogLocation()));

}

Location: CommitLogSegmentManagerCDC.java

Content: 

/** 

 * On segment creation, flag whether the segment should accept CDC mutations or not based on the total currently allocated unflushed CDC segments and the contents of cdc_raw

 */

public CommitLogSegment createSegment(){

  CommitLogSegment segment=CommitLogSegment.createSegment(commitLog,this);

  FileUtils.createHardLink(segment.logFile,segment.getCDCFile());

  cdcSizeTracker.processNewSegment(segment);

  return segment;

}

Location: CommitLogSegmentManagerCDC.java

Content: 

public void discard(CommitLogSegment segment,boolean delete){

  segment.close();

  addSize(-segment.onDiskSize());

  cdcSizeTracker.processDiscardedSegment(segment);

  if (delete)   FileUtils.deleteWithConfirm(segment.logFile);

  if (segment.getCDCState() != CDCState.CONTAINS) {

    File cdcLink=segment.getCDCFile();

    if (cdcLink.exists())     FileUtils.deleteWithConfirm(cdcLink);

    File cdcIndexFile=segment.getCDCIndexFile();

    if (cdcIndexFile.exists())     FileUtils.deleteWithConfirm(cdcIndexFile);

  }

}

Location: CommitLogSegmentManagerCDC.java

Content: 

/** 

 * Delete untracked segment files after replay

 * @param file segment file that is no longer in use.

 */

@Override void handleReplayedSegment(final File file){

  super.handleReplayedSegment(file);

  File cdcFile=new File(DatabaseDescriptor.getCDCLogLocation(),file.getName());

  File cdcIndexFile=new File(DatabaseDescriptor.getCDCLogLocation(),CommitLogDescriptor.fromFileName(file.getName()).cdcIndexFileName());

  if (cdcFile.exists() && !cdcIndexFile.exists()) {

    logger.trace("(Unopened) CDC segment {} is no longer needed and will be deleted now",cdcFile);

    FileUtils.deleteWithConfirm(cdcFile);

  }

}

Location: CommitLogSegmentManagerCDC.java

Content: 

private void throwIfForbidden(Mutation mutation,CommitLogSegment segment) throws CDCWriteException {

  if (mutation.trackedByCDC() && segment.getCDCState() == CDCState.FORBIDDEN) {

    cdcSizeTracker.submitOverflowSizeRecalculation();

    String logMsg=String.format("Rejecting mutation to keyspace %s. Free up space in %s by processing CDC logs.",mutation.getKeyspaceName(),DatabaseDescriptor.getCDCLogLocation());

    NoSpamLogger.log(logger,NoSpamLogger.Level.WARN,10,TimeUnit.SECONDS,logMsg);

    throw new CDCWriteException(logMsg);

  }

}

Location: CommitLogSegmentManagerCDC.java

Content: 

/** 

 * Only use for testing / validation that size tracker is working. Not for production use.

 */

@VisibleForTesting public long updateCDCTotalSize(){

  cdcSizeTracker.submitOverflowSizeRecalculation();

  try {

    Thread.sleep(DatabaseDescriptor.getCDCDiskCheckInterval() + 10);

  }

 catch (  InterruptedException e) {

  }

  return cdcSizeTracker.totalCDCSizeOnDisk();

}

