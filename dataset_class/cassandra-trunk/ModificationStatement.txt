Location: ModificationStatement.java

Content: 

public void addConditions(Clustering<?> clustering,CQL3CasRequest request,QueryOptions options) throws InvalidRequestException {

  conditions.addConditionsTo(request,clustering,options);

}

Location: ModificationStatement.java

Content: 

public void addFunctionsTo(List<Function> functions){

  attrs.addFunctionsTo(functions);

  restrictions.addFunctionsTo(functions);

  operations.addFunctionsTo(functions);

  conditions.addFunctionsTo(functions);

}

Location: ModificationStatement.java

Content: 

final void addUpdates(UpdatesCollector collector,QueryOptions options,boolean local,long timestamp,int nowInSeconds,long queryStartNanoTime){

  List<ByteBuffer> keys=buildPartitionKeyNames(options);

  if (hasSlices()) {

    Slices slices=createSlices(options);

    if (slices.isEmpty())     return;

    UpdateParameters params=makeUpdateParameters(keys,new ClusteringIndexSliceFilter(slices,false),options,DataLimits.NONE,local,timestamp,nowInSeconds,queryStartNanoTime);

    for (    ByteBuffer key : keys) {

      Validation.validateKey(metadata(),key);

      DecoratedKey dk=metadata().partitioner.decorateKey(key);

      PartitionUpdate.Builder updateBuilder=collector.getPartitionUpdateBuilder(metadata(),dk,options.getConsistency());

      for (      Slice slice : slices)       addUpdateForKey(updateBuilder,slice,params);

    }

  }

 else {

    NavigableSet<Clustering<?>> clusterings=createClustering(options);

    if (restrictions.hasClusteringColumnsRestrictions() && clusterings.isEmpty())     return;

    UpdateParameters params=makeUpdateParameters(keys,clusterings,options,local,timestamp,nowInSeconds,queryStartNanoTime);

    for (    ByteBuffer key : keys) {

      Validation.validateKey(metadata(),key);

      DecoratedKey dk=metadata().partitioner.decorateKey(key);

      PartitionUpdate.Builder updateBuilder=collector.getPartitionUpdateBuilder(metadata(),dk,options.getConsistency());

      if (!restrictions.hasClusteringColumnsRestrictions()) {

        addUpdateForKey(updateBuilder,Clustering.EMPTY,params);

      }

 else {

        for (        Clustering<?> clustering : clusterings) {

          validateClustering(clustering);

          addUpdateForKey(updateBuilder,clustering,params);

        }

      }

    }

  }

}

Location: ModificationStatement.java

Content: 

public Iterable<Operation> allOperations(){

  return operations;

}

Location: ModificationStatement.java

Content: 

/** 

 * Checks that the modification only apply to static columns.

 * @return <code>true</code> if the modification only apply to static columns, <code>false</code> otherwise.

 */

private boolean appliesOnlyToStaticColumns(){

  return appliesOnlyToStaticColumns(operations,conditions);

}

Location: ModificationStatement.java

Content: 

/** 

 * Checks that the specified operations and conditions only apply to static columns.

 * @return <code>true</code> if the specified operations and conditions only apply to static columns,<code>false</code> otherwise.

 */

public static boolean appliesOnlyToStaticColumns(Operations operation,Conditions conditions){

  return !operation.appliesToRegularColumns() && !conditions.appliesToRegularColumns() && (operation.appliesToStaticColumns() || conditions.appliesToStaticColumns());

}

Location: ModificationStatement.java

Content: 

private Map<DecoratedKey,Partition> asMaterializedMap(PartitionIterator iterator){

  Map<DecoratedKey,Partition> map=new HashMap<>();

  while (iterator.hasNext()) {

    try (RowIterator partition=iterator.next()){

      map.put(partition.partitionKey(),FilteredPartition.create(partition));

    }

   }

  return map;

}

Location: ModificationStatement.java

Content: 

private static ResultSet buildCasFailureResultSet(RowIterator partition,Iterable<ColumnMetadata> columnsWithConditions,boolean isBatch,QueryOptions options,int nowInSeconds){

  TableMetadata metadata=partition.metadata();

  Selection selection;

  if (columnsWithConditions == null) {

    selection=Selection.wildcard(metadata,false);

  }

 else {

    Set<ColumnMetadata> defs=new LinkedHashSet<>();

    if (isBatch)     Iterables.addAll(defs,metadata.primaryKeyColumns());

    Iterables.addAll(defs,columnsWithConditions);

    selection=Selection.forColumns(metadata,new ArrayList<>(defs));

  }

  Selectors selectors=selection.newSelectors(options);

  ResultSetBuilder builder=new ResultSetBuilder(selection.getResultMetadata(),selectors);

  SelectStatement.forSelection(metadata,selection).processPartition(partition,options,builder,nowInSeconds);

  return builder.build();

}

Location: ModificationStatement.java

Content: 

private ResultSet buildCasResultSet(RowIterator partition,QueryState state,QueryOptions options){

  return buildCasResultSet(keyspace(),columnFamily(),partition,getColumnsWithConditions(),false,state,options);

}

Location: ModificationStatement.java

Content: 

static ResultSet buildCasResultSet(String ksName,String tableName,RowIterator partition,Iterable<ColumnMetadata> columnsWithConditions,boolean isBatch,QueryState state,QueryOptions options){

  boolean success=partition == null;

  ResultSet.ResultMetadata metadata=buildCASSuccessMetadata(ksName,tableName);

  List<List<ByteBuffer>> rows=Collections.singletonList(Collections.singletonList(BooleanType.instance.decompose(success)));

  ResultSet rs=new ResultSet(metadata,rows);

  return success ? rs : merge(rs,buildCasFailureResultSet(partition,columnsWithConditions,isBatch,options,options.getNowInSeconds(state)));

}

Location: ModificationStatement.java

Content: 

private static ResultSet.ResultMetadata buildCASSuccessMetadata(String ksName,String cfName){

  List<ColumnSpecification> specs=new ArrayList<>();

  specs.add(casResultColumnSpecification(ksName,cfName));

  return new ResultSet.ResultMetadata(EMPTY_HASH,specs);

}

Location: ModificationStatement.java

Content: 

public List<ByteBuffer> buildPartitionKeyNames(QueryOptions options) throws InvalidRequestException {

  List<ByteBuffer> partitionKeys=restrictions.getPartitionKeys(options);

  for (  ByteBuffer key : partitionKeys)   QueryProcessor.validateKey(key);

  return partitionKeys;

}

Location: ModificationStatement.java

Content: 

static RowIterator casInternal(CQL3CasRequest request,long timestamp,int nowInSeconds){

  UUID ballot=UUIDGen.getTimeUUIDFromMicros(timestamp);

  SinglePartitionReadQuery readCommand=request.readCommand(nowInSeconds);

  FilteredPartition current;

  try (ReadExecutionController executionController=readCommand.executionController();PartitionIterator iter=readCommand.executeInternal(executionController)){

    current=FilteredPartition.create(PartitionIterators.getOnlyElement(iter,readCommand));

  }

   if (!request.appliesTo(current))   return current.rowIterator();

  PartitionUpdate updates=request.makeUpdates(current);

  updates=TriggerExecutor.instance.execute(updates);

  Commit proposal=Commit.newProposal(ballot,updates);

  proposal.makeMutation().apply();

  return null;

}

Location: ModificationStatement.java

Content: 

private static ColumnSpecification casResultColumnSpecification(String ksName,String cfName){

  return new ColumnSpecification(ksName,cfName,CAS_RESULT_COLUMN,BooleanType.instance);

}

Location: ModificationStatement.java

Content: 

public String columnFamily(){

  return metadata.name;

}

Location: ModificationStatement.java

Content: 

public RegularAndStaticColumns conditionColumns(){

  return conditionColumns;

}

Location: ModificationStatement.java

Content: 

public NavigableSet<Clustering<?>> createClustering(QueryOptions options) throws InvalidRequestException {

  if (appliesOnlyToStaticColumns() && !restrictions.hasClusteringColumnsRestrictions())   return FBUtilities.singleton(CBuilder.STATIC_BUILDER.build(),metadata().comparator);

  return restrictions.getClusteringColumns(options);

}

Location: ModificationStatement.java

Content: 

Slices createSlices(QueryOptions options){

  SortedSet<ClusteringBound<?>> startBounds=restrictions.getClusteringColumnsBounds(Bound.START,options);

  SortedSet<ClusteringBound<?>> endBounds=restrictions.getClusteringColumnsBounds(Bound.END,options);

  return toSlices(startBounds,endBounds);

}

Location: ModificationStatement.java

Content: 

public ResultMessage executeInternalWithCondition(QueryState state,QueryOptions options){

  CQL3CasRequest request=makeCasRequest(state,options);

  try (RowIterator result=casInternal(request,options.getTimestamp(state),options.getNowInSeconds(state))){

    return new ResultMessage.Rows(buildCasResultSet(result,state,options));

  }

 }

Location: ModificationStatement.java

Content: 

public ResultMessage executeInternalWithoutCondition(QueryState queryState,QueryOptions options,long queryStartNanoTime) throws RequestValidationException, RequestExecutionException {

  long timestamp=options.getTimestamp(queryState);

  int nowInSeconds=options.getNowInSeconds(queryState);

  for (  IMutation mutation : getMutations(options,true,timestamp,nowInSeconds,queryStartNanoTime))   mutation.apply();

  return null;

}

Location: ModificationStatement.java

Content: 

private ResultMessage executeWithCondition(QueryState queryState,QueryOptions options,long queryStartNanoTime){

  CQL3CasRequest request=makeCasRequest(queryState,options);

  try (RowIterator result=StorageProxy.cas(keyspace(),columnFamily(),request.key,request,options.getSerialConsistency(),options.getConsistency(),queryState.getClientState(),options.getNowInSeconds(queryState),queryStartNanoTime)){

    return new ResultMessage.Rows(buildCasResultSet(result,queryState,options));

  }

 }

Location: ModificationStatement.java

Content: 

private ResultMessage executeWithoutCondition(QueryState queryState,QueryOptions options,long queryStartNanoTime) throws RequestExecutionException, RequestValidationException {

  if (isVirtual())   return executeInternalWithoutCondition(queryState,options,queryStartNanoTime);

  ConsistencyLevel cl=options.getConsistency();

  if (isCounter())   cl.validateCounterForWrite(metadata());

 else   cl.validateForWrite(metadata.keyspace);

  List<? extends IMutation> mutations=getMutations(options,false,options.getTimestamp(queryState),options.getNowInSeconds(queryState),queryStartNanoTime);

  if (!mutations.isEmpty())   StorageProxy.mutateWithTriggers(mutations,cl,false,queryStartNanoTime);

  return null;

}

Location: ModificationStatement.java

Content: 

@Override public List<ColumnSpecification> getBindVariables(){

  return bindVariables.getBindVariables();

}

Location: ModificationStatement.java

Content: 

public Iterable<ColumnMetadata> getColumnsWithConditions(){

  return conditions.getColumns();

}

Location: ModificationStatement.java

Content: 

@Override public Iterable<Function> getFunctions(){

  List<Function> functions=new ArrayList<>();

  addFunctionsTo(functions);

  return functions;

}

Location: ModificationStatement.java

Content: 

/** 

 * Convert statement into a list of mutations to apply on the server

 * @param options value for prepared statement markers

 * @param local if true, any requests (for collections) performed by getMutation should be done locally only.

 * @param timestamp the current timestamp in microseconds to use if no timestamp is user provided.

 * @return list of the mutations

 */

private List<? extends IMutation> getMutations(QueryOptions options,boolean local,long timestamp,int nowInSeconds,long queryStartNanoTime){

  UpdatesCollector collector=new SingleTableUpdatesCollector(metadata,updatedColumns,1);

  addUpdates(collector,options,local,timestamp,nowInSeconds,queryStartNanoTime);

  return collector.toMutations();

}

Location: ModificationStatement.java

Content: 

@Override public short[] getPartitionKeyBindVariableIndexes(){

  return bindVariables.getPartitionKeyBindVariableIndexes(metadata);

}

Location: ModificationStatement.java

Content: 

public List<Operation> getRegularOperations(){

  return operations.regularOperations();

}

Location: ModificationStatement.java

Content: 

public StatementRestrictions getRestrictions(){

  return restrictions;

}

Location: ModificationStatement.java

Content: 

public List<Operation> getStaticOperations(){

  return operations.staticOperations();

}

Location: ModificationStatement.java

Content: 

public long getTimestamp(long now,QueryOptions options) throws InvalidRequestException {

  return attrs.getTimestamp(now,options);

}

Location: ModificationStatement.java

Content: 

public int getTimeToLive(QueryOptions options) throws InvalidRequestException {

  return attrs.getTimeToLive(options,metadata);

}

Location: ModificationStatement.java

Content: 

public boolean hasConditions(){

  return !conditions.isEmpty();

}

Location: ModificationStatement.java

Content: 

public boolean hasIfExistCondition(){

  return conditions.isIfExists();

}

Location: ModificationStatement.java

Content: 

public boolean hasIfNotExistCondition(){

  return conditions.isIfNotExists();

}

Location: ModificationStatement.java

Content: 

public boolean hasSlices(){

  return type.allowClusteringColumnSlices() && getRestrictions().hasClusteringColumnsRestrictions() && getRestrictions().isColumnRange();

}

Location: ModificationStatement.java

Content: 

public boolean isTimestampSet(){

  return attrs.isTimestampSet();

}

Location: ModificationStatement.java

Content: 

public boolean isView(){

  return metadata().isView();

}

Location: ModificationStatement.java

Content: 

public boolean isVirtual(){

  return metadata().isVirtual();

}

Location: ModificationStatement.java

Content: 

private CQL3CasRequest makeCasRequest(QueryState queryState,QueryOptions options){

  List<ByteBuffer> keys=buildPartitionKeyNames(options);

  checkFalse(restrictions.keyIsInRelation(),"IN on the partition key is not supported with conditional %s",type.isUpdate() ? "updates" : "deletions");

  DecoratedKey key=metadata().partitioner.decorateKey(keys.get(0));

  long timestamp=options.getTimestamp(queryState);

  int nowInSeconds=options.getNowInSeconds(queryState);

  checkFalse(restrictions.clusteringKeyRestrictionsHasIN(),"IN on the clustering key columns is not supported with conditional %s",type.isUpdate() ? "updates" : "deletions");

  Clustering<?> clustering=Iterables.getOnlyElement(createClustering(options));

  CQL3CasRequest request=new CQL3CasRequest(metadata(),key,conditionColumns(),updatesRegularRows(),updatesStaticRow());

  addConditions(clustering,request,options);

  request.addRowUpdate(clustering,this,options,timestamp,nowInSeconds);

  return request;

}

Location: ModificationStatement.java

Content: 

private UpdateParameters makeUpdateParameters(Collection<ByteBuffer> keys,ClusteringIndexFilter filter,QueryOptions options,DataLimits limits,boolean local,long timestamp,int nowInSeconds,long queryStartNanoTime){

  Map<DecoratedKey,Partition> lists=readRequiredLists(keys,filter,limits,local,options.getConsistency(),nowInSeconds,queryStartNanoTime);

  return new UpdateParameters(metadata(),updatedColumns(),options,getTimestamp(timestamp,options),nowInSeconds,getTimeToLive(options),lists);

}

Location: ModificationStatement.java

Content: 

private UpdateParameters makeUpdateParameters(Collection<ByteBuffer> keys,NavigableSet<Clustering<?>> clusterings,QueryOptions options,boolean local,long timestamp,int nowInSeconds,long queryStartNanoTime){

  if (clusterings.contains(Clustering.STATIC_CLUSTERING))   return makeUpdateParameters(keys,new ClusteringIndexSliceFilter(Slices.ALL,false),options,DataLimits.cqlLimits(1),local,timestamp,nowInSeconds,queryStartNanoTime);

  return makeUpdateParameters(keys,new ClusteringIndexNamesFilter(clusterings,false),options,DataLimits.NONE,local,timestamp,nowInSeconds,queryStartNanoTime);

}

Location: ModificationStatement.java

Content: 

private static ResultSet merge(ResultSet left,ResultSet right){

  if (left.size() == 0)   return right;

 else   if (right.size() == 0)   return left;

  assert left.size() == 1;

  int size=left.metadata.names.size() + right.metadata.names.size();

  List<ColumnSpecification> specs=new ArrayList<ColumnSpecification>(size);

  specs.addAll(left.metadata.names);

  specs.addAll(right.metadata.names);

  List<List<ByteBuffer>> rows=new ArrayList<>(right.size());

  for (int i=0; i < right.size(); i++) {

    List<ByteBuffer> row=new ArrayList<ByteBuffer>(size);

    row.addAll(left.rows.get(0));

    row.addAll(right.rows.get(i));

    rows.add(row);

  }

  return new ResultSet(new ResultSet.ResultMetadata(EMPTY_HASH,specs),rows);

}

Location: ModificationStatement.java

Content: 

public ModificationStatement(StatementType type,VariableSpecifications bindVariables,TableMetadata metadata,Operations operations,StatementRestrictions restrictions,Conditions conditions,Attributes attrs){

  this.type=type;

  this.bindVariables=bindVariables;

  this.metadata=metadata;

  this.restrictions=restrictions;

  this.operations=operations;

  this.conditions=conditions;

  this.attrs=attrs;

  if (!conditions.isEmpty()) {

    checkFalse(metadata.isCounter(),"Conditional updates are not supported on counter tables");

    checkFalse(attrs.isTimestampSet(),"Cannot provide custom timestamp for conditional updates");

  }

  RegularAndStaticColumns.Builder conditionColumnsBuilder=RegularAndStaticColumns.builder();

  Iterable<ColumnMetadata> columns=conditions.getColumns();

  if (columns != null)   conditionColumnsBuilder.addAll(columns);

  RegularAndStaticColumns.Builder updatedColumnsBuilder=RegularAndStaticColumns.builder();

  RegularAndStaticColumns.Builder requiresReadBuilder=RegularAndStaticColumns.builder();

  for (  Operation operation : operations) {

    updatedColumnsBuilder.add(operation.column);

    if (operation.requiresRead()) {

      conditionColumnsBuilder.add(operation.column);

      requiresReadBuilder.add(operation.column);

    }

  }

  RegularAndStaticColumns modifiedColumns=updatedColumnsBuilder.build();

  if (metadata.isCompactTable() && modifiedColumns.isEmpty() && updatesRegularRows())   modifiedColumns=metadata.regularAndStaticColumns();

  this.updatedColumns=modifiedColumns;

  this.conditionColumns=conditionColumnsBuilder.build();

  this.requiresRead=requiresReadBuilder.build();

}

Location: ModificationStatement.java

Content: 

private Map<DecoratedKey,Partition> readRequiredLists(Collection<ByteBuffer> partitionKeys,ClusteringIndexFilter filter,DataLimits limits,boolean local,ConsistencyLevel cl,int nowInSeconds,long queryStartNanoTime){

  if (!requiresRead())   return null;

  try {

    cl.validateForRead(keyspace());

  }

 catch (  InvalidRequestException e) {

    throw new InvalidRequestException(String.format("Write operation require a read but consistency %s is not supported on reads",cl));

  }

  List<SinglePartitionReadCommand> commands=new ArrayList<>(partitionKeys.size());

  for (  ByteBuffer key : partitionKeys)   commands.add(SinglePartitionReadCommand.create(metadata(),nowInSeconds,ColumnFilter.selection(this.requiresRead),RowFilter.NONE,limits,metadata().partitioner.decorateKey(key),filter));

  SinglePartitionReadCommand.Group group=new SinglePartitionReadCommand.Group(commands,DataLimits.NONE);

  if (local) {

    try (ReadExecutionController executionController=group.executionController();PartitionIterator iter=group.executeInternal(executionController)){

      return asMaterializedMap(iter);

    }

   }

  try (PartitionIterator iter=group.execute(cl,null,queryStartNanoTime)){

    return asMaterializedMap(iter);

  }

 }

Location: ModificationStatement.java

Content: 

public boolean requiresRead(){

  for (  Operation op : allOperations())   if (op.requiresRead())   return true;

  return false;

}

Location: ModificationStatement.java

Content: 

private Slices toSlices(SortedSet<ClusteringBound<?>> startBounds,SortedSet<ClusteringBound<?>> endBounds){

  assert startBounds.size() == endBounds.size();

  Slices.Builder builder=new Slices.Builder(metadata().comparator);

  Iterator<ClusteringBound<?>> starts=startBounds.iterator();

  Iterator<ClusteringBound<?>> ends=endBounds.iterator();

  while (starts.hasNext()) {

    Slice slice=Slice.make(starts.next(),ends.next());

    if (!slice.isEmpty(metadata().comparator)) {

      builder.add(slice);

    }

  }

  return builder.build();

}

Location: ModificationStatement.java

Content: 

public RegularAndStaticColumns updatedColumns(){

  return updatedColumns;

}

Location: ModificationStatement.java

Content: 

public boolean updatesRegularRows(){

  return metadata().clusteringColumns().isEmpty() || restrictions.hasClusteringColumnsRestrictions();

}

Location: ModificationStatement.java

Content: 

public boolean updatesStaticRow(){

  return operations.appliesToStaticColumns();

}

Location: ModificationStatement.java

Content: 

private <V>void validateClustering(Clustering<V> clustering){

  ValueAccessor<V> accessor=clustering.accessor();

  for (  V v : clustering.getRawValues()) {

    if (v != null && accessor.size(v) > FBUtilities.MAX_UNSIGNED_SHORT)     throw new InvalidRequestException(String.format("Key length of %d is longer than maximum of %d",clustering.dataSize(),FBUtilities.MAX_UNSIGNED_SHORT));

  }

}

