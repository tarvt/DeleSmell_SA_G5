Location: Replica.java

Content: 

@Override public int compareTo(Replica o){

  int c=range.compareTo(o.range);

  if (c == 0)   c=endpoint.compareTo(o.endpoint);

  if (c == 0)   c=Boolean.compare(full,o.full);

  return c;

}

Location: Replica.java

Content: 

public boolean contains(Range<Token> that){

  return range().contains(that);

}

Location: Replica.java

Content: 

public Replica decorateSubrange(Range<Token> subrange){

  Preconditions.checkArgument(range.contains(subrange));

  return new Replica(endpoint(),subrange,isFull());

}

Location: Replica.java

Content: 

public static Replica fullReplica(InetAddressAndPort endpoint,Range<Token> range){

  return new Replica(endpoint,range,true);

}

Location: Replica.java

Content: 

public static Replica fullReplica(InetAddressAndPort endpoint,Token start,Token end){

  return fullReplica(endpoint,new Range<>(start,end));

}

Location: Replica.java

Content: 

public int hashCode(){

  return Objects.hash(endpoint,range,full);

}

Location: Replica.java

Content: 

public boolean intersectsOnRange(Replica replica){

  return range().intersects(replica.range());

}

Location: Replica.java

Content: 

public final boolean isFull(){

  return full;

}

Location: Replica.java

Content: 

public boolean isSelf(){

  return endpoint.equals(FBUtilities.getBroadcastAddressAndPort());

}

Location: Replica.java

Content: 

public final boolean isTransient(){

  return !isFull();

}

Location: Replica.java

Content: 

public Range<Token> range(){

  return range;

}

Location: Replica.java

Content: 

public Replica(InetAddressAndPort endpoint,Range<Token> range,boolean full){

  Preconditions.checkNotNull(endpoint);

  Preconditions.checkNotNull(range);

  this.endpoint=endpoint;

  this.range=range;

  this.full=full;

}

Location: Replica.java

Content: 

public Replica(InetAddressAndPort endpoint,Token start,Token end,boolean full){

  this(endpoint,new Range<>(start,end),full);

}

Location: Replica.java

Content: 

/** 

 * Don't use this method and ignore transient status unless you are explicitly handling it outside this method. This helper method is used by StorageService.calculateStreamAndFetchRanges to perform subtraction. It ignores transient status because it's already being handled in calculateStreamAndFetchRanges.

 */

public RangesAtEndpoint subtractIgnoreTransientStatus(Range<Token> subtract){

  Set<Range<Token>> ranges=this.range.subtract(subtract);

  RangesAtEndpoint.Builder result=RangesAtEndpoint.builder(endpoint,ranges.size());

  for (  Range<Token> subrange : ranges)   result.add(decorateSubrange(subrange));

  return result.build();

}

Location: Replica.java

Content: 

/** 

 * This is used exclusively in TokenMetadata to check if a portion of a range is already replicated by an endpoint so that we only mark as pending the portion that is either not replicated sufficiently (transient when we need full) or at all. If it's not replicated at all it needs to be pending because there is no data. If it's replicated but only transiently and we need to replicate it fully it must be marked as pending until it is available fully otherwise a read might treat this replica as full and not read from a full replica that has the data.

 */

public RangesAtEndpoint subtractSameReplication(RangesAtEndpoint toSubtract){

  Set<Range<Token>> subtractedRanges=range().subtractAll(toSubtract.filter(r -> r.isFull() == isFull()).ranges());

  RangesAtEndpoint.Builder result=RangesAtEndpoint.builder(endpoint,subtractedRanges.size());

  for (  Range<Token> range : subtractedRanges) {

    result.add(decorateSubrange(range));

  }

  return result.build();

}

Location: Replica.java

Content: 

public static Replica transientReplica(InetAddressAndPort endpoint,Range<Token> range){

  return new Replica(endpoint,range,false);

}

Location: Replica.java

Content: 

public static Replica transientReplica(InetAddressAndPort endpoint,Token start,Token end){

  return transientReplica(endpoint,new Range<>(start,end));

}

