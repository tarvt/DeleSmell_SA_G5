Location: EndpointsForRange.java

Content: 

public static Builder builder(Range<Token> range){

  return new Builder(range);

}

Location: EndpointsForRange.java

Content: 

public static Builder builder(Range<Token> range,int capacity){

  return new Builder(range,capacity);

}

Location: EndpointsForRange.java

Content: 

public static EndpointsForRange copyOf(Collection<Replica> replicas){

  if (replicas.isEmpty())   throw new IllegalArgumentException("Collection must be non-empty to copy");

  Range<Token> range=replicas.iterator().next().range();

  assert all(replicas,r -> range.equals(r.range()));

  return builder(range,replicas.size()).addAll(replicas).build();

}

Location: EndpointsForRange.java

Content: 

public static EndpointsForRange empty(Range<Token> range){

  return new EndpointsForRange(range,EMPTY_LIST,EMPTY_MAP);

}

Location: EndpointsForRange.java

Content: 

private EndpointsForRange(Range<Token> range,ReplicaList list,ReplicaMap<InetAddressAndPort> byEndpoint){

  super(list,byEndpoint);

  this.range=range;

  assert range != null;

}

Location: EndpointsForRange.java

Content: 

public EndpointsForToken forToken(Token token){

  if (!range.contains(token))   throw new IllegalArgumentException(token + " is not contained within " + range);

  return new EndpointsForToken(token,list,byEndpoint);

}

