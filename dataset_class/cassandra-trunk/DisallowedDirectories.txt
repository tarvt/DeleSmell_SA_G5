Location: DisallowedDirectories.java

Content: 

/** 

 * Testing only! Clear the set of unwritable directories.

 */

@VisibleForTesting public static void clearUnwritableUnsafe(){

  instance.unwritableDirectories.clear();

}

Location: DisallowedDirectories.java

Content: 

private DisallowedDirectories(){

  MBeanWrapper.instance.registerMBean(this,DEPRECATED_MBEAN_NAME,MBeanWrapper.OnException.LOG);

  MBeanWrapper.instance.registerMBean(this,MBEAN_NAME,MBeanWrapper.OnException.LOG);

}

Location: DisallowedDirectories.java

Content: 

public static int getDirectoriesVersion(){

  return directoriesVersion.get();

}

Location: DisallowedDirectories.java

Content: 

private static File getDirectory(File file){

  if (file.isDirectory())   return file;

  if (file.isFile())   return file.getParentFile();

  if (file.getPath().endsWith(".db"))   return file.getParentFile();

  return file;

}

Location: DisallowedDirectories.java

Content: 

/** 

 * Tells whether or not the directory is disallowed for reads.

 * @return whether or not the directory is disallowed for reads.

 */

public static boolean isUnreadable(File directory){

  return instance.unreadableDirectories.contains(directory);

}

Location: DisallowedDirectories.java

Content: 

/** 

 * Tells whether or not the directory is disallowed for writes.

 * @return whether or not the directory is disallowed for reads.

 */

public static boolean isUnwritable(File directory){

  return instance.unwritableDirectories.contains(directory);

}

Location: DisallowedDirectories.java

Content: 

/** 

 * Adds parent directory of the file (or the file itself, if it is a directory) to the set of unreadable directories.

 * @return the disallowed directory or null if nothing has been added to the list.

 */

public static File maybeMarkUnreadable(File path){

  File directory=getDirectory(path);

  if (instance.unreadableDirectories.add(directory)) {

    directoriesVersion.incrementAndGet();

    logger.warn("Disallowing {} for reads",directory);

    return directory;

  }

  return null;

}

Location: DisallowedDirectories.java

Content: 

/** 

 * Adds parent directory of the file (or the file itself, if it is a directory) to the set of unwritable directories.

 * @return the disallowed directory or null if nothing has been added to the list.

 */

public static File maybeMarkUnwritable(File path){

  File directory=getDirectory(path);

  if (instance.unwritableDirectories.add(directory)) {

    directoriesVersion.incrementAndGet();

    logger.warn("Disallowing {} for writes",directory);

    return directory;

  }

  return null;

}

