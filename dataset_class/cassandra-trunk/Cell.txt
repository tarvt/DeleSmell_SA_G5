Location: Cell.java

Content: 

protected Cell(ColumnMetadata column){

  super(column);

}

Location: Cell.java

Content: 

/** 

 * Whether the cell is a counter cell or not.

 * @return whether the cell is a counter cell or not.

 */

public abstract boolean isCounterCell();

Location: Cell.java

Content: 

/** 

 * Whether the cell is an expiring one or not. <p> Note that this only correspond to whether the cell liveness info have a TTL or not, but doesn't tells whether the cell is already expired or not. You should use  {@link #isLive} for that latter information.

 * @return whether the cell is an expiring one or not.

 */

public abstract boolean isExpiring();

Location: Cell.java

Content: 

/** 

 * Whether the cell is live or not given the current time.

 * @param nowInSec the current time in seconds. This is used todecide if an expiring cell is expired or live.

 * @return whether the cell is live or not at {@code nowInSec}.

 */

public abstract boolean isLive(int nowInSec);

Location: Cell.java

Content: 

/** 

 * Whether the cell is a tombstone or not.

 * @return whether the cell is a tombstone or not.

 */

public abstract boolean isTombstone();

Location: Cell.java

Content: 

@Override public abstract Cell<?> purge(DeletionPurger purger,int nowInSec);

Location: Cell.java

Content: 

public int valueSize(){

  return accessor().size(value());

}

