Location: Term.java

Content: 

public int compareTo(AbstractType<?> comparator,ByteBuffer query){

  return compareTo(comparator,query,true);

}

Location: Term.java

Content: 

public int compareTo(AbstractType<?> comparator,ByteBuffer query,boolean checkFully){

  long position=content.position();

  int padding=termSize.isConstant() ? 0 : 2;

  int len=termSize.isConstant() ? termSize.size : readLength(position);

  return content.comparePageTo(position + padding,checkFully ? len : Math.min(len,query.remaining()),comparator,query);

}

Location: Term.java

Content: 

public long getDataOffset(){

  long position=content.position();

  return position + (termSize.isConstant() ? termSize.size : 2 + readLength(position));

}

Location: Term.java

Content: 

public TokenTreeBuilder getTokens(){

  return tokens;

}

Location: Term.java

Content: 

/** 

 * Whether that term is terminal (this is a shortcut for  {@code this instanceof Term.Terminal}).

 */

default public boolean isTerminal(){

  return false;

}

Location: Term.java

Content: 

private short readLength(long position){

  return (short)(content.getShort(position) & ~(1 << IS_PARTIAL_BIT));

}

Location: Term.java

Content: 

public Term(int position,T value,TokenTreeBuilder tokens){

  this.position=position;

  this.value=value;

  this.tokens=tokens;

}

Location: Term.java

Content: 

public Term(MappedBuffer content,TermSize size,boolean hasMarkedPartials){

  this.content=content;

  this.termSize=size;

  this.hasMarkedPartials=hasMarkedPartials;

}

