Location: SSTableTxnWriter.java

Content: 

@SuppressWarnings("resource") public static SSTableTxnWriter createRangeAware(TableMetadataRef metadata,long keyCount,long repairedAt,UUID pendingRepair,boolean isTransient,SSTableFormat.Type type,int sstableLevel,SerializationHeader header){

  ColumnFamilyStore cfs=Keyspace.open(metadata.keyspace).getColumnFamilyStore(metadata.name);

  LifecycleTransaction txn=LifecycleTransaction.offline(OperationType.WRITE);

  SSTableMultiWriter writer;

  try {

    writer=new RangeAwareSSTableWriter(cfs,keyCount,repairedAt,pendingRepair,isTransient,type,sstableLevel,0,txn,header);

  }

 catch (  IOException e) {

    throw new RuntimeException(e);

  }

  return new SSTableTxnWriter(txn,writer);

}

Location: SSTableTxnWriter.java

Content: 

@SuppressWarnings("resource") public static SSTableTxnWriter create(ColumnFamilyStore cfs,Descriptor descriptor,long keyCount,long repairedAt,UUID pendingRepair,boolean isTransient,int sstableLevel,SerializationHeader header){

  LifecycleTransaction txn=LifecycleTransaction.offline(OperationType.WRITE);

  SSTableMultiWriter writer=cfs.createSSTableMultiWriter(descriptor,keyCount,repairedAt,pendingRepair,isTransient,sstableLevel,header,txn);

  return new SSTableTxnWriter(txn,writer);

}

Location: SSTableTxnWriter.java

Content: 

public static SSTableTxnWriter create(ColumnFamilyStore cfs,Descriptor desc,long keyCount,long repairedAt,UUID pendingRepair,boolean isTransient,SerializationHeader header){

  return create(cfs,desc,keyCount,repairedAt,pendingRepair,isTransient,0,header);

}

Location: SSTableTxnWriter.java

Content: 

@SuppressWarnings("resource") public static SSTableTxnWriter create(TableMetadataRef metadata,Descriptor descriptor,long keyCount,long repairedAt,UUID pendingRepair,boolean isTransient,int sstableLevel,SerializationHeader header,Collection<Index> indexes){

  LifecycleTransaction txn=LifecycleTransaction.offline(OperationType.WRITE);

  MetadataCollector collector=new MetadataCollector(metadata.get().comparator).sstableLevel(sstableLevel);

  SSTableMultiWriter writer=SimpleSSTableMultiWriter.create(descriptor,keyCount,repairedAt,pendingRepair,isTransient,metadata,collector,header,indexes,txn);

  return new SSTableTxnWriter(txn,writer);

}

Location: SSTableTxnWriter.java

Content: 

protected Throwable doAbort(Throwable accumulate){

  return txn.abort(writer.abort(accumulate));

}

Location: SSTableTxnWriter.java

Content: 

protected Throwable doCommit(Throwable accumulate){

  return writer.commit(txn.commit(accumulate));

}

Location: SSTableTxnWriter.java

Content: 

@Override protected Throwable doPostCleanup(Throwable accumulate){

  txn.close();

  writer.close();

  return super.doPostCleanup(accumulate);

}

Location: SSTableTxnWriter.java

Content: 

protected void doPrepare(){

  writer.prepareToCommit();

  txn.prepareToCommit();

}

Location: SSTableTxnWriter.java

Content: 

public SSTableTxnWriter(LifecycleTransaction txn,SSTableMultiWriter writer){

  this.txn=txn;

  this.writer=writer;

}

