Location: RangeTombstoneBoundaryMarker.java

Content: 

public ClusteringBound<?> closeBound(boolean reversed){

  return bound.closeBound(reversed);

}

Location: RangeTombstoneBoundaryMarker.java

Content: 

public DeletionTime closeDeletionTime(boolean reversed){

  return reversed ? startDeletion : endDeletion;

}

Location: RangeTombstoneBoundaryMarker.java

Content: 

public boolean closeIsInclusive(boolean reversed){

  return (bound.kind() == ClusteringPrefix.Kind.INCL_END_EXCL_START_BOUNDARY) ^ reversed;

}

Location: RangeTombstoneBoundaryMarker.java

Content: 

public RangeTombstoneBoundMarker createCorrespondingCloseMarker(boolean reversed){

  return new RangeTombstoneBoundMarker(closeBound(reversed),closeDeletionTime(reversed));

}

Location: RangeTombstoneBoundaryMarker.java

Content: 

public RangeTombstoneBoundMarker createCorrespondingOpenMarker(boolean reversed){

  return new RangeTombstoneBoundMarker(openBound(reversed),openDeletionTime(reversed));

}

Location: RangeTombstoneBoundaryMarker.java

Content: 

/** 

 * The deletion time for the range tombstone this boundary ends (in clustering order).

 */

public DeletionTime endDeletionTime(){

  return endDeletion;

}

Location: RangeTombstoneBoundaryMarker.java

Content: 

public static <V>RangeTombstoneBoundaryMarker exclusiveCloseInclusiveOpen(boolean reversed,ClusteringPrefix<V> from,DeletionTime closeDeletion,DeletionTime openDeletion){

  return exclusiveCloseInclusiveOpen(reversed,from.getRawValues(),from.accessor(),closeDeletion,openDeletion);

}

Location: RangeTombstoneBoundaryMarker.java

Content: 

public static <V>RangeTombstoneBoundaryMarker exclusiveCloseInclusiveOpen(boolean reversed,V[] boundValues,ValueAccessor<V> accessor,DeletionTime closeDeletion,DeletionTime openDeletion){

  ClusteringBoundary<V> bound=accessor.factory().exclusiveCloseInclusiveOpen(reversed,boundValues);

  DeletionTime endDeletion=reversed ? openDeletion : closeDeletion;

  DeletionTime startDeletion=reversed ? closeDeletion : openDeletion;

  return new RangeTombstoneBoundaryMarker(bound,endDeletion,startDeletion);

}

Location: RangeTombstoneBoundaryMarker.java

Content: 

public static <V>RangeTombstoneBoundaryMarker inclusiveCloseExclusiveOpen(boolean reversed,ClusteringPrefix<V> from,DeletionTime closeDeletion,DeletionTime openDeletion){

  return inclusiveCloseExclusiveOpen(reversed,from.getRawValues(),from.accessor(),closeDeletion,openDeletion);

}

Location: RangeTombstoneBoundaryMarker.java

Content: 

public static <V>RangeTombstoneBoundaryMarker inclusiveCloseExclusiveOpen(boolean reversed,V[] boundValues,ValueAccessor<V> accessor,DeletionTime closeDeletion,DeletionTime openDeletion){

  ClusteringBoundary<V> bound=accessor.factory().inclusiveCloseExclusiveOpen(reversed,boundValues);

  DeletionTime endDeletion=reversed ? openDeletion : closeDeletion;

  DeletionTime startDeletion=reversed ? closeDeletion : openDeletion;

  return new RangeTombstoneBoundaryMarker(bound,endDeletion,startDeletion);

}

Location: RangeTombstoneBoundaryMarker.java

Content: 

public static <V1,V2>RangeTombstoneBoundaryMarker makeBoundary(boolean reversed,ClusteringBound<V1> close,ClusteringBound<V2> open,DeletionTime closeDeletion,DeletionTime openDeletion){

  assert ClusteringPrefix.Kind.compare(close.kind(),open.kind()) == 0 : "Both bound don't form a boundary";

  boolean isExclusiveClose=close.isExclusive() || (close.isInclusive() && open.isInclusive() && openDeletion.supersedes(closeDeletion));

  return isExclusiveClose ? exclusiveCloseInclusiveOpen(reversed,close.getRawValues(),close.accessor(),closeDeletion,openDeletion) : inclusiveCloseExclusiveOpen(reversed,close.getRawValues(),close.accessor(),closeDeletion,openDeletion);

}

Location: RangeTombstoneBoundaryMarker.java

Content: 

public ClusteringBound<?> openBound(boolean reversed){

  return bound.openBound(reversed);

}

Location: RangeTombstoneBoundaryMarker.java

Content: 

public DeletionTime openDeletionTime(boolean reversed){

  return reversed ? endDeletion : startDeletion;

}

Location: RangeTombstoneBoundaryMarker.java

Content: 

public boolean openIsInclusive(boolean reversed){

  return (bound.kind() == ClusteringPrefix.Kind.EXCL_END_INCL_START_BOUNDARY) ^ reversed;

}

Location: RangeTombstoneBoundaryMarker.java

Content: 

public RangeTombstoneBoundaryMarker(ClusteringBoundary<?> bound,DeletionTime endDeletion,DeletionTime startDeletion){

  super(bound);

  assert bound.isBoundary();

  this.endDeletion=endDeletion;

  this.startDeletion=startDeletion;

}

Location: RangeTombstoneBoundaryMarker.java

Content: 

/** 

 * The deletion time for the range tombstone this boundary starts (in clustering order).

 */

public DeletionTime startDeletionTime(){

  return startDeletion;

}

Location: RangeTombstoneBoundaryMarker.java

Content: 

public RangeTombstoneBoundaryMarker withNewOpeningDeletionTime(boolean reversed,DeletionTime newDeletionTime){

  return new RangeTombstoneBoundaryMarker(clustering(),reversed ? newDeletionTime : endDeletion,reversed ? startDeletion : newDeletionTime);

}

