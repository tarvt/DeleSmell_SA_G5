Location: BigTableReader.java

Content: 

BigTableReader(SSTableReaderBuilder builder){

  super(builder);

}

Location: BigTableReader.java

Content: 

/** 

 * @param key The key to apply as the rhs to the given Operator. A 'fake' key is allowed toallow key selection by token bounds but only if op != * EQ

 * @param op The Operator defining matching keys: the nearest key to the target matching the operator wins.

 * @param updateCacheAndStats true if updating stats and cache

 * @return The index entry corresponding to the key, or null if the key is not present

 */

protected RowIndexEntry getPosition(PartitionPosition key,Operator op,boolean updateCacheAndStats,boolean permitMatchPastLast,SSTableReadsListener listener){

  if (op == Operator.EQ) {

    assert key instanceof DecoratedKey;

    if (!bf.isPresent((DecoratedKey)key)) {

      listener.onSSTableSkipped(this,SkippingReason.BLOOM_FILTER);

      Tracing.trace("Bloom filter allows skipping sstable {}",descriptor.generation);

      return null;

    }

  }

  if ((op == Operator.EQ || op == Operator.GE) && (key instanceof DecoratedKey)) {

    DecoratedKey decoratedKey=(DecoratedKey)key;

    RowIndexEntry cachedPosition=getCachedPosition(decoratedKey,updateCacheAndStats);

    if (cachedPosition != null) {

      listener.onSSTableSelected(this,cachedPosition,SelectionReason.KEY_CACHE_HIT);

      Tracing.trace("Key cache hit for sstable {}",descriptor.generation);

      return cachedPosition;

    }

  }

  boolean skip=false;

  if (key.compareTo(first) < 0) {

    if (op == Operator.EQ)     skip=true;

 else     key=first;

    op=Operator.EQ;

  }

 else {

    int l=last.compareTo(key);

    skip=l <= 0 && (l < 0 || (!permitMatchPastLast && op == Operator.GT));

  }

  if (skip) {

    if (op == Operator.EQ && updateCacheAndStats)     bloomFilterTracker.addFalsePositive();

    listener.onSSTableSkipped(this,SkippingReason.MIN_MAX_KEYS);

    Tracing.trace("Check against min and max keys allows skipping sstable {}",descriptor.generation);

    return null;

  }

  int binarySearchResult=indexSummary.binarySearch(key);

  long sampledPosition=getIndexScanPositionFromBinarySearchResult(binarySearchResult,indexSummary);

  int sampledIndex=getIndexSummaryIndexFromBinarySearchResult(binarySearchResult);

  int effectiveInterval=indexSummary.getEffectiveIndexIntervalAfterIndex(sampledIndex);

  if (ifile == null)   return null;

  int i=0;

  String path=null;

  try (FileDataInput in=ifile.createReader(sampledPosition)){

    path=in.getPath();

    while (!in.isEOF()) {

      i++;

      ByteBuffer indexKey=ByteBufferUtil.readWithShortLength(in);

      boolean opSatisfied;

      boolean exactMatch;

      if (op == Operator.EQ && i <= effectiveInterval) {

        opSatisfied=exactMatch=indexKey.equals(((DecoratedKey)key).getKey());

      }

 else {

        DecoratedKey indexDecoratedKey=decorateKey(indexKey);

        int comparison=indexDecoratedKey.compareTo(key);

        int v=op.apply(comparison);

        opSatisfied=(v == 0);

        exactMatch=(comparison == 0);

        if (v < 0) {

          listener.onSSTableSkipped(this,SkippingReason.PARTITION_INDEX_LOOKUP);

          Tracing.trace("Partition index lookup allows skipping sstable {}",descriptor.generation);

          return null;

        }

      }

      if (opSatisfied) {

        RowIndexEntry indexEntry=rowIndexEntrySerializer.deserialize(in);

        if (exactMatch && updateCacheAndStats) {

          assert key instanceof DecoratedKey;

          DecoratedKey decoratedKey=(DecoratedKey)key;

          if (logger.isTraceEnabled()) {

            try (FileDataInput fdi=dfile.createReader(indexEntry.position)){

              DecoratedKey keyInDisk=decorateKey(ByteBufferUtil.readWithShortLength(fdi));

              if (!keyInDisk.equals(key))               throw new AssertionError(String.format("%s != %s in %s",keyInDisk,key,fdi.getPath()));

            }

           }

          cacheKey(decoratedKey,indexEntry);

        }

        if (op == Operator.EQ && updateCacheAndStats)         bloomFilterTracker.addTruePositive();

        listener.onSSTableSelected(this,indexEntry,SelectionReason.INDEX_ENTRY_FOUND);

        Tracing.trace("Partition index with {} entries found for sstable {}",indexEntry.columnsIndexCount(),descriptor.generation);

        return indexEntry;

      }

      RowIndexEntry.Serializer.skip(in,descriptor.version);

    }

  }

 catch (  IOException e) {

    markSuspect();

    throw new CorruptSSTableException(e,path);

  }

  if (op == SSTableReader.Operator.EQ && updateCacheAndStats)   bloomFilterTracker.addFalsePositive();

  listener.onSSTableSkipped(this,SkippingReason.INDEX_ENTRY_NOT_FOUND);

  Tracing.trace("Partition index lookup complete (bloom filter false positive) for sstable {}",descriptor.generation);

  return null;

}

Location: BigTableReader.java

Content: 

/** 

 * Direct I/O SSTableScanner over the full sstable.

 * @return A Scanner for reading the full SSTable.

 */

public ISSTableScanner getScanner(){

  return BigTableScanner.getScanner(this);

}

Location: BigTableReader.java

Content: 

/** 

 * Direct I/O SSTableScanner over a defined collection of ranges of tokens.

 * @param ranges the range of keys to cover

 * @return A Scanner for seeking over the rows of the SSTable.

 */

public ISSTableScanner getScanner(Collection<Range<Token>> ranges){

  if (ranges != null)   return BigTableScanner.getScanner(this,ranges);

 else   return getScanner();

}

Location: BigTableReader.java

Content: 

@Override public ISSTableScanner getScanner(ColumnFilter columns,DataRange dataRange,SSTableReadsListener listener){

  return BigTableScanner.getScanner(this,columns,dataRange,listener);

}

Location: BigTableReader.java

Content: 

/** 

 * Direct I/O SSTableScanner over an iterator of bounds.

 * @param boundsIterator the keys to cover

 * @return A Scanner for seeking over the rows of the SSTable.

 */

public ISSTableScanner getScanner(Iterator<AbstractBounds<PartitionPosition>> boundsIterator){

  return BigTableScanner.getScanner(this,boundsIterator);

}

Location: BigTableReader.java

Content: 

public UnfilteredRowIterator iterator(DecoratedKey key,Slices slices,ColumnFilter selectedColumns,boolean reversed,SSTableReadsListener listener){

  RowIndexEntry rie=getPosition(key,SSTableReader.Operator.EQ,listener);

  return iterator(null,key,rie,slices,selectedColumns,reversed);

}

Location: BigTableReader.java

Content: 

@SuppressWarnings("resource") public UnfilteredRowIterator iterator(FileDataInput file,DecoratedKey key,RowIndexEntry indexEntry,Slices slices,ColumnFilter selectedColumns,boolean reversed){

  if (indexEntry == null)   return UnfilteredRowIterators.noRowsIterator(metadata(),key,Rows.EMPTY_STATIC_ROW,DeletionTime.LIVE,reversed);

  return reversed ? new SSTableReversedIterator(this,file,key,indexEntry,slices,selectedColumns,ifile) : new SSTableIterator(this,file,key,indexEntry,slices,selectedColumns,ifile);

}

Location: BigTableReader.java

Content: 

@SuppressWarnings("resource") @Override public UnfilteredRowIterator simpleIterator(FileDataInput dfile,DecoratedKey key,RowIndexEntry position,boolean tombstoneOnly){

  return SSTableIdentityIterator.create(this,dfile,position,key,tombstoneOnly);

}

