Location: Tuples.java

Content: 

public static boolean checkIfTupleType(AbstractType<?> tuple){

  return (tuple instanceof TupleType) || (tuple instanceof ReversedType && ((ReversedType)tuple).baseType instanceof TupleType);

}

Location: Tuples.java

Content: 

public static ColumnSpecification componentSpecOf(ColumnSpecification column,int component){

  return new ColumnSpecification(column.ksName,column.cfName,new ColumnIdentifier(String.format("%s[%d]",column.name,component),true),(getTupleType(column.type)).type(component));

}

Location: Tuples.java

Content: 

/** 

 * Returns the exact TupleType from the items if it can be known.

 * @param items the items mapped to the tuple elements

 * @param mapper the mapper used to retrieve the element types from the  items

 * @return the exact TupleType from the items if it can be known or <code>null</code>

 */

public static <T>AbstractType<?> getExactTupleTypeIfKnown(List<T> items,java.util.function.Function<T,AbstractType<?>> mapper){

  List<AbstractType<?>> types=new ArrayList<>(items.size());

  for (  T item : items) {

    AbstractType<?> type=mapper.apply(item);

    if (type == null)     return null;

    types.add(type);

  }

  return new TupleType(types);

}

Location: Tuples.java

Content: 

public static TupleType getTupleType(AbstractType<?> tuple){

  return (tuple instanceof ReversedType ? ((TupleType)((ReversedType)tuple).baseType) : (TupleType)tuple);

}

Location: Tuples.java

Content: 

/** 

 * Tests that the tuple with the specified elements can be assigned to the specified column.

 * @param receiver the receiving column

 * @param elements the tuple elements

 */

public static AssignmentTestable.TestResult testTupleAssignment(ColumnSpecification receiver,List<? extends AssignmentTestable> elements){

  try {

    validateTupleAssignableTo(receiver,elements);

    return AssignmentTestable.TestResult.WEAKLY_ASSIGNABLE;

  }

 catch (  InvalidRequestException e) {

    return AssignmentTestable.TestResult.NOT_ASSIGNABLE;

  }

}

Location: Tuples.java

Content: 

private Tuples(){

}

Location: Tuples.java

Content: 

/** 

 * Create a <code>String</code> representation of the tuple from the specified items associated to the tuples elements.

 * @param items items associated to the tuple elements

 * @param mapper the mapper used to map the items to the <code>String</code> representation of the tuple elements

 * @return a <code>String</code> representation of the tuple

 */

public static <T>String tupleToString(Iterable<T> items,java.util.function.Function<T,String> mapper){

  return StreamSupport.stream(items.spliterator(),false).map(e -> mapper.apply(e)).collect(Collectors.joining(", ","(",")"));

}

Location: Tuples.java

Content: 

/** 

 * Create a <code>String</code> representation of the tuple containing the specified elements.

 * @param elements the tuple elements

 * @return a <code>String</code> representation of the tuple

 */

public static String tupleToString(List<?> elements){

  return tupleToString(elements,Object::toString);

}

Location: Tuples.java

Content: 

/** 

 * Checks if the tuple with the specified elements can be assigned to the specified column.

 * @param receiver the receiving column

 * @param elements the tuple elements

 * @throws InvalidRequestException if the tuple cannot be assigned to the specified column.

 */

public static void validateTupleAssignableTo(ColumnSpecification receiver,List<? extends AssignmentTestable> elements){

  if (!checkIfTupleType(receiver.type))   throw invalidRequest("Invalid tuple type literal for %s of type %s",receiver.name,receiver.type.asCQL3Type());

  TupleType tt=getTupleType(receiver.type);

  for (int i=0; i < elements.size(); i++) {

    if (i >= tt.size()) {

      throw invalidRequest("Invalid tuple literal for %s: too many elements. Type %s expects %d but got %d",receiver.name,tt.asCQL3Type(),tt.size(),elements.size());

    }

    AssignmentTestable value=elements.get(i);

    ColumnSpecification spec=componentSpecOf(receiver,i);

    if (!value.testAssignment(receiver.ksName,spec).isAssignable())     throw invalidRequest("Invalid tuple literal for %s: component %d is not of type %s",receiver.name,i,spec.type.asCQL3Type());

  }

}

