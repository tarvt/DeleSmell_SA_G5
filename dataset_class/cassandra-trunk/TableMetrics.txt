Location: TableMetrics.java

Content: 

@VisibleForTesting public static long[] addHistogram(long[] sums,long[] buckets){

  if (buckets.length > sums.length) {

    sums=Arrays.copyOf(sums,buckets.length);

  }

  for (int i=0; i < buckets.length; i++) {

    sums[i]+=buckets[i];

  }

  return sums;

}

Location: TableMetrics.java

Content: 

private static long[] combineHistograms(Iterable<SSTableReader> sstables,GetHistogram getHistogram){

  Iterator<SSTableReader> iterator=sstables.iterator();

  if (!iterator.hasNext()) {

    return ArrayUtils.EMPTY_LONG_ARRAY;

  }

  long[] firstBucket=getHistogram.getHistogram(iterator.next()).getBuckets(false);

  long[] values=Arrays.copyOf(firstBucket,firstBucket.length);

  while (iterator.hasNext()) {

    long[] nextBucket=getHistogram.getHistogram(iterator.next()).getBuckets(false);

    values=addHistogram(values,nextBucket);

  }

  return values;

}

Location: TableMetrics.java

Content: 

/** 

 * Computes the compression ratio for the specified SSTables

 * @param sstables the SSTables

 * @return the compression ratio for the specified SSTables

 */

private static Double computeCompressionRatio(Iterable<SSTableReader> sstables){

  double compressedLengthSum=0;

  double dataLengthSum=0;

  for (  SSTableReader sstable : sstables) {

    if (sstable.compression) {

      assert sstable.openReason != SSTableReader.OpenReason.EARLY;

      CompressionMetadata compressionMetadata=sstable.getCompressionMetadata();

      compressedLengthSum+=compressionMetadata.compressedFileLength;

      dataLengthSum+=compressionMetadata.dataLength;

    }

  }

  return dataLengthSum != 0 ? compressedLengthSum / dataLengthSum : MetadataCollector.NO_COMPRESSION_RATIO;

}

Location: TableMetrics.java

Content: 

private Histogram createHistogram(String name,boolean considerZeroes){

  Histogram histogram=Metrics.histogram(factory.createMetricName(name),aliasFactory.createMetricName(name),considerZeroes);

  register(name,name,histogram);

  return histogram;

}

Location: TableMetrics.java

Content: 

private LatencyMetrics createLatencyMetrics(String namePrefix,LatencyMetrics... parents){

  LatencyMetrics metric=new LatencyMetrics(factory,namePrefix,parents);

  all.add(metric::release);

  return metric;

}

Location: TableMetrics.java

Content: 

/** 

 * Creates a counter that will also have a global counter thats the sum of all counters across different column families

 */

protected Counter createTableCounter(final String name){

  return createTableCounter(name,name);

}

Location: TableMetrics.java

Content: 

protected Counter createTableCounter(final String name,final String alias){

  Counter cfCounter=Metrics.counter(factory.createMetricName(name),aliasFactory.createMetricName(alias));

  if (register(name,alias,cfCounter)) {

    Metrics.register(GLOBAL_FACTORY.createMetricName(name),GLOBAL_ALIAS_FACTORY.createMetricName(alias),new Gauge<Long>(){

      public Long getValue(){

        long total=0;

        for (        Metric cfGauge : ALL_TABLE_METRICS.get(name)) {

          total+=((Counter)cfGauge).getCount();

        }

        return total;

      }

    }

);

  }

  return cfCounter;

}

Location: TableMetrics.java

Content: 

/** 

 * Same as  {@link #createTableGauge(String,Gauge,Gauge)} but accepts a deprecatedname for a table  {@code Gauge}. Prefer that method when deprecation is not necessary.

 * @param name the name of the metric registered with the "Table" type

 * @param deprecated the deprecated name for the metric registered with the "Table" type

 */

protected <G,T>Gauge<T> createTableGaugeWithDeprecation(String name,String deprecated,Gauge<T> gauge,Gauge<G> globalGauge){

  assert deprecated != null : "no deprecated metric name provided";

  assert globalGauge != null : "no global Gauge metric provided";

  Gauge<T> cfGauge=Metrics.register(factory.createMetricName(name),gauge,aliasFactory.createMetricName(name),factory.createMetricName(deprecated),aliasFactory.createMetricName(deprecated));

  if (register(name,name,deprecated,cfGauge)) {

    Metrics.register(GLOBAL_FACTORY.createMetricName(name),globalGauge,GLOBAL_ALIAS_FACTORY.createMetricName(name),GLOBAL_FACTORY.createMetricName(deprecated),GLOBAL_ALIAS_FACTORY.createMetricName(deprecated));

  }

  return cfGauge;

}

Location: TableMetrics.java

Content: 

/** 

 * Create a gauge that will be part of a merged version of all column families.  The global gauge will merge each CF gauge by adding their values

 */

protected <T extends Number>Gauge<T> createTableGauge(final String name,Gauge<T> gauge){

  return createTableGauge(name,gauge,new GlobalTableGauge(name));

}

Location: TableMetrics.java

Content: 

/** 

 * Create a gauge that will be part of a merged version of all column families.  The global gauge is defined as the globalGauge parameter

 */

protected <G,T>Gauge<T> createTableGauge(String name,Gauge<T> gauge,Gauge<G> globalGauge){

  return createTableGauge(name,name,gauge,globalGauge);

}

Location: TableMetrics.java

Content: 

protected <G,T>Gauge<T> createTableGauge(String name,String alias,Gauge<T> gauge,Gauge<G> globalGauge){

  Gauge<T> cfGauge=Metrics.register(factory.createMetricName(name),aliasFactory.createMetricName(alias),gauge);

  if (register(name,alias,cfGauge) && globalGauge != null) {

    Metrics.register(GLOBAL_FACTORY.createMetricName(name),GLOBAL_ALIAS_FACTORY.createMetricName(alias),globalGauge);

  }

  return cfGauge;

}

Location: TableMetrics.java

Content: 

protected Histogram createTableHistogram(String name,boolean considerZeroes){

  return createTableHistogram(name,name,considerZeroes);

}

Location: TableMetrics.java

Content: 

/** 

 * Create a histogram-like interface that will register both a CF, keyspace and global level histogram and forward any updates to both

 */

protected TableHistogram createTableHistogram(String name,Histogram keyspaceHistogram,boolean considerZeroes){

  return createTableHistogram(name,name,keyspaceHistogram,considerZeroes);

}

Location: TableMetrics.java

Content: 

protected Histogram createTableHistogram(String name,String alias,boolean considerZeroes){

  Histogram tableHistogram=Metrics.histogram(factory.createMetricName(name),aliasFactory.createMetricName(alias),considerZeroes);

  register(name,alias,tableHistogram);

  return tableHistogram;

}

Location: TableMetrics.java

Content: 

protected TableHistogram createTableHistogram(String name,String alias,Histogram keyspaceHistogram,boolean considerZeroes){

  Histogram cfHistogram=Metrics.histogram(factory.createMetricName(name),aliasFactory.createMetricName(alias),considerZeroes);

  register(name,alias,cfHistogram);

  return new TableHistogram(cfHistogram,keyspaceHistogram,Metrics.histogram(GLOBAL_FACTORY.createMetricName(name),GLOBAL_ALIAS_FACTORY.createMetricName(alias),considerZeroes));

}

Location: TableMetrics.java

Content: 

private Meter createTableMeter(final String name){

  return createTableMeter(name,name);

}

Location: TableMetrics.java

Content: 

protected TableMeter createTableMeter(String name,Meter keyspaceMeter){

  return createTableMeter(name,name,keyspaceMeter);

}

Location: TableMetrics.java

Content: 

private Meter createTableMeter(final String name,final String alias){

  Meter tableMeter=Metrics.meter(factory.createMetricName(name),aliasFactory.createMetricName(alias));

  register(name,alias,tableMeter);

  return tableMeter;

}

Location: TableMetrics.java

Content: 

protected TableMeter createTableMeter(String name,String alias,Meter keyspaceMeter){

  Meter meter=Metrics.meter(factory.createMetricName(name),aliasFactory.createMetricName(alias));

  register(name,alias,meter);

  return new TableMeter(meter,keyspaceMeter,Metrics.meter(GLOBAL_FACTORY.createMetricName(name),GLOBAL_ALIAS_FACTORY.createMetricName(alias)));

}

Location: TableMetrics.java

Content: 

protected Timer createTableTimer(String name){

  Timer tableTimer=Metrics.timer(factory.createMetricName(name),aliasFactory.createMetricName(name));

  register(name,name,tableTimer);

  return tableTimer;

}

Location: TableMetrics.java

Content: 

protected TableTimer createTableTimer(String name,Timer keyspaceTimer){

  Timer cfTimer=Metrics.timer(factory.createMetricName(name),aliasFactory.createMetricName(name));

  register(name,name,keyspaceTimer);

  Timer global=Metrics.timer(GLOBAL_FACTORY.createMetricName(name),GLOBAL_ALIAS_FACTORY.createMetricName(name));

  return new TableTimer(cfTimer,keyspaceTimer,global);

}

Location: TableMetrics.java

Content: 

/** 

 * Registers a metric to be removed when unloading CF.

 * @return true if first time metric with that name has been registered

 */

private boolean register(String name,String alias,Metric metric){

  return register(name,alias,null,metric);

}

Location: TableMetrics.java

Content: 

/** 

 * Registers a metric to be removed when unloading CF.

 * @param name the name of the metric registered with the "Table" type

 * @param alias the name of the metric registered with the legacy "ColumnFamily" type

 * @param deprecated an optionally null deprecated name for the metric registered with the "Table"

 * @return true if first time metric with that name has been registered

 */

private boolean register(String name,String alias,String deprecated,Metric metric){

  boolean ret=ALL_TABLE_METRICS.putIfAbsent(name,ConcurrentHashMap.newKeySet()) == null;

  ALL_TABLE_METRICS.get(name).add(metric);

  all.add(() -> releaseMetric(name,alias,deprecated));

  return ret;

}

Location: TableMetrics.java

Content: 

private void releaseMetric(String tableMetricName,String cfMetricName,String tableMetricAlias){

  CassandraMetricsRegistry.MetricName name=factory.createMetricName(tableMetricName);

  final Metric metric=Metrics.getMetrics().get(name.getMetricName());

  if (metric != null) {

    ALL_TABLE_METRICS.get(tableMetricName).remove(metric);

    CassandraMetricsRegistry.MetricName cfAlias=aliasFactory.createMetricName(cfMetricName);

    if (tableMetricAlias != null) {

      Metrics.remove(name,cfAlias,factory.createMetricName(tableMetricAlias),aliasFactory.createMetricName(tableMetricAlias));

    }

 else {

      Metrics.remove(name,cfAlias);

    }

  }

}

Location: TableMetrics.java

Content: 

/** 

 * Creates metrics for given  {@link ColumnFamilyStore}.

 * @param cfs ColumnFamilyStore to measure metrics

 */

public TableMetrics(final ColumnFamilyStore cfs){

  factory=new TableMetricNameFactory(cfs,"Table");

  aliasFactory=new TableMetricNameFactory(cfs,"ColumnFamily");

  samplers=new EnumMap<>(SamplerType.class);

  topReadPartitionFrequency=new FrequencySampler<ByteBuffer>(){

    public String toString(    ByteBuffer value){

      return cfs.metadata().partitionKeyType.getString(value);

    }

  }

;

  topWritePartitionFrequency=new FrequencySampler<ByteBuffer>(){

    public String toString(    ByteBuffer value){

      return cfs.metadata().partitionKeyType.getString(value);

    }

  }

;

  topWritePartitionSize=new MaxSampler<ByteBuffer>(){

    public String toString(    ByteBuffer value){

      return cfs.metadata().partitionKeyType.getString(value);

    }

  }

;

  topCasPartitionContention=new FrequencySampler<ByteBuffer>(){

    public String toString(    ByteBuffer value){

      return cfs.metadata().partitionKeyType.getString(value);

    }

  }

;

  topLocalReadQueryTime=new MaxSampler<String>(){

    public String toString(    String value){

      return value;

    }

  }

;

  samplers.put(SamplerType.READS,topReadPartitionFrequency);

  samplers.put(SamplerType.WRITES,topWritePartitionFrequency);

  samplers.put(SamplerType.WRITE_SIZE,topWritePartitionSize);

  samplers.put(SamplerType.CAS_CONTENTIONS,topCasPartitionContention);

  samplers.put(SamplerType.LOCAL_READ_TIME,topLocalReadQueryTime);

  memtableColumnsCount=createTableGauge("MemtableColumnsCount",() -> cfs.getTracker().getView().getCurrentMemtable().getOperations());

  memtableOnHeapDataSize=createTableGaugeWithDeprecation("MemtableOnHeapDataSize","MemtableOnHeapSize",() -> cfs.getTracker().getView().getCurrentMemtable().getAllocator().onHeap().owns(),new GlobalTableGauge("MemtableOnHeapDataSize"));

  memtableOffHeapDataSize=createTableGaugeWithDeprecation("MemtableOffHeapDataSize","MemtableOffHeapSize",() -> cfs.getTracker().getView().getCurrentMemtable().getAllocator().offHeap().owns(),new GlobalTableGauge("MemtableOnHeapDataSize"));

  memtableLiveDataSize=createTableGauge("MemtableLiveDataSize",() -> cfs.getTracker().getView().getCurrentMemtable().getLiveDataSize());

  allMemtablesOnHeapDataSize=createTableGaugeWithDeprecation("AllMemtablesOnHeapDataSize","AllMemtablesHeapSize",new Gauge<Long>(){

    public Long getValue(){

      long size=0;

      for (      ColumnFamilyStore cfs2 : cfs.concatWithIndexes())       size+=cfs2.getTracker().getView().getCurrentMemtable().getAllocator().onHeap().owns();

      return size;

    }

  }

,new GlobalTableGauge("AllMemtablesOnHeapDataSize"));

  allMemtablesOffHeapDataSize=createTableGaugeWithDeprecation("AllMemtablesOffHeapDataSize","AllMemtablesOffHeapSize",new Gauge<Long>(){

    public Long getValue(){

      long size=0;

      for (      ColumnFamilyStore cfs2 : cfs.concatWithIndexes())       size+=cfs2.getTracker().getView().getCurrentMemtable().getAllocator().offHeap().owns();

      return size;

    }

  }

,new GlobalTableGauge("AllMemtablesOffHeapDataSize"));

  allMemtablesLiveDataSize=createTableGauge("AllMemtablesLiveDataSize",new Gauge<Long>(){

    public Long getValue(){

      long size=0;

      for (      ColumnFamilyStore cfs2 : cfs.concatWithIndexes())       size+=cfs2.getTracker().getView().getCurrentMemtable().getLiveDataSize();

      return size;

    }

  }

);

  memtableSwitchCount=createTableCounter("MemtableSwitchCount");

  estimatedPartitionSizeHistogram=createTableGauge("EstimatedPartitionSizeHistogram","EstimatedRowSizeHistogram",() -> combineHistograms(cfs.getSSTables(SSTableSet.CANONICAL),SSTableReader::getEstimatedPartitionSize),null);

  estimatedPartitionCount=createTableGauge("EstimatedPartitionCount","EstimatedRowCount",new Gauge<Long>(){

    public Long getValue(){

      long memtablePartitions=0;

      for (      Memtable memtable : cfs.getTracker().getView().getAllMemtables())       memtablePartitions+=memtable.partitionCount();

      try (ColumnFamilyStore.RefViewFragment refViewFragment=cfs.selectAndReference(View.selectFunction(SSTableSet.CANONICAL))){

        return SSTableReader.getApproximateKeyCount(refViewFragment.sstables) + memtablePartitions;

      }

     }

  }

,null);

  estimatedColumnCountHistogram=createTableGauge("EstimatedColumnCountHistogram","EstimatedColumnCountHistogram",() -> combineHistograms(cfs.getSSTables(SSTableSet.CANONICAL),SSTableReader::getEstimatedCellPerPartitionCount),null);

  sstablesPerReadHistogram=createTableHistogram("SSTablesPerReadHistogram",cfs.keyspace.metric.sstablesPerReadHistogram,true);

  compressionRatio=createTableGauge("CompressionRatio",new Gauge<Double>(){

    public Double getValue(){

      return computeCompressionRatio(cfs.getSSTables(SSTableSet.CANONICAL));

    }

  }

,new Gauge<Double>(){

    public Double getValue(){

      List<SSTableReader> sstables=new ArrayList<>();

      Keyspace.all().forEach(ks -> sstables.addAll(ks.getAllSSTables(SSTableSet.CANONICAL)));

      return computeCompressionRatio(sstables);

    }

  }

);

  percentRepaired=createTableGauge("PercentRepaired",new Gauge<Double>(){

    public Double getValue(){

      double repaired=0;

      double total=0;

      for (      SSTableReader sstable : cfs.getSSTables(SSTableSet.CANONICAL)) {

        if (sstable.isRepaired()) {

          repaired+=sstable.uncompressedLength();

        }

        total+=sstable.uncompressedLength();

      }

      return total > 0 ? (repaired / total) * 100 : 100.0;

    }

  }

);

  bytesRepaired=createTableGauge("BytesRepaired",new Gauge<Long>(){

    public Long getValue(){

      long size=0;

      for (      SSTableReader sstable : Iterables.filter(cfs.getSSTables(SSTableSet.CANONICAL),SSTableReader::isRepaired)) {

        size+=sstable.uncompressedLength();

      }

      return size;

    }

  }

);

  bytesUnrepaired=createTableGauge("BytesUnrepaired",new Gauge<Long>(){

    public Long getValue(){

      long size=0;

      for (      SSTableReader sstable : Iterables.filter(cfs.getSSTables(SSTableSet.CANONICAL),s -> !s.isRepaired() && !s.isPendingRepair())) {

        size+=sstable.uncompressedLength();

      }

      return size;

    }

  }

);

  bytesPendingRepair=createTableGauge("BytesPendingRepair",new Gauge<Long>(){

    public Long getValue(){

      long size=0;

      for (      SSTableReader sstable : Iterables.filter(cfs.getSSTables(SSTableSet.CANONICAL),SSTableReader::isPendingRepair)) {

        size+=sstable.uncompressedLength();

      }

      return size;

    }

  }

);

  readLatency=createLatencyMetrics("Read",cfs.keyspace.metric.readLatency,GLOBAL_READ_LATENCY);

  writeLatency=createLatencyMetrics("Write",cfs.keyspace.metric.writeLatency,GLOBAL_WRITE_LATENCY);

  rangeLatency=createLatencyMetrics("Range",cfs.keyspace.metric.rangeLatency,GLOBAL_RANGE_LATENCY);

  pendingFlushes=createTableCounter("PendingFlushes");

  bytesFlushed=createTableCounter("BytesFlushed");

  compactionBytesWritten=createTableCounter("CompactionBytesWritten");

  pendingCompactions=createTableGauge("PendingCompactions",() -> cfs.getCompactionStrategyManager().getEstimatedRemainingTasks());

  liveSSTableCount=createTableGauge("LiveSSTableCount",() -> cfs.getTracker().getView().liveSSTables().size());

  oldVersionSSTableCount=createTableGauge("OldVersionSSTableCount",new Gauge<Integer>(){

    public Integer getValue(){

      int count=0;

      for (      SSTableReader sstable : cfs.getLiveSSTables())       if (!sstable.descriptor.version.isLatestVersion())       count++;

      return count;

    }

  }

);

  liveDiskSpaceUsed=createTableCounter("LiveDiskSpaceUsed");

  totalDiskSpaceUsed=createTableCounter("TotalDiskSpaceUsed");

  minPartitionSize=createTableGauge("MinPartitionSize","MinRowSize",new Gauge<Long>(){

    public Long getValue(){

      long min=0;

      for (      SSTableReader sstable : cfs.getSSTables(SSTableSet.CANONICAL)) {

        if (min == 0 || sstable.getEstimatedPartitionSize().min() < min)         min=sstable.getEstimatedPartitionSize().min();

      }

      return min;

    }

  }

,new Gauge<Long>(){

    public Long getValue(){

      long min=Long.MAX_VALUE;

      for (      Metric cfGauge : ALL_TABLE_METRICS.get("MinPartitionSize")) {

        min=Math.min(min,((Gauge<? extends Number>)cfGauge).getValue().longValue());

      }

      return min;

    }

  }

);

  maxPartitionSize=createTableGauge("MaxPartitionSize","MaxRowSize",new Gauge<Long>(){

    public Long getValue(){

      long max=0;

      for (      SSTableReader sstable : cfs.getSSTables(SSTableSet.CANONICAL)) {

        if (sstable.getEstimatedPartitionSize().max() > max)         max=sstable.getEstimatedPartitionSize().max();

      }

      return max;

    }

  }

,new Gauge<Long>(){

    public Long getValue(){

      long max=0;

      for (      Metric cfGauge : ALL_TABLE_METRICS.get("MaxPartitionSize")) {

        max=Math.max(max,((Gauge<? extends Number>)cfGauge).getValue().longValue());

      }

      return max;

    }

  }

);

  meanPartitionSize=createTableGauge("MeanPartitionSize","MeanRowSize",new Gauge<Long>(){

    public Long getValue(){

      long sum=0;

      long count=0;

      for (      SSTableReader sstable : cfs.getSSTables(SSTableSet.CANONICAL)) {

        long n=sstable.getEstimatedPartitionSize().count();

        sum+=sstable.getEstimatedPartitionSize().mean() * n;

        count+=n;

      }

      return count > 0 ? sum / count : 0;

    }

  }

,new Gauge<Long>(){

    public Long getValue(){

      long sum=0;

      long count=0;

      for (      Keyspace keyspace : Keyspace.all()) {

        for (        SSTableReader sstable : keyspace.getAllSSTables(SSTableSet.CANONICAL)) {

          long n=sstable.getEstimatedPartitionSize().count();

          sum+=sstable.getEstimatedPartitionSize().mean() * n;

          count+=n;

        }

      }

      return count > 0 ? sum / count : 0;

    }

  }

);

  bloomFilterFalsePositives=createTableGauge("BloomFilterFalsePositives",new Gauge<Long>(){

    public Long getValue(){

      long count=0L;

      for (      SSTableReader sstable : cfs.getSSTables(SSTableSet.LIVE))       count+=sstable.getBloomFilterFalsePositiveCount();

      return count;

    }

  }

);

  recentBloomFilterFalsePositives=createTableGauge("RecentBloomFilterFalsePositives",new Gauge<Long>(){

    public Long getValue(){

      long count=0L;

      for (      SSTableReader sstable : cfs.getSSTables(SSTableSet.LIVE))       count+=sstable.getRecentBloomFilterFalsePositiveCount();

      return count;

    }

  }

);

  bloomFilterFalseRatio=createTableGauge("BloomFilterFalseRatio",new Gauge<Double>(){

    public Double getValue(){

      long falseCount=0L;

      long trueCount=0L;

      for (      SSTableReader sstable : cfs.getSSTables(SSTableSet.LIVE)) {

        falseCount+=sstable.getBloomFilterFalsePositiveCount();

        trueCount+=sstable.getBloomFilterTruePositiveCount();

      }

      if (falseCount == 0L && trueCount == 0L)       return 0d;

      return (double)falseCount / (trueCount + falseCount);

    }

  }

,new Gauge<Double>(){

    public Double getValue(){

      long falseCount=0L;

      long trueCount=0L;

      for (      Keyspace keyspace : Keyspace.all()) {

        for (        SSTableReader sstable : keyspace.getAllSSTables(SSTableSet.LIVE)) {

          falseCount+=sstable.getBloomFilterFalsePositiveCount();

          trueCount+=sstable.getBloomFilterTruePositiveCount();

        }

      }

      if (falseCount == 0L && trueCount == 0L)       return 0d;

      return (double)falseCount / (trueCount + falseCount);

    }

  }

);

  recentBloomFilterFalseRatio=createTableGauge("RecentBloomFilterFalseRatio",new Gauge<Double>(){

    public Double getValue(){

      long falseCount=0L;

      long trueCount=0L;

      for (      SSTableReader sstable : cfs.getSSTables(SSTableSet.LIVE)) {

        falseCount+=sstable.getRecentBloomFilterFalsePositiveCount();

        trueCount+=sstable.getRecentBloomFilterTruePositiveCount();

      }

      if (falseCount == 0L && trueCount == 0L)       return 0d;

      return (double)falseCount / (trueCount + falseCount);

    }

  }

,new Gauge<Double>(){

    public Double getValue(){

      long falseCount=0L;

      long trueCount=0L;

      for (      Keyspace keyspace : Keyspace.all()) {

        for (        SSTableReader sstable : keyspace.getAllSSTables(SSTableSet.LIVE)) {

          falseCount+=sstable.getRecentBloomFilterFalsePositiveCount();

          trueCount+=sstable.getRecentBloomFilterTruePositiveCount();

        }

      }

      if (falseCount == 0L && trueCount == 0L)       return 0d;

      return (double)falseCount / (trueCount + falseCount);

    }

  }

);

  bloomFilterDiskSpaceUsed=createTableGauge("BloomFilterDiskSpaceUsed",new Gauge<Long>(){

    public Long getValue(){

      long total=0;

      for (      SSTableReader sst : cfs.getSSTables(SSTableSet.CANONICAL))       total+=sst.getBloomFilterSerializedSize();

      return total;

    }

  }

);

  bloomFilterOffHeapMemoryUsed=createTableGauge("BloomFilterOffHeapMemoryUsed",new Gauge<Long>(){

    public Long getValue(){

      long total=0;

      for (      SSTableReader sst : cfs.getSSTables(SSTableSet.LIVE))       total+=sst.getBloomFilterOffHeapSize();

      return total;

    }

  }

);

  indexSummaryOffHeapMemoryUsed=createTableGauge("IndexSummaryOffHeapMemoryUsed",new Gauge<Long>(){

    public Long getValue(){

      long total=0;

      for (      SSTableReader sst : cfs.getSSTables(SSTableSet.LIVE))       total+=sst.getIndexSummaryOffHeapSize();

      return total;

    }

  }

);

  compressionMetadataOffHeapMemoryUsed=createTableGauge("CompressionMetadataOffHeapMemoryUsed",new Gauge<Long>(){

    public Long getValue(){

      long total=0;

      for (      SSTableReader sst : cfs.getSSTables(SSTableSet.LIVE))       total+=sst.getCompressionMetadataOffHeapSize();

      return total;

    }

  }

);

  speculativeRetries=createTableCounter("SpeculativeRetries");

  speculativeFailedRetries=createTableCounter("SpeculativeFailedRetries");

  speculativeInsufficientReplicas=createTableCounter("SpeculativeInsufficientReplicas");

  speculativeSampleLatencyNanos=createTableGauge("SpeculativeSampleLatencyNanos",() -> cfs.sampleReadLatencyNanos);

  additionalWrites=createTableCounter("AdditionalWrites");

  additionalWriteLatencyNanos=createTableGauge("AdditionalWriteLatencyNanos",() -> cfs.additionalWriteLatencyNanos);

  keyCacheHitRate=createTableGauge("KeyCacheHitRate","KeyCacheHitRate",new RatioGauge(){

    @Override public Ratio getRatio(){

      return Ratio.of(getNumerator(),getDenominator());

    }

    protected double getNumerator(){

      long hits=0L;

      for (      SSTableReader sstable : cfs.getSSTables(SSTableSet.LIVE))       hits+=sstable.getKeyCacheHit();

      return hits;

    }

    protected double getDenominator(){

      long requests=0L;

      for (      SSTableReader sstable : cfs.getSSTables(SSTableSet.LIVE))       requests+=sstable.getKeyCacheRequest();

      return Math.max(requests,1);

    }

  }

,null);

  tombstoneScannedHistogram=createTableHistogram("TombstoneScannedHistogram",cfs.keyspace.metric.tombstoneScannedHistogram,false);

  liveScannedHistogram=createTableHistogram("LiveScannedHistogram",cfs.keyspace.metric.liveScannedHistogram,false);

  colUpdateTimeDeltaHistogram=createTableHistogram("ColUpdateTimeDeltaHistogram",cfs.keyspace.metric.colUpdateTimeDeltaHistogram,false);

  coordinatorReadLatency=createTableTimer("CoordinatorReadLatency");

  coordinatorScanLatency=createTableTimer("CoordinatorScanLatency");

  coordinatorWriteLatency=createTableTimer("CoordinatorWriteLatency");

  waitingOnFreeMemtableSpace=createTableHistogram("WaitingOnFreeMemtableSpace",false);

  if (cfs.metadata().isView()) {

    viewLockAcquireTime=null;

    viewReadTime=null;

  }

 else {

    viewLockAcquireTime=createTableTimer("ViewLockAcquireTime",cfs.keyspace.metric.viewLockAcquireTime);

    viewReadTime=createTableTimer("ViewReadTime",cfs.keyspace.metric.viewReadTime);

  }

  trueSnapshotsSize=createTableGauge("SnapshotsSize",cfs::trueSnapshotsSize);

  rowCacheHitOutOfRange=createTableCounter("RowCacheHitOutOfRange");

  rowCacheHit=createTableCounter("RowCacheHit");

  rowCacheMiss=createTableCounter("RowCacheMiss");

  tombstoneFailures=createTableCounter("TombstoneFailures");

  tombstoneWarnings=createTableCounter("TombstoneWarnings");

  droppedMutations=createTableCounter("DroppedMutations");

  casPrepare=createLatencyMetrics("CasPrepare",cfs.keyspace.metric.casPrepare);

  casPropose=createLatencyMetrics("CasPropose",cfs.keyspace.metric.casPropose);

  casCommit=createLatencyMetrics("CasCommit",cfs.keyspace.metric.casCommit);

  repairsStarted=createTableCounter("RepairJobsStarted");

  repairsCompleted=createTableCounter("RepairJobsCompleted");

  anticompactionTime=createTableTimer("AnticompactionTime",cfs.keyspace.metric.anticompactionTime);

  validationTime=createTableTimer("ValidationTime",cfs.keyspace.metric.validationTime);

  repairSyncTime=createTableTimer("RepairSyncTime",cfs.keyspace.metric.repairSyncTime);

  bytesValidated=createTableHistogram("BytesValidated",cfs.keyspace.metric.bytesValidated,false);

  partitionsValidated=createTableHistogram("PartitionsValidated",cfs.keyspace.metric.partitionsValidated,false);

  bytesAnticompacted=createTableCounter("BytesAnticompacted");

  bytesMutatedAnticompaction=createTableCounter("BytesMutatedAnticompaction");

  mutatedAnticompactionGauge=createTableGauge("MutatedAnticompactionGauge",() -> {

    double bytesMutated=bytesMutatedAnticompaction.getCount();

    double bytesAnticomp=bytesAnticompacted.getCount();

    if (bytesAnticomp + bytesMutated > 0)     return bytesMutated / (bytesAnticomp + bytesMutated);

    return 0.0;

  }

);

  readRepairRequests=createTableMeter("ReadRepairRequests");

  shortReadProtectionRequests=createTableMeter("ShortReadProtectionRequests");

  replicaFilteringProtectionRequests=createTableMeter("ReplicaFilteringProtectionRequests");

  rfpRowsCachedPerQuery=createHistogram("ReplicaFilteringProtectionRowsCachedPerQuery",true);

  confirmedRepairedInconsistencies=createTableMeter("RepairedDataInconsistenciesConfirmed",cfs.keyspace.metric.confirmedRepairedInconsistencies);

  unconfirmedRepairedInconsistencies=createTableMeter("RepairedDataInconsistenciesUnconfirmed",cfs.keyspace.metric.unconfirmedRepairedInconsistencies);

  repairedDataTrackingOverreadRows=createTableHistogram("RepairedDataTrackingOverreadRows",cfs.keyspace.metric.repairedDataTrackingOverreadRows,false);

  repairedDataTrackingOverreadTime=createTableTimer("RepairedDataTrackingOverreadTime",cfs.keyspace.metric.repairedDataTrackingOverreadTime);

  unleveledSSTables=createTableGauge("UnleveledSSTables",cfs::getUnleveledSSTables,() -> {

    int cnt=0;

    for (    Metric cfGauge : ALL_TABLE_METRICS.get("UnleveledSSTables")) {

      cnt+=((Gauge<? extends Number>)cfGauge).getValue().intValue();

    }

    return cnt;

  }

);

}

Location: TableMetrics.java

Content: 

private static Pair<Long,Long> totalNonSystemTablesSize(Predicate<SSTableReader> predicate){

  long total=0;

  long filtered=0;

  for (  String keyspace : Schema.instance.getNonSystemKeyspaces()) {

    Keyspace k=Schema.instance.getKeyspaceInstance(keyspace);

    if (SchemaConstants.DISTRIBUTED_KEYSPACE_NAME.equals(k.getName()))     continue;

    if (k.getReplicationStrategy().getReplicationFactor().allReplicas < 2)     continue;

    for (    ColumnFamilyStore cf : k.getColumnFamilyStores()) {

      if (!SecondaryIndexManager.isIndexColumnFamily(cf.name)) {

        for (        SSTableReader sstable : cf.getSSTables(SSTableSet.CANONICAL)) {

          if (predicate.test(sstable)) {

            filtered+=sstable.uncompressedLength();

          }

          total+=sstable.uncompressedLength();

        }

      }

    }

  }

  return Pair.create(filtered,total);

}

Location: TableMetrics.java

Content: 

public void updateSSTableIterated(int count){

  sstablesPerReadHistogram.update(count);

}

