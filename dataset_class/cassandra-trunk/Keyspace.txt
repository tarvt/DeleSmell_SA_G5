Location: Keyspace.java

Content: 

/** 

 * @return a {@link Stream} of all existing/open {@link Keyspace} instances

 */

public static Stream<Keyspace> allExisting(){

  return Schema.instance.getKeyspaces().stream().map(Schema.instance::getKeyspaceInstance).filter(Objects::nonNull);

}

Location: Keyspace.java

Content: 

public CompletableFuture<?> applyFuture(Mutation mutation,boolean writeCommitLog,boolean updateIndexes){

  return applyInternal(mutation,writeCommitLog,updateIndexes,true,true,new CompletableFuture<>());

}

Location: Keyspace.java

Content: 

public CompletableFuture<?> applyFuture(Mutation mutation,boolean writeCommitLog,boolean updateIndexes,boolean isDroppable,boolean isDeferrable){

  return applyInternal(mutation,writeCommitLog,updateIndexes,isDroppable,isDeferrable,new CompletableFuture<>());

}

Location: Keyspace.java

Content: 

/** 

 * This method appends a row to the global CommitLog, then updates memtables and indexes.

 * @param mutation       the row to write.  Must not be modified after calling apply, since commitlog appendmay happen concurrently, depending on the CL Executor type.

 * @param makeDurable    if true, don't return unless write has been made durable

 * @param updateIndexes  false to disable index updates (used by CollationController "defragmenting")

 * @param isDroppable    true if this should throw WriteTimeoutException if it does not acquire lock within write_request_timeout_in_ms

 * @param isDeferrable   true if caller is not waiting for future to complete, so that future may be deferred

 */

private CompletableFuture<?> applyInternal(final Mutation mutation,final boolean makeDurable,boolean updateIndexes,boolean isDroppable,boolean isDeferrable,CompletableFuture<?> future){

  if (TEST_FAIL_WRITES && metadata.name.equals(TEST_FAIL_WRITES_KS))   throw new RuntimeException("Testing write failures");

  Lock[] locks=null;

  boolean requiresViewUpdate=updateIndexes && viewManager.updatesAffectView(Collections.singleton(mutation),false);

  if (requiresViewUpdate) {

    mutation.viewLockAcquireStart.compareAndSet(0L,System.currentTimeMillis());

    Collection<TableId> tableIds=mutation.getTableIds();

    Iterator<TableId> idIterator=tableIds.iterator();

    locks=new Lock[tableIds.size()];

    for (int i=0; i < tableIds.size(); i++) {

      TableId tableId=idIterator.next();

      int lockKey=Objects.hash(mutation.key().getKey(),tableId);

      while (true) {

        Lock lock=null;

        if (TEST_FAIL_MV_LOCKS_COUNT == 0)         lock=ViewManager.acquireLockFor(lockKey);

 else         TEST_FAIL_MV_LOCKS_COUNT--;

        if (lock == null) {

          if (isDroppable && (approxTime.isAfter(mutation.approxCreatedAtNanos + DatabaseDescriptor.getWriteRpcTimeout(NANOSECONDS)))) {

            for (int j=0; j < i; j++)             locks[j].unlock();

            if (logger.isTraceEnabled())             logger.trace("Could not acquire lock for {} and table {}",ByteBufferUtil.bytesToHex(mutation.key().getKey()),columnFamilyStores.get(tableId).name);

            Tracing.trace("Could not acquire MV lock");

            if (future != null) {

              future.completeExceptionally(new WriteTimeoutException(WriteType.VIEW,ConsistencyLevel.LOCAL_ONE,0,1));

              return future;

            }

 else             throw new WriteTimeoutException(WriteType.VIEW,ConsistencyLevel.LOCAL_ONE,0,1);

          }

 else           if (isDeferrable) {

            for (int j=0; j < i; j++)             locks[j].unlock();

            final CompletableFuture<?> mark=future;

            Stage.MUTATION.execute(() -> applyInternal(mutation,makeDurable,true,isDroppable,true,mark));

            return future;

          }

 else {

            try {

              Thread.sleep(10);

            }

 catch (            InterruptedException e) {

            }

            continue;

          }

        }

 else {

          locks[i]=lock;

        }

        break;

      }

    }

    long acquireTime=System.currentTimeMillis() - mutation.viewLockAcquireStart.get();

    if (isDroppable) {

      for (      TableId tableId : tableIds)       columnFamilyStores.get(tableId).metric.viewLockAcquireTime.update(acquireTime,MILLISECONDS);

    }

  }

  int nowInSec=FBUtilities.nowInSeconds();

  try (WriteContext ctx=getWriteHandler().beginWrite(mutation,makeDurable)){

    for (    PartitionUpdate upd : mutation.getPartitionUpdates()) {

      ColumnFamilyStore cfs=columnFamilyStores.get(upd.metadata().id);

      if (cfs == null) {

        logger.error("Attempting to mutate non-existant table {} ({}.{})",upd.metadata().id,upd.metadata().keyspace,upd.metadata().name);

        continue;

      }

      AtomicLong baseComplete=new AtomicLong(Long.MAX_VALUE);

      if (requiresViewUpdate) {

        try {

          Tracing.trace("Creating materialized view mutations from base table replica");

          viewManager.forTable(upd.metadata().id).pushViewReplicaUpdates(upd,makeDurable,baseComplete);

        }

 catch (        Throwable t) {

          JVMStabilityInspector.inspectThrowable(t);

          logger.error(String.format("Unknown exception caught while attempting to update MaterializedView! %s",upd.metadata().toString()),t);

          throw t;

        }

      }

      UpdateTransaction indexTransaction=updateIndexes ? cfs.indexManager.newUpdateTransaction(upd,ctx,nowInSec) : UpdateTransaction.NO_OP;

      cfs.getWriteHandler().write(upd,ctx,indexTransaction);

      if (requiresViewUpdate)       baseComplete.set(System.currentTimeMillis());

    }

    if (future != null) {

      future.complete(null);

    }

    return future;

  }

  finally {

    if (locks != null) {

      for (      Lock lock : locks)       if (lock != null)       lock.unlock();

    }

  }

}

Location: Keyspace.java

Content: 

public void apply(final Mutation mutation,final boolean writeCommitLog){

  apply(mutation,writeCommitLog,true,true);

}

Location: Keyspace.java

Content: 

public void apply(Mutation mutation,boolean writeCommitLog,boolean updateIndexes){

  apply(mutation,writeCommitLog,updateIndexes,true);

}

Location: Keyspace.java

Content: 

/** 

 * If apply is blocking, apply must not be deferred Otherwise there is a race condition where ALL mutation workers are beeing blocked ending in a complete deadlock of the mutation stage. See CASSANDRA-12689.

 * @param mutation       the row to write.  Must not be modified after calling apply, since commitlog appendmay happen concurrently, depending on the CL Executor type.

 * @param makeDurable    if true, don't return unless write has been made durable

 * @param updateIndexes  false to disable index updates (used by CollationController "defragmenting")

 * @param isDroppable    true if this should throw WriteTimeoutException if it does not acquire lock within write_request_timeout_in_ms

 */

public void apply(final Mutation mutation,final boolean makeDurable,boolean updateIndexes,boolean isDroppable){

  applyInternal(mutation,makeDurable,updateIndexes,isDroppable,false,null);

}

Location: Keyspace.java

Content: 

/** 

 * Clear all the snapshots for a given keyspace.

 * @param snapshotName the user supplied snapshot name. It empty or null,all the snapshots will be cleaned

 */

public static void clearSnapshot(String snapshotName,String keyspace){

  RateLimiter clearSnapshotRateLimiter=DatabaseDescriptor.getSnapshotRateLimiter();

  List<File> snapshotDirs=Directories.getKSChildDirectories(keyspace);

  Directories.clearSnapshot(snapshotName,snapshotDirs,clearSnapshotRateLimiter);

}

Location: Keyspace.java

Content: 

public static Keyspace clear(String keyspaceName){

  return clear(keyspaceName,Schema.instance);

}

Location: Keyspace.java

Content: 

public static Keyspace clear(String keyspaceName,Schema schema){

synchronized (schema) {

    Keyspace t=schema.removeKeyspaceInstance(keyspaceName);

    if (t != null) {

      for (      ColumnFamilyStore cfs : t.getColumnFamilyStores())       t.unloadCf(cfs);

      t.metric.release();

    }

    return t;

  }

}

Location: Keyspace.java

Content: 

private void createReplicationStrategy(KeyspaceMetadata ksm){

  logger.info("Creating replication strategy " + ksm.name + " params "+ ksm.params);

  replicationStrategy=ksm.createReplicationStrategy();

  if (!ksm.params.replication.equals(replicationParams)) {

    logger.debug("New replication settings for keyspace {} - invalidating disk boundary caches",ksm.name);

    columnFamilyStores.values().forEach(ColumnFamilyStore::invalidateDiskBoundaries);

  }

  replicationParams=ksm.params.replication;

}

Location: Keyspace.java

Content: 

public void dropCf(TableId tableId){

  assert columnFamilyStores.containsKey(tableId);

  ColumnFamilyStore cfs=columnFamilyStores.remove(tableId);

  if (cfs == null)   return;

  cfs.getCompactionStrategyManager().shutdown();

  CompactionManager.instance.interruptCompactionForCFs(cfs.concatWithIndexes(),(sstable) -> true,true);

  cfs.keyspace.writeOrder.awaitNewBarrier();

  cfs.readOrdering.awaitNewBarrier();

  unloadCf(cfs);

}

Location: Keyspace.java

Content: 

/** 

 * @return A list of open SSTableReaders

 */

public List<SSTableReader> getAllSSTables(SSTableSet sstableSet){

  List<SSTableReader> list=new ArrayList<>(columnFamilyStores.size());

  for (  ColumnFamilyStore cfStore : columnFamilyStores.values())   Iterables.addAll(list,cfStore.getSSTables(sstableSet));

  return list;

}

Location: Keyspace.java

Content: 

public Collection<ColumnFamilyStore> getColumnFamilyStores(){

  return Collections.unmodifiableCollection(columnFamilyStores.values());

}

Location: Keyspace.java

Content: 

public ColumnFamilyStore getColumnFamilyStore(String cfName){

  TableMetadata table=schema.getTableMetadata(getName(),cfName);

  if (table == null)   throw new IllegalArgumentException(String.format("Unknown keyspace/cf pair (%s.%s)",getName(),cfName));

  return getColumnFamilyStore(table.id);

}

Location: Keyspace.java

Content: 

public ColumnFamilyStore getColumnFamilyStore(TableId id){

  ColumnFamilyStore cfs=columnFamilyStores.get(id);

  if (cfs == null)   throw new IllegalArgumentException("Unknown CF " + id);

  return cfs;

}

Location: Keyspace.java

Content: 

private Set<ColumnFamilyStore> getIndexColumnFamilyStores(ColumnFamilyStore baseCfs){

  Set<ColumnFamilyStore> stores=new HashSet<>();

  for (  ColumnFamilyStore indexCfs : baseCfs.indexManager.getAllIndexColumnFamilyStores()) {

    logger.info("adding secondary index table {} to operation",indexCfs.metadata.name);

    stores.add(indexCfs);

  }

  return stores;

}

Location: Keyspace.java

Content: 

public KeyspaceMetadata getMetadata(){

  return metadata;

}

Location: Keyspace.java

Content: 

public KeyspaceRepairManager getRepairManager(){

  return repairManager;

}

Location: Keyspace.java

Content: 

public AbstractReplicationStrategy getReplicationStrategy(){

  return replicationStrategy;

}

Location: Keyspace.java

Content: 

public static String getTimestampedSnapshotNameWithPrefix(String clientSuppliedName,String prefix){

  return prefix + "-" + getTimestampedSnapshotName(clientSuppliedName);

}

Location: Keyspace.java

Content: 

/** 

 * @param clientSuppliedName may be null.

 * @return the name of the snapshot

 */

public static String getTimestampedSnapshotName(String clientSuppliedName){

  String snapshotName=Long.toString(System.currentTimeMillis());

  if (clientSuppliedName != null && !clientSuppliedName.equals("")) {

    snapshotName=snapshotName + "-" + clientSuppliedName;

  }

  return snapshotName;

}

Location: Keyspace.java

Content: 

public Iterable<ColumnFamilyStore> getValidColumnFamilies(boolean allowIndexes,boolean autoAddIndexes,String... cfNames) throws IOException {

  Set<ColumnFamilyStore> valid=new HashSet<>();

  if (cfNames.length == 0) {

    for (    ColumnFamilyStore cfStore : getColumnFamilyStores()) {

      valid.add(cfStore);

      if (autoAddIndexes)       valid.addAll(getIndexColumnFamilyStores(cfStore));

    }

    return valid;

  }

  for (  String cfName : cfNames) {

    if (SecondaryIndexManager.isIndexColumnFamily(cfName)) {

      if (!allowIndexes) {

        logger.warn("Operation not allowed on secondary Index table ({})",cfName);

        continue;

      }

      String baseName=SecondaryIndexManager.getParentCfsName(cfName);

      String indexName=SecondaryIndexManager.getIndexName(cfName);

      ColumnFamilyStore baseCfs=getColumnFamilyStore(baseName);

      Index index=baseCfs.indexManager.getIndexByName(indexName);

      if (index == null)       throw new IllegalArgumentException(String.format("Invalid index specified: %s/%s.",baseCfs.metadata.name,indexName));

      if (index.getBackingTable().isPresent())       valid.add(index.getBackingTable().get());

    }

 else {

      ColumnFamilyStore cfStore=getColumnFamilyStore(cfName);

      valid.add(cfStore);

      if (autoAddIndexes)       valid.addAll(getIndexColumnFamilyStores(cfStore));

    }

  }

  return valid;

}

Location: Keyspace.java

Content: 

public KeyspaceWriteHandler getWriteHandler(){

  return writeHandler;

}

Location: Keyspace.java

Content: 

public boolean hasColumnFamilyStore(TableId id){

  return columnFamilyStores.containsKey(id);

}

Location: Keyspace.java

Content: 

/** 

 * Registers a custom cf instance with this keyspace. This is required for offline tools what use non-standard directories.

 */

public void initCfCustom(ColumnFamilyStore newCfs){

  ColumnFamilyStore cfs=columnFamilyStores.get(newCfs.metadata.id);

  if (cfs == null) {

    ColumnFamilyStore oldCfs=columnFamilyStores.putIfAbsent(newCfs.metadata.id,newCfs);

    if (oldCfs != null)     throw new IllegalStateException("added multiple mappings for cf id " + newCfs.metadata.id);

  }

 else {

    throw new IllegalStateException("CFS is already initialized: " + cfs.name);

  }

}

Location: Keyspace.java

Content: 

/** 

 * adds a cf to internal structures, ends up creating disk files).

 */

public void initCf(TableMetadataRef metadata,boolean loadSSTables){

  ColumnFamilyStore cfs=columnFamilyStores.get(metadata.id);

  if (cfs == null) {

    ColumnFamilyStore oldCfs=columnFamilyStores.putIfAbsent(metadata.id,ColumnFamilyStore.createColumnFamilyStore(this,metadata,loadSSTables));

    if (oldCfs != null)     throw new IllegalStateException("added multiple mappings for cf id " + metadata.id);

  }

 else {

    assert cfs.name.equals(metadata.name);

    cfs.reload();

  }

}

Location: Keyspace.java

Content: 

private Keyspace(KeyspaceMetadata metadata){

  this.schema=Schema.instance;

  this.metadata=metadata;

  createReplicationStrategy(metadata);

  this.metric=new KeyspaceMetrics(this);

  this.viewManager=new ViewManager(this);

  this.repairManager=new CassandraKeyspaceRepairManager(this);

  this.writeHandler=new CassandraKeyspaceWriteHandler(this);

}

Location: Keyspace.java

Content: 

private Keyspace(String keyspaceName,SchemaProvider schema,boolean loadSSTables){

  this.schema=schema;

  metadata=schema.getKeyspaceMetadata(keyspaceName);

  assert metadata != null : "Unknown keyspace " + keyspaceName;

  if (metadata.isVirtual())   throw new IllegalStateException("Cannot initialize Keyspace with virtual metadata " + keyspaceName);

  createReplicationStrategy(metadata);

  this.metric=new KeyspaceMetrics(this);

  this.viewManager=new ViewManager(this);

  for (  TableMetadata cfm : metadata.tablesAndViews()) {

    logger.trace("Initializing {}.{}",getName(),cfm.name);

    initCf(schema.getTableMetadataRef(cfm.id),loadSSTables);

  }

  this.viewManager.reload(false);

  this.repairManager=new CassandraKeyspaceRepairManager(this);

  this.writeHandler=new CassandraKeyspaceWriteHandler(this);

}

Location: Keyspace.java

Content: 

public static Keyspace mockKS(KeyspaceMetadata metadata){

  return new Keyspace(metadata);

}

Location: Keyspace.java

Content: 

public static Iterable<Keyspace> nonLocalStrategy(){

  return Iterables.transform(Schema.instance.getNonLocalStrategyKeyspaces(),Keyspace::open);

}

Location: Keyspace.java

Content: 

public static Iterable<Keyspace> nonSystem(){

  return Iterables.transform(Schema.instance.getNonSystemKeyspaces(),Keyspace::open);

}

Location: Keyspace.java

Content: 

public static ColumnFamilyStore openAndGetStore(TableMetadata table){

  return open(table.keyspace).getColumnFamilyStore(table.id);

}

Location: Keyspace.java

Content: 

public static ColumnFamilyStore openAndGetStore(TableMetadataRef tableRef){

  return open(tableRef.keyspace).getColumnFamilyStore(tableRef.id);

}

Location: Keyspace.java

Content: 

public static Keyspace openWithoutSSTables(String keyspaceName){

  return open(keyspaceName,Schema.instance,false);

}

Location: Keyspace.java

Content: 

public static Keyspace open(String keyspaceName){

  assert initialized || SchemaConstants.isLocalSystemKeyspace(keyspaceName);

  return open(keyspaceName,Schema.instance,true);

}

Location: Keyspace.java

Content: 

@VisibleForTesting static Keyspace open(String keyspaceName,SchemaProvider schema,boolean loadSSTables){

  Keyspace keyspaceInstance=schema.getKeyspaceInstance(keyspaceName);

  if (keyspaceInstance == null) {

synchronized (schema) {

      keyspaceInstance=schema.getKeyspaceInstance(keyspaceName);

      if (keyspaceInstance == null) {

        keyspaceInstance=new Keyspace(keyspaceName,schema,loadSSTables);

        schema.storeKeyspaceInstance(keyspaceInstance);

      }

    }

  }

  return keyspaceInstance;

}

Location: Keyspace.java

Content: 

public static void setInitialized(){

  initialized=true;

}

Location: Keyspace.java

Content: 

public void setMetadata(KeyspaceMetadata metadata){

  this.metadata=metadata;

  createReplicationStrategy(metadata);

}

Location: Keyspace.java

Content: 

/** 

 * Take a snapshot of the specific column family, or the entire set of column families if columnFamily is null with a given timestamp

 * @param snapshotName     the tag associated with the name of the snapshot.  This value may not be null

 * @param columnFamilyName the column family to snapshot or all on null

 * @throws IOException if the column family doesn't exist

 */

public void snapshot(String snapshotName,String columnFamilyName) throws IOException {

  snapshot(snapshotName,columnFamilyName,false,null);

}

Location: Keyspace.java

Content: 

/** 

 * Take a snapshot of the specific column family, or the entire set of column families if columnFamily is null with a given timestamp

 * @param snapshotName     the tag associated with the name of the snapshot.  This value may not be null

 * @param columnFamilyName the column family to snapshot or all on null

 * @param skipFlush Skip blocking flush of memtable

 * @param rateLimiter Rate limiter for hardlinks-per-second

 * @throws IOException if the column family doesn't exist

 */

public void snapshot(String snapshotName,String columnFamilyName,boolean skipFlush,RateLimiter rateLimiter) throws IOException {

  assert snapshotName != null;

  boolean tookSnapShot=false;

  for (  ColumnFamilyStore cfStore : columnFamilyStores.values()) {

    if (columnFamilyName == null || cfStore.name.equals(columnFamilyName)) {

      tookSnapShot=true;

      cfStore.snapshot(snapshotName,skipFlush,rateLimiter);

    }

  }

  if ((columnFamilyName != null) && !tookSnapShot)   throw new IOException("Failed taking snapshot. Table " + columnFamilyName + " does not exist.");

}

Location: Keyspace.java

Content: 

public static Iterable<Keyspace> system(){

  return Iterables.transform(SchemaConstants.LOCAL_SYSTEM_KEYSPACE_NAMES,Keyspace::open);

}

Location: Keyspace.java

Content: 

private void unloadCf(ColumnFamilyStore cfs){

  cfs.forceBlockingFlush();

  cfs.invalidate();

}

