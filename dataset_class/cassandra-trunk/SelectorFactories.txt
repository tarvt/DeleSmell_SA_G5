Location: SelectorFactories.java

Content: 

/** 

 * Adds a new <code>Selector.Factory</code> for a column that is needed only for ORDER BY purposes.

 * @param def the column that is needed for ordering

 * @param index the index of the column definition in the Selection's list of columns

 */

public void addSelectorForOrdering(ColumnMetadata def,int index){

  factories.add(SimpleSelector.newFactory(def,index));

}

Location: SelectorFactories.java

Content: 

boolean areAllFetchedColumnsKnown(){

  for (  Factory factory : factories) {

    if (!factory.areAllFetchedColumnsKnown())     return false;

  }

  return true;

}

Location: SelectorFactories.java

Content: 

/** 

 * Checks if this <code>SelectorFactories</code> contains at least one factory for TTL selectors.

 * @return <code>true</code> if this <code>SelectorFactories</code> contains at least one factory for TTLselectors, <code>false</code> otherwise.

 */

public boolean containsTTLSelectorFactory(){

  return containsTTLFactory;

}

Location: SelectorFactories.java

Content: 

/** 

 * Checks if this <code>SelectorFactories</code> contains at least one factory for writetime selectors.

 * @return <code>true</code> if this <code>SelectorFactories</code> contains at least one factory for writetimeselectors, <code>false</code> otherwise.

 */

public boolean containsWritetimeSelectorFactory(){

  return containsWritetimeFactory;

}

Location: SelectorFactories.java

Content: 

/** 

 * Creates a new <code>SelectorFactories</code> instance and collect the column definitions.

 * @param selectables the <code>Selectable</code>s for which the factories must be created

 * @param expectedTypes the returned types expected for each of the {@code selectables}, if there is any such expectations, or  {@code null} otherwise. This will be {@code null} when called onthe top-level selectables, but may not be for selectable nested within a function for instance (as the argument selectable will be expected to be of the type expected by the function).

 * @param table the table Definition

 * @param defs the collector parameter for the column definitions

 * @param boundNames the collector for the specification of bound markers in the selection

 * @return a new <code>SelectorFactories</code> instance

 * @throws InvalidRequestException if a problem occurs while creating the factories

 */

public static SelectorFactories createFactoriesAndCollectColumnDefinitions(List<Selectable> selectables,List<AbstractType<?>> expectedTypes,TableMetadata table,List<ColumnMetadata> defs,VariableSpecifications boundNames) throws InvalidRequestException {

  return new SelectorFactories(selectables,expectedTypes,table,defs,boundNames);

}

Location: SelectorFactories.java

Content: 

/** 

 * Whether the selector built by this factory does aggregation or not (either directly or in a sub-selector).

 * @return <code>true</code> if the selector built by this factor does aggregation, <code>false</code> otherwise.

 */

public boolean doesAggregation(){

  return numberOfAggregateFactories > 0;

}

Location: SelectorFactories.java

Content: 

/** 

 * Returns the names of the columns corresponding to the output values of the selector instances created by these factories.

 * @return a list of column names

 */

public List<String> getColumnNames(){

  return Lists.transform(factories,new com.google.common.base.Function<Selector.Factory,String>(){

    public String apply(    Selector.Factory factory){

      return factory.getColumnName();

    }

  }

);

}

Location: SelectorFactories.java

Content: 

/** 

 * Returns a list of the return types of the selector instances created by these factories.

 * @return a list of types

 */

public List<AbstractType<?>> getReturnTypes(){

  return Lists.transform(factories,new com.google.common.base.Function<Selector.Factory,AbstractType<?>>(){

    public AbstractType<?> apply(    Selector.Factory factory){

      return factory.getReturnType();

    }

  }

);

}

Location: SelectorFactories.java

Content: 

/** 

 * Returns the index of the  {@code SimpleSelector.Factory} for the specified column.

 * @param columnIndex the index of the column

 * @return the index of the {@code SimpleSelector.Factory} for the specified column or -1 if it does not exist.

 */

public int indexOfSimpleSelectorFactory(int columnIndex){

  for (int i=0, m=factories.size(); i < m; i++) {

    if (factories.get(i).isSimpleSelectorFactoryFor(columnIndex))     return i;

  }

  return -1;

}

Location: SelectorFactories.java

Content: 

/** 

 * Creates a list of new <code>Selector</code> instances.

 * @param options the query options for the query being executed.

 * @return a list of new <code>Selector</code> instances.

 */

public List<Selector> newInstances(QueryOptions options) throws InvalidRequestException {

  List<Selector> selectors=new ArrayList<>(factories.size());

  for (  Selector.Factory factory : factories)   selectors.add(factory.newInstance(options));

  return selectors;

}

Location: SelectorFactories.java

Content: 

private SelectorFactories(List<Selectable> selectables,List<AbstractType<?>> expectedTypes,TableMetadata table,List<ColumnMetadata> defs,VariableSpecifications boundNames) throws InvalidRequestException {

  factories=new ArrayList<>(selectables.size());

  for (int i=0; i < selectables.size(); i++) {

    Selectable selectable=selectables.get(i);

    AbstractType<?> expectedType=expectedTypes == null ? null : expectedTypes.get(i);

    Factory factory=selectable.newSelectorFactory(table,expectedType,defs,boundNames);

    containsWritetimeFactory|=factory.isWritetimeSelectorFactory();

    containsTTLFactory|=factory.isTTLSelectorFactory();

    if (factory.isAggregateSelectorFactory())     ++numberOfAggregateFactories;

    factories.add(factory);

  }

}

