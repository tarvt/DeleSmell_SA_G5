Location: RolesCache.java

Content: 

/** 

 * Read or return from the cache the Set of the RoleResources identifying the roles granted to the primary resource

 * @see Roles#getRoles(RoleResource)

 * @param primaryRole identifier for the primary role

 * @return the set of identifiers of all the roles granted to (directly or through inheritance) the primary role

 */

Set<RoleResource> getRoleResources(RoleResource primaryRole){

  return get(primaryRole).stream().map(r -> r.resource).collect(Collectors.toSet());

}

Location: RolesCache.java

Content: 

/** 

 * Read or return from cache the set of Role objects representing the roles granted to the primary resource

 * @see Roles#getRoleDetails(RoleResource)

 * @param primaryRole identifier for the primary role

 * @return the set of Role objects containing info of all roles granted to (directly or through inheritance)the primary role.

 */

Set<Role> getRoles(RoleResource primaryRole){

  return get(primaryRole);

}

Location: RolesCache.java

Content: 

public RolesCache(IRoleManager roleManager,BooleanSupplier enableCache){

  super("RolesCache",DatabaseDescriptor::setRolesValidity,DatabaseDescriptor::getRolesValidity,DatabaseDescriptor::setRolesUpdateInterval,DatabaseDescriptor::getRolesUpdateInterval,DatabaseDescriptor::setRolesCacheMaxEntries,DatabaseDescriptor::getRolesCacheMaxEntries,roleManager::getRoleDetails,enableCache);

}

