Location: TimestampType.java

Content: 

@Override public ByteBuffer fromTimeInMillis(long millis) throws MarshalException {

  return ByteBufferUtil.bytes(millis);

}

Location: TimestampType.java

Content: 

@Override public boolean isValueCompatibleWithInternal(AbstractType<?> otherType){

  return this == otherType || otherType == DateType.instance || otherType == LongType.instance;

}

Location: TimestampType.java

Content: 

private TimestampType(){

  super(ComparisonType.CUSTOM);

}

Location: TimestampType.java

Content: 

private String toString(Date date){

  return date != null ? TimestampSerializer.getJsonDateFormatter().format(date) : "";

}

Location: TimestampType.java

Content: 

@Override public long toTimeInMillis(ByteBuffer value){

  return ByteBufferUtil.toLong(value);

}

Location: TimestampType.java

Content: 

@Override protected void validateDuration(Duration duration){

  if (!duration.hasMillisecondPrecision())   throw invalidRequest("The duration must have a millisecond precision. Was: %s",duration);

}

