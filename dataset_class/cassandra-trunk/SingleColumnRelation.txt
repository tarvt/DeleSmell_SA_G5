Location: SingleColumnRelation.java

Content: 

private boolean canHaveOnlyOneValue(){

  return isEQ() || isLIKE() || (isIN() && inValues != null && inValues.size() == 1);

}

Location: SingleColumnRelation.java

Content: 

public static SingleColumnRelation createInRelation(ColumnIdentifier entity,List<Term.Raw> inValues){

  return new SingleColumnRelation(entity,null,Operator.IN,null,inValues);

}

Location: SingleColumnRelation.java

Content: 

public ColumnIdentifier getEntity(){

  return entity;

}

Location: SingleColumnRelation.java

Content: 

public Term.Raw getMapKey(){

  return mapKey;

}

Location: SingleColumnRelation.java

Content: 

private boolean isLegalRelationForNonFrozenCollection(){

  return isContainsKey() || isContains() || isMapEntryEquality();

}

Location: SingleColumnRelation.java

Content: 

private boolean isMapEntryEquality(){

  return mapKey != null && isEQ();

}

Location: SingleColumnRelation.java

Content: 

/** 

 * Creates a new relation.

 * @param entity the kind of relation this is; what the term is being compared to.

 * @param type the type that describes how this entity relates to the value.

 * @param value the value being compared.

 */

public SingleColumnRelation(ColumnIdentifier entity,Operator type,Term.Raw value){

  this(entity,null,type,value);

}

Location: SingleColumnRelation.java

Content: 

/** 

 * Creates a new relation.

 * @param entity the kind of relation this is; what the term is being compared to.

 * @param mapKey the key into the entity identifying the value the term is being compared to.

 * @param type the type that describes how this entity relates to the value.

 * @param value the value being compared.

 */

public SingleColumnRelation(ColumnIdentifier entity,Term.Raw mapKey,Operator type,Term.Raw value){

  this(entity,mapKey,type,value,null);

}

Location: SingleColumnRelation.java

Content: 

private SingleColumnRelation(ColumnIdentifier entity,Term.Raw mapKey,Operator type,Term.Raw value,List<Term.Raw> inValues){

  this.entity=entity;

  this.mapKey=mapKey;

  this.relationType=type;

  this.value=value;

  this.inValues=inValues;

  if (type == Operator.IS_NOT)   assert value == Constants.NULL_LITERAL;

}

Location: SingleColumnRelation.java

Content: 

/** 

 * Returns the receivers for this relation.

 * @param columnDef the column definition

 * @return the receivers for the specified relation.

 * @throws InvalidRequestException if the relation is invalid

 */

private List<? extends ColumnSpecification> toReceivers(ColumnMetadata columnDef) throws InvalidRequestException {

  ColumnSpecification receiver=columnDef;

  if (isIN()) {

    checkFalse(!columnDef.isPrimaryKeyColumn() && !canHaveOnlyOneValue(),"IN predicates on non-primary-key columns (%s) is not yet supported",columnDef.name);

  }

  checkFalse(isContainsKey() && !(receiver.type instanceof MapType),"Cannot use CONTAINS KEY on non-map column %s",receiver.name);

  checkFalse(isContains() && !(receiver.type.isCollection()),"Cannot use CONTAINS on non-collection column %s",receiver.name);

  if (mapKey != null) {

    checkFalse(receiver.type instanceof ListType,"Indexes on list entries (%s[index] = value) are not currently supported.",receiver.name);

    checkTrue(receiver.type instanceof MapType,"Column %s cannot be used as a map",receiver.name);

    checkTrue(receiver.type.isMultiCell(),"Map-entry equality predicates on frozen map column %s are not supported",receiver.name);

    checkTrue(isEQ(),"Only EQ relations are supported on map entries");

  }

  checkFalse(receiver.type.isUDT() && receiver.type.isMultiCell(),"Non-frozen UDT column '%s' (%s) cannot be restricted by any relation",receiver.name,receiver.type.asCQL3Type());

  if (receiver.type.isCollection()) {

    checkFalse(receiver.type.isMultiCell() && !isLegalRelationForNonFrozenCollection(),"Collection column '%s' (%s) cannot be restricted by a '%s' relation",receiver.name,receiver.type.asCQL3Type(),operator());

    if (isContainsKey() || isContains()) {

      receiver=makeCollectionReceiver(receiver,isContainsKey());

    }

 else     if (receiver.type.isMultiCell() && mapKey != null && isEQ()) {

      List<ColumnSpecification> receivers=new ArrayList<>(2);

      receivers.add(makeCollectionReceiver(receiver,true));

      receivers.add(makeCollectionReceiver(receiver,false));

      return receivers;

    }

  }

  return Collections.singletonList(receiver);

}

Location: SingleColumnRelation.java

Content: 

public SingleColumnRelation withNonStrictOperator(){

switch (relationType) {

case GT:

    return new SingleColumnRelation(entity,Operator.GTE,value);

case LT:

  return new SingleColumnRelation(entity,Operator.LTE,value);

default :

return this;

}

}

