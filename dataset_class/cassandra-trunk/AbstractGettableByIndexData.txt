Location: AbstractGettableByIndexData.java

Content: 

AbstractGettableByIndexData(ProtocolVersion protocolVersion){

  this.protocolVersion=protocolVersion;

}

Location: AbstractGettableByIndexData.java

Content: 

void checkType(int i,DataType.Name actual){

  DataType.Name expected=getType(i).getName();

  if (!actual.isCompatibleWith(expected))   throw new InvalidTypeException(String.format("Value %s is of type %s, not %s",getName(i),expected,actual));

}

Location: AbstractGettableByIndexData.java

Content: 

protected <T>TypeCodec<T> codecFor(int i){

  return getCodecRegistry().codecFor(getType(i));

}

Location: AbstractGettableByIndexData.java

Content: 

protected <T>TypeCodec<T> codecFor(int i,Class<T> javaClass){

  return getCodecRegistry().codecFor(getType(i),javaClass);

}

Location: AbstractGettableByIndexData.java

Content: 

protected <T>TypeCodec<T> codecFor(int i,T value){

  return getCodecRegistry().codecFor(getType(i),value);

}

Location: AbstractGettableByIndexData.java

Content: 

protected <T>TypeCodec<T> codecFor(int i,TypeToken<T> javaType){

  return getCodecRegistry().codecFor(getType(i),javaType);

}

Location: AbstractGettableByIndexData.java

Content: 

protected abstract CodecRegistry getCodecRegistry();

Location: AbstractGettableByIndexData.java

Content: 

/** 

 * Returns the name corresponding to the value at index  {@code i}.

 * @param i the index of the name to fetch.

 * @return the name corresponding to the value at index {@code i}.

 * @throws IndexOutOfBoundsException if {@code i} is not a valid index.

 */

protected abstract String getName(int i);

Location: AbstractGettableByIndexData.java

Content: 

/** 

 * Returns the type for the value at index  {@code i}.

 * @param i the index of the type to fetch.

 * @return the type of the value at index {@code i}.

 * @throws IndexOutOfBoundsException if {@code i} is not a valid index.

 */

protected abstract DataType getType(int i);

Location: AbstractGettableByIndexData.java

Content: 

/** 

 * Returns the value at index  {@code i}.

 * @param i the index to fetch.

 * @return the value at index {@code i}.

 * @throws IndexOutOfBoundsException if {@code i} is not a valid index.

 */

protected abstract ByteBuffer getValue(int i);

