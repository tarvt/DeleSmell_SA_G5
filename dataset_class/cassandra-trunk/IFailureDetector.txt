Location: IFailureDetector.java

Content: 

/** 

 * force conviction of endpoint in the failure detector

 */

public void forceConviction(InetAddressAndPort ep);

Location: IFailureDetector.java

Content: 

/** 

 * This method is invoked by any entity wanting to interrogate the status of an endpoint. In our case it would be the Gossiper. The Failure Detector will then calculate Phi and deem an endpoint as suspicious or alive as explained in the Hayashibara paper. param ep endpoint for which we interpret the inter arrival times.

 */

public void interpret(InetAddressAndPort ep);

Location: IFailureDetector.java

Content: 

/** 

 * Failure Detector's knowledge of whether a node is up or down.

 * @param ep endpoint in question.

 * @return true if UP and false if DOWN.

 */

public boolean isAlive(InetAddressAndPort ep);

Location: IFailureDetector.java

Content: 

/** 

 * Register interest for Failure Detector events.

 * @param listener implementation of an application provided IFailureDetectionEventListener

 */

public void registerFailureDetectionEventListener(IFailureDetectionEventListener listener);

Location: IFailureDetector.java

Content: 

/** 

 * remove endpoint from failure detector

 */

public void remove(InetAddressAndPort ep);

Location: IFailureDetector.java

Content: 

/** 

 * This method is invoked by the receiver of the heartbeat. In our case it would be the Gossiper. Gossiper inform the Failure Detector on receipt of a heartbeat. The FailureDetector will then sample the arrival time as explained in the paper. param ep endpoint being reported.

 */

public void report(InetAddressAndPort ep);

Location: IFailureDetector.java

Content: 

/** 

 * Un-register interest for Failure Detector events.

 * @param listener implementation of an application provided IFailureDetectionEventListener

 */

public void unregisterFailureDetectionEventListener(IFailureDetectionEventListener listener);

