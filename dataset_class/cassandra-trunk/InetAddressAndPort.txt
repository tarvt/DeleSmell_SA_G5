Location: InetAddressAndPort.java

Content: 

@Override public int compareTo(InetAddressAndPort o){

  int retval=FastByteOperations.compareUnsigned(addressBytes,0,addressBytes.length,o.addressBytes,0,o.addressBytes.length);

  if (retval != 0) {

    return retval;

  }

  return Integer.compare(port,o.port);

}

Location: InetAddressAndPort.java

Content: 

public static InetAddressAndPort getByAddressOverrideDefaults(InetAddress address,byte[] addressBytes,Integer port){

  if (port == null) {

    port=defaultPort;

  }

  return new InetAddressAndPort(address,addressBytes,port);

}

Location: InetAddressAndPort.java

Content: 

public static InetAddressAndPort getByAddressOverrideDefaults(InetAddress address,Integer port){

  if (port == null) {

    port=defaultPort;

  }

  return new InetAddressAndPort(address,address.getAddress(),port);

}

Location: InetAddressAndPort.java

Content: 

public static InetAddressAndPort getByAddress(byte[] address) throws UnknownHostException {

  return getByAddressOverrideDefaults(InetAddress.getByAddress(address),address,null);

}

Location: InetAddressAndPort.java

Content: 

public static InetAddressAndPort getByAddress(InetAddress address){

  return getByAddressOverrideDefaults(address,null);

}

Location: InetAddressAndPort.java

Content: 

/** 

 * @param name Hostname + optional ports string

 * @param port Port to connect on, overridden by values in hostname string, defaults to DatabaseDescriptor default if not specified anywhere.

 */

public static InetAddressAndPort getByNameOverrideDefaults(String name,Integer port) throws UnknownHostException {

  HostAndPort hap=HostAndPort.fromString(name);

  if (hap.hasPort()) {

    port=hap.getPort();

  }

  return getByAddressOverrideDefaults(InetAddress.getByName(hap.getHost()),port);

}

Location: InetAddressAndPort.java

Content: 

public static InetAddressAndPort getByName(String name) throws UnknownHostException {

  return getByNameOverrideDefaults(name,null);

}

Location: InetAddressAndPort.java

Content: 

static int getDefaultPort(){

  return defaultPort;

}

Location: InetAddressAndPort.java

Content: 

public String getHostAddressAndPort(){

  return getHostAddress(true);

}

Location: InetAddressAndPort.java

Content: 

/** 

 * Return a version of getHostAddressAndPort suitable for use in JMX object names without requiring any escaping.  Replaces each character invalid for JMX names with an underscore.

 * @return String with JMX-safe representation of the IP address and port

 */

public String getHostAddressAndPortForJMX(){

  return JMX_INCOMPATIBLE_CHARS.matcher(getHostAddressAndPort()).replaceAll("_");

}

Location: InetAddressAndPort.java

Content: 

public String getHostAddress(boolean withPort){

  if (withPort) {

    return HostAndPort.fromParts(address.getHostAddress(),port).toString();

  }

 else {

    return address.getHostAddress();

  }

}

Location: InetAddressAndPort.java

Content: 

public static InetAddressAndPort getLocalHost(){

  return FBUtilities.getLocalAddressAndPort();

}

Location: InetAddressAndPort.java

Content: 

public static InetAddressAndPort getLoopbackAddress(){

  return InetAddressAndPort.getByAddress(InetAddress.getLoopbackAddress());

}

Location: InetAddressAndPort.java

Content: 

private InetAddressAndPort(InetAddress address,byte[] addressBytes,int port){

  Preconditions.checkNotNull(address);

  Preconditions.checkNotNull(addressBytes);

  validatePortRange(port);

  this.address=address;

  this.port=port;

  this.addressBytes=addressBytes;

}

Location: InetAddressAndPort.java

Content: 

public static void initializeDefaultPort(int port){

  defaultPort=port;

}

Location: InetAddressAndPort.java

Content: 

public String toString(boolean withPort){

  if (withPort) {

    return toString(address,port);

  }

 else {

    return address.toString();

  }

}

Location: InetAddressAndPort.java

Content: 

/** 

 * Format an InetAddressAndPort in the same style as InetAddress.toString. The string returned is of the form: hostname / literal IP address : port (without the whitespace). Literal IPv6 addresses will be wrapped with [ ] to make the port number clear. If the host name is unresolved, no reverse name service lookup is performed. The hostname part will be represented by an empty string.

 * @param address InetAddress to convert String

 * @param port Port number to convert to String

 * @return String representation of the IP address and port

 */

public static String toString(InetAddress address,int port){

  String addressToString=address.toString();

  int nameLength=addressToString.lastIndexOf('/');

  assert nameLength >= 0 : "InetAddress.toString format may have changed, expecting /";

  if (addressToString.indexOf(':',nameLength) >= 0) {

    StringBuilder sb=new StringBuilder(addressToString.length() + 16);

    sb.append(addressToString,0,nameLength + 1);

    sb.append('[');

    sb.append(addressToString,nameLength + 1,addressToString.length());

    sb.append("]:");

    sb.append(port);

    return sb.toString();

  }

 else {

    StringBuilder sb=new StringBuilder(addressToString);

    sb.append(":");

    sb.append(port);

    return sb.toString();

  }

}

Location: InetAddressAndPort.java

Content: 

private static void validatePortRange(int port){

  if (port < 0 | port > 65535) {

    throw new IllegalArgumentException("Port " + port + " is not a valid port number in the range 0-65535");

  }

}

Location: InetAddressAndPort.java

Content: 

public InetAddressAndPort withPort(int port){

  return new InetAddressAndPort(address,addressBytes,port);

}

