Location: EncryptionOptions.java

Content: 

/** 

 * Combine the pre-4.0 protocol field with the accepted_protocols list, substituting a list of explicit protocols for the previous catchall default of "TLS"

 * @return array of protocol names suitable for passing to SslContextBuilder.protocols, or null if the default

 */

public List<String> acceptedProtocols(){

  if (accepted_protocols == null) {

    if (protocol == null) {

      return null;

    }

 else     if (protocol.equalsIgnoreCase("TLS")) {

      return TLS_PROTOCOL_SUBSTITUTION;

    }

 else {

      return ImmutableList.of(protocol);

    }

  }

  if (protocol != null && !protocol.equalsIgnoreCase("TLS") && accepted_protocols.stream().noneMatch(ap -> ap.equalsIgnoreCase(protocol))) {

    return ImmutableList.<String>builder().addAll(accepted_protocols).add(protocol).build();

  }

 else {

    return accepted_protocols;

  }

}

Location: EncryptionOptions.java

Content: 

public String[] acceptedProtocolsArray(){

  List<String> ap=acceptedProtocols();

  return ap == null ? new String[0] : ap.toArray(new String[0]);

}

Location: EncryptionOptions.java

Content: 

public EncryptionOptions applyConfig(){

  ensureConfigNotApplied();

  isEnabled=this.enabled != null && enabled;

  if (optional != null) {

    isOptional=optional;

  }

 else   if (new File(keystore).exists()) {

    isOptional=!isEnabled;

  }

 else {

    isOptional=false;

  }

  return this;

}

Location: EncryptionOptions.java

Content: 

public String[] cipherSuitesArray(){

  return cipher_suites == null ? new String[0] : cipher_suites.toArray(new String[0]);

}

Location: EncryptionOptions.java

Content: 

public EncryptionOptions(){

  keystore="conf/.keystore";

  keystore_password="cassandra";

  truststore="conf/.truststore";

  truststore_password="cassandra";

  cipher_suites=null;

  protocol=null;

  accepted_protocols=null;

  algorithm=null;

  store_type="JKS";

  require_client_auth=false;

  require_endpoint_verification=false;

  enabled=null;

  optional=null;

}

Location: EncryptionOptions.java

Content: 

public EncryptionOptions(EncryptionOptions options){

  keystore=options.keystore;

  keystore_password=options.keystore_password;

  truststore=options.truststore;

  truststore_password=options.truststore_password;

  cipher_suites=options.cipher_suites;

  protocol=options.protocol;

  accepted_protocols=options.accepted_protocols;

  algorithm=options.algorithm;

  store_type=options.store_type;

  require_client_auth=options.require_client_auth;

  require_endpoint_verification=options.require_endpoint_verification;

  enabled=options.enabled;

  this.optional=options.optional;

}

Location: EncryptionOptions.java

Content: 

public EncryptionOptions(String keystore,String keystore_password,String truststore,String truststore_password,List<String> cipher_suites,String protocol,List<String> accepted_protocols,String algorithm,String store_type,boolean require_client_auth,boolean require_endpoint_verification,Boolean enabled,Boolean optional){

  this.keystore=keystore;

  this.keystore_password=keystore_password;

  this.truststore=truststore;

  this.truststore_password=truststore_password;

  this.cipher_suites=cipher_suites;

  this.protocol=protocol;

  this.accepted_protocols=accepted_protocols;

  this.algorithm=algorithm;

  this.store_type=store_type;

  this.require_client_auth=require_client_auth;

  this.require_endpoint_verification=require_endpoint_verification;

  this.enabled=enabled;

  this.optional=optional;

}

Location: EncryptionOptions.java

Content: 

private void ensureConfigApplied(){

  if (isEnabled == null || isOptional == null)   throw new IllegalStateException("EncryptionOptions.applyConfig must be called first");

}

Location: EncryptionOptions.java

Content: 

private void ensureConfigNotApplied(){

  if (isEnabled != null || isOptional != null)   throw new IllegalStateException("EncryptionOptions cannot be changed after configuration applied");

}

Location: EncryptionOptions.java

Content: 

/** 

 * Indicates if the channel may be encrypted (but is not required to be). Explicitly providing a value in the configuration take precedent. If no optional value is set and !isEnabled(), then optional connections are allowed if a keystore exists. Without it, it would be impossible to establish the connections. Return type is Boolean even though it can never be null so that snakeyaml can find it

 * @return if the channel may be encrypted

 */

public Boolean isOptional(){

  ensureConfigApplied();

  return isOptional;

}

Location: EncryptionOptions.java

Content: 

/** 

 * Sets accepted TLS protocols for this channel. Note that this should only be called by the configuration parser or tests. It is public only for that purpose, mutating protocol state is probably a bad idea. The function casing is required for snakeyaml to find this setter for the protected field.

 * @param accepted_protocols value to set

 */

public void setaccepted_protocols(List<String> accepted_protocols){

  this.accepted_protocols=accepted_protocols == null ? null : ImmutableList.copyOf(accepted_protocols);

}

Location: EncryptionOptions.java

Content: 

/** 

 * Sets if encryption should be enabled for this channel. Note that this should only be called by the configuration parser or tests. It is public only for that purpose, mutating enabled state is probably a bad idea.

 * @param enabled value to set

 */

public void setEnabled(Boolean enabled){

  ensureConfigNotApplied();

  this.enabled=enabled;

}

Location: EncryptionOptions.java

Content: 

/** 

 * Sets if encryption should be optional for this channel. Note that this should only be called by the configuration parser or tests. It is public only for that purpose, mutating enabled state is probably a bad idea.

 * @param optional value to set

 */

public void setOptional(boolean optional){

  ensureConfigNotApplied();

  this.optional=optional;

}

Location: EncryptionOptions.java

Content: 

/** 

 * Sets accepted TLS protocol for this channel. Note that this should only be called by the configuration parser or tests. It is public only for that purpose, mutating protocol state is probably a bad idea.

 * @param protocol value to set

 */

@VisibleForTesting public void setProtocol(String protocol){

  this.protocol=protocol;

}

Location: EncryptionOptions.java

Content: 

public TlsEncryptionPolicy tlsEncryptionPolicy(){

  if (isOptional()) {

    return TlsEncryptionPolicy.OPTIONAL;

  }

 else   if (isEnabled()) {

    return TlsEncryptionPolicy.ENCRYPTED;

  }

 else {

    return TlsEncryptionPolicy.UNENCRYPTED;

  }

}

Location: EncryptionOptions.java

Content: 

public EncryptionOptions withAcceptedProtocols(List<String> accepted_protocols){

  return new EncryptionOptions(keystore,keystore_password,truststore,truststore_password,cipher_suites,protocol,accepted_protocols == null ? null : ImmutableList.copyOf(accepted_protocols),algorithm,store_type,require_client_auth,require_endpoint_verification,enabled,optional).applyConfig();

}

Location: EncryptionOptions.java

Content: 

public EncryptionOptions withAlgorithm(String algorithm){

  return new EncryptionOptions(keystore,keystore_password,truststore,truststore_password,cipher_suites,protocol,accepted_protocols,algorithm,store_type,require_client_auth,require_endpoint_verification,enabled,optional).applyConfig();

}

Location: EncryptionOptions.java

Content: 

public EncryptionOptions withCipherSuites(List<String> cipher_suites){

  return new EncryptionOptions(keystore,keystore_password,truststore,truststore_password,cipher_suites,protocol,accepted_protocols,algorithm,store_type,require_client_auth,require_endpoint_verification,enabled,optional).applyConfig();

}

Location: EncryptionOptions.java

Content: 

public EncryptionOptions withCipherSuites(String... cipher_suites){

  return new EncryptionOptions(keystore,keystore_password,truststore,truststore_password,ImmutableList.copyOf(cipher_suites),protocol,accepted_protocols,algorithm,store_type,require_client_auth,require_endpoint_verification,enabled,optional).applyConfig();

}

Location: EncryptionOptions.java

Content: 

public EncryptionOptions withEnabled(boolean enabled){

  return new EncryptionOptions(keystore,keystore_password,truststore,truststore_password,cipher_suites,protocol,accepted_protocols,algorithm,store_type,require_client_auth,require_endpoint_verification,enabled,optional).applyConfig();

}

Location: EncryptionOptions.java

Content: 

public EncryptionOptions withKeyStorePassword(String keystore_password){

  return new EncryptionOptions(keystore,keystore_password,truststore,truststore_password,cipher_suites,protocol,accepted_protocols,algorithm,store_type,require_client_auth,require_endpoint_verification,enabled,optional).applyConfig();

}

Location: EncryptionOptions.java

Content: 

public EncryptionOptions withKeyStore(String keystore){

  return new EncryptionOptions(keystore,keystore_password,truststore,truststore_password,cipher_suites,protocol,accepted_protocols,algorithm,store_type,require_client_auth,require_endpoint_verification,enabled,optional).applyConfig();

}

Location: EncryptionOptions.java

Content: 

public EncryptionOptions withOptional(Boolean optional){

  return new EncryptionOptions(keystore,keystore_password,truststore,truststore_password,cipher_suites,protocol,accepted_protocols,algorithm,store_type,require_client_auth,require_endpoint_verification,enabled,optional).applyConfig();

}

Location: EncryptionOptions.java

Content: 

public EncryptionOptions withProtocol(String protocol){

  return new EncryptionOptions(keystore,keystore_password,truststore,truststore_password,cipher_suites,protocol,accepted_protocols,algorithm,store_type,require_client_auth,require_endpoint_verification,enabled,optional).applyConfig();

}

Location: EncryptionOptions.java

Content: 

public EncryptionOptions withRequireClientAuth(boolean require_client_auth){

  return new EncryptionOptions(keystore,keystore_password,truststore,truststore_password,cipher_suites,protocol,accepted_protocols,algorithm,store_type,require_client_auth,require_endpoint_verification,enabled,optional).applyConfig();

}

Location: EncryptionOptions.java

Content: 

public EncryptionOptions withRequireEndpointVerification(boolean require_endpoint_verification){

  return new EncryptionOptions(keystore,keystore_password,truststore,truststore_password,cipher_suites,protocol,accepted_protocols,algorithm,store_type,require_client_auth,require_endpoint_verification,enabled,optional).applyConfig();

}

Location: EncryptionOptions.java

Content: 

public EncryptionOptions withStoreType(String store_type){

  return new EncryptionOptions(keystore,keystore_password,truststore,truststore_password,cipher_suites,protocol,accepted_protocols,algorithm,store_type,require_client_auth,require_endpoint_verification,enabled,optional).applyConfig();

}

Location: EncryptionOptions.java

Content: 

public EncryptionOptions withTrustStorePassword(String truststore_password){

  return new EncryptionOptions(keystore,keystore_password,truststore,truststore_password,cipher_suites,protocol,accepted_protocols,algorithm,store_type,require_client_auth,require_endpoint_verification,enabled,optional).applyConfig();

}

Location: EncryptionOptions.java

Content: 

public EncryptionOptions withTrustStore(String truststore){

  return new EncryptionOptions(keystore,keystore_password,truststore,truststore_password,cipher_suites,protocol,accepted_protocols,algorithm,store_type,require_client_auth,require_endpoint_verification,enabled,optional).applyConfig();

}

