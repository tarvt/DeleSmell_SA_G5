Location: FilteredPartition.java

Content: 

/** 

 * Create a FilteredPartition holding all the rows of the provided iterator. Warning: Note that this method does not close the provided iterator and it is up to the caller to do so.

 */

public static FilteredPartition create(RowIterator iterator){

  return new FilteredPartition(iterator);

}

Location: FilteredPartition.java

Content: 

public FilteredPartition(RowIterator rows){

  super(rows.metadata(),rows.partitionKey(),build(rows,DeletionInfo.LIVE,false,16));

}

Location: FilteredPartition.java

Content: 

public RowIterator rowIterator(){

  final Iterator<Row> iter=iterator();

  return new RowIterator(){

    public TableMetadata metadata(){

      return FilteredPartition.this.metadata();

    }

    public boolean isReverseOrder(){

      return false;

    }

    public RegularAndStaticColumns columns(){

      return FilteredPartition.this.columns();

    }

    public DecoratedKey partitionKey(){

      return FilteredPartition.this.partitionKey();

    }

    public Row staticRow(){

      return FilteredPartition.this.staticRow();

    }

    public void close(){

    }

    public boolean hasNext(){

      return iter.hasNext();

    }

    public Row next(){

      return iter.next();

    }

    public boolean isEmpty(){

      return staticRow().isEmpty() && !hasRows();

    }

  }

;

}

