Location: RowIndexEntry.java

Content: 

public int columnsIndexCount(){

  return 0;

}

Location: RowIndexEntry.java

Content: 

/** 

 * @param dataFilePosition  position of the partition in the {@link org.apache.cassandra.io.sstable.Component.Type#DATA} file

 * @param indexFilePosition position in the {@link org.apache.cassandra.io.sstable.Component.Type#PRIMARY_INDEX} of the {@link RowIndexEntry}

 * @param deletionTime      deletion time of {@link RowIndexEntry}

 * @param headerLength      deletion time of {@link RowIndexEntry}

 * @param columnIndexCount  number of {@link IndexInfo} entries in the {@link RowIndexEntry}

 * @param indexedPartSize   serialized size of all serialized {@link IndexInfo} objects and their offsets

 * @param indexSamples      list with IndexInfo offsets (if total serialized size is less than {@link org.apache.cassandra.config.Config#column_index_cache_size_in_kb}

 * @param offsets           offsets of IndexInfo offsets

 * @param idxInfoSerializer the {@link IndexInfo} serializer

 */

public static RowIndexEntry<IndexInfo> create(long dataFilePosition,long indexFilePosition,DeletionTime deletionTime,long headerLength,int columnIndexCount,int indexedPartSize,List<IndexInfo> indexSamples,int[] offsets,ISerializer<IndexInfo> idxInfoSerializer){

  if (indexSamples != null && indexSamples.size() > 1)   return new IndexedEntry(dataFilePosition,deletionTime,headerLength,indexSamples.toArray(new IndexInfo[indexSamples.size()]),offsets,indexedPartSize,idxInfoSerializer);

  if (columnIndexCount > 1)   return new ShallowIndexedEntry(dataFilePosition,indexFilePosition,deletionTime,headerLength,columnIndexCount,indexedPartSize,idxInfoSerializer);

  return new RowIndexEntry<>(dataFilePosition);

}

Location: RowIndexEntry.java

Content: 

public boolean indexOnHeap(){

  return false;

}

Location: RowIndexEntry.java

Content: 

public IndexInfoRetriever openWithIndex(FileHandle indexFile){

  return null;

}

Location: RowIndexEntry.java

Content: 

public RowIndexEntry(long position){

  this.position=position;

}

Location: RowIndexEntry.java

Content: 

private static int serializedSize(DeletionTime deletionTime,long headerLength,int columnIndexCount){

  return TypeSizes.sizeofUnsignedVInt(headerLength) + (int)DeletionTime.serializer.serializedSize(deletionTime) + TypeSizes.sizeofUnsignedVInt(columnIndexCount);

}

Location: RowIndexEntry.java

Content: 

public void serializeForCache(DataOutputPlus out) throws IOException {

  out.writeUnsignedVInt(position);

  out.writeByte(CACHE_NOT_INDEXED);

}

Location: RowIndexEntry.java

Content: 

public void serialize(DataOutputPlus out,ByteBuffer indexInfo) throws IOException {

  out.writeUnsignedVInt(position);

  out.writeUnsignedVInt(0);

}

