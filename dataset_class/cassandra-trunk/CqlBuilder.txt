Location: CqlBuilder.java

Content: 

public CqlBuilder appendQuotingIfNeeded(String str){

  return append(ColumnIdentifier.maybeQuote(str));

}

Location: CqlBuilder.java

Content: 

public <T>CqlBuilder appendWithSeparators(Iterable<T> iterable,Appender<T> appender,String separator){

  return appendWithSeparators(iterable.iterator(),appender,separator);

}

Location: CqlBuilder.java

Content: 

public <T>CqlBuilder appendWithSeparators(Iterator<T> iter,Appender<T> appender,String separator){

  while (iter.hasNext()) {

    appender.appendTo(this,iter.next());

    if (iter.hasNext()) {

      append(separator);

    }

  }

  return this;

}

Location: CqlBuilder.java

Content: 

public CqlBuilder appendWithSingleQuotes(String str){

  indentIfNeeded();

  builder.append('\'').append(str.replaceAll("'","''")).append('\'');

  return this;

}

Location: CqlBuilder.java

Content: 

public CqlBuilder append(AbstractType<?> type){

  return append(type.asCQL3Type().toString());

}

Location: CqlBuilder.java

Content: 

public CqlBuilder append(boolean b){

  indentIfNeeded();

  builder.append(b);

  return this;

}

Location: CqlBuilder.java

Content: 

public CqlBuilder append(char c){

  indentIfNeeded();

  builder.append(c);

  return this;

}

Location: CqlBuilder.java

Content: 

public CqlBuilder append(ColumnIdentifier column){

  return append(column.toCQLString());

}

Location: CqlBuilder.java

Content: 

public CqlBuilder append(double d){

  indentIfNeeded();

  builder.append(d);

  return this;

}

Location: CqlBuilder.java

Content: 

public CqlBuilder append(float f){

  indentIfNeeded();

  builder.append(f);

  return this;

}

Location: CqlBuilder.java

Content: 

public CqlBuilder append(FunctionName name){

  name.appendCqlTo(this);

  return this;

}

Location: CqlBuilder.java

Content: 

public CqlBuilder append(int i){

  indentIfNeeded();

  builder.append(i);

  return this;

}

Location: CqlBuilder.java

Content: 

public CqlBuilder append(long l){

  indentIfNeeded();

  builder.append(l);

  return this;

}

Location: CqlBuilder.java

Content: 

public CqlBuilder append(Map<String,String> map){

  return append(map,true);

}

Location: CqlBuilder.java

Content: 

public CqlBuilder append(Map<String,String> map,boolean quoteValue){

  indentIfNeeded();

  builder.append('{');

  Iterator<Entry<String,String>> iter=new TreeMap<>(map).entrySet().iterator();

  while (iter.hasNext()) {

    Entry<String,String> e=iter.next();

    appendWithSingleQuotes(e.getKey());

    builder.append(": ");

    if (quoteValue)     appendWithSingleQuotes(e.getValue());

 else     builder.append(e.getValue());

    if (iter.hasNext())     builder.append(", ");

  }

  builder.append('}');

  return this;

}

Location: CqlBuilder.java

Content: 

public CqlBuilder append(String str){

  indentIfNeeded();

  builder.append(str);

  return this;

}

Location: CqlBuilder.java

Content: 

public CqlBuilder(){

  this(64);

}

Location: CqlBuilder.java

Content: 

public CqlBuilder(int capacity){

  builder=new StringBuilder(capacity);

}

Location: CqlBuilder.java

Content: 

public CqlBuilder decreaseIndent(){

  if (indent > 0)   indent--;

  return this;

}

Location: CqlBuilder.java

Content: 

public CqlBuilder increaseIndent(){

  indent++;

  return this;

}

Location: CqlBuilder.java

Content: 

private void indentIfNeeded(){

  if (isNewLine) {

    for (int i=0; i < indent; i++)     builder.append(INDENTATION);

    isNewLine=false;

  }

}

Location: CqlBuilder.java

Content: 

public CqlBuilder newLine(){

  builder.append(NEW_LINE);

  isNewLine=true;

  return this;

}

