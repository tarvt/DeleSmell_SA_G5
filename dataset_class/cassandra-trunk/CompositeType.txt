Location: CompositeType.java

Content: 

@SafeVarargs public static <V>V build(ValueAccessor<V> accessor,boolean isStatic,V... values){

  int totalLength=isStatic ? 2 : 0;

  for (  V v : values)   totalLength+=2 + accessor.size(v) + 1;

  ByteBuffer out=ByteBuffer.allocate(totalLength);

  if (isStatic)   out.putShort((short)STATIC_MARKER);

  for (  V v : values) {

    ByteBufferUtil.writeShortLength(out,accessor.size(v));

    accessor.write(v,out);

    out.put((byte)0);

  }

  out.flip();

  return accessor.valueOf(out);

}

Location: CompositeType.java

Content: 

@SafeVarargs public static <V>V build(ValueAccessor<V> accessor,V... values){

  return build(accessor,false,values);

}

Location: CompositeType.java

Content: 

protected CompositeType(List<AbstractType<?>> types){

  this.types=ImmutableList.copyOf(types);

}

Location: CompositeType.java

Content: 

public ByteBuffer decompose(Object... objects){

  assert objects.length == types.size();

  ByteBuffer[] serialized=new ByteBuffer[objects.length];

  for (int i=0; i < objects.length; i++) {

    ByteBuffer buffer=((AbstractType)types.get(i)).decompose(objects[i]);

    serialized[i]=buffer;

  }

  return build(ByteBufferAccessor.instance,serialized);

}

Location: CompositeType.java

Content: 

public static ByteBuffer extractComponent(ByteBuffer bb,int idx){

  bb=bb.duplicate();

  readStatic(bb);

  int i=0;

  while (bb.remaining() > 0) {

    ByteBuffer c=ByteBufferUtil.readBytesWithShortLength(bb);

    if (i == idx)     return c;

    bb.get();

    ++i;

  }

  return null;

}

Location: CompositeType.java

Content: 

protected <V>AbstractType<?> getAndAppendComparator(int i,V value,ValueAccessor<V> accessor,StringBuilder sb,int offset){

  return types.get(i);

}

Location: CompositeType.java

Content: 

protected <V>int getComparatorSize(int i,V value,ValueAccessor<V> accessor,int offset){

  return 0;

}

Location: CompositeType.java

Content: 

protected <VL,VR>AbstractType<?> getComparator(int i,VL left,ValueAccessor<VL> accessorL,VR right,ValueAccessor<VR> accessorR,int offsetL,int offsetR){

  return getComparator(i,left,accessorL,offsetL);

}

Location: CompositeType.java

Content: 

protected <V>AbstractType<?> getComparator(int i,V value,ValueAccessor<V> accessor,int offset){

  try {

    return types.get(i);

  }

 catch (  IndexOutOfBoundsException e) {

    throw new RuntimeException("Cannot get comparator " + i + " in "+ this+ ". "+ "This might due to a mismatch between the schema and the data read",e);

  }

}

Location: CompositeType.java

Content: 

@Override public List<AbstractType<?>> getComponents(){

  return types;

}

Location: CompositeType.java

Content: 

public static CompositeType getInstance(Iterable<AbstractType<?>> types){

  return getInstance(Lists.newArrayList(types));

}

Location: CompositeType.java

Content: 

public static CompositeType getInstance(List<AbstractType<?>> types){

  assert types != null && !types.isEmpty();

  CompositeType t=instances.get(types);

  return null == t ? instances.computeIfAbsent(types,CompositeType::new) : t;

}

Location: CompositeType.java

Content: 

public static <V>boolean isStaticName(V value,ValueAccessor<V> accessor){

  return accessor.size(value) >= 2 && (accessor.getUnsignedShort(value,0) & 0xFFFF) == STATIC_MARKER;

}

Location: CompositeType.java

Content: 

protected ParsedComparator parseComparator(int i,String part){

  return new StaticParsedComparator(types.get(i),part);

}

Location: CompositeType.java

Content: 

protected static <V>boolean readIsStaticInternal(V value,ValueAccessor<V> accessor){

  if (accessor.size(value) < 2)   return false;

  int header=accessor.getShort(value,0);

  if ((header & 0xFFFF) != STATIC_MARKER)   return false;

  return true;

}

Location: CompositeType.java

Content: 

protected <V>boolean readIsStatic(V value,ValueAccessor<V> accessor){

  return readIsStaticInternal(value,accessor);

}

Location: CompositeType.java

Content: 

private static boolean readStatic(ByteBuffer bb){

  if (bb.remaining() < 2)   return false;

  int header=ByteBufferUtil.getShortLength(bb,bb.position());

  if ((header & 0xFFFF) != STATIC_MARKER)   return false;

  ByteBufferUtil.readShortLength(bb);

  return true;

}

Location: CompositeType.java

Content: 

public static <V>List<V> splitName(V name,ValueAccessor<V> accessor){

  List<V> l=new ArrayList<>();

  boolean isStatic=readIsStaticInternal(name,accessor);

  int offset=startingOffsetInternal(isStatic);

  while (!accessor.isEmptyFromOffset(name,offset)) {

    V value=accessor.sliceWithShortLength(name,offset);

    offset+=accessor.sizeWithShortLength(value);

    l.add(value);

    offset++;

  }

  return l;

}

Location: CompositeType.java

Content: 

@Override public ByteBuffer[] split(ByteBuffer name){

  ByteBuffer[] l=new ByteBuffer[types.size()];

  ByteBuffer bb=name.duplicate();

  readStatic(bb);

  int i=0;

  while (bb.remaining() > 0) {

    l[i++]=ByteBufferUtil.readBytesWithShortLength(bb);

    bb.get();

  }

  return i == l.length ? l : Arrays.copyOfRange(l,0,i);

}

Location: CompositeType.java

Content: 

protected static int startingOffsetInternal(boolean isStatic){

  return isStatic ? 2 : 0;

}

Location: CompositeType.java

Content: 

protected int startingOffset(boolean isStatic){

  return startingOffsetInternal(isStatic);

}

Location: CompositeType.java

Content: 

protected <V>AbstractType<?> validateComparator(int i,V value,ValueAccessor<V> accessor,int offset) throws MarshalException {

  if (i >= types.size())   throw new MarshalException("Too many bytes for comparator");

  return types.get(i);

}

