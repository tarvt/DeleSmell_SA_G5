Location: ClusteringPrefix.java

Content: 

default ByteBuffer bufferAt(int i){

  return accessor().toBuffer(get(i));

}

Location: ClusteringPrefix.java

Content: 

static <V1,V2>boolean equals(ClusteringPrefix<V1> left,ClusteringPrefix<V2> right){

  if (left.kind() != right.kind() || left.size() != right.size())   return false;

  for (int i=0; i < left.size(); i++) {

    V1 lVal=left.get(i);

    V2 rVal=right.get(i);

    if (lVal == null && rVal == null)     continue;

    if (lVal == null || rVal == null)     return false;

    if (!ValueAccessor.equals(lVal,left.accessor(),rVal,right.accessor()))     return false;

  }

  return true;

}

Location: ClusteringPrefix.java

Content: 

public static boolean equals(ClusteringPrefix<?> prefix,Object o){

  if (!(o instanceof ClusteringPrefix))   return false;

  return equals(prefix,(ClusteringPrefix<?>)o);

}

Location: ClusteringPrefix.java

Content: 

/** 

 * The values of this prefix as an array. <p> Please note that this may or may not require an array creation. So 1) you should *not modify the returned array and 2) it's more efficient to use  {@link #size()} and{@link #get} unless you actually need an array.

 * @return the values for this prefix as an array.

 */

public V[] getRawValues();

Location: ClusteringPrefix.java

Content: 

public static <V>int hashCode(ClusteringPrefix<V> prefix){

  int result=31;

  for (int i=0; i < prefix.size(); i++)   result+=31 * prefix.accessor().hashCode(prefix.get(i));

  return 31 * result + Objects.hashCode(prefix.kind());

}

Location: ClusteringPrefix.java

Content: 

default boolean isBottom(){

  return kind() == Kind.INCL_START_BOUND && size() == 0;

}

Location: ClusteringPrefix.java

Content: 

default boolean isTop(){

  return kind() == Kind.INCL_END_BOUND && size() == 0;

}

Location: ClusteringPrefix.java

Content: 

default ByteBuffer serializeAsPartitionKey(){

  if (size() == 1)   return accessor().toBuffer(get(0));

  ByteBuffer[] values=new ByteBuffer[size()];

  for (int i=0; i < size(); i++)   values[i]=accessor().toBuffer(get(i));

  return CompositeType.build(ByteBufferAccessor.instance,values);

}

Location: ClusteringPrefix.java

Content: 

default String stringAt(int i,ClusteringComparator comparator){

  return comparator.subtype(i).getString(get(i),accessor());

}

Location: ClusteringPrefix.java

Content: 

default void validate(int i,ClusteringComparator comparator){

  comparator.subtype(i).validate(get(i),accessor());

}

