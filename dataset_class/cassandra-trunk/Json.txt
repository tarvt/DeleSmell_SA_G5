Location: Json.java

Content: 

public static Object decodeJson(String json){

  try {

    return JSON_OBJECT_MAPPER.readValue(json,Object.class);

  }

 catch (  IOException exc) {

    throw new MarshalException("Error decoding JSON string: " + exc.getMessage());

  }

}

Location: Json.java

Content: 

/** 

 * Handles unquoting and case-insensitivity in map keys.

 */

public static void handleCaseSensitivity(Map<String,Object> valueMap){

  for (  String mapKey : new ArrayList<>(valueMap.keySet())) {

    if (mapKey.startsWith("\"") && mapKey.endsWith("\"")) {

      valueMap.put(mapKey.substring(1,mapKey.length() - 1),valueMap.remove(mapKey));

      continue;

    }

    String lowered=mapKey.toLowerCase(Locale.US);

    if (!mapKey.equals(lowered))     valueMap.put(lowered,valueMap.remove(mapKey));

  }

}

Location: Json.java

Content: 

/** 

 * Given a JSON string, return a map of columns to their values for the insert.

 */

public static Map<ColumnIdentifier,Term> parseJson(String jsonString,Collection<ColumnMetadata> expectedReceivers){

  try {

    Map<String,Object> valueMap=JSON_OBJECT_MAPPER.readValue(jsonString,Map.class);

    if (valueMap == null)     throw new InvalidRequestException("Got null for INSERT JSON values");

    handleCaseSensitivity(valueMap);

    Map<ColumnIdentifier,Term> columnMap=new HashMap<>(expectedReceivers.size());

    for (    ColumnSpecification spec : expectedReceivers) {

      if (!valueMap.containsKey(spec.name.toString()))       continue;

      Object parsedJsonObject=valueMap.remove(spec.name.toString());

      if (parsedJsonObject == null) {

        columnMap.put(spec.name,Constants.NULL_VALUE);

      }

 else {

        try {

          columnMap.put(spec.name,spec.type.fromJSONObject(parsedJsonObject));

        }

 catch (        MarshalException exc) {

          throw new InvalidRequestException(String.format("Error decoding JSON value for %s: %s",spec.name,exc.getMessage()));

        }

      }

    }

    if (!valueMap.isEmpty()) {

      throw new InvalidRequestException(String.format("JSON values map contains unrecognized column: %s",valueMap.keySet().iterator().next()));

    }

    return columnMap;

  }

 catch (  IOException exc) {

    throw new InvalidRequestException(String.format("Could not decode JSON string as a map: %s. (String was: %s)",exc.toString(),jsonString));

  }

catch (  MarshalException exc) {

    throw new InvalidRequestException(exc.getMessage());

  }

}

Location: Json.java

Content: 

/** 

 * Quotes string contents using standard JSON quoting.

 */

public static String quoteAsJsonString(String s){

  return new String(BufferRecyclers.getJsonStringEncoder().quoteAsString(s));

}

