Location: ManyToOneConcurrentLinkedQueue.java

Content: 

@Override public boolean addAll(Collection<? extends E> c){

  throw new UnsupportedOperationException();

}

Location: ManyToOneConcurrentLinkedQueue.java

Content: 

@Override public boolean add(E e){

  return offer(e);

}

Location: ManyToOneConcurrentLinkedQueue.java

Content: 

@SuppressWarnings({"WeakerAccess","UnusedReturnValue"}) protected boolean casTail(Node<E> expect,Node<E> update){

  return tailUpdater.compareAndSet(this,expect,update);

}

Location: ManyToOneConcurrentLinkedQueue.java

Content: 

@Override public void clear(){

  throw new UnsupportedOperationException();

}

Location: ManyToOneConcurrentLinkedQueue.java

Content: 

@Override public boolean containsAll(Collection<?> c){

  throw new UnsupportedOperationException();

}

Location: ManyToOneConcurrentLinkedQueue.java

Content: 

@Override public boolean contains(Object o){

  throw new UnsupportedOperationException();

}

Location: ManyToOneConcurrentLinkedQueue.java

Content: 

/** 

 * Consume the queue in its entirety and feed every item to the provided  {@link Consumer}. Exists primarily for convenience, and essentially just wraps  {@link #poll()} in a loop.Yields no performance benefit over invoking  {@link #poll()} manually - there just isn'tanything to meaningfully amortise on the consumer side of this queue.

 */

void drain(Consumer<E> consumer){

  E item;

  while ((item=poll()) != null)   consumer.accept(item);

}

Location: ManyToOneConcurrentLinkedQueue.java

Content: 

@Override public E element(){

  E item=peek();

  if (null == item)   throw new NoSuchElementException("Queue is empty");

  return item;

}

Location: ManyToOneConcurrentLinkedQueue.java

Content: 

/** 

 * internalOffer() is based on  {@link java.util.concurrent.ConcurrentLinkedQueue#offer(Object)}, written by Doug Lea and Martin Buchholz with assistance from members of JCP JSR-166 Expert Group and released to the public domain, as explained at http://creativecommons.org/publicdomain/zero/1.0/

 */

private E internalOffer(E e){

  if (null == e)   throw new NullPointerException();

  final Node<E> node=new Node<>(e);

  for (Node<E> t=tail, p=t; ; ) {

    Node<E> q=p.next;

    if (q == null) {

      if (p.casNext(null,node)) {

        if (p != t)         casTail(t,node);

        return p.item;

      }

    }

 else     if (p == q) {

      p=(t != (t=tail)) ? t : head;

    }

 else {

      p=(p != t && t != (t=tail)) ? t : q;

    }

  }

}

Location: ManyToOneConcurrentLinkedQueue.java

Content: 

@Override public Iterator<E> iterator(){

  throw new UnsupportedOperationException();

}

Location: ManyToOneConcurrentLinkedQueue.java

Content: 

@SuppressWarnings("WeakerAccess") protected void lazySetHead(Node<E> val){

  headUpdater.lazySet(this,val);

}

Location: ManyToOneConcurrentLinkedQueue.java

Content: 

ManyToOneConcurrentLinkedQueue(){

  head=tail=new Node<>(null);

}

Location: ManyToOneConcurrentLinkedQueue.java

Content: 

/** 

 * When invoked by the consumer thread, the answer will always be accurate. When invoked by a non-consumer thread, it won't always be the case: -  {@code true}  result indicates that the queue <em>IS</em> empty, no matter what;-  {@code false} result indicates that the queue <em>MIGHT BE</em> non-empty - the value of {@code head} mightnot yet have been made externally visible by the consumer thread.

 */

boolean relaxedIsEmpty(){

  return null == head.next;

}

Location: ManyToOneConcurrentLinkedQueue.java

Content: 

/** 

 * Adds the element to the queue and returns the item of the previous tail node. It's possible for the returned item to already have been consumed.

 * @return previously last tail item in the queue, potentially stale

 */

E relaxedPeekLastAndOffer(E e){

  return internalOffer(e);

}

Location: ManyToOneConcurrentLinkedQueue.java

Content: 

@Override public E remove(){

  E item=poll();

  if (null == item)   throw new NoSuchElementException("Queue is empty");

  return item;

}

Location: ManyToOneConcurrentLinkedQueue.java

Content: 

@Override public boolean removeAll(Collection<?> c){

  throw new UnsupportedOperationException();

}

Location: ManyToOneConcurrentLinkedQueue.java

Content: 

@Override public boolean remove(Object o){

  if (null == o)   throw new NullPointerException();

  Node<E> prev=this.head;

  Node<E> next=prev.next;

  while (null != next) {

    if (o.equals(next.item)) {

      prev.lazySetNext(next.next);

      next.lazySetNext(next);

      next.item=null;

      return true;

    }

    prev=next;

    next=next.next;

  }

  return false;

}

Location: ManyToOneConcurrentLinkedQueue.java

Content: 

@Override public boolean retainAll(Collection<?> c){

  throw new UnsupportedOperationException();

}

Location: ManyToOneConcurrentLinkedQueue.java

Content: 

@Override public Object[] toArray(){

  throw new UnsupportedOperationException();

}

Location: ManyToOneConcurrentLinkedQueue.java

Content: 

@Override public <T>T[] toArray(T[] a){

  throw new UnsupportedOperationException();

}

