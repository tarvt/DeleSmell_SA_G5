Location: ExpirationDateOverflowHandling.java

Content: 

/** 

 * This method computes the  {@link Cell#localDeletionTime()}, maybe capping to the maximum representable value which is  {@link Cell#MAX_DELETION_TIME}. Please note that the  {@link ExpirationDateOverflowHandling.ExpirationDateOverflowPolicy} is appliedduring  {@link ExpirationDateOverflowHandling#maybeApplyExpirationDateOverflowPolicy(org.apache.cassandra.schema.TableMetadata,int,boolean)}, so if the request was not denied it means its expiration date should be capped. See CASSANDRA-14092

 */

public static int computeLocalExpirationTime(int nowInSec,int timeToLive){

  int localExpirationTime=nowInSec + timeToLive;

  return localExpirationTime >= 0 ? localExpirationTime : Cell.MAX_DELETION_TIME;

}

Location: ExpirationDateOverflowHandling.java

Content: 

public static void maybeApplyExpirationDateOverflowPolicy(TableMetadata metadata,int ttl,boolean isDefaultTTL) throws InvalidRequestException {

  if (ttl == BufferCell.NO_TTL)   return;

  int nowInSecs=(int)(System.currentTimeMillis() / 1000);

  if (ttl + nowInSecs < 0) {

switch (policy) {

case CAP:

      ClientWarn.instance.warn(MessageFormatter.arrayFormat(MAXIMUM_EXPIRATION_DATE_EXCEEDED_WARNING,new Object[]{metadata.keyspace,metadata.name,isDefaultTTL ? "default " : "",ttl}).getMessage());

case CAP_NOWARN:

    NoSpamLogger.log(logger,NoSpamLogger.Level.WARN,EXPIRATION_OVERFLOW_WARNING_INTERVAL_MINUTES,TimeUnit.MINUTES,MAXIMUM_EXPIRATION_DATE_EXCEEDED_WARNING,metadata.keyspace,metadata.name,isDefaultTTL ? "default " : "",ttl);

  return;

default :

throw new InvalidRequestException(String.format(MAXIMUM_EXPIRATION_DATE_EXCEEDED_REJECT_MESSAGE,metadata.keyspace,metadata.name,isDefaultTTL ? "default " : "",ttl));

}

}

}

