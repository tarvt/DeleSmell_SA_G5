Location: Crc.java

Content: 

static int computeCrc32(ByteBuffer buffer,int start,int end){

  CRC32 crc=crc32();

  updateCrc32(crc,buffer,start,end);

  return (int)crc.getValue();

}

Location: Crc.java

Content: 

static int computeCrc32(ByteBuf buffer,int startReaderIndex,int endReaderIndex){

  CRC32 crc=crc32();

  crc.update(buffer.internalNioBuffer(startReaderIndex,endReaderIndex - startReaderIndex));

  return (int)crc.getValue();

}

Location: Crc.java

Content: 

/** 

 * NOTE: the order of bytes must reach the wire in the same order the CRC is computed, with the CRC immediately following in a trailer.  Since we read in least significant byte order, if you write to a buffer using putInt or putLong, the byte order will be reversed and you will lose the guarantee of protection from burst corruptions of 24 bits in length. Make sure either to write byte-by-byte to the wire, or to use Integer/Long.reverseBytes if you write to a BIG_ENDIAN buffer. See http://users.ece.cmu.edu/~koopman/pubs/ray06_crcalgorithms.pdf Complain to the ethernet spec writers, for having inverse bit to byte significance order. Note we use the most naive algorithm here.  We support at most 8 bytes, and typically supply 5 or fewer, so any efficiency of a table approach is swallowed by the time to hit L3, even for a tiny (4bit) table.

 * @param bytes an up to 8-byte register containing bytes to compute the CRC overthe bytes AND bits will be read least-significant to most significant.

 * @param len   the number of bytes, greater than 0 and fewer than 9, to be read from bytes

 * @return      the least-significant bit AND byte order crc24 using the CRC24_POLY polynomial

 */

static int crc24(long bytes,int len){

  int crc=CRC24_INIT;

  while (len-- > 0) {

    crc^=(bytes & 0xff) << 16;

    bytes>>=8;

    for (int i=0; i < 8; i++) {

      crc<<=1;

      if ((crc & 0x1000000) != 0)       crc^=CRC24_POLY;

    }

  }

  return crc;

}

Location: Crc.java

Content: 

static CRC32 crc32(){

  CRC32 crc=crc32.get();

  crc.reset();

  crc.update(initialBytes);

  return crc;

}

Location: Crc.java

Content: 

static void updateCrc32(CRC32 crc,ByteBuffer buffer,int start,int end){

  int savePosition=buffer.position();

  int saveLimit=buffer.limit();

  buffer.limit(end);

  buffer.position(start);

  crc.update(buffer);

  buffer.limit(saveLimit);

  buffer.position(savePosition);

}

