Location: EncryptedSegment.java

Content: 

protected Map<String,String> additionalHeaderParameters(){

  Map<String,String> map=encryptionContext.toHeaderParameters();

  map.put(EncryptionContext.ENCRYPTION_IV,Hex.bytesToHex(cipher.getIV()));

  return map;

}

Location: EncryptedSegment.java

Content: 

ByteBuffer createBuffer(CommitLog commitLog){

  return manager.getBufferPool().createBuffer();

}

Location: EncryptedSegment.java

Content: 

public EncryptedSegment(CommitLog commitLog,AbstractCommitLogSegmentManager manager){

  super(commitLog,manager);

  this.encryptionContext=commitLog.configuration.getEncryptionContext();

  try {

    cipher=encryptionContext.getEncryptor();

  }

 catch (  IOException e) {

    throw new FSWriteError(e,logFile);

  }

  logger.debug("created a new encrypted commit log segment: {}",logFile);

}

Location: EncryptedSegment.java

Content: 

public long onDiskSize(){

  return lastWrittenPos;

}

Location: EncryptedSegment.java

Content: 

void write(int startMarker,int nextMarker){

  int contentStart=startMarker + SYNC_MARKER_SIZE;

  final int length=nextMarker - contentStart;

  assert length > 0 || length == 0 && !isStillAllocating();

  final ICompressor compressor=encryptionContext.getCompressor();

  final int blockSize=encryptionContext.getChunkLength();

  try {

    ByteBuffer inputBuffer=buffer.duplicate();

    inputBuffer.limit(contentStart + length).position(contentStart);

    ByteBuffer buffer=manager.getBufferPool().getThreadLocalReusableBuffer(DatabaseDescriptor.getCommitLogSegmentSize());

    final long syncMarkerPosition=lastWrittenPos;

    channel.position(syncMarkerPosition + ENCRYPTED_SECTION_HEADER_SIZE);

    while (contentStart < nextMarker) {

      int nextBlockSize=nextMarker - blockSize > contentStart ? blockSize : nextMarker - contentStart;

      ByteBuffer slice=inputBuffer.duplicate();

      slice.limit(contentStart + nextBlockSize).position(contentStart);

      buffer=EncryptionUtils.compress(slice,buffer,true,compressor);

      buffer=EncryptionUtils.encryptAndWrite(buffer,channel,true,cipher);

      contentStart+=nextBlockSize;

      manager.addSize(buffer.limit() + ENCRYPTED_BLOCK_HEADER_SIZE);

    }

    lastWrittenPos=channel.position();

    buffer.position(0).limit(ENCRYPTED_SECTION_HEADER_SIZE);

    writeSyncMarker(id,buffer,0,(int)syncMarkerPosition,(int)lastWrittenPos);

    buffer.putInt(SYNC_MARKER_SIZE,length);

    buffer.rewind();

    manager.addSize(buffer.limit());

    channel.position(syncMarkerPosition);

    channel.write(buffer);

  }

 catch (  Exception e) {

    throw new FSWriteError(e,getPath());

  }

}

