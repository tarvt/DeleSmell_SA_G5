Location: MultiCBuilder.java

Content: 

/** 

 * Adds individually each of the specified list of elements to the end of all of the existing composites. <p> If this builder contains 2 composites: A-B and A-C a call to this method to add [[D, E], [F, G]] will result in the 4 composites: A-B-D-E, A-B-F-G, A-C-D-E and A-C-F-G. </p>

 * @param values the elements to add

 * @return this <code>CompositeBuilder</code>

 */

public abstract MultiCBuilder addAllElementsToAll(List<List<ByteBuffer>> values);

Location: MultiCBuilder.java

Content: 

/** 

 * Adds individually each of the specified elements to the end of all of the existing clusterings. <p> If this builder contains 2 clusterings: A-B and A-C a call to this method to add D and E will result in the 4 clusterings: A-B-D, A-B-E, A-C-D and A-C-E. </p>

 * @param values the elements to add

 * @return this <code>CompositeBuilder</code>

 */

public abstract MultiCBuilder addEachElementToAll(List<ByteBuffer> values);

Location: MultiCBuilder.java

Content: 

/** 

 * Adds the specified element to all the clusterings. <p> If this builder contains 2 clustering: A-B and A-C a call to this method to add D will result in the clusterings: A-B-D and A-C-D. </p>

 * @param value the value of the next element

 * @return this <code>MulitCBuilder</code>

 */

public abstract MultiCBuilder addElementToAll(ByteBuffer value);

Location: MultiCBuilder.java

Content: 

/** 

 * Builds the <code>ClusteringBound</code>s for slice restrictions.

 * @param isStart specify if the bound is a start one

 * @param isInclusive specify if the bound is inclusive or not

 * @param isOtherBoundInclusive specify if the other bound is inclusive or not

 * @param columnDefs the columns of the slice restriction

 * @return the <code>ClusteringBound</code>s

 */

public abstract NavigableSet<ClusteringBound<?>> buildBoundForSlice(boolean isStart,boolean isInclusive,boolean isOtherBoundInclusive,List<ColumnMetadata> columnDefs);

Location: MultiCBuilder.java

Content: 

/** 

 * Builds the <code>ClusteringBound</code>s

 * @param isStart specify if the bound is a start one

 * @param isInclusive specify if the bound is inclusive or not

 * @return the <code>ClusteringBound</code>s

 */

public abstract NavigableSet<ClusteringBound<?>> buildBound(boolean isStart,boolean isInclusive);

Location: MultiCBuilder.java

Content: 

protected void checkUpdateable(){

  if (!hasRemaining() || built)   throw new IllegalStateException("this builder cannot be updated anymore");

}

Location: MultiCBuilder.java

Content: 

/** 

 * Checks if the clusterings contains null elements.

 * @return <code>true</code> if the clusterings contains <code>null</code> elements, <code>false</code> otherwise.

 */

public boolean containsNull(){

  return containsNull;

}

Location: MultiCBuilder.java

Content: 

/** 

 * Checks if the clusterings contains unset elements.

 * @return <code>true</code> if the clusterings contains <code>unset</code> elements, <code>false</code> otherwise.

 */

public boolean containsUnset(){

  return containsUnset;

}

Location: MultiCBuilder.java

Content: 

/** 

 * Creates a new empty  {@code MultiCBuilder}.

 */

public static MultiCBuilder create(ClusteringComparator comparator,boolean forMultipleValues){

  return forMultipleValues ? new MultiClusteringBuilder(comparator) : new OneClusteringBuilder(comparator);

}

Location: MultiCBuilder.java

Content: 

/** 

 * Checks if some empty list of values have been added

 * @return <code>true</code> if the clusterings have some missing elements, <code>false</code> otherwise.

 */

public boolean hasMissingElements(){

  return hasMissingElements;

}

Location: MultiCBuilder.java

Content: 

protected MultiCBuilder(ClusteringComparator comparator){

  this.comparator=comparator;

}

Location: MultiCBuilder.java

Content: 

/** 

 * Returns the number of elements that can be added to the clusterings.

 * @return the number of elements that can be added to the clusterings.

 */

public int remainingCount(){

  return comparator.size() - size;

}

