Location: ColumnFamilyStoreMBean.java

Content: 

/** 

 * begin sampling for a specific sampler with a given capacity.  The cardinality may be larger than the capacity, but depending on the use case it may affect its accuracy

 */

public void beginLocalSampling(String sampler,int capacity,int durationMillis);

Location: ColumnFamilyStoreMBean.java

Content: 

public void compactionDiskSpaceCheck(boolean enable);

Location: ColumnFamilyStoreMBean.java

Content: 

public long estimateKeys();

Location: ColumnFamilyStoreMBean.java

Content: 

/** 

 * @return top <i>count</i> items for the sampler since beginLocalSampling was called

 */

public List<CompositeData> finishLocalSampling(String sampler,int count) throws OpenDataException ;

Location: ColumnFamilyStoreMBean.java

Content: 

/** 

 * force a major compaction of specified key range in this column family

 */

public void forceCompactionForTokenRange(Collection<Range<Token>> tokenRanges) throws ExecutionException, InterruptedException ;

Location: ColumnFamilyStoreMBean.java

Content: 

/** 

 * force a major compaction of this column family

 * @param splitOutput true if the output of the major compaction should be split in several sstables

 */

public void forceMajorCompaction(boolean splitOutput) throws ExecutionException, InterruptedException ;

Location: ColumnFamilyStoreMBean.java

Content: 

/** 

 * Returns a list of the names of the built column indexes for current store

 * @return list of the index names

 */

public List<String> getBuiltIndexes();

Location: ColumnFamilyStoreMBean.java

Content: 

public Map<String,String> getCompactionParameters();

Location: ColumnFamilyStoreMBean.java

Content: 

public String getCompactionParametersJson();

Location: ColumnFamilyStoreMBean.java

Content: 

/** 

 * Get the compression parameters

 */

public Map<String,String> getCompressionParameters();

Location: ColumnFamilyStoreMBean.java

Content: 

public String getCompressionParametersJson();

Location: ColumnFamilyStoreMBean.java

Content: 

/** 

 * Get the ratio of droppable tombstones to real columns (and non-droppable tombstones)

 * @return ratio

 */

public double getDroppableTombstoneRatio();

Location: ColumnFamilyStoreMBean.java

Content: 

/** 

 * Gets the maximum number of sstables in queue before compaction kicks off

 */

public int getMaximumCompactionThreshold();

Location: ColumnFamilyStoreMBean.java

Content: 

/** 

 * Gets the minimum number of sstables in queue before compaction kicks off

 */

public int getMinimumCompactionThreshold();

Location: ColumnFamilyStoreMBean.java

Content: 

public boolean getNeverPurgeTombstones();

Location: ColumnFamilyStoreMBean.java

Content: 

/** 

 * Returns a list of filenames that contain the given key on this node

 * @param key

 * @return list of filenames containing the key

 */

public List<String> getSSTablesForKey(String key);

Location: ColumnFamilyStoreMBean.java

Content: 

/** 

 * Returns a list of filenames that contain the given key on this node

 * @param key

 * @param hexFormat if key is in hex string format

 * @return list of filenames containing the key

 */

public List<String> getSSTablesForKey(String key,boolean hexFormat);

Location: ColumnFamilyStoreMBean.java

Content: 

public String getTableName();

Location: ColumnFamilyStoreMBean.java

Content: 

/** 

 * Load new sstables from the given directory

 * @param srcPaths the path to the new sstables - if it is an empty set, the data directories will be scanned

 * @param resetLevel if the level should be reset to 0 on the new sstables

 * @param clearRepaired if repaired info should be wiped from the new sstables

 * @param verifySSTables if the new sstables should be verified that they are not corrupt

 * @param verifyTokens if the tokens in the new sstables should be verified that they are owned by the current node

 * @param invalidateCaches if row cache should be invalidated for the keys in the new sstables

 * @param jbodCheck if the new sstables should be placed 'optimally' - count tokens and move the sstable to the directory where it has the most keys

 * @param extendedVerify if we should run an extended verify checking all values in the new sstables

 * @return list of failed import directories

 */

public List<String> importNewSSTables(Set<String> srcPaths,boolean resetLevel,boolean clearRepaired,boolean verifySSTables,boolean verifyTokens,boolean invalidateCaches,boolean extendedVerify);

Location: ColumnFamilyStoreMBean.java

Content: 

public boolean isAutoCompactionDisabled();

Location: ColumnFamilyStoreMBean.java

Content: 

public boolean isCompactionDiskSpaceCheckEnabled();

Location: ColumnFamilyStoreMBean.java

Content: 

@Deprecated public void loadNewSSTables();

Location: ColumnFamilyStoreMBean.java

Content: 

/** 

 * Sets the compaction parameters locally for this node Note that this will be set until an ALTER with compaction = {..} is executed or the node is restarted

 * @param options compaction options with the same syntax as when doing ALTER ... WITH compaction = {..}

 */

public void setCompactionParametersJson(String options);

Location: ColumnFamilyStoreMBean.java

Content: 

/** 

 * Sets the compaction parameters locally for this node Note that this will be set until an ALTER with compaction = {..} is executed or the node is restarted

 * @param options compaction options map

 */

public void setCompactionParameters(Map<String,String> options);

Location: ColumnFamilyStoreMBean.java

Content: 

/** 

 * Sets the maximum and maximum number of SSTables in queue before compaction kicks off

 */

public void setCompactionThresholds(int minThreshold,int maxThreshold);

Location: ColumnFamilyStoreMBean.java

Content: 

public void setCompressionParametersJson(String options);

Location: ColumnFamilyStoreMBean.java

Content: 

/** 

 * Set the compression parameters locally for this node

 * @param opts map of string names to values

 */

public void setCompressionParameters(Map<String,String> opts);

Location: ColumnFamilyStoreMBean.java

Content: 

/** 

 * Sets the maximum number of sstables in queue before compaction kicks off

 */

public void setMaximumCompactionThreshold(int threshold);

Location: ColumnFamilyStoreMBean.java

Content: 

/** 

 * Sets the minimum number of sstables in queue before compaction kicks off

 */

public void setMinimumCompactionThreshold(int threshold);

Location: ColumnFamilyStoreMBean.java

Content: 

public void setNeverPurgeTombstones(boolean value);

Location: ColumnFamilyStoreMBean.java

Content: 

/** 

 * @return the size of SSTables in "snapshots" subdirectory which aren't live anymore

 */

public long trueSnapshotsSize();

