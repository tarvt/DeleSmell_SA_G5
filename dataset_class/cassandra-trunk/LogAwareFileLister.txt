Location: LogAwareFileLister.java

Content: 

/** 

 * See if all files are present 

 */

private static boolean allFilesPresent(Map<LogRecord,Set<File>> oldFiles){

  return !oldFiles.entrySet().stream().filter((e) -> e.getKey().numFiles > e.getValue().size()).findFirst().isPresent();

}

Location: LogAwareFileLister.java

Content: 

/** 

 * We read txn log files, if we fail we throw only if the user has specified OnTxnErr.THROW, else we log an error and apply the txn log anyway

 */

void classifyFiles(File txnFile){

  try (LogFile txn=LogFile.make(txnFile)){

    readTxnLog(txn);

    classifyFiles(txn);

    files.put(txnFile,FileType.TXN_LOG);

  }

 }

Location: LogAwareFileLister.java

Content: 

void classifyFiles(LogFile txnFile){

  Map<LogRecord,Set<File>> oldFiles=txnFile.getFilesOfType(folder,files.navigableKeySet(),LogRecord.Type.REMOVE);

  Map<LogRecord,Set<File>> newFiles=txnFile.getFilesOfType(folder,files.navigableKeySet(),LogRecord.Type.ADD);

  if (txnFile.completed()) {

    setTemporary(txnFile,oldFiles.values(),newFiles.values());

    return;

  }

  if (allFilesPresent(oldFiles)) {

    setTemporary(txnFile,oldFiles.values(),newFiles.values());

    return;

  }

  if (!txnFile.exists())   return;

  readTxnLog(txnFile);

  if (txnFile.completed()) {

    setTemporary(txnFile,oldFiles.values(),newFiles.values());

    return;

  }

  logger.error("Failed to classify files in {}\n" + "Some old files are missing but the txn log is still there and not completed\n" + "Files in folder:\n{}\nTxn: {}",folder,files.isEmpty() ? "\t-" : String.join("\n",files.keySet().stream().map(f -> String.format("\t%s",f)).collect(Collectors.toList())),txnFile.toString(true));

  throw new RuntimeException(String.format("Failed to list directory files in %s, inconsistent disk state for transaction %s",folder,txnFile));

}

Location: LogAwareFileLister.java

Content: 

List<File> innerList() throws Throwable {

  list(Files.newDirectoryStream(folder)).stream().filter((f) -> !LogFile.isLogFile(f)).forEach((f) -> files.put(f,FileType.FINAL));

  list(Files.newDirectoryStream(folder,'*' + LogFile.EXT)).stream().filter(LogFile::isLogFile).forEach(this::classifyFiles);

  return files.entrySet().stream().filter((e) -> filter.test(e.getKey(),e.getValue())).map(Map.Entry::getKey).collect(Collectors.toList());

}

Location: LogAwareFileLister.java

Content: 

public List<File> list(){

  try {

    return innerList();

  }

 catch (  Throwable t) {

    throw new RuntimeException(String.format("Failed to list files in %s",folder),t);

  }

}

Location: LogAwareFileLister.java

Content: 

static List<File> list(DirectoryStream<Path> stream) throws IOException {

  try {

    return StreamSupport.stream(stream.spliterator(),false).map(Path::toFile).filter((f) -> !f.isDirectory()).collect(Collectors.toList());

  }

  finally {

    stream.close();

  }

}

Location: LogAwareFileLister.java

Content: 

@VisibleForTesting LogAwareFileLister(Path folder,BiPredicate<File,FileType> filter,OnTxnErr onTxnErr){

  this.folder=folder;

  this.filter=filter;

  this.onTxnErr=onTxnErr;

}

Location: LogAwareFileLister.java

Content: 

void readTxnLog(LogFile txn){

  if (!txn.verify() && onTxnErr == OnTxnErr.THROW)   throw new LogTransaction.CorruptTransactionLogException("Some records failed verification. See earlier in log for details.",txn);

}

Location: LogAwareFileLister.java

Content: 

private void setTemporary(LogFile txnFile,Collection<Set<File>> oldFiles,Collection<Set<File>> newFiles){

  Collection<Set<File>> temporary=txnFile.committed() ? oldFiles : newFiles;

  temporary.stream().flatMap(Set::stream).forEach((f) -> this.files.put(f,FileType.TEMPORARY));

}

