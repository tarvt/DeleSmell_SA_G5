Location: GossipingPropertyFileSnitch.java

Content: 

/** 

 * Return the data center for which an endpoint resides in

 * @param endpoint the endpoint to process

 * @return string of data center

 */

public String getDatacenter(InetAddressAndPort endpoint){

  if (endpoint.equals(FBUtilities.getBroadcastAddressAndPort()))   return myDC;

  EndpointState epState=Gossiper.instance.getEndpointStateForEndpoint(endpoint);

  if (epState == null || epState.getApplicationState(ApplicationState.DC) == null) {

    if (psnitch == null) {

      if (savedEndpoints == null)       savedEndpoints=SystemKeyspace.loadDcRackInfo();

      if (savedEndpoints.containsKey(endpoint))       return savedEndpoints.get(endpoint).get("data_center");

      return DEFAULT_DC;

    }

 else     return psnitch.getDatacenter(endpoint);

  }

  return epState.getApplicationState(ApplicationState.DC).value;

}

Location: GossipingPropertyFileSnitch.java

Content: 

/** 

 * Return the rack for which an endpoint resides in

 * @param endpoint the endpoint to process

 * @return string of rack

 */

public String getRack(InetAddressAndPort endpoint){

  if (endpoint.equals(FBUtilities.getBroadcastAddressAndPort()))   return myRack;

  EndpointState epState=Gossiper.instance.getEndpointStateForEndpoint(endpoint);

  if (epState == null || epState.getApplicationState(ApplicationState.RACK) == null) {

    if (psnitch == null) {

      if (savedEndpoints == null)       savedEndpoints=SystemKeyspace.loadDcRackInfo();

      if (savedEndpoints.containsKey(endpoint))       return savedEndpoints.get(endpoint).get("rack");

      return DEFAULT_RACK;

    }

 else     return psnitch.getRack(endpoint);

  }

  return epState.getApplicationState(ApplicationState.RACK).value;

}

Location: GossipingPropertyFileSnitch.java

Content: 

public void gossiperStarting(){

  super.gossiperStarting();

  Gossiper.instance.addLocalApplicationState(ApplicationState.INTERNAL_ADDRESS_AND_PORT,StorageService.instance.valueFactory.internalAddressAndPort(FBUtilities.getLocalAddressAndPort()));

  Gossiper.instance.addLocalApplicationState(ApplicationState.INTERNAL_IP,StorageService.instance.valueFactory.internalIP(FBUtilities.getJustLocalAddress()));

  loadGossiperState();

}

Location: GossipingPropertyFileSnitch.java

Content: 

public GossipingPropertyFileSnitch() throws ConfigurationException {

  SnitchProperties properties=loadConfiguration();

  myDC=properties.get("dc",DEFAULT_DC).trim();

  myRack=properties.get("rack",DEFAULT_RACK).trim();

  preferLocal=Boolean.parseBoolean(properties.get("prefer_local","false"));

  snitchHelperReference=new AtomicReference<>();

  try {

    psnitch=new PropertyFileSnitch();

    logger.info("Loaded {} for compatibility",PropertyFileSnitch.SNITCH_PROPERTIES_FILENAME);

  }

 catch (  ConfigurationException e) {

    logger.info("Unable to load {}; compatibility mode disabled",PropertyFileSnitch.SNITCH_PROPERTIES_FILENAME);

  }

}

Location: GossipingPropertyFileSnitch.java

Content: 

private static SnitchProperties loadConfiguration() throws ConfigurationException {

  final SnitchProperties properties=new SnitchProperties();

  if (!properties.contains("dc") || !properties.contains("rack"))   throw new ConfigurationException("DC or rack not found in snitch properties, check your configuration in: " + SnitchProperties.RACKDC_PROPERTY_FILENAME);

  return properties;

}

Location: GossipingPropertyFileSnitch.java

Content: 

private void loadGossiperState(){

  assert Gossiper.instance != null;

  ReconnectableSnitchHelper pendingHelper=new ReconnectableSnitchHelper(this,myDC,preferLocal);

  Gossiper.instance.register(pendingHelper);

  pendingHelper=snitchHelperReference.getAndSet(pendingHelper);

  if (pendingHelper != null)   Gossiper.instance.unregister(pendingHelper);

}

