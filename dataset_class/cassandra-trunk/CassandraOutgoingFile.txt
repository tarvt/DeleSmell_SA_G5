Location: CassandraOutgoingFile.java

Content: 

public CassandraOutgoingFile(StreamOperation operation,Ref<SSTableReader> ref,List<SSTableReader.PartitionPositionBounds> sections,List<Range<Token>> normalizedRanges,long estimatedKeys){

  Preconditions.checkNotNull(ref.get());

  Range.assertNormalized(normalizedRanges);

  this.operation=operation;

  this.ref=ref;

  this.estimatedKeys=estimatedKeys;

  this.sections=sections;

  SSTableReader sstable=ref.get();

  this.filename=sstable.getFilename();

  this.shouldStreamEntireSSTable=computeShouldStreamEntireSSTables();

  ComponentManifest manifest=ComponentManifest.create(sstable.descriptor);

  this.header=makeHeader(sstable,operation,sections,estimatedKeys,shouldStreamEntireSSTable,manifest);

}

Location: CassandraOutgoingFile.java

Content: 

@VisibleForTesting public boolean computeShouldStreamEntireSSTables(){

  if (!DatabaseDescriptor.streamEntireSSTables() || ref.get().getSSTableMetadata().hasLegacyCounterShards)   return false;

  return contained(sections,ref.get());

}

Location: CassandraOutgoingFile.java

Content: 

@VisibleForTesting public boolean contained(List<SSTableReader.PartitionPositionBounds> sections,SSTableReader sstable){

  if (sections == null || sections.isEmpty())   return false;

  long transferLength=sections.stream().mapToLong(p -> p.upperPosition - p.lowerPosition).sum();

  return transferLength == sstable.uncompressedLength();

}

Location: CassandraOutgoingFile.java

Content: 

@VisibleForTesting public static CassandraOutgoingFile fromStream(OutgoingStream stream){

  Preconditions.checkArgument(stream instanceof CassandraOutgoingFile);

  return (CassandraOutgoingFile)stream;

}

Location: CassandraOutgoingFile.java

Content: 

@Override public long getEstimatedSize(){

  return header.size();

}

Location: CassandraOutgoingFile.java

Content: 

@Override public int getNumFiles(){

  return shouldStreamEntireSSTable ? header.componentManifest.components().size() : 1;

}

Location: CassandraOutgoingFile.java

Content: 

@VisibleForTesting public Ref<SSTableReader> getRef(){

  return ref;

}

Location: CassandraOutgoingFile.java

Content: 

private static CassandraStreamHeader makeHeader(SSTableReader sstable,StreamOperation operation,List<SSTableReader.PartitionPositionBounds> sections,long estimatedKeys,boolean shouldStreamEntireSSTable,ComponentManifest manifest){

  boolean keepSSTableLevel=operation == StreamOperation.BOOTSTRAP || operation == StreamOperation.REBUILD;

  CompressionInfo compressionInfo=sstable.compression ? CompressionInfo.newLazyInstance(sstable.getCompressionMetadata(),sections) : null;

  return CassandraStreamHeader.builder().withSSTableFormat(sstable.descriptor.formatType).withSSTableVersion(sstable.descriptor.version).withSSTableLevel(keepSSTableLevel ? sstable.getSSTableLevel() : 0).withEstimatedKeys(estimatedKeys).withSections(sections).withCompressionInfo(compressionInfo).withSerializationHeader(sstable.header.toComponent()).isEntireSSTable(shouldStreamEntireSSTable).withComponentManifest(manifest).withFirstKey(sstable.first).withTableId(sstable.metadata().id).build();

}

Location: CassandraOutgoingFile.java

Content: 

@Override public void write(StreamSession session,DataOutputStreamPlus out,int version) throws IOException {

  assert out instanceof AsyncStreamingOutputPlus : "Unexpected DataOutputStreamPlus " + out.getClass();

  SSTableReader sstable=ref.get();

  if (shouldStreamEntireSSTable) {

    try (ComponentContext context=sstable.runWithLock(ignored -> ComponentContext.create(sstable.descriptor))){

      CassandraStreamHeader current=makeHeader(sstable,operation,sections,estimatedKeys,true,context.manifest());

      CassandraStreamHeader.serializer.serialize(current,out,version);

      out.flush();

      CassandraEntireSSTableStreamWriter writer=new CassandraEntireSSTableStreamWriter(sstable,session,context);

      writer.write((AsyncStreamingOutputPlus)out);

    }

   }

 else {

    CassandraStreamHeader.serializer.serialize(header,out,version);

    out.flush();

    CassandraStreamWriter writer=header.isCompressed() ? new CassandraCompressedStreamWriter(sstable,header,session) : new CassandraStreamWriter(sstable,header,session);

    writer.write(out);

  }

}

