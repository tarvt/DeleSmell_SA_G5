Location: Mutation.java

Content: 

public void applyUnsafe(){

  apply(false);

}

Location: Mutation.java

Content: 

public void apply(boolean durableWrites){

  apply(durableWrites,true);

}

Location: Mutation.java

Content: 

public void apply(boolean durableWrites,boolean isDroppable){

  Keyspace.open(keyspaceName).apply(this,durableWrites,true,isDroppable);

}

Location: Mutation.java

Content: 

public PartitionUpdate getPartitionUpdate(TableMetadata table){

  return table == null ? null : modifications.get(table.id);

}

Location: Mutation.java

Content: 

public Mutation(PartitionUpdate update){

  this(update.metadata().keyspace,update.partitionKey(),ImmutableMap.of(update.metadata().id,update),approxTime.now());

}

Location: Mutation.java

Content: 

public Mutation(String keyspaceName,DecoratedKey key,ImmutableMap<TableId,PartitionUpdate> modifications,long approxCreatedAtNanos){

  this.keyspaceName=keyspaceName;

  this.key=key;

  this.modifications=modifications;

  boolean cdc=false;

  for (  PartitionUpdate pu : modifications.values())   cdc|=pu.metadata().params.cdc;

  this.cdcEnabled=cdc;

  this.approxCreatedAtNanos=approxCreatedAtNanos;

}

Location: Mutation.java

Content: 

/** 

 * Creates a new simple mutuation builder.

 * @param keyspaceName the name of the keyspace this is a mutation for.

 * @param partitionKey the key of partition this if a mutation for.

 * @return a newly created builder.

 */

public static SimpleBuilder simpleBuilder(String keyspaceName,DecoratedKey partitionKey){

  return new SimpleBuilders.MutationBuilder(keyspaceName,partitionKey);

}

Location: Mutation.java

Content: 

public int smallestGCGS(){

  int gcgs=Integer.MAX_VALUE;

  for (  PartitionUpdate update : getPartitionUpdates())   gcgs=Math.min(gcgs,update.metadata().params.gcGraceSeconds);

  return gcgs;

}

Location: Mutation.java

Content: 

public boolean trackedByCDC(){

  return cdcEnabled;

}

Location: Mutation.java

Content: 

public Mutation without(TableId tableId){

  return without(Collections.singleton(tableId));

}

