Location: UserTypes.java

Content: 

public static ColumnSpecification fieldSpecOf(ColumnSpecification column,int field){

  UserType ut=(UserType)column.type;

  return new ColumnSpecification(column.ksName,column.cfName,new ColumnIdentifier(column.name + "." + ut.fieldName(field),true),ut.fieldType(field));

}

Location: UserTypes.java

Content: 

/** 

 * Tests that the map with the specified entries can be assigned to the specified column.

 * @param receiver the receiving column

 * @param entries the map entries

 */

public static <T extends AssignmentTestable>AssignmentTestable.TestResult testUserTypeAssignment(ColumnSpecification receiver,Map<FieldIdentifier,T> entries){

  try {

    validateUserTypeAssignableTo(receiver,entries);

    return AssignmentTestable.TestResult.WEAKLY_ASSIGNABLE;

  }

 catch (  InvalidRequestException e) {

    return AssignmentTestable.TestResult.NOT_ASSIGNABLE;

  }

}

Location: UserTypes.java

Content: 

private UserTypes(){

}

Location: UserTypes.java

Content: 

/** 

 * Create a  {@code String} representation of the user type from the specified items associated tothe user type entries.

 * @param items items associated to the user type entries

 * @return a {@code String} representation of the user type

 */

public static <T>String userTypeToString(Map<FieldIdentifier,T> items){

  return userTypeToString(items,Object::toString);

}

Location: UserTypes.java

Content: 

/** 

 * Create a  {@code String} representation of the user type from the specified items associated tothe user type entries.

 * @param items items associated to the user type entries

 * @return a {@code String} representation of the user type

 */

public static <T>String userTypeToString(Map<FieldIdentifier,T> items,java.util.function.Function<T,String> mapper){

  return items.entrySet().stream().map(p -> String.format("%s: %s",p.getKey(),mapper.apply(p.getValue()))).collect(Collectors.joining(", ","{","}"));

}

Location: UserTypes.java

Content: 

public static <T extends AssignmentTestable>void validateUserTypeAssignableTo(ColumnSpecification receiver,Map<FieldIdentifier,T> entries){

  if (!receiver.type.isUDT())   throw new InvalidRequestException(String.format("Invalid user type literal for %s of type %s",receiver,receiver.type.asCQL3Type()));

  UserType ut=(UserType)receiver.type;

  for (int i=0; i < ut.size(); i++) {

    FieldIdentifier field=ut.fieldName(i);

    T value=entries.get(field);

    if (value == null)     continue;

    ColumnSpecification fieldSpec=fieldSpecOf(receiver,i);

    if (!value.testAssignment(receiver.ksName,fieldSpec).isAssignable()) {

      throw new InvalidRequestException(String.format("Invalid user type literal for %s: field %s is not of type %s",receiver,field,fieldSpec.type.asCQL3Type()));

    }

  }

}

