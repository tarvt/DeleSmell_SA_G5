Location: PartitionIterators.java

Content: 

/** 

 * Consumes all rows in the next partition of the provided partition iterator.

 */

public static void consumeNext(PartitionIterator iterator){

  if (iterator.hasNext()) {

    try (RowIterator partition=iterator.next()){

      while (partition.hasNext())       partition.next();

    }

   }

}

Location: PartitionIterators.java

Content: 

public static void consume(PartitionIterator iterator){

  while (iterator.hasNext()) {

    try (RowIterator partition=iterator.next()){

      while (partition.hasNext())       partition.next();

    }

   }

}

Location: PartitionIterators.java

Content: 

/** 

 * Wraps the provided iterator to run a specified action on close. Note that the action will be run even if closure of the provided iterator throws an exception.

 */

public static PartitionIterator doOnClose(PartitionIterator delegate,Runnable action){

  return new PartitionIterator(){

    public void close(){

      try {

        delegate.close();

      }

  finally {

        action.run();

      }

    }

    public boolean hasNext(){

      return delegate.hasNext();

    }

    public RowIterator next(){

      return delegate.next();

    }

  }

;

}

Location: PartitionIterators.java

Content: 

@SuppressWarnings("resource") public static RowIterator getOnlyElement(final PartitionIterator iter,SinglePartitionReadQuery query){

  RowIterator toReturn=iter.hasNext() ? iter.next() : EmptyIterators.row(query.metadata(),query.partitionKey(),query.clusteringIndexFilter().isReversed());

class Close extends Transformation {

    public void onPartitionClose(){

      boolean hadNext=iter.hasNext();

      iter.close();

      assert !hadNext;

    }

  }

  return Transformation.apply(toReturn,new Close());

}

Location: PartitionIterators.java

Content: 

/** 

 * Wraps the provided iterator so it logs the returned rows for debugging purposes. <p> Note that this is only meant for debugging as this can log a very large amount of logging at INFO.

 */

@SuppressWarnings("resource") public static PartitionIterator loggingIterator(PartitionIterator iterator,final String id){

class Logger extends Transformation<RowIterator> {

    public RowIterator applyToPartition(    RowIterator partition){

      return RowIterators.loggingIterator(partition,id);

    }

  }

  return Transformation.apply(iterator,new Logger());

}

Location: PartitionIterators.java

Content: 

private PartitionIterators(){

}

Location: PartitionIterators.java

Content: 

public static PartitionIterator singletonIterator(RowIterator iterator){

  return new SingletonPartitionIterator(iterator);

}

