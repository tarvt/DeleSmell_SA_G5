Location: DataOutputBuffer.java

Content: 

public ByteBuffer asNewBuffer(){

  return ByteBuffer.wrap(toByteArray());

}

Location: DataOutputBuffer.java

Content: 

public ByteBuffer buffer(boolean duplicate){

  if (!duplicate) {

    ByteBuffer buf=buffer;

    buf.flip();

    buffer=null;

    return buf;

  }

  ByteBuffer result=buffer.duplicate();

  result.flip();

  return result;

}

Location: DataOutputBuffer.java

Content: 

@VisibleForTesting long calculateNewSize(long count){

  long capacity=capacity();

  long newSize=capacity + count;

  if (capacity > 1024L * 1024L * DOUBLING_THRESHOLD)   newSize=Math.max((capacity * 3L) / 2L,newSize);

 else   newSize=Math.max(capacity * 2L,newSize);

  return validateReallocation(newSize);

}

Location: DataOutputBuffer.java

Content: 

@VisibleForTesting long capacity(){

  return buffer.capacity();

}

Location: DataOutputBuffer.java

Content: 

@VisibleForTesting static int checkedArraySizeCast(long size){

  Preconditions.checkArgument(size >= 0);

  Preconditions.checkArgument(size <= MAX_ARRAY_SIZE);

  return (int)size;

}

Location: DataOutputBuffer.java

Content: 

public DataOutputBuffer(){

  this(DEFAULT_INITIAL_BUFFER_SIZE);

}

Location: DataOutputBuffer.java

Content: 

public DataOutputBuffer(ByteBuffer buffer){

  super(buffer);

}

Location: DataOutputBuffer.java

Content: 

public DataOutputBuffer(int size){

  super(ByteBuffer.allocate(size));

}

Location: DataOutputBuffer.java

Content: 

public byte[] getData(){

  assert buffer.arrayOffset() == 0;

  return buffer.array();

}

Location: DataOutputBuffer.java

Content: 

public int getLength(){

  return buffer.position();

}

Location: DataOutputBuffer.java

Content: 

@VisibleForTesting static int saturatedArraySizeCast(long size){

  Preconditions.checkArgument(size >= 0);

  return (int)Math.min(MAX_ARRAY_SIZE,size);

}

Location: DataOutputBuffer.java

Content: 

public byte[] toByteArray(){

  ByteBuffer buffer=buffer();

  byte[] result=new byte[buffer.remaining()];

  buffer.get(result);

  return result;

}

Location: DataOutputBuffer.java

Content: 

@VisibleForTesting long validateReallocation(long newSize){

  int saturatedSize=saturatedArraySizeCast(newSize);

  if (saturatedSize <= capacity())   throw new BufferOverflowException();

  return saturatedSize;

}

