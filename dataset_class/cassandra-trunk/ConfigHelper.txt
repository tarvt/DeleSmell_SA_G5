Location: ConfigHelper.java

Content: 

public static String getInputColumnFamily(Configuration conf){

  return conf.get(INPUT_COLUMNFAMILY_CONFIG);

}

Location: ConfigHelper.java

Content: 

public static String getInputInitialAddress(Configuration conf){

  return conf.get(INPUT_INITIAL_ADDRESS);

}

Location: ConfigHelper.java

Content: 

public static boolean getInputIsWide(Configuration conf){

  return Boolean.parseBoolean(conf.get(INPUT_WIDEROWS_CONFIG));

}

Location: ConfigHelper.java

Content: 

/** 

 * The start and end token of the input key range as a pair. may be null if unset.

 */

public static Pair<String,String> getInputKeyRange(Configuration conf){

  String str=conf.get(INPUT_KEYRANGE_CONFIG);

  if (str == null)   return null;

  String[] parts=str.split(",");

  assert parts.length == 2;

  return Pair.create(parts[0],parts[1]);

}

Location: ConfigHelper.java

Content: 

public static String getInputKeyspacePassword(Configuration conf){

  return conf.get(INPUT_KEYSPACE_PASSWD_CONFIG);

}

Location: ConfigHelper.java

Content: 

public static String getInputKeyspaceUserName(Configuration conf){

  return conf.get(INPUT_KEYSPACE_USERNAME_CONFIG);

}

Location: ConfigHelper.java

Content: 

public static String getInputKeyspace(Configuration conf){

  return conf.get(INPUT_KEYSPACE_CONFIG);

}

Location: ConfigHelper.java

Content: 

public static IPartitioner getInputPartitioner(Configuration conf){

  return FBUtilities.newPartitioner(conf.get(INPUT_PARTITIONER_CONFIG));

}

Location: ConfigHelper.java

Content: 

/** 

 * cassandra.input.split.size will be used if the value is undefined or negative.

 * @param conf  Job configuration you are about to run

 * @return      split size in MB or -1 if it is undefined.

 */

public static int getInputSplitSizeInMb(Configuration conf){

  return conf.getInt(INPUT_SPLIT_SIZE_IN_MB_CONFIG,-1);

}

Location: ConfigHelper.java

Content: 

public static int getInputSplitSize(Configuration conf){

  return conf.getInt(INPUT_SPLIT_SIZE_CONFIG,DEFAULT_SPLIT_SIZE);

}

Location: ConfigHelper.java

Content: 

public static String getOutputColumnFamily(Configuration conf){

  if (conf.get(OUTPUT_COLUMNFAMILY_CONFIG) != null)   return conf.get(OUTPUT_COLUMNFAMILY_CONFIG);

 else   throw new UnsupportedOperationException("You must set the output column family using either setOutputColumnFamily or by adding a named output with MultipleOutputs");

}

Location: ConfigHelper.java

Content: 

public static String getOutputCompressionChunkLength(Configuration conf){

  return conf.get(OUTPUT_COMPRESSION_CHUNK_LENGTH,String.valueOf(CompressionParams.DEFAULT_CHUNK_LENGTH));

}

Location: ConfigHelper.java

Content: 

public static String getOutputCompressionClass(Configuration conf){

  return conf.get(OUTPUT_COMPRESSION_CLASS);

}

Location: ConfigHelper.java

Content: 

public static String getOutputInitialAddress(Configuration conf){

  return conf.get(OUTPUT_INITIAL_ADDRESS);

}

Location: ConfigHelper.java

Content: 

public static Integer getOutputInitialPort(Configuration conf){

  return Integer.valueOf(conf.get(OUTPUT_INITIAL_PORT,DEFAULT_CASSANDRA_NATIVE_PORT));

}

Location: ConfigHelper.java

Content: 

public static String getOutputKeyspacePassword(Configuration conf){

  return conf.get(OUTPUT_KEYSPACE_PASSWD_CONFIG);

}

Location: ConfigHelper.java

Content: 

public static String getOutputKeyspaceUserName(Configuration conf){

  return conf.get(OUTPUT_KEYSPACE_USERNAME_CONFIG);

}

Location: ConfigHelper.java

Content: 

public static String getOutputKeyspace(Configuration conf){

  return conf.get(OUTPUT_KEYSPACE_CONFIG);

}

Location: ConfigHelper.java

Content: 

public static boolean getOutputLocalDCOnly(Configuration conf){

  return Boolean.parseBoolean(conf.get(OUTPUT_LOCAL_DC_ONLY,"false"));

}

Location: ConfigHelper.java

Content: 

public static IPartitioner getOutputPartitioner(Configuration conf){

  return FBUtilities.newPartitioner(conf.get(OUTPUT_PARTITIONER_CONFIG));

}

Location: ConfigHelper.java

Content: 

/** 

 * The number of rows to request with each get range slices request. Too big and you can either get timeouts when it takes Cassandra too long to fetch all the data. Too small and the performance will be eaten up by the overhead of each request.

 * @param conf Job configuration you are about to run

 * @return Number of rows to request each time

 */

public static int getRangeBatchSize(Configuration conf){

  return conf.getInt(RANGE_BATCH_SIZE_CONFIG,DEFAULT_RANGE_BATCH_SIZE);

}

Location: ConfigHelper.java

Content: 

public static String getReadConsistencyLevel(Configuration conf){

  return conf.get(READ_CONSISTENCY_LEVEL,"LOCAL_ONE");

}

Location: ConfigHelper.java

Content: 

public static String getWriteConsistencyLevel(Configuration conf){

  return conf.get(WRITE_CONSISTENCY_LEVEL,"LOCAL_ONE");

}

Location: ConfigHelper.java

Content: 

/** 

 * Set the keyspace and column family for the input of this job.

 * @param conf         Job configuration you are about to run

 * @param keyspace

 * @param columnFamily

 */

public static void setInputColumnFamily(Configuration conf,String keyspace,String columnFamily){

  setInputColumnFamily(conf,keyspace,columnFamily,false);

}

Location: ConfigHelper.java

Content: 

/** 

 * Set the keyspace and column family for the input of this job.

 * @param conf         Job configuration you are about to run

 * @param keyspace

 * @param columnFamily

 * @param widerows

 */

public static void setInputColumnFamily(Configuration conf,String keyspace,String columnFamily,boolean widerows){

  if (keyspace == null)   throw new UnsupportedOperationException("keyspace may not be null");

  if (columnFamily == null)   throw new UnsupportedOperationException("table may not be null");

  conf.set(INPUT_KEYSPACE_CONFIG,keyspace);

  conf.set(INPUT_COLUMNFAMILY_CONFIG,columnFamily);

  conf.set(INPUT_WIDEROWS_CONFIG,String.valueOf(widerows));

}

Location: ConfigHelper.java

Content: 

public static void setInputInitialAddress(Configuration conf,String address){

  conf.set(INPUT_INITIAL_ADDRESS,address);

}

Location: ConfigHelper.java

Content: 

public static void setInputKeyspacePassword(Configuration conf,String password){

  conf.set(INPUT_KEYSPACE_PASSWD_CONFIG,password);

}

Location: ConfigHelper.java

Content: 

public static void setInputKeyspaceUserNameAndPassword(Configuration conf,String username,String password){

  setInputKeyspaceUserName(conf,username);

  setInputKeyspacePassword(conf,password);

}

Location: ConfigHelper.java

Content: 

public static void setInputKeyspaceUserName(Configuration conf,String username){

  conf.set(INPUT_KEYSPACE_USERNAME_CONFIG,username);

}

Location: ConfigHelper.java

Content: 

public static void setInputPartitioner(Configuration conf,String classname){

  conf.set(INPUT_PARTITIONER_CONFIG,classname);

}

Location: ConfigHelper.java

Content: 

/** 

 * Set the KeyRange to limit the rows.

 * @param conf Job configuration you are about to run

 */

public static void setInputRange(Configuration conf,String startToken,String endToken){

  conf.set(INPUT_KEYRANGE_CONFIG,startToken + "," + endToken);

}

Location: ConfigHelper.java

Content: 

/** 

 * Set the size of the input split. setInputSplitSize value is used if this is not set. This affects the number of maps created, if the number is too small the overhead of each map will take up the bulk of the job time.

 * @param conf          Job configuration you are about to run

 * @param splitSizeMb   Input split size in MB

 */

public static void setInputSplitSizeInMb(Configuration conf,int splitSizeMb){

  conf.setInt(INPUT_SPLIT_SIZE_IN_MB_CONFIG,splitSizeMb);

}

Location: ConfigHelper.java

Content: 

/** 

 * Set the size of the input split. This affects the number of maps created, if the number is too small the overhead of each map will take up the bulk of the job time.

 * @param conf      Job configuration you are about to run

 * @param splitsize Number of partitions in the input split

 */

public static void setInputSplitSize(Configuration conf,int splitsize){

  conf.setInt(INPUT_SPLIT_SIZE_CONFIG,splitsize);

}

Location: ConfigHelper.java

Content: 

/** 

 * Set the column family for the output of this job.

 * @param conf         Job configuration you are about to run

 * @param columnFamily

 */

public static void setOutputColumnFamily(Configuration conf,String columnFamily){

  conf.set(OUTPUT_COLUMNFAMILY_CONFIG,columnFamily);

}

Location: ConfigHelper.java

Content: 

/** 

 * Set the column family for the output of this job.

 * @param conf         Job configuration you are about to run

 * @param keyspace

 * @param columnFamily

 */

public static void setOutputColumnFamily(Configuration conf,String keyspace,String columnFamily){

  setOutputKeyspace(conf,keyspace);

  setOutputColumnFamily(conf,columnFamily);

}

Location: ConfigHelper.java

Content: 

public static void setOutputCompressionChunkLength(Configuration conf,String length){

  conf.set(OUTPUT_COMPRESSION_CHUNK_LENGTH,length);

}

Location: ConfigHelper.java

Content: 

public static void setOutputCompressionClass(Configuration conf,String classname){

  conf.set(OUTPUT_COMPRESSION_CLASS,classname);

}

Location: ConfigHelper.java

Content: 

public static void setOutputInitialAddress(Configuration conf,String address){

  conf.set(OUTPUT_INITIAL_ADDRESS,address);

}

Location: ConfigHelper.java

Content: 

public static void setOutputInitialPort(Configuration conf,Integer port){

  conf.set(OUTPUT_INITIAL_PORT,port.toString());

}

Location: ConfigHelper.java

Content: 

public static void setOutputKeyspacePassword(Configuration conf,String password){

  conf.set(OUTPUT_KEYSPACE_PASSWD_CONFIG,password);

}

Location: ConfigHelper.java

Content: 

public static void setOutputKeyspaceUserNameAndPassword(Configuration conf,String username,String password){

  setOutputKeyspaceUserName(conf,username);

  setOutputKeyspacePassword(conf,password);

}

Location: ConfigHelper.java

Content: 

public static void setOutputKeyspaceUserName(Configuration conf,String username){

  conf.set(OUTPUT_KEYSPACE_USERNAME_CONFIG,username);

}

Location: ConfigHelper.java

Content: 

/** 

 * Set the keyspace for the output of this job.

 * @param conf Job configuration you are about to run

 * @param keyspace

 */

public static void setOutputKeyspace(Configuration conf,String keyspace){

  if (keyspace == null)   throw new UnsupportedOperationException("keyspace may not be null");

  conf.set(OUTPUT_KEYSPACE_CONFIG,keyspace);

}

Location: ConfigHelper.java

Content: 

public static void setOutputLocalDCOnly(Configuration conf,boolean localDCOnly){

  conf.set(OUTPUT_LOCAL_DC_ONLY,Boolean.toString(localDCOnly));

}

Location: ConfigHelper.java

Content: 

public static void setOutputPartitioner(Configuration conf,String classname){

  conf.set(OUTPUT_PARTITIONER_CONFIG,classname);

}

Location: ConfigHelper.java

Content: 

/** 

 * The number of rows to request with each get range slices request. Too big and you can either get timeouts when it takes Cassandra too long to fetch all the data. Too small and the performance will be eaten up by the overhead of each request.

 * @param conf      Job configuration you are about to run

 * @param batchsize Number of rows to request each time

 */

public static void setRangeBatchSize(Configuration conf,int batchsize){

  conf.setInt(RANGE_BATCH_SIZE_CONFIG,batchsize);

}

Location: ConfigHelper.java

Content: 

public static void setReadConsistencyLevel(Configuration conf,String consistencyLevel){

  conf.set(READ_CONSISTENCY_LEVEL,consistencyLevel);

}

Location: ConfigHelper.java

Content: 

public static void setWriteConsistencyLevel(Configuration conf,String consistencyLevel){

  conf.set(WRITE_CONSISTENCY_LEVEL,consistencyLevel);

}

