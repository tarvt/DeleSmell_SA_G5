Location: DiagnosticEventService.java

Content: 

/** 

 * Removes all active subscribers. Should only be called from testing.

 */

public synchronized void cleanup(){

  subscribersByClass=ImmutableSetMultimap.of();

  subscribersAll=ImmutableSet.of();

  subscribersByClassAndType=ImmutableMap.of();

}

Location: DiagnosticEventService.java

Content: 

private DiagnosticEventService(){

  MBeanWrapper.instance.registerMBean(this,"org.apache.cassandra.diag:type=DiagnosticEventService");

  DiagnosticEventPersistence.start();

}

Location: DiagnosticEventService.java

Content: 

/** 

 * Indicates if any  {@link Consumer} has been registered for the specified class of events.

 * @param event DiagnosticEvent class implementation

 */

public <E extends DiagnosticEvent>boolean hasSubscribers(Class<E> event){

  return !subscribersAll.isEmpty() || subscribersByClass.containsKey(event) || subscribersByClassAndType.containsKey(event);

}

Location: DiagnosticEventService.java

Content: 

/** 

 * Indicates if any  {@link Consumer} has been registered for the specified class of events.

 * @param event DiagnosticEvent class implementation

 * @param eventType Subscribed event type matched against {@link DiagnosticEvent#getType()}

 */

public <E extends DiagnosticEvent,T extends Enum<T>>boolean hasSubscribers(Class<E> event,T eventType){

  if (!subscribersAll.isEmpty())   return true;

  ImmutableSet<Consumer<DiagnosticEvent>> subscribers=subscribersByClass.get(event);

  if (subscribers != null && !subscribers.isEmpty())   return true;

  ImmutableSetMultimap<Enum<?>,Consumer<DiagnosticEvent>> byType=subscribersByClassAndType.get(event);

  if (byType == null || byType.isEmpty())   return false;

  Set<Consumer<DiagnosticEvent>> consumers=byType.get(eventType);

  return consumers != null && !consumers.isEmpty();

}

Location: DiagnosticEventService.java

Content: 

/** 

 * Indicates if events are enabled for specified event class based on  {@link DatabaseDescriptor#diagnosticEventsEnabled()}and  {@link #hasSubscribers(Class)}.

 * @param event DiagnosticEvent class implementation

 */

public <E extends DiagnosticEvent>boolean isEnabled(Class<E> event){

  return DatabaseDescriptor.diagnosticEventsEnabled() && hasSubscribers(event);

}

Location: DiagnosticEventService.java

Content: 

/** 

 * Indicates if events are enabled for specified event class based on  {@link DatabaseDescriptor#diagnosticEventsEnabled()}and  {@link #hasSubscribers(Class,Enum)}.

 * @param event DiagnosticEvent class implementation

 * @param eventType Subscribed event type matched against {@link DiagnosticEvent#getType()}

 */

public <E extends DiagnosticEvent,T extends Enum<T>>boolean isEnabled(Class<E> event,T eventType){

  return DatabaseDescriptor.diagnosticEventsEnabled() && hasSubscribers(event,eventType);

}

Location: DiagnosticEventService.java

Content: 

/** 

 * Makes provided event available to all subscribers.

 */

public void publish(DiagnosticEvent event){

  if (!DatabaseDescriptor.diagnosticEventsEnabled())   return;

  logger.trace("Publishing: {}",event);

  ImmutableMultimap<Enum<?>,Consumer<DiagnosticEvent>> consumersByType=subscribersByClassAndType.get(event.getClass());

  if (consumersByType != null) {

    ImmutableCollection<Consumer<DiagnosticEvent>> consumers=consumersByType.get(event.getType());

    if (consumers != null) {

      for (      Consumer<DiagnosticEvent> consumer : consumers)       consumer.accept(event);

    }

  }

  Set<Consumer<DiagnosticEvent>> consumersByEvents=subscribersByClass.get(event.getClass());

  if (consumersByEvents != null) {

    for (    Consumer<DiagnosticEvent> consumer : consumersByEvents)     consumer.accept(event);

  }

  for (  Consumer<DiagnosticEvent> consumer : subscribersAll)   consumer.accept(event);

}

Location: DiagnosticEventService.java

Content: 

/** 

 * Registers event handler for all DiagnosticEvents published from this point.

 * @param consumer Consumer for received events

 */

public synchronized void subscribeAll(Consumer<DiagnosticEvent> consumer){

  subscribersAll=ImmutableSet.<Consumer<DiagnosticEvent>>builder().addAll(subscribersAll).add(consumer).build();

}

Location: DiagnosticEventService.java

Content: 

/** 

 * Registers event handler for specified class of events.

 * @param event DiagnosticEvent class implementation

 * @param consumer Consumer for received events

 */

public synchronized <E extends DiagnosticEvent>void subscribe(Class<E> event,Consumer<E> consumer){

  logger.debug("Adding subscriber: {}",consumer);

  subscribersByClass=ImmutableSetMultimap.<Class<? extends DiagnosticEvent>,Consumer<DiagnosticEvent>>builder().putAll(subscribersByClass).put(event,new TypedConsumerWrapper<>(consumer)).build();

  logger.debug("Total subscribers: {}",subscribersByClass.values().size());

}

Location: DiagnosticEventService.java

Content: 

/** 

 * Registers event handler for specified class of events.

 * @param event DiagnosticEvent class implementation

 * @param consumer Consumer for received events

 */

public synchronized <E extends DiagnosticEvent,T extends Enum<T>>void subscribe(Class<E> event,T eventType,Consumer<E> consumer){

  ImmutableSetMultimap.Builder<Enum<?>,Consumer<DiagnosticEvent>> byTypeBuilder=ImmutableSetMultimap.builder();

  if (subscribersByClassAndType.containsKey(event))   byTypeBuilder.putAll(subscribersByClassAndType.get(event));

  byTypeBuilder.put(eventType,new TypedConsumerWrapper<>(consumer));

  ImmutableMap.Builder<Class,ImmutableSetMultimap<Enum<?>,Consumer<DiagnosticEvent>>> byClassBuilder=ImmutableMap.builder();

  for (  Class clazz : subscribersByClassAndType.keySet()) {

    if (!clazz.equals(event))     byClassBuilder.put(clazz,subscribersByClassAndType.get(clazz));

  }

  subscribersByClassAndType=byClassBuilder.put(event,byTypeBuilder.build()).build();

}

Location: DiagnosticEventService.java

Content: 

/** 

 * De-registers event handler from receiving any further events.

 * @param event DiagnosticEvent class to unsubscribe from

 * @param consumer Consumer registered for receiving events

 */

public synchronized <E extends DiagnosticEvent>void unsubscribe(@Nullable Class<E> event,Consumer<E> consumer){

  subscribersAll=ImmutableSet.copyOf(Iterables.filter(subscribersAll,(c) -> c != consumer));

  ImmutableSetMultimap.Builder<Class<? extends DiagnosticEvent>,Consumer<DiagnosticEvent>> byClassBuilder=ImmutableSetMultimap.builder();

  Collection<Map.Entry<Class<? extends DiagnosticEvent>,Consumer<DiagnosticEvent>>> entries=subscribersByClass.entries();

  for (  Map.Entry<Class<? extends DiagnosticEvent>,Consumer<DiagnosticEvent>> entry : entries) {

    Consumer<DiagnosticEvent> subscriber=entry.getValue();

    if (subscriber instanceof TypedConsumerWrapper)     subscriber=((TypedConsumerWrapper)subscriber).wrapped;

    if (subscriber != consumer || (event != null && !entry.getKey().equals(event))) {

      byClassBuilder=byClassBuilder.put(entry);

    }

  }

  subscribersByClass=byClassBuilder.build();

  ImmutableMap.Builder<Class,ImmutableSetMultimap<Enum<?>,Consumer<DiagnosticEvent>>> byClassAndTypeBuilder=ImmutableMap.builder();

  for (  Map.Entry<Class,ImmutableSetMultimap<Enum<?>,Consumer<DiagnosticEvent>>> byClassEntry : subscribersByClassAndType.entrySet()) {

    ImmutableSetMultimap.Builder<Enum<?>,Consumer<DiagnosticEvent>> byTypeBuilder=ImmutableSetMultimap.builder();

    ImmutableSetMultimap<Enum<?>,Consumer<DiagnosticEvent>> byTypeConsumers=byClassEntry.getValue();

    Iterables.filter(byTypeConsumers.entries(),(e) -> {

      if (e == null || e.getValue() == null)       return false;

      Consumer<DiagnosticEvent> subscriber=e.getValue();

      if (subscriber instanceof TypedConsumerWrapper)       subscriber=((TypedConsumerWrapper)subscriber).wrapped;

      return subscriber != consumer || (event != null && !byClassEntry.getKey().equals(event));

    }

).forEach(byTypeBuilder::put);

    ImmutableSetMultimap<Enum<?>,Consumer<DiagnosticEvent>> byType=byTypeBuilder.build();

    if (!byType.isEmpty())     byClassAndTypeBuilder.put(byClassEntry.getKey(),byType);

  }

  subscribersByClassAndType=byClassAndTypeBuilder.build();

}

Location: DiagnosticEventService.java

Content: 

/** 

 * De-registers event handler from receiving any further events.

 * @param consumer Consumer registered for receiving events

 */

public synchronized <E extends DiagnosticEvent>void unsubscribe(Consumer<E> consumer){

  unsubscribe(null,consumer);

}

