Location: LocalDate.java

Content: 

/** 

 * Return a new  {@link LocalDate} with the specified (signed) amount of time added to (orsubtracted from) the given  {@link Calendar} field, based on the calendar's rules.<p>Note that adding any amount to a field smaller than  {@link Calendar#DAY_OF_MONTH} willremain without effect, as this class does not keep time components. <p>See  {@link Calendar} javadocs for more information.

 * @param field  a {@link Calendar} field to modify.

 * @param amount the amount of date or time to be added to the field.

 * @return a new {@link LocalDate} with the specified (signed) amount of time added to (orsubtracted from) the given  {@link Calendar} field.

 * @throws IllegalArgumentException if the new date is not in the range [-5877641-06-23;5881580-07-11].

 */

public LocalDate add(int field,int amount){

  GregorianCalendar newCalendar=isoCalendar();

  newCalendar.setTimeInMillis(millisSinceEpoch);

  newCalendar.add(field,amount);

  LocalDate newDate=fromMillisSinceEpoch(newCalendar.getTimeInMillis());

  newDate.calendar=newCalendar;

  return newDate;

}

Location: LocalDate.java

Content: 

/** 

 * Builds a new instance from a number of days since January 1st, 1970 GMT.

 * @param daysSinceEpoch the number of days.

 * @return the new instance.

 */

static LocalDate fromDaysSinceEpoch(int daysSinceEpoch){

  return new LocalDate(daysSinceEpoch);

}

Location: LocalDate.java

Content: 

/** 

 * Builds a new instance from a number of milliseconds since January 1st, 1970 GMT. Note that if the given number does not correspond to a whole number of days, it will be rounded towards 0.

 * @param millisSinceEpoch the number of milliseconds since January 1st, 1970 GMT.

 * @return the new instance.

 * @throws IllegalArgumentException if the date is not in the range [-5877641-06-23;5881580-07-11].

 */

static LocalDate fromMillisSinceEpoch(long millisSinceEpoch) throws IllegalArgumentException {

  long daysSinceEpoch=TimeUnit.MILLISECONDS.toDays(millisSinceEpoch);

  checkArgument(daysSinceEpoch >= Integer.MIN_VALUE && daysSinceEpoch <= Integer.MAX_VALUE,"Date should be in the range [-5877641-06-23; 5881580-07-11]");

  return new LocalDate((int)daysSinceEpoch);

}

Location: LocalDate.java

Content: 

private GregorianCalendar getCalendar(){

  if (calendar == null) {

    GregorianCalendar tmp=isoCalendar();

    tmp.setTimeInMillis(millisSinceEpoch);

    calendar=tmp;

  }

  return calendar;

}

Location: LocalDate.java

Content: 

/** 

 * Returns the day in the month.

 * @return the day in the month.

 */

public int getDay(){

  return getCalendar().get(Calendar.DAY_OF_MONTH);

}

Location: LocalDate.java

Content: 

/** 

 * Returns the number of days since January 1st, 1970 GMT.

 * @return the number of days.

 */

int getDaysSinceEpoch(){

  return daysSinceEpoch;

}

Location: LocalDate.java

Content: 

/** 

 * Returns the month.

 * @return the month. It is 1-based, e.g. 1 for January.

 */

public int getMonth(){

  return getCalendar().get(Calendar.MONTH) + 1;

}

Location: LocalDate.java

Content: 

/** 

 * Returns the year.

 * @return the year.

 */

public int getYear(){

  GregorianCalendar c=getCalendar();

  int year=c.get(Calendar.YEAR);

  if (c.get(Calendar.ERA) == GregorianCalendar.BC)   year=-year + 1;

  return year;

}

Location: LocalDate.java

Content: 

private static GregorianCalendar isoCalendar(){

  GregorianCalendar calendar=new GregorianCalendar(UTC);

  calendar.setGregorianChange(new Date(Long.MIN_VALUE));

  return calendar;

}

Location: LocalDate.java

Content: 

private LocalDate(int daysSinceEpoch){

  this.daysSinceEpoch=daysSinceEpoch;

  this.millisSinceEpoch=TimeUnit.DAYS.toMillis(daysSinceEpoch);

}

Location: LocalDate.java

Content: 

private static String pad2(int i){

  String s=Integer.toString(i);

  return s.length() == 2 ? s : '0' + s;

}

