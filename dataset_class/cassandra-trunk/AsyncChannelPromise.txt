Location: AsyncChannelPromise.java

Content: 

@SuppressWarnings("unused") public AsyncChannelPromise(Channel channel){

  super(channel.eventLoop());

  this.channel=channel;

}

Location: AsyncChannelPromise.java

Content: 

AsyncChannelPromise(Channel channel,GenericFutureListener<? extends Future<? super Void>> listener){

  super(channel.eventLoop(),listener);

  this.channel=channel;

}

Location: AsyncChannelPromise.java

Content: 

public Channel channel(){

  return channel;

}

Location: AsyncChannelPromise.java

Content: 

public boolean isVoid(){

  return false;

}

Location: AsyncChannelPromise.java

Content: 

public ChannelPromise setFailure(Throwable throwable){

  super.setFailure(throwable);

  return this;

}

Location: AsyncChannelPromise.java

Content: 

public ChannelPromise setSuccess(){

  return setSuccess(null);

}

Location: AsyncChannelPromise.java

Content: 

public ChannelPromise setSuccess(Void v){

  super.setSuccess(v);

  return this;

}

Location: AsyncChannelPromise.java

Content: 

public boolean trySuccess(){

  return trySuccess(null);

}

Location: AsyncChannelPromise.java

Content: 

public ChannelPromise unvoid(){

  return this;

}

Location: AsyncChannelPromise.java

Content: 

public static AsyncChannelPromise withListener(Channel channel,GenericFutureListener<? extends Future<? super Void>> listener){

  return new AsyncChannelPromise(channel,listener);

}

Location: AsyncChannelPromise.java

Content: 

public static AsyncChannelPromise withListener(ChannelHandlerContext context,GenericFutureListener<? extends Future<? super Void>> listener){

  return withListener(context.channel(),listener);

}

Location: AsyncChannelPromise.java

Content: 

public static ChannelFuture writeAndFlush(ChannelHandlerContext context,Object message){

  return context.writeAndFlush(message,new AsyncChannelPromise(context.channel()));

}

Location: AsyncChannelPromise.java

Content: 

public static ChannelFuture writeAndFlush(ChannelHandlerContext context,Object message,GenericFutureListener<? extends Future<? super Void>> listener){

  return context.writeAndFlush(message,withListener(context.channel(),listener));

}

Location: AsyncChannelPromise.java

Content: 

public static ChannelFuture writeAndFlush(Channel channel,Object message){

  return channel.writeAndFlush(message,new AsyncChannelPromise(channel));

}

Location: AsyncChannelPromise.java

Content: 

public static ChannelFuture writeAndFlush(Channel channel,Object message,GenericFutureListener<? extends Future<? super Void>> listener){

  return channel.writeAndFlush(message,withListener(channel,listener));

}

