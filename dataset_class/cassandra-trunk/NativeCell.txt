Location: NativeCell.java

Content: 

public ValueAccessor<ByteBuffer> accessor(){

  return ByteBufferAccessor.instance;

}

Location: NativeCell.java

Content: 

public int localDeletionTime(){

  return MemoryUtil.getInt(peer + DELETION);

}

Location: NativeCell.java

Content: 

private NativeCell(){

  super(null);

  this.peer=0;

}

Location: NativeCell.java

Content: 

public NativeCell(NativeAllocator allocator,OpOrder.Group writeOp,Cell<?> cell){

  this(allocator,writeOp,cell.column(),cell.timestamp(),cell.ttl(),cell.localDeletionTime(),cell.buffer(),cell.path());

}

Location: NativeCell.java

Content: 

public NativeCell(NativeAllocator allocator,OpOrder.Group writeOp,ColumnMetadata column,long timestamp,int ttl,int localDeletionTime,ByteBuffer value,CellPath path){

  super(column);

  long size=simpleSize(value.remaining());

  assert value.order() == ByteOrder.BIG_ENDIAN;

  assert column.isComplex() == (path != null);

  if (path != null) {

    assert path.size() == 1;

    size+=4 + path.get(0).remaining();

  }

  if (size > Integer.MAX_VALUE)   throw new IllegalStateException();

  peer=allocator.allocate((int)size,writeOp);

  MemoryUtil.setByte(peer + HAS_CELLPATH,(byte)(path == null ? 0 : 1));

  MemoryUtil.setLong(peer + TIMESTAMP,timestamp);

  MemoryUtil.setInt(peer + TTL,ttl);

  MemoryUtil.setInt(peer + DELETION,localDeletionTime);

  MemoryUtil.setInt(peer + LENGTH,value.remaining());

  MemoryUtil.setBytes(peer + VALUE,value);

  if (path != null) {

    ByteBuffer pathbuffer=path.get(0);

    assert pathbuffer.order() == ByteOrder.BIG_ENDIAN;

    long offset=peer + VALUE + value.remaining();

    MemoryUtil.setInt(offset,pathbuffer.remaining());

    MemoryUtil.setBytes(offset + 4,pathbuffer);

  }

}

Location: NativeCell.java

Content: 

private static long simpleSize(int length){

  return VALUE + length;

}

Location: NativeCell.java

Content: 

public long timestamp(){

  return MemoryUtil.getLong(peer + TIMESTAMP);

}

Location: NativeCell.java

Content: 

public long unsharedHeapSizeExcludingData(){

  return EMPTY_SIZE;

}

Location: NativeCell.java

Content: 

public ByteBuffer value(){

  int length=MemoryUtil.getInt(peer + LENGTH);

  return MemoryUtil.getByteBuffer(peer + VALUE,length,ByteOrder.BIG_ENDIAN);

}

Location: NativeCell.java

Content: 

public Cell<?> withUpdatedColumn(ColumnMetadata column){

  return new BufferCell(column,timestamp(),ttl(),localDeletionTime(),value(),path());

}

Location: NativeCell.java

Content: 

public Cell<?> withUpdatedTimestampAndLocalDeletionTime(long newTimestamp,int newLocalDeletionTime){

  return new BufferCell(column,newTimestamp,ttl(),newLocalDeletionTime,value(),path());

}

Location: NativeCell.java

Content: 

public Cell<?> withUpdatedValue(ByteBuffer newValue){

  throw new UnsupportedOperationException();

}

