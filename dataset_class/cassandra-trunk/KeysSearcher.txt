Location: KeysSearcher.java

Content: 

private UnfilteredRowIterator filterIfStale(UnfilteredRowIterator iterator,Row indexHit,ByteBuffer indexedValue,WriteContext ctx,int nowInSec){

  Row data=iterator.staticRow();

  if (index.isStale(data,indexedValue,nowInSec)) {

    index.deleteStaleEntry(index.getIndexCfs().decorateKey(indexedValue),makeIndexClustering(iterator.partitionKey().getKey(),Clustering.EMPTY),new DeletionTime(indexHit.primaryKeyLivenessInfo().timestamp(),nowInSec),ctx);

    iterator.close();

    return null;

  }

 else {

    return iterator;

  }

}

Location: KeysSearcher.java

Content: 

private ColumnFilter getExtendedFilter(ColumnFilter initialFilter){

  if (command.columnFilter().fetches(index.getIndexedColumn()))   return initialFilter;

  ColumnFilter.Builder builder=ColumnFilter.selectionBuilder();

  builder.addAll(initialFilter.fetchedColumns());

  builder.add(index.getIndexedColumn());

  return builder.build();

}

Location: KeysSearcher.java

Content: 

public KeysSearcher(ReadCommand command,RowFilter.Expression expression,CassandraIndex indexer){

  super(command,expression,indexer);

}

Location: KeysSearcher.java

Content: 

protected UnfilteredPartitionIterator queryDataFromIndex(final DecoratedKey indexKey,final RowIterator indexHits,final ReadCommand command,final ReadExecutionController executionController){

  assert indexHits.staticRow() == Rows.EMPTY_STATIC_ROW;

  return new UnfilteredPartitionIterator(){

    private UnfilteredRowIterator next;

    public TableMetadata metadata(){

      return command.metadata();

    }

    public boolean hasNext(){

      return prepareNext();

    }

    public UnfilteredRowIterator next(){

      if (next == null)       prepareNext();

      UnfilteredRowIterator toReturn=next;

      next=null;

      return toReturn;

    }

    private boolean prepareNext(){

      while (next == null && indexHits.hasNext()) {

        Row hit=indexHits.next();

        DecoratedKey key=index.baseCfs.decorateKey(hit.clustering().bufferAt(0));

        if (!command.selectsKey(key))         continue;

        ColumnFilter extendedFilter=getExtendedFilter(command.columnFilter());

        SinglePartitionReadCommand dataCmd=SinglePartitionReadCommand.create(index.baseCfs.metadata(),command.nowInSec(),extendedFilter,command.rowFilter(),DataLimits.NONE,key,command.clusteringIndexFilter(key),null);

        @SuppressWarnings("resource") UnfilteredRowIterator dataIter=filterIfStale(dataCmd.queryMemtableAndDisk(index.baseCfs,executionController),hit,indexKey.getKey(),executionController.getWriteContext(),command.nowInSec());

        if (dataIter != null) {

          if (dataIter.isEmpty())           dataIter.close();

 else           next=dataIter;

        }

      }

      return next != null;

    }

    public void remove(){

      throw new UnsupportedOperationException();

    }

    public void close(){

      indexHits.close();

      if (next != null)       next.close();

    }

  }

;

}

