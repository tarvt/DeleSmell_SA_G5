Location: CassandraIndexFunctions.java

Content: 

/** 

 * Add the clustering columns for a specific type of index table to the a TableMetadata.Builder (which is being used to construct the index table's TableMetadata. In the default implementation, the clustering columns of the index table hold the partition key and clustering columns of the base table. This is overridden in several cases: * When the indexed value is itself a clustering column, in which case, we only need store the base table's *other* clustering values in the index - the indexed value being the index table's partition key * When the indexed value is a collection value, in which case we also need to capture the cell path from the base table * In a KEYS index (for compact storage/static column indexes), where only the base partition key is held in the index table. Called from indexCfsMetadata

 * @param builder

 * @param baseMetadata

 * @param cfDef

 * @return

 */

default TableMetadata.Builder addIndexClusteringColumns(TableMetadata.Builder builder,TableMetadata baseMetadata,ColumnMetadata cfDef){

  for (  ColumnMetadata def : baseMetadata.clusteringColumns())   builder.addClusteringColumn(def.name,def.type);

  return builder;

}

Location: CassandraIndexFunctions.java

Content: 

/** 

 * Returns the type of the the values in the index. For most columns this is simply its type, but for collections it depends on whether the index is on the collection name/value element or on a frozen collection

 * @param indexedColumn

 * @return

 */

default AbstractType<?> getIndexedValueType(ColumnMetadata indexedColumn){

  return indexedColumn.type;

}

Location: CassandraIndexFunctions.java

Content: 

/** 

 * @param baseCfs

 * @param indexMetadata

 * @return

 */

public CassandraIndex newIndexInstance(ColumnFamilyStore baseCfs,IndexMetadata indexMetadata);

