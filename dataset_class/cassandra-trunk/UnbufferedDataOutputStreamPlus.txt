Location: UnbufferedDataOutputStreamPlus.java

Content: 

protected UnbufferedDataOutputStreamPlus(){

  super();

}

Location: UnbufferedDataOutputStreamPlus.java

Content: 

protected UnbufferedDataOutputStreamPlus(WritableByteChannel channel){

  super(channel);

}

Location: UnbufferedDataOutputStreamPlus.java

Content: 

/** 

 * Writes a boolean to this output stream.

 * @param val the boolean value to write to the OutputStream

 * @throws IOException If an error occurs attempting to write to thisDataOutputStream.

 */

public final void writeBoolean(boolean val) throws IOException {

  write(val ? 1 : 0);

}

Location: UnbufferedDataOutputStreamPlus.java

Content: 

/** 

 * Writes the low order 8-bit bytes from a String to this output stream.

 * @param str the String containing the bytes to write to the OutputStream

 * @throws IOException If an error occurs attempting to write to thisDataOutputStream.

 */

public final void writeBytes(String str) throws IOException {

  byte bytes[]=new byte[str.length()];

  for (int index=0; index < str.length(); index++) {

    bytes[index]=(byte)(str.charAt(index) & 0xFF);

  }

  write(bytes);

}

Location: UnbufferedDataOutputStreamPlus.java

Content: 

/** 

 * Writes a 8-bit byte to this output stream.

 * @param val the byte value to write to the OutputStream

 * @throws java.io.IOException If an error occurs attempting to write to thisDataOutputStream.

 */

public final void writeByte(int val) throws IOException {

  write(val & 0xFF);

}

Location: UnbufferedDataOutputStreamPlus.java

Content: 

/** 

 * Writes the specified 16-bit characters contained in str to the OutputStream. Only the lower 2 bytes of each character are written with the higher of the 2 bytes written first. This represents the Unicode value of each character in str.

 * @param str the String whose characters are to be written.

 * @throws IOException If an error occurs attempting to write to thisDataOutputStream.

 */

public final void writeChars(String str) throws IOException {

  byte newBytes[]=new byte[str.length() * 2];

  for (int index=0; index < str.length(); index++) {

    int newIndex=index == 0 ? index : index * 2;

    newBytes[newIndex]=(byte)((str.charAt(index) >> 8) & 0xFF);

    newBytes[newIndex + 1]=(byte)(str.charAt(index) & 0xFF);

  }

  write(newBytes);

}

Location: UnbufferedDataOutputStreamPlus.java

Content: 

/** 

 * Writes the specified 16-bit character to the OutputStream. Only the lower 2 bytes are written with the higher of the 2 bytes written first. This represents the Unicode value of val.

 * @param val the character to be written

 * @throws IOException If an error occurs attempting to write to thisDataOutputStream.

 */

public final void writeChar(int val) throws IOException {

  write((val >>> 8) & 0xFF);

  write((val >>> 0) & 0xFF);

}

Location: UnbufferedDataOutputStreamPlus.java

Content: 

/** 

 * Writes a 64-bit double to this output stream. The resulting output is the 8 bytes resulting from calling Double.doubleToLongBits().

 * @param val the double to be written.

 * @throws IOException If an error occurs attempting to write to thisDataOutputStream.

 */

public final void writeDouble(double val) throws IOException {

  writeLong(Double.doubleToLongBits(val));

}

Location: UnbufferedDataOutputStreamPlus.java

Content: 

/** 

 * Writes a 32-bit float to this output stream. The resulting output is the 4 bytes resulting from calling Float.floatToIntBits().

 * @param val the float to be written.

 * @throws IOException If an error occurs attempting to write to thisDataOutputStream.

 */

public final void writeFloat(float val) throws IOException {

  writeInt(Float.floatToIntBits(val));

}

Location: UnbufferedDataOutputStreamPlus.java

Content: 

/** 

 * Writes a 32-bit int to this output stream. The resulting output is the 4 bytes, highest order first, of val.

 * @param val the int to be written.

 * @throws IOException If an error occurs attempting to write to thisDataOutputStream.

 */

public void writeInt(int val) throws IOException {

  write((val >>> 24) & 0xFF);

  write((val >>> 16) & 0xFF);

  write((val >>> 8) & 0xFF);

  write((val >>> 0) & 0xFF);

}

Location: UnbufferedDataOutputStreamPlus.java

Content: 

/** 

 * Writes a 64-bit long to this output stream. The resulting output is the 8 bytes, highest order first, of val.

 * @param val the long to be written.

 * @throws IOException If an error occurs attempting to write to thisDataOutputStream.

 */

public void writeLong(long val) throws IOException {

  write((int)(val >>> 56) & 0xFF);

  write((int)(val >>> 48) & 0xFF);

  write((int)(val >>> 40) & 0xFF);

  write((int)(val >>> 32) & 0xFF);

  write((int)(val >>> 24) & 0xFF);

  write((int)(val >>> 16) & 0xFF);

  write((int)(val >>> 8) & 0xFF);

  write((int)(val >>> 0) & 0xFF);

}

Location: UnbufferedDataOutputStreamPlus.java

Content: 

/** 

 * Writes the specified 16-bit short to the OutputStream. Only the lower 2 bytes are written with the higher of the 2 bytes written first.

 * @param val the short to be written

 * @throws IOException If an error occurs attempting to write to thisDataOutputStream.

 */

public void writeShort(int val) throws IOException {

  writeChar(val);

}

Location: UnbufferedDataOutputStreamPlus.java

Content: 

/** 

 * Writes the specified String out in UTF format.

 * @param str the String to be written in UTF format.

 * @throws IOException If an error occurs attempting to write to thisDataOutputStream.

 */

public final void writeUTF(String str) throws IOException {

  writeUTF(str,this);

}

Location: UnbufferedDataOutputStreamPlus.java

Content: 

/** 

 * Writes the specified String out in UTF format to the provided DataOutput

 * @param str the String to be written in UTF format.

 * @param out the DataOutput to write the UTF encoded string to

 * @throws IOException If an error occurs attempting to write to thisDataOutputStream.

 */

public static void writeUTF(String str,DataOutput out) throws IOException {

  int length=str.length();

  if (length == 0) {

    out.write(zeroBytes);

    return;

  }

  int utfCount=0;

  int maxSize=2;

  for (int i=0; i < length; i++) {

    int ch=str.charAt(i);

    if ((ch > 0) & (ch <= 127))     utfCount+=1;

 else     if (ch <= 2047)     utfCount+=2;

 else     utfCount+=maxSize=3;

  }

  if (utfCount > 65535)   throw new UTFDataFormatException();

  byte[] utfBytes=retrieveTemporaryBuffer(utfCount + 2);

  int bufferLength=utfBytes.length;

  if (utfCount == length) {

    utfBytes[0]=(byte)(utfCount >> 8);

    utfBytes[1]=(byte)utfCount;

    int firstIndex=2;

    for (int offset=0; offset < length; offset+=bufferLength) {

      int runLength=Math.min(bufferLength - firstIndex,length - offset) + firstIndex;

      offset-=firstIndex;

      for (int i=firstIndex; i < runLength; i++)       utfBytes[i]=(byte)str.charAt(offset + i);

      out.write(utfBytes,0,runLength);

      firstIndex=0;

    }

  }

 else {

    int utfIndex=2;

    int offset=0;

    utfBytes[0]=(byte)(utfCount >> 8);

    utfBytes[1]=(byte)utfCount;

    while (length > 0) {

      int charRunLength=(utfBytes.length - utfIndex) / maxSize;

      if (charRunLength < 128 && charRunLength < length) {

        out.write(utfBytes,0,utfIndex);

        utfIndex=0;

      }

      if (charRunLength > length)       charRunLength=length;

      for (int i=0; i < charRunLength; i++) {

        char ch=str.charAt(offset + i);

        if ((ch > 0) && (ch <= 127)) {

          utfBytes[utfIndex++]=(byte)ch;

        }

 else         if (ch <= 2047) {

          utfBytes[utfIndex++]=(byte)(0xc0 | (0x1f & (ch >> 6)));

          utfBytes[utfIndex++]=(byte)(0x80 | (0x3f & ch));

        }

 else {

          utfBytes[utfIndex++]=(byte)(0xe0 | (0x0f & (ch >> 12)));

          utfBytes[utfIndex++]=(byte)(0x80 | (0x3f & (ch >> 6)));

          utfBytes[utfIndex++]=(byte)(0x80 | (0x3f & ch));

        }

      }

      offset+=charRunLength;

      length-=charRunLength;

    }

    out.write(utfBytes,0,utfIndex);

  }

}

Location: UnbufferedDataOutputStreamPlus.java

Content: 

/** 

 * Writes the entire contents of the byte array <code>buffer</code> to this RandomAccessFile starting at the current file pointer.

 * @param buffer the buffer to be written.

 * @throws IOException If an error occurs trying to write to this RandomAccessFile.

 */

public void write(byte[] buffer) throws IOException {

  write(buffer,0,buffer.length);

}

