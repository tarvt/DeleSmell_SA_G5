Location: TypeCodec.java

Content: 

/** 

 * Return  {@code true} if this codec is capable of serializing the given {@code javaType}. <p>This implementation simply calls  {@link #accepts(TypeToken)}.

 * @param javaType The Java type this codec should serialize from and deserialize to; cannot be{@code null}.

 * @return {@code true} if the codec is capable of serializing the given {@code javaType}, and {@code false} otherwise.

 * @throws NullPointerException if {@code javaType} is {@code null}.

 */

public boolean accepts(Class<?> javaType){

  checkNotNull(javaType,"Parameter javaType cannot be null");

  return accepts(TypeToken.of(javaType));

}

Location: TypeCodec.java

Content: 

/** 

 * Return  {@code true} if this codec is capable of deserializing the given {@code cqlType}.

 * @param cqlType The CQL type this codec should deserialize from and serialize to; cannot be{@code null}.

 * @return {@code true} if the codec is capable of deserializing the given {@code cqlType}, and {@code false} otherwise.

 * @throws NullPointerException if {@code cqlType} is {@code null}.

 */

public boolean accepts(DataType cqlType){

  checkNotNull(cqlType,"Parameter cqlType cannot be null");

  return this.cqlType.equals(cqlType);

}

Location: TypeCodec.java

Content: 

/** 

 * Return  {@code true} if this codec is capable of serializing the given object. Note that theobject's Java type is inferred from the object' runtime (raw) type, contrary to  {@link #accepts(TypeToken)} which is capable of handling generic types.<p>This method is intended mostly to be used by the QueryBuilder when no type information is available when the codec is used. <p>Implementation notes: <ol> <li>The default implementation is <em>covariant</em> with respect to the passed argument (through the usage of  {@code TypeToken#isAssignableFrom(TypeToken)} or {@link TypeToken#isSupertypeOf(Type)}) and <em>it's strongly recommended not to modify this behavior</em>. This means that, by default, a codec will accept <em>any subtype</em> of the Java type that it has been created for. <li>The base implementation provided here can only handle non-parameterized types; codecs handling parameterized types, such as collection types, must override this method and perform some sort of "manual" inspection of the actual type parameters. <li>Similarly, codecs that only accept a partial subset of all possible values must override this method and manually inspect the object to check if it complies or not with the codec's limitations. </ol>

 * @param value The Java type this codec should serialize from and deserialize to; cannot be{@code null}.

 * @return {@code true} if the codec is capable of serializing the given {@code javaType}, and {@code false} otherwise.

 * @throws NullPointerException if {@code value} is {@code null}.

 */

public boolean accepts(Object value){

  checkNotNull(value,"Parameter value cannot be null");

  return this.javaType.isSupertypeOf(TypeToken.of(value.getClass()));

}

Location: TypeCodec.java

Content: 

/** 

 * Return  {@code true} if this codec is capable of serializing the given {@code javaType}. <p>The implementation is <em>invariant</em> with respect to the passed argument (through the usage of  {@link TypeToken#equals(Object)} and <em>it's strongly recommended not to modify thisbehavior</em>. This means that a codec will only ever return  {@code true} for the<em>exact</em> Java type that it has been created for. <p>If the argument represents a Java primitive type, its wrapper type is considered instead.

 * @param javaType The Java type this codec should serialize from and deserialize to; cannot be{@code null}.

 * @return {@code true} if the codec is capable of serializing the given {@code javaType}, and {@code false} otherwise.

 * @throws NullPointerException if {@code javaType} is {@code null}.

 */

public boolean accepts(TypeToken<?> javaType){

  checkNotNull(javaType,"Parameter javaType cannot be null");

  return this.javaType.equals(javaType.wrap());

}

Location: TypeCodec.java

Content: 

/** 

 * Return a newly-created codec for the given CQL custom type. <p>The returned codec maps the custom type into the Java type  {@link ByteBuffer}, thus providing a (very lightweight) support for Cassandra types that do not have a CQL equivalent. <p>Note that the returned codec assumes that CQL literals for the given custom type are expressed in binary form as well, e.g.  {@code 0xcafebabe}. If this is not the case, <em>the returned codec might be unable to  {@link #parse(String) parse} and {@link #format(Object) format} literals for this type</em>. This is notoriously true for types inheriting from {@code org.apache.cassandra.db.marshal.AbstractCompositeType}, whose CQL literals are actually expressed as quoted strings. <p>This method does not cache returned instances and returns a newly-allocated object at each invocation.

 * @param type the custom type this codec should handle.

 * @return A newly-created codec for the given CQL custom type.

 */

public static TypeCodec<ByteBuffer> custom(DataType.CustomType type){

  return new CustomCodec(type);

}

Location: TypeCodec.java

Content: 

/** 

 * Deserialize the given  {@link ByteBuffer} instance according to the CQL type handled by thiscodec. <p>Implementation notes: <ol> <li>Null or empty buffers should be gracefully handled and no exception should be raised; these should be considered as the equivalent of a NULL CQL value and, in most cases, should map to  {@code null} or a default value for the corresponding Java type, ifapplicable; <li>Codecs for CQL collection types should clearly document whether they return immutable collections or not (note that the driver's default collection codecs return <em>mutable</em> collections); <li>Codecs for CQL collection types should avoid returning  {@code null}; they should return empty collections instead (the driver's default collection codecs all comply with this rule). <li>The provided  {@link ByteBuffer} should never be consumed by read operations that modifyits current position; if necessary,  {@link ByteBuffer#duplicate()} duplicate} it beforeconsuming. </ol>

 * @param bytes           A {@link ByteBuffer} instance containing the serialized form of T; may be {@code null} or empty.

 * @param protocolVersion the protocol version to use when serializing {@code bytes}. In most cases, the proper value to provide for this argument is the value returned by  {@code ProtocolOptions#getProtocolVersion} (which is the protocol version in use by the driver).

 * @return An instance of T

 * @throws InvalidTypeException if the given {@link ByteBuffer} instance cannot be deserialized

 */

public abstract T deserialize(ByteBuffer bytes,ProtocolVersion protocolVersion) throws InvalidTypeException ;

Location: TypeCodec.java

Content: 

/** 

 * Format the given value as a valid CQL literal according to the CQL type handled by this codec. <p>Implementors should take care of quoting and escaping the resulting CQL literal where applicable. Null values should be accepted; in most cases, implementations should return the CQL keyword  {@code "NULL"} for {@code null} inputs.<p>Implementing this method is not strictly mandatory. It is used: <ol> <li>in the query builder, when values are inlined in the query string (see  {@code querybuilder.BuiltStatement} for a detailed explanation of whenthis happens); <li>in the  {@code QueryLogger}, if parameter logging is enabled; <li>to format the INITCOND in  {@code AggregateMetadata#asCQLQuery(boolean)}; <li>in the  {@code toString()} implementation of some objects ({@link UDTValue},  {@link TupleValue}, and the internal representation of a  {@code ROWS} response), which mayappear in driver logs. </ol> <p> If you choose not to implement this method, you should not throw an exception but instead return a constant string (for example "XxxCodec.format not implemented").

 * @param value An instance of T; may be {@code null}.

 * @return CQL string

 * @throws InvalidTypeException if the given value does not have the expected type

 */

public abstract String format(T value) throws InvalidTypeException ;

Location: TypeCodec.java

Content: 

/** 

 * Return the CQL type that this codec deserializes from and serializes to.

 * @return The Java type this codec deserializes from and serializes to.

 */

public DataType getCqlType(){

  return cqlType;

}

Location: TypeCodec.java

Content: 

/** 

 * Return the Java type that this codec deserializes to and serializes from.

 * @return The Java type this codec deserializes to and serializes from.

 */

public TypeToken<T> getJavaType(){

  return javaType;

}

Location: TypeCodec.java

Content: 

/** 

 * Return a newly-created codec for the CQL type  {@code list} whose element type is determined bythe given element codec. The returned codec maps the CQL type  {@code list} into the Java type{@link List}. This method does not cache returned instances and returns a newly-allocated object at each invocation.

 * @param elementCodec the codec that will handle elements of this list.

 * @return A newly-created codec for CQL type {@code list}.

 */

public static <T>TypeCodec<List<T>> list(TypeCodec<T> elementCodec){

  return new ListCodec<>(elementCodec);

}

Location: TypeCodec.java

Content: 

/** 

 * Return a newly-created codec for the CQL type  {@code map} whose key type and value type aredetermined by the given codecs. The returned codec maps the CQL type  {@code map} into the Javatype  {@link Map}. This method does not cache returned instances and returns a newly-allocated object at each invocation.

 * @param keyCodec   the codec that will handle keys of this map.

 * @param valueCodec the codec that will handle values of this map.

 * @return A newly-created codec for CQL type {@code map}.

 */

public static <K,V>TypeCodec<Map<K,V>> map(TypeCodec<K> keyCodec,TypeCodec<V> valueCodec){

  return new MapCodec<>(keyCodec,valueCodec);

}

Location: TypeCodec.java

Content: 

/** 

 * Serialize the given value according to the CQL type handled by this codec. <p>Implementation notes: <ol> <li>Null values should be gracefully handled and no exception should be raised; these should be considered as the equivalent of a NULL CQL value; <li>Codecs for CQL collection types should not permit null elements; <li>Codecs for CQL collection types should treat a  {@code null} input as the equivalent of anempty collection. </ol>

 * @param value           An instance of T; may be {@code null}.

 * @param protocolVersion the protocol version to use when serializing {@code bytes}. In most cases, the proper value to provide for this argument is the value returned by  {@code ProtocolOptions#getProtocolVersion} (which is the protocol version in use by the driver).

 * @return A {@link ByteBuffer} instance containing the serialized form of T

 * @throws InvalidTypeException if the given value does not have the expected type

 */

public abstract ByteBuffer serialize(T value,ProtocolVersion protocolVersion) throws InvalidTypeException ;

Location: TypeCodec.java

Content: 

/** 

 * Return a newly-created codec for the CQL type  {@code set} whose element type is determined bythe given element codec. The returned codec maps the CQL type  {@code set} into the Java type{@link Set}. This method does not cache returned instances and returns a newly-allocated object at each invocation.

 * @param elementCodec the codec that will handle elements of this set.

 * @return A newly-created codec for CQL type {@code set}.

 */

public static <T>TypeCodec<Set<T>> set(TypeCodec<T> elementCodec){

  return new SetCodec<>(elementCodec);

}

Location: TypeCodec.java

Content: 

/** 

 * Return a newly-created codec for the given CQL tuple type. The returned codec maps the tuple type into the Java type  {@link TupleValue}. This method does not cache returned instances and returns a newly-allocated object at each invocation.

 * @param type the tuple type this codec should handle.

 * @return A newly-created codec for the given CQL tuple type.

 */

public static TypeCodec<TupleValue> tuple(TupleType type){

  return new TupleCodec(type);

}

Location: TypeCodec.java

Content: 

/** 

 * This constructor can only be used for non parameterized types. For parameterized ones, please use  {@link #TypeCodec(DataType,TypeToken)} instead.

 * @param javaClass The Java class this codec serializes from and deserializes to.

 */

protected TypeCodec(DataType cqlType,Class<T> javaClass){

  this(cqlType,TypeToken.of(javaClass));

}

Location: TypeCodec.java

Content: 

protected TypeCodec(DataType cqlType,TypeToken<T> javaType){

  checkNotNull(cqlType,"cqlType cannot be null");

  checkNotNull(javaType,"javaType cannot be null");

  checkArgument(!javaType.isPrimitive(),"Cannot create a codec for a primitive Java type (%s), please use the wrapper type instead",javaType);

  this.cqlType=cqlType;

  this.javaType=javaType;

}

Location: TypeCodec.java

Content: 

/** 

 * Return a newly-created codec for the given user-defined CQL type. The returned codec maps the user-defined type into the Java type  {@link UDTValue}. This method does not cache returned instances and returns a newly-allocated object at each invocation.

 * @param type the user-defined type this codec should handle.

 * @return A newly-created codec for the given user-defined CQL type.

 */

public static TypeCodec<UDTValue> userType(UserType type){

  return new UDTCodec(type);

}

