Location: ColumnFamilySplit.java

Content: 

protected ColumnFamilySplit(){

}

Location: ColumnFamilySplit.java

Content: 

public ColumnFamilySplit(String startToken,String endToken,long length,String[] dataNodes){

  assert startToken != null;

  assert endToken != null;

  this.startToken=startToken;

  this.endToken=endToken;

  this.length=length;

  this.dataNodes=dataNodes;

}

Location: ColumnFamilySplit.java

Content: 

@Deprecated public ColumnFamilySplit(String startToken,String endToken,String[] dataNodes){

  this(startToken,endToken,Long.MAX_VALUE,dataNodes);

}

Location: ColumnFamilySplit.java

Content: 

public String getEndToken(){

  return endToken;

}

Location: ColumnFamilySplit.java

Content: 

public String[] getLocations(){

  return dataNodes;

}

Location: ColumnFamilySplit.java

Content: 

public String getStartToken(){

  return startToken;

}

Location: ColumnFamilySplit.java

Content: 

public void readFields(DataInput in) throws IOException {

  startToken=in.readUTF();

  endToken=in.readUTF();

  int numOfEndpoints=in.readInt();

  dataNodes=new String[numOfEndpoints];

  for (int i=0; i < numOfEndpoints; i++) {

    dataNodes[i]=in.readUTF();

  }

  try {

    length=in.readLong();

  }

 catch (  EOFException e) {

  }

}

Location: ColumnFamilySplit.java

Content: 

public static ColumnFamilySplit read(DataInput in) throws IOException {

  ColumnFamilySplit w=new ColumnFamilySplit();

  w.readFields(in);

  return w;

}

Location: ColumnFamilySplit.java

Content: 

public void write(DataOutput out) throws IOException {

  out.writeUTF(startToken);

  out.writeUTF(endToken);

  out.writeInt(dataNodes.length);

  for (  String endpoint : dataNodes) {

    out.writeUTF(endpoint);

  }

  out.writeLong(length);

}

