Location: ComplexColumnData.java

Content: 

public int cellsCount(){

  return BTree.size(cells);

}

Location: ComplexColumnData.java

Content: 

ComplexColumnData(ColumnMetadata column,Object[] cells,DeletionTime complexDeletion){

  super(column);

  assert column.isComplex();

  assert cells.length > 0 || !complexDeletion.isLive();

  this.cells=cells;

  this.complexDeletion=complexDeletion;

}

Location: ComplexColumnData.java

Content: 

/** 

 * The complex deletion time of the complex column. <p> The returned "complex deletion" is a deletion of all the cells of the column. For instance, for a collection, this correspond to a full collection deletion. Please note that this deletion says nothing about the individual cells of the complex column: there can be no complex deletion but some of the individual cells can be deleted.

 * @return the complex deletion time for the column this is the data of or {@code DeletionTime.LIVE}if the column is not deleted.

 */

public DeletionTime complexDeletion(){

  return complexDeletion;

}

Location: ComplexColumnData.java

Content: 

public ComplexColumnData filter(ColumnFilter filter,DeletionTime activeDeletion,DroppedColumn dropped,LivenessInfo rowLiveness){

  ColumnFilter.Tester cellTester=filter.newTester(column);

  if (cellTester == null && activeDeletion.isLive() && dropped == null)   return this;

  DeletionTime newDeletion=activeDeletion.supersedes(complexDeletion) ? DeletionTime.LIVE : complexDeletion;

  return transformAndFilter(newDeletion,(cell) -> {

    boolean isForDropped=dropped != null && cell.timestamp() <= dropped.droppedTime;

    boolean isShadowed=activeDeletion.deletes(cell);

    boolean isSkippable=cellTester != null && (!cellTester.fetches(cell.path()) || (!cellTester.fetchedCellIsQueried(cell.path()) && cell.timestamp() < rowLiveness.timestamp()));

    return isForDropped || isShadowed || isSkippable ? null : cell;

  }

);

}

Location: ComplexColumnData.java

Content: 

public Cell<?> getCellByIndex(int idx){

  return BTree.findByIndex(cells,idx);

}

Location: ComplexColumnData.java

Content: 

public Cell<?> getCell(CellPath path){

  return (Cell<?>)BTree.<Object>find(cells,column.asymmetricCellPathComparator(),path);

}

Location: ComplexColumnData.java

Content: 

public long maxTimestamp(){

  long timestamp=complexDeletion.markedForDeleteAt();

  for (  Cell<?> cell : this)   timestamp=Math.max(timestamp,cell.timestamp());

  return timestamp;

}

Location: ComplexColumnData.java

Content: 

public Iterator<Cell<?>> reverseIterator(){

  return BTree.iterator(cells,BTree.Dir.DESC);

}

Location: ComplexColumnData.java

Content: 

void setValue(CellPath path,ByteBuffer value){

  Cell<?> current=(Cell<?>)BTree.<Object>find(cells,column.asymmetricCellPathComparator(),path);

  BTree.replaceInSitu(cells,column.cellComparator(),current,current.withUpdatedValue(value));

}

Location: ComplexColumnData.java

Content: 

private ComplexColumnData transformAndFilter(DeletionTime newDeletion,Function<? super Cell<?>,? extends Cell<?>> function){

  Object[] transformed=BTree.transformAndFilter(cells,function);

  if (cells == transformed && newDeletion == complexDeletion)   return this;

  if (newDeletion == DeletionTime.LIVE && BTree.isEmpty(transformed))   return null;

  return new ComplexColumnData(column,transformed,newDeletion);

}

