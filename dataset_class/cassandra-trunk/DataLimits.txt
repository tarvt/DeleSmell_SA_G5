Location: DataLimits.java

Content: 

public static DataLimits cqlLimits(int cqlRowLimit){

  return cqlRowLimit == NO_LIMIT ? NONE : new CQLLimits(cqlRowLimit);

}

Location: DataLimits.java

Content: 

public static DataLimits cqlLimits(int cqlRowLimit,int perPartitionLimit){

  return cqlRowLimit == NO_LIMIT && perPartitionLimit == NO_LIMIT ? NONE : new CQLLimits(cqlRowLimit,perPartitionLimit);

}

Location: DataLimits.java

Content: 

private static DataLimits cqlLimits(int cqlRowLimit,int perPartitionLimit,boolean isDistinct){

  return cqlRowLimit == NO_LIMIT && perPartitionLimit == NO_LIMIT && !isDistinct ? NONE : new CQLLimits(cqlRowLimit,perPartitionLimit,isDistinct);

}

Location: DataLimits.java

Content: 

public static DataLimits distinctLimits(int cqlRowLimit){

  return CQLLimits.distinct(cqlRowLimit);

}

Location: DataLimits.java

Content: 

/** 

 * Estimate the number of results that a full scan of the provided cfs would yield.

 */

public abstract float estimateTotalResults(ColumnFamilyStore cfs);

Location: DataLimits.java

Content: 

public PartitionIterator filter(PartitionIterator iter,int nowInSec,boolean countPartitionsWithOnlyStaticData,boolean enforceStrictLiveness){

  return this.newCounter(nowInSec,true,countPartitionsWithOnlyStaticData,enforceStrictLiveness).applyTo(iter);

}

Location: DataLimits.java

Content: 

public UnfilteredPartitionIterator filter(UnfilteredPartitionIterator iter,int nowInSec,boolean countPartitionsWithOnlyStaticData){

  return this.newCounter(nowInSec,false,countPartitionsWithOnlyStaticData,iter.metadata().enforceStrictLiveness()).applyTo(iter);

}

Location: DataLimits.java

Content: 

public UnfilteredRowIterator filter(UnfilteredRowIterator iter,int nowInSec,boolean countPartitionsWithOnlyStaticData){

  return this.newCounter(nowInSec,false,countPartitionsWithOnlyStaticData,iter.metadata().enforceStrictLiveness()).applyTo(iter);

}

Location: DataLimits.java

Content: 

/** 

 * Creates a <code>DataLimits</code> instance to be used for paginating internally GROUP BY queries.

 * @param state the <code>GroupMaker</code> state

 * @return a <code>DataLimits</code> instance to be used for paginating internally GROUP BY queries

 */

public DataLimits forGroupByInternalPaging(GroupingState state){

  throw new UnsupportedOperationException();

}

Location: DataLimits.java

Content: 

public abstract DataLimits forPaging(int pageSize);

Location: DataLimits.java

Content: 

public abstract DataLimits forPaging(int pageSize,ByteBuffer lastReturnedKey,int lastReturnedKeyRemaining);

Location: DataLimits.java

Content: 

public abstract DataLimits forShortReadRetry(int toFetch);

Location: DataLimits.java

Content: 

public static DataLimits groupByLimits(int groupLimit,int groupPerPartitionLimit,int rowLimit,AggregationSpecification groupBySpec){

  return new CQLGroupByLimits(groupLimit,groupPerPartitionLimit,rowLimit,groupBySpec);

}

Location: DataLimits.java

Content: 

public abstract boolean hasEnoughLiveData(CachedPartition cached,int nowInSec,boolean countPartitionsWithOnlyStaticData,boolean enforceStrictLiveness);

Location: DataLimits.java

Content: 

public abstract boolean isDistinct();

Location: DataLimits.java

Content: 

public boolean isExhausted(Counter counter){

  return counter.counted() < count();

}

Location: DataLimits.java

Content: 

public boolean isGroupByLimit(){

  return false;

}

Location: DataLimits.java

Content: 

public abstract boolean isUnlimited();

Location: DataLimits.java

Content: 

/** 

 * Returns a new  {@code Counter} for this limits.

 * @param nowInSec the current time in second (to decide what is expired or not).

 * @param assumeLiveData if true, the counter will assume that every row passed is live and won'tthus check for liveness, otherwise it will. This should be  {@code true} when used on a{@code RowIterator} (since it only returns live rows), false otherwise.

 * @param countPartitionsWithOnlyStaticData if {@code true} the partitions with only static data should be countedas 1 valid row.

 * @param enforceStrictLiveness whether the row should be purged if there is no PK liveness info,normally retrieved from  {@link org.apache.cassandra.schema.TableMetadata#enforceStrictLiveness()}

 * @return a new {@code Counter} for this limits.

 */

public abstract Counter newCounter(int nowInSec,boolean assumeLiveData,boolean countPartitionsWithOnlyStaticData,boolean enforceStrictLiveness);

Location: DataLimits.java

Content: 

public abstract int perPartitionCount();

Location: DataLimits.java

Content: 

/** 

 * Returns equivalent limits but where any internal state kept to track where we are of paging and/or grouping is discarded.

 */

public abstract DataLimits withoutState();

