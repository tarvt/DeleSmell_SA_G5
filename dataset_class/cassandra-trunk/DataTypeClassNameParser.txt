Location: DataTypeClassNameParser.java

Content: 

private static String getNestedClassName(String className){

  Parser p=new Parser(className,0);

  p.parseNextName();

  List<String> l=p.getTypeParameters();

  if (l.size() != 1)   throw new IllegalStateException();

  className=l.get(0);

  return className;

}

Location: DataTypeClassNameParser.java

Content: 

public static boolean isFrozen(String className){

  return className.startsWith(FROZEN_TYPE);

}

Location: DataTypeClassNameParser.java

Content: 

public static boolean isReversed(String className){

  return className.startsWith(REVERSED_TYPE);

}

Location: DataTypeClassNameParser.java

Content: 

private static boolean isTupleType(String className){

  return className.startsWith(TUPLE_TYPE);

}

Location: DataTypeClassNameParser.java

Content: 

private static boolean isUserType(String className){

  return className.startsWith(UDT_TYPE);

}

Location: DataTypeClassNameParser.java

Content: 

public static DataType parseOne(String className,ProtocolVersion protocolVersion,CodecRegistry codecRegistry){

  boolean frozen=false;

  if (isReversed(className)) {

    className=getNestedClassName(className);

  }

 else   if (isFrozen(className)) {

    frozen=true;

    className=getNestedClassName(className);

  }

  Parser parser=new Parser(className,0);

  String next=parser.parseNextName();

  if (next.startsWith(LIST_TYPE))   return DataType.list(parseOne(parser.getTypeParameters().get(0),protocolVersion,codecRegistry),frozen);

  if (next.startsWith(SET_TYPE))   return DataType.set(parseOne(parser.getTypeParameters().get(0),protocolVersion,codecRegistry),frozen);

  if (next.startsWith(MAP_TYPE)) {

    List<String> params=parser.getTypeParameters();

    return DataType.map(parseOne(params.get(0),protocolVersion,codecRegistry),parseOne(params.get(1),protocolVersion,codecRegistry),frozen);

  }

  if (frozen)   logger.warn("Got o.a.c.db.marshal.FrozenType for something else than a collection, " + "this driver version might be too old for your version of Cassandra");

  if (isUserType(next)) {

    ++parser.idx;

    String keyspace=parser.readOne();

    parser.skipBlankAndComma();

    String typeName=TypeCodec.varchar().deserialize(Bytes.fromHexString("0x" + parser.readOne()),protocolVersion);

    parser.skipBlankAndComma();

    Map<String,String> rawFields=parser.getNameAndTypeParameters();

    List<UserType.Field> fields=new ArrayList<>(rawFields.size());

    for (    Map.Entry<String,String> entry : rawFields.entrySet())     fields.add(new UserType.Field(entry.getKey(),parseOne(entry.getValue(),protocolVersion,codecRegistry)));

    return new UserType(keyspace,typeName,true,fields,protocolVersion,codecRegistry);

  }

  if (isTupleType(next)) {

    List<String> rawTypes=parser.getTypeParameters();

    List<DataType> types=new ArrayList<>(rawTypes.size());

    for (    String rawType : rawTypes) {

      types.add(parseOne(rawType,protocolVersion,codecRegistry));

    }

    return new TupleType(types,protocolVersion,codecRegistry);

  }

  DataType type=cassTypeToDataType.get(next);

  return type == null ? DataType.custom(className) : type;

}

