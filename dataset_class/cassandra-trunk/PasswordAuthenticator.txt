Location: PasswordAuthenticator.java

Content: 

private AuthenticatedUser authenticate(String username,String password) throws AuthenticationException {

  String hash=cache.get(username);

  if (!checkpw(password,hash))   throw new AuthenticationException(String.format("Provided username %s and/or password are incorrect",username));

  return new AuthenticatedUser(username);

}

Location: PasswordAuthenticator.java

Content: 

protected static boolean checkpw(String password,String hash){

  try {

    return BCrypt.checkpw(password,hash);

  }

 catch (  Exception e) {

    logger.warn("Error: invalid password hash encountered, rejecting user",e);

    return false;

  }

}

Location: PasswordAuthenticator.java

Content: 

public AuthenticatedUser legacyAuthenticate(Map<String,String> credentials) throws AuthenticationException {

  String username=credentials.get(USERNAME_KEY);

  if (username == null)   throw new AuthenticationException(String.format("Required key '%s' is missing",USERNAME_KEY));

  String password=credentials.get(PASSWORD_KEY);

  if (password == null)   throw new AuthenticationException(String.format("Required key '%s' is missing for provided username %s",PASSWORD_KEY,username));

  return authenticate(username,password);

}

Location: PasswordAuthenticator.java

Content: 

public SaslNegotiator newSaslNegotiator(InetAddress clientAddress){

  return new PlainTextSaslAuthenticator();

}

Location: PasswordAuthenticator.java

Content: 

private static SelectStatement prepare(String query){

  return (SelectStatement)QueryProcessor.getStatement(query,ClientState.forInternalCalls());

}

Location: PasswordAuthenticator.java

Content: 

public Set<DataResource> protectedResources(){

  return ImmutableSet.of(DataResource.table(SchemaConstants.AUTH_KEYSPACE_NAME,AuthKeyspace.ROLES));

}

Location: PasswordAuthenticator.java

Content: 

private String queryHashedPassword(String username){

  try {

    ResultMessage.Rows rows=authenticateStatement.execute(QueryState.forInternalCalls(),QueryOptions.forInternalCalls(consistencyForRole(username),Lists.newArrayList(ByteBufferUtil.bytes(username))),System.nanoTime());

    if (rows.result.isEmpty())     throw new AuthenticationException(String.format("Provided username %s and/or password are incorrect",username));

    UntypedResultSet result=UntypedResultSet.create(rows.result);

    if (!result.one().has(SALTED_HASH))     throw new AuthenticationException(String.format("Provided username %s and/or password are incorrect",username));

    return result.one().getString(SALTED_HASH);

  }

 catch (  RequestExecutionException e) {

    throw new AuthenticationException("Unable to perform authentication: " + e.getMessage(),e);

  }

}

Location: PasswordAuthenticator.java

Content: 

public boolean requireAuthentication(){

  return true;

}

Location: PasswordAuthenticator.java

Content: 

public void setup(){

  String query=String.format("SELECT %s FROM %s.%s WHERE role = ?",SALTED_HASH,SchemaConstants.AUTH_KEYSPACE_NAME,AuthKeyspace.ROLES);

  authenticateStatement=prepare(query);

  cache=new CredentialsCache(this);

}

Location: PasswordAuthenticator.java

Content: 

public void validateConfiguration() throws ConfigurationException {

}

