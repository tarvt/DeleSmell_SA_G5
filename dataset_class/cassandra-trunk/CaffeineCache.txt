Location: CaffeineCache.java

Content: 

private CaffeineCache(Cache<K,V> cache){

  this.cache=cache;

  this.policy=cache.policy().eviction().orElseThrow(() -> new IllegalArgumentException("Expected a size bounded cache"));

  checkState(policy.isWeighted(),"Expected a weighted cache");

}

Location: CaffeineCache.java

Content: 

public static <K extends IMeasurableMemory,V extends IMeasurableMemory>CaffeineCache<K,V> create(long weightedCapacity){

  return create(weightedCapacity,(key,value) -> {

    long size=key.unsharedHeapSize() + value.unsharedHeapSize();

    if (size > Integer.MAX_VALUE) {

      throw new IllegalArgumentException("Serialized size cannot be more than 2GB/Integer.MAX_VALUE");

    }

    return (int)size;

  }

);

}

Location: CaffeineCache.java

Content: 

/** 

 * Initialize a cache with initial capacity with weightedCapacity

 */

public static <K extends IMeasurableMemory,V extends IMeasurableMemory>CaffeineCache<K,V> create(long weightedCapacity,Weigher<K,V> weigher){

  Cache<K,V> cache=Caffeine.newBuilder().maximumWeight(weightedCapacity).weigher(weigher).executor(MoreExecutors.directExecutor()).build();

  return new CaffeineCache<>(cache);

}

