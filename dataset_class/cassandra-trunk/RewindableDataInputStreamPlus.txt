Location: RewindableDataInputStreamPlus.java

Content: 

public long bytesPastMark(DataPosition mark){

  return maxMemBufferSize - memAvailable + (diskTailAvailable == -1 ? 0 : maxDiskBufferSize - diskHeadAvailable - diskTailAvailable);

}

Location: RewindableDataInputStreamPlus.java

Content: 

private <T>T getIfNotClosed(T in) throws IOException {

  if (closed.get())   throw new IOException("Stream closed");

  return in;

}

Location: RewindableDataInputStreamPlus.java

Content: 

private void growMemBuffer(int pos,int writeSize){

  int newSize=Math.min(2 * (pos + writeSize),maxMemBufferSize);

  byte newBuffer[]=new byte[newSize];

  System.arraycopy(memBuffer,0,newBuffer,0,pos);

  memBuffer=newBuffer;

}

Location: RewindableDataInputStreamPlus.java

Content: 

private boolean isExhausted(int readBytes){

  return exhausted || readBytes > memAvailable + (long)(diskTailAvailable == -1 ? maxDiskBufferSize : diskTailAvailable + diskHeadAvailable);

}

Location: RewindableDataInputStreamPlus.java

Content: 

private void maybeCreateDiskBuffer() throws IOException {

  if (spillBuffer == null) {

    if (!spillFile.getParentFile().exists())     spillFile.getParentFile().mkdirs();

    spillFile.createNewFile();

    this.spillBuffer=new RandomAccessFile(spillFile,"rw");

  }

}

Location: RewindableDataInputStreamPlus.java

Content: 

public boolean readBoolean() throws IOException {

  return dataReader.readBoolean();

}

Location: RewindableDataInputStreamPlus.java

Content: 

public byte readByte() throws IOException {

  return dataReader.readByte();

}

Location: RewindableDataInputStreamPlus.java

Content: 

public char readChar() throws IOException {

  return dataReader.readChar();

}

Location: RewindableDataInputStreamPlus.java

Content: 

public double readDouble() throws IOException {

  return dataReader.readDouble();

}

Location: RewindableDataInputStreamPlus.java

Content: 

public float readFloat() throws IOException {

  return dataReader.readFloat();

}

Location: RewindableDataInputStreamPlus.java

Content: 

public void readFully(byte[] b) throws IOException {

  dataReader.readFully(b);

}

Location: RewindableDataInputStreamPlus.java

Content: 

public void readFully(byte[] b,int off,int len) throws IOException {

  dataReader.readFully(b,off,len);

}

Location: RewindableDataInputStreamPlus.java

Content: 

public int readInt() throws IOException {

  return dataReader.readInt();

}

Location: RewindableDataInputStreamPlus.java

Content: 

public String readLine() throws IOException {

  return dataReader.readLine();

}

Location: RewindableDataInputStreamPlus.java

Content: 

public long readLong() throws IOException {

  return dataReader.readLong();

}

Location: RewindableDataInputStreamPlus.java

Content: 

private int readMulti(byte[] b,int off,int len) throws IOException {

  int readBytes=0;

  if (!marked) {

    if (memAvailable > 0) {

      readBytes+=memAvailable < len ? memAvailable : len;

      int pos=memBufferSize - memAvailable;

      System.arraycopy(memBuffer,pos,b,off,readBytes);

      memAvailable-=readBytes;

      off+=readBytes;

      len-=readBytes;

    }

    if (len > 0 && diskTailAvailable > 0) {

      int readFromTail=diskTailAvailable < len ? diskTailAvailable : len;

      readFromTail=getIfNotClosed(spillBuffer).read(b,off,readFromTail);

      readBytes+=readFromTail;

      diskTailAvailable-=readFromTail;

      off+=readFromTail;

      len-=readFromTail;

      if (diskTailAvailable == 0)       spillBuffer.seek(0);

    }

    if (len > 0 && diskHeadAvailable > 0) {

      int readFromHead=diskHeadAvailable < len ? diskHeadAvailable : len;

      readFromHead=getIfNotClosed(spillBuffer).read(b,off,readFromHead);

      readBytes+=readFromHead;

      diskHeadAvailable-=readFromHead;

      off+=readFromHead;

      len-=readFromHead;

    }

  }

  if (len > 0)   readBytes+=getIfNotClosed(in).read(b,off,len);

  return readBytes;

}

Location: RewindableDataInputStreamPlus.java

Content: 

private int readOne() throws IOException {

  if (!marked) {

    if (memAvailable > 0) {

      int pos=memBufferSize - memAvailable;

      memAvailable--;

      return getIfNotClosed(memBuffer)[pos] & 0xff;

    }

    if (diskTailAvailable > 0 || diskHeadAvailable > 0) {

      int read=getIfNotClosed(spillBuffer).read();

      if (diskTailAvailable > 0)       diskTailAvailable--;

 else       if (diskHeadAvailable > 0)       diskHeadAvailable++;

      if (diskTailAvailable == 0)       spillBuffer.seek(0);

      return read;

    }

  }

  return getIfNotClosed(in).read();

}

Location: RewindableDataInputStreamPlus.java

Content: 

public short readShort() throws IOException {

  return dataReader.readShort();

}

Location: RewindableDataInputStreamPlus.java

Content: 

public int readUnsignedByte() throws IOException {

  return dataReader.readUnsignedByte();

}

Location: RewindableDataInputStreamPlus.java

Content: 

public int readUnsignedShort() throws IOException {

  return dataReader.readUnsignedShort();

}

Location: RewindableDataInputStreamPlus.java

Content: 

public String readUTF() throws IOException {

  return dataReader.readUTF();

}

Location: RewindableDataInputStreamPlus.java

Content: 

/** 

 * Rewinds to the previously marked position via the  {@link #mark()} method.

 * @param mark it's not possible to return to a custom position, so this parameter is ignored.

 * @throws IOException if an error ocurs while resetting

 */

public void reset(DataPosition mark) throws IOException {

  reset();

}

Location: RewindableDataInputStreamPlus.java

Content: 

public RewindableDataInputStreamPlus(InputStream in,int initialMemBufferSize,int maxMemBufferSize,File spillFile,int maxDiskBufferSize){

  super(in);

  dataReader=new DataInputStreamPlus(this);

  this.initialMemBufferSize=initialMemBufferSize;

  this.maxMemBufferSize=maxMemBufferSize;

  this.spillFile=spillFile;

  this.maxDiskBufferSize=maxDiskBufferSize;

}

Location: RewindableDataInputStreamPlus.java

Content: 

private void writeMulti(byte[] b,int off,int len) throws IOException {

  if (memAvailable > 0) {

    if (memBuffer == null)     memBuffer=new byte[initialMemBufferSize];

    int pos=maxMemBufferSize - memAvailable;

    int memWritten=memAvailable < len ? memAvailable : len;

    if (pos + memWritten >= getIfNotClosed(memBuffer).length)     growMemBuffer(pos,memWritten);

    System.arraycopy(b,off,memBuffer,pos,memWritten);

    off+=memWritten;

    len-=memWritten;

    memAvailable-=memWritten;

  }

  if (len > 0) {

    if (diskTailAvailable == -1) {

      maybeCreateDiskBuffer();

      diskHeadAvailable=(int)spillBuffer.getFilePointer();

      diskTailAvailable=maxDiskBufferSize - diskHeadAvailable;

    }

    if (len > 0 && diskTailAvailable > 0) {

      int diskTailWritten=diskTailAvailable < len ? diskTailAvailable : len;

      getIfNotClosed(spillBuffer).write(b,off,diskTailWritten);

      off+=diskTailWritten;

      len-=diskTailWritten;

      diskTailAvailable-=diskTailWritten;

      if (diskTailAvailable == 0)       spillBuffer.seek(0);

    }

    if (len > 0 && diskTailAvailable > 0) {

      int diskHeadWritten=diskHeadAvailable < len ? diskHeadAvailable : len;

      getIfNotClosed(spillBuffer).write(b,off,diskHeadWritten);

    }

  }

}

Location: RewindableDataInputStreamPlus.java

Content: 

private void writeOne(int value) throws IOException {

  if (memAvailable > 0) {

    if (memBuffer == null)     memBuffer=new byte[initialMemBufferSize];

    int pos=maxMemBufferSize - memAvailable;

    if (pos == getIfNotClosed(memBuffer).length)     growMemBuffer(pos,1);

    getIfNotClosed(memBuffer)[pos]=(byte)value;

    memAvailable--;

    return;

  }

  if (diskTailAvailable == -1) {

    maybeCreateDiskBuffer();

    diskHeadAvailable=(int)spillBuffer.getFilePointer();

    diskTailAvailable=maxDiskBufferSize - diskHeadAvailable;

  }

  if (diskTailAvailable > 0 || diskHeadAvailable > 0) {

    getIfNotClosed(spillBuffer).write(value);

    if (diskTailAvailable > 0)     diskTailAvailable--;

 else     if (diskHeadAvailable > 0)     diskHeadAvailable--;

    if (diskTailAvailable == 0)     spillBuffer.seek(0);

    return;

  }

}

