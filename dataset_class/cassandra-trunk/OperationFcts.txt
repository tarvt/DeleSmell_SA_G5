Location: OperationFcts.java

Content: 

private static NumberType<?> floatPointType(int size){

switch (size) {

case 4:

    return FloatType.instance;

case 8:

  return DoubleType.instance;

default :

return DecimalType.instance;

}

}

Location: OperationFcts.java

Content: 

/** 

 * Returns the name of the function associated to the specified operator.

 * @param operator the operator

 * @return the name of the function associated to the specified operator

 */

public static FunctionName getFunctionNameFromOperator(char operator){

  return FunctionName.nativeFunction(OPERATION.fromSymbol(operator).functionName);

}

Location: OperationFcts.java

Content: 

/** 

 * Returns the operator associated to the specified function.

 * @return the operator associated to the specified function.

 */

public static char getOperator(FunctionName function){

  assert SchemaConstants.SYSTEM_KEYSPACE_NAME.equals(function.keyspace);

  return OPERATION.fromFunctionName(function.name).symbol;

}

Location: OperationFcts.java

Content: 

private static NumberType<?> integerType(int size){

switch (size) {

case 1:

    return ByteType.instance;

case 2:

  return ShortType.instance;

case 4:

return Int32Type.instance;

case 8:

return LongType.instance;

default :

return IntegerType.instance;

}

}

Location: OperationFcts.java

Content: 

/** 

 * Checks if the function with the specified name is a negation.

 * @param function the function name

 * @return {@code true} if the function is an negation, {@code false} otherwise.

 */

public static boolean isNegation(FunctionName function){

  return SchemaConstants.SYSTEM_KEYSPACE_NAME.equals(function.keyspace) && NEGATION_FUNCTION_NAME.equals(function.name);

}

Location: OperationFcts.java

Content: 

/** 

 * Checks if the function with the specified name is an operation.

 * @param function the function name

 * @return {@code true} if the function is an operation, {@code false} otherwise.

 */

public static boolean isOperation(FunctionName function){

  return SchemaConstants.SYSTEM_KEYSPACE_NAME.equals(function.keyspace) && OPERATION.fromFunctionName(function.name) != null;

}

Location: OperationFcts.java

Content: 

/** 

 * The class must not be instantiated.

 */

private OperationFcts(){

}

Location: OperationFcts.java

Content: 

/** 

 * Determine the return type for an operation between the specified types.

 * @param left the type of the left operand

 * @param right the type of the right operand

 * @return the return type for an operation between the specified types

 */

private static NumberType<?> returnType(NumberType<?> left,NumberType<?> right){

  boolean isFloatingPoint=left.isFloatingPoint() || right.isFloatingPoint();

  int size=Math.max(size(left),size(right));

  return isFloatingPoint ? floatPointType(size) : integerType(size);

}

Location: OperationFcts.java

Content: 

/** 

 * Returns the number of bytes used to represent a value of this type.

 * @return the number of bytes used to represent a value of this type or {@code Integer.MAX} if the number of bytesis not limited.

 */

private static int size(NumberType<?> type){

  int size=type.valueLengthIfFixed();

  if (size > 0)   return size;

  if (type == ByteType.instance)   return 1;

  if (type == ShortType.instance)   return 2;

  if (type.isCounter())   return LongType.instance.valueLengthIfFixed();

  return Integer.MAX_VALUE;

}

