Location: MutationExceededMaxSizeException.java

Content: 

@VisibleForTesting static String makeTopKeysString(List<String> keys,int maxLength){

  Iterator<String> iterator=keys.listIterator();

  StringBuilder stringBuilder=new StringBuilder();

  while (iterator.hasNext()) {

    String key=iterator.next();

    if (stringBuilder.length() == 0) {

      stringBuilder.append(key);

      iterator.remove();

    }

 else     if (stringBuilder.length() + key.length() + 2 <= maxLength) {

      stringBuilder.append(", ").append(key);

      iterator.remove();

    }

 else     break;

  }

  if (keys.size() > 0)   stringBuilder.append(" and ").append(keys.size()).append(" more.");

  return stringBuilder.toString();

}

Location: MutationExceededMaxSizeException.java

Content: 

MutationExceededMaxSizeException(IMutation mutation,int serializationVersion,long totalSize){

  super(prepareMessage(mutation,serializationVersion,totalSize));

  this.mutationSize=totalSize;

}

Location: MutationExceededMaxSizeException.java

Content: 

private static String prepareMessage(IMutation mutation,int version,long totalSize){

  List<String> topPartitions=mutation.getPartitionUpdates().stream().sorted((upd1,upd2) -> Long.compare(PartitionUpdate.serializer.serializedSize(upd2,version),PartitionUpdate.serializer.serializedSize(upd1,version))).map(upd -> String.format("%s.%s",upd.metadata().name,upd.metadata().partitionKeyType.getString(upd.partitionKey().getKey()))).collect(Collectors.toList());

  String topKeys=makeTopKeysString(topPartitions,PARTITION_MESSAGE_LIMIT);

  return String.format("Encountered an oversized mutation (%d/%d) for keyspace: %s. Top keys are: %s",totalSize,MAX_MUTATION_SIZE,mutation.getKeyspaceName(),topKeys);

}

