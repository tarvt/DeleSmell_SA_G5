Location: AggregateFcts.java

Content: 

/** 

 * Creates a COUNT function for the specified type.

 * @param inputType the function input type

 * @return a COUNT function for the specified type.

 */

public static AggregateFunction makeCountFunction(AbstractType<?> inputType){

  return new NativeAggregateFunction("count",LongType.instance,inputType){

    public Aggregate newAggregate(){

      return new Aggregate(){

        private long count;

        public void reset(){

          count=0;

        }

        public ByteBuffer compute(        ProtocolVersion protocolVersion){

          return ((LongType)returnType()).decompose(count);

        }

        public void addInput(        ProtocolVersion protocolVersion,        List<ByteBuffer> values){

          ByteBuffer value=values.get(0);

          if (value == null)           return;

          count++;

        }

      }

;

    }

  }

;

}

Location: AggregateFcts.java

Content: 

/** 

 * Creates a MAX function for the specified type.

 * @param inputType the function input and output type

 * @return a MAX function for the specified type.

 */

public static AggregateFunction makeMaxFunction(final AbstractType<?> inputType){

  return new NativeAggregateFunction("max",inputType,inputType){

    public Aggregate newAggregate(){

      return new Aggregate(){

        private ByteBuffer max;

        public void reset(){

          max=null;

        }

        public ByteBuffer compute(        ProtocolVersion protocolVersion){

          return max;

        }

        public void addInput(        ProtocolVersion protocolVersion,        List<ByteBuffer> values){

          ByteBuffer value=values.get(0);

          if (value == null)           return;

          if (max == null || returnType().compare(max,value) < 0)           max=value;

        }

      }

;

    }

  }

;

}

Location: AggregateFcts.java

Content: 

/** 

 * Creates a MIN function for the specified type.

 * @param inputType the function input and output type

 * @return a MIN function for the specified type.

 */

public static AggregateFunction makeMinFunction(final AbstractType<?> inputType){

  return new NativeAggregateFunction("min",inputType,inputType){

    public Aggregate newAggregate(){

      return new Aggregate(){

        private ByteBuffer min;

        public void reset(){

          min=null;

        }

        public ByteBuffer compute(        ProtocolVersion protocolVersion){

          return min;

        }

        public void addInput(        ProtocolVersion protocolVersion,        List<ByteBuffer> values){

          ByteBuffer value=values.get(0);

          if (value == null)           return;

          if (min == null || returnType().compare(min,value) > 0)           min=value;

        }

      }

;

    }

  }

;

}

