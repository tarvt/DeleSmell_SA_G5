Location: TokenSerializer.java

Content: 

public static Collection<Token> deserialize(IPartitioner partitioner,DataInput in) throws IOException {

  Collection<Token> tokens=new ArrayList<Token>();

  while (true) {

    int size=in.readInt();

    if (size < 1)     break;

    if (logger.isTraceEnabled())     logger.trace("Reading token of {}",FBUtilities.prettyPrintMemory(size));

    byte[] bintoken=new byte[size];

    in.readFully(bintoken);

    tokens.add(partitioner.getTokenFactory().fromByteArray(ByteBuffer.wrap(bintoken)));

  }

  return tokens;

}

Location: TokenSerializer.java

Content: 

public static void serialize(IPartitioner partitioner,Collection<Token> tokens,DataOutput out) throws IOException {

  for (  Token token : tokens) {

    ByteBuffer tokenBuffer=partitioner.getTokenFactory().toByteArray(token);

    assert tokenBuffer.arrayOffset() == 0;

    ByteArrayUtil.writeWithLength(tokenBuffer.array(),out);

  }

  out.writeInt(0);

}

