Location: AbstractBounds.java

Content: 

public AbstractBounds(T left,T right){

  assert left.getPartitioner() == right.getPartitioner();

  this.left=left;

  this.right=right;

}

Location: AbstractBounds.java

Content: 

public static <T extends RingPosition<T>>AbstractBounds<T> bounds(Boundary<T> min,Boundary<T> max){

  return bounds(min.boundary,min.inclusive,max.boundary,max.inclusive);

}

Location: AbstractBounds.java

Content: 

public static <T extends RingPosition<T>>AbstractBounds<T> bounds(T min,boolean inclusiveMin,T max,boolean inclusiveMax){

  if (inclusiveMin && inclusiveMax)   return new Bounds<T>(min,max);

 else   if (inclusiveMax)   return new Range<T>(min,max);

 else   if (inclusiveMin)   return new IncludingExcludingBounds<T>(min,max);

 else   return new ExcludingBounds<T>(min,max);

}

Location: AbstractBounds.java

Content: 

private String format(T value,AbstractType<?> keyValidator){

  if (value instanceof DecoratedKey) {

    return keyValidator.getString(((DecoratedKey)value).getKey());

  }

 else {

    return value.toString();

  }

}

Location: AbstractBounds.java

Content: 

public String getString(AbstractType<?> keyValidator){

  return getOpeningString() + format(left,keyValidator) + ", "+ format(right,keyValidator)+ getClosingString();

}

Location: AbstractBounds.java

Content: 

/** 

 * return true if @param range intersects any of the given @param ranges 

 */

public boolean intersects(Iterable<Range<T>> ranges){

  for (  Range<T> range2 : ranges) {

    if (range2.intersects(this))     return true;

  }

  return false;

}

Location: AbstractBounds.java

Content: 

public static <T extends RingPosition<T>>boolean isEmpty(Boundary<T> left,Boundary<T> right){

  int c=left.boundary.compareTo(right.boundary);

  return c > 0 || (c == 0 && !(left.inclusive && right.inclusive));

}

Location: AbstractBounds.java

Content: 

public Boundary<T> leftBoundary(){

  return new Boundary<>(left,inclusiveLeft());

}

Location: AbstractBounds.java

Content: 

public static <T extends RingPosition<T>>Boundary<T> maxLeft(Boundary<T> left1,Boundary<T> left2){

  int c=left1.boundary.compareTo(left2.boundary);

  if (c != 0)   return c > 0 ? left1 : left2;

  return left2.inclusive ? left1 : left2;

}

Location: AbstractBounds.java

Content: 

public static <T extends RingPosition<T>>Boundary<T> maxLeft(Boundary<T> left1,T left2,boolean isInclusiveLeft2){

  return maxLeft(left1,new Boundary<T>(left2,isInclusiveLeft2));

}

Location: AbstractBounds.java

Content: 

public static <T extends RingPosition<T>>Boundary<T> minRight(Boundary<T> right1,Boundary<T> right2){

  int c=right1.boundary.compareTo(right2.boundary);

  if (c != 0)   return c < 0 ? right1 : right2;

  return right2.inclusive ? right1 : right2;

}

Location: AbstractBounds.java

Content: 

public static <T extends RingPosition<T>>Boundary<T> minRight(Boundary<T> right1,T right2,boolean isInclusiveRight2){

  return minRight(right1,new Boundary<T>(right2,isInclusiveRight2));

}

Location: AbstractBounds.java

Content: 

public static <T extends RingPosition<T>>boolean noneStrictlyWrapsAround(Collection<AbstractBounds<T>> bounds){

  for (  AbstractBounds<T> b : bounds) {

    if (strictlyWrapsAround(b.left,b.right))     return false;

  }

  return true;

}

Location: AbstractBounds.java

Content: 

public Boundary<T> rightBoundary(){

  return new Boundary<>(right,inclusiveRight());

}

Location: AbstractBounds.java

Content: 

/** 

 * Whether  {@code left} and {@code right} forms a wrapping interval, that is if unwrapping wouldn't be a no-op.<p> Note that the semantic is slightly different from  {@link Range#isWrapAround()} in the sense that if both{@code right} are minimal (for the partitioner), this methods return false (doesn't wrap) while{@link Range#isWrapAround()} returns true (does wrap). This is confusing and we should fix it byrefactoring/rewriting the whole AbstractBounds hierarchy with cleaner semantics, but we don't want to risk breaking something by changing  {@link Range#isWrapAround()} in the meantime.

 */

public static <T extends RingPosition<T>>boolean strictlyWrapsAround(T left,T right){

  return !(left.compareTo(right) <= 0 || right.isMinimum());

}

