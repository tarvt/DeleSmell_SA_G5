Location: DuplicateRowChecker.java

Content: 

protected DeletionTime applyToDeletion(DeletionTime deletionTime){

  return deletionTime;

}

Location: DuplicateRowChecker.java

Content: 

DuplicateRowChecker(final DecoratedKey key,final TableMetadata metadata,final String stage,final boolean snapshotOnDuplicate,final List<InetAddressAndPort> replicas){

  this.key=key;

  this.metadata=metadata;

  this.stage=stage;

  this.snapshotOnDuplicate=snapshotOnDuplicate;

  this.replicas=replicas;

}

Location: DuplicateRowChecker.java

Content: 

public static UnfilteredPartitionIterator duringCompaction(final UnfilteredPartitionIterator iterator,OperationType type){

  if (!DatabaseDescriptor.checkForDuplicateRowsDuringCompaction())   return iterator;

  final List<InetAddressAndPort> address=Collections.singletonList(FBUtilities.getBroadcastAddressAndPort());

  final boolean snapshot=DatabaseDescriptor.snapshotOnDuplicateRowDetection();

  return Transformation.apply(iterator,new Transformation<UnfilteredRowIterator>(){

    protected UnfilteredRowIterator applyToPartition(    UnfilteredRowIterator partition){

      return Transformation.apply(partition,new DuplicateRowChecker(partition.partitionKey(),partition.metadata(),type.toString(),snapshot,address));

    }

  }

);

}

Location: DuplicateRowChecker.java

Content: 

public static PartitionIterator duringRead(final PartitionIterator iterator,final List<InetAddressAndPort> replicas){

  if (!DatabaseDescriptor.checkForDuplicateRowsDuringReads())   return iterator;

  final boolean snapshot=DatabaseDescriptor.snapshotOnDuplicateRowDetection();

  return Transformation.apply(iterator,new Transformation<RowIterator>(){

    protected RowIterator applyToPartition(    RowIterator partition){

      return Transformation.apply(partition,new DuplicateRowChecker(partition.partitionKey(),partition.metadata(),"Read",snapshot,replicas));

    }

  }

);

}

