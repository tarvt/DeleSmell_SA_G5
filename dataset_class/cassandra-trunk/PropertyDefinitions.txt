Location: PropertyDefinitions.java

Content: 

public void addProperty(String name,Map<String,String> value) throws SyntaxException {

  if (properties.put(name,value) != null)   throw new SyntaxException(String.format("Multiple definition for property '%s'",name));

}

Location: PropertyDefinitions.java

Content: 

public void addProperty(String name,String value) throws SyntaxException {

  if (properties.put(name,value) != null)   throw new SyntaxException(String.format("Multiple definition for property '%s'",name));

}

Location: PropertyDefinitions.java

Content: 

public Boolean getBoolean(String key,Boolean defaultValue) throws SyntaxException {

  String value=getSimple(key);

  return (value == null) ? defaultValue : PATTERN_POSITIVE.matcher(value.toLowerCase()).matches();

}

Location: PropertyDefinitions.java

Content: 

public double getDouble(String key,double defaultValue) throws SyntaxException {

  String value=getSimple(key);

  if (value == null) {

    return defaultValue;

  }

 else {

    try {

      return Double.parseDouble(value);

    }

 catch (    NumberFormatException e) {

      throw new SyntaxException(String.format("Invalid double value %s for '%s'",value,key));

    }

  }

}

Location: PropertyDefinitions.java

Content: 

public Integer getInt(String key,Integer defaultValue) throws SyntaxException {

  String value=getSimple(key);

  return toInt(key,value,defaultValue);

}

Location: PropertyDefinitions.java

Content: 

protected Map<String,String> getMap(String name) throws SyntaxException {

  Object val=properties.get(name);

  if (val == null)   return null;

  if (!(val instanceof Map))   throw new SyntaxException(String.format("Invalid value for property '%s'. It should be a map.",name));

  return (Map<String,String>)val;

}

Location: PropertyDefinitions.java

Content: 

protected String getSimple(String name) throws SyntaxException {

  Object val=properties.get(name);

  if (val == null)   return null;

  if (!(val instanceof String))   throw new SyntaxException(String.format("Invalid value for property '%s'. It should be a string",name));

  return (String)val;

}

Location: PropertyDefinitions.java

Content: 

public String getString(String key,String defaultValue) throws SyntaxException {

  String value=getSimple(key);

  return value != null ? value : defaultValue;

}

Location: PropertyDefinitions.java

Content: 

public Boolean hasProperty(String name){

  return properties.containsKey(name);

}

Location: PropertyDefinitions.java

Content: 

public static Integer toInt(String key,String value,Integer defaultValue) throws SyntaxException {

  if (value == null) {

    return defaultValue;

  }

 else {

    try {

      return Integer.valueOf(value);

    }

 catch (    NumberFormatException e) {

      throw new SyntaxException(String.format("Invalid integer value %s for '%s'",value,key));

    }

  }

}

