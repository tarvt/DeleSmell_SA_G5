Location: IntervalSet.java

Content: 

public Collection<T> ends(){

  return ranges.values();

}

Location: IntervalSet.java

Content: 

private IntervalSet(ImmutableSortedMap<T,T> ranges){

  this.ranges=ranges;

}

Location: IntervalSet.java

Content: 

/** 

 * Construct new set containing the interval with the given start and end position.

 */

public IntervalSet(T start,T end){

  this(ImmutableSortedMap.of(start,end));

}

Location: IntervalSet.java

Content: 

public static final <T extends Comparable<T>>ISerializer<IntervalSet<T>> serializer(ISerializer<T> pointSerializer){

  return new ISerializer<IntervalSet<T>>(){

    public void serialize(    IntervalSet<T> intervals,    DataOutputPlus out) throws IOException {

      out.writeInt(intervals.ranges.size());

      for (      Map.Entry<T,T> en : intervals.ranges.entrySet()) {

        pointSerializer.serialize(en.getKey(),out);

        pointSerializer.serialize(en.getValue(),out);

      }

    }

    public IntervalSet<T> deserialize(    DataInputPlus in) throws IOException {

      int count=in.readInt();

      NavigableMap<T,T> ranges=new TreeMap<>();

      for (int i=0; i < count; ++i)       ranges.put(pointSerializer.deserialize(in),pointSerializer.deserialize(in));

      return new IntervalSet<T>(ImmutableSortedMap.copyOfSorted(ranges));

    }

    public long serializedSize(    IntervalSet<T> intervals){

      long size=TypeSizes.sizeof(intervals.ranges.size());

      for (      Map.Entry<T,T> en : intervals.ranges.entrySet()) {

        size+=pointSerializer.serializedSize(en.getKey());

        size+=pointSerializer.serializedSize(en.getValue());

      }

      return size;

    }

  }

;

}

Location: IntervalSet.java

Content: 

public Collection<T> starts(){

  return ranges.keySet();

}

Location: IntervalSet.java

Content: 

public Optional<T> upperBound(){

  return isEmpty() ? Optional.empty() : Optional.of(ranges.lastEntry().getValue());

}

