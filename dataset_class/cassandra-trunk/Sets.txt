Location: Sets.java

Content: 

private static AbstractType<?> elementsType(AbstractType<?> type){

  return ((SetType)unwrap(type)).getElementsType();

}

Location: Sets.java

Content: 

/** 

 * Returns the exact SetType from the items if it can be known.

 * @param items the items mapped to the set elements

 * @param mapper the mapper used to retrieve the element types from the items

 * @return the exact SetType from the items if it can be known or <code>null</code>

 */

public static <T>AbstractType<?> getExactSetTypeIfKnown(List<T> items,java.util.function.Function<T,AbstractType<?>> mapper){

  Optional<AbstractType<?>> type=items.stream().map(mapper).filter(Objects::nonNull).findFirst();

  return type.isPresent() ? SetType.getInstance(type.get(),false) : null;

}

Location: Sets.java

Content: 

private Sets(){

}

Location: Sets.java

Content: 

/** 

 * Create a <code>String</code> representation of the set from the specified items associated to the set elements.

 * @param items items associated to the set elements

 * @param mapper the mapper used to map the items to the <code>String</code> representation of the set elements

 * @return a <code>String</code> representation of the set

 */

public static <T>String setToString(Iterable<T> items,java.util.function.Function<T,String> mapper){

  return StreamSupport.stream(items.spliterator(),false).map(e -> mapper.apply(e)).collect(Collectors.joining(", ","{","}"));

}

Location: Sets.java

Content: 

/** 

 * Create a <code>String</code> representation of the set containing the specified elements.

 * @param elements the set elements

 * @return a <code>String</code> representation of the set

 */

public static String setToString(List<?> elements){

  return setToString(elements,Object::toString);

}

Location: Sets.java

Content: 

/** 

 * Tests that the set with the specified elements can be assigned to the specified column.

 * @param receiver the receiving column

 * @param elements the set elements

 */

public static AssignmentTestable.TestResult testSetAssignment(ColumnSpecification receiver,List<? extends AssignmentTestable> elements){

  if (!(receiver.type instanceof SetType)) {

    if (receiver.type instanceof MapType && elements.isEmpty())     return AssignmentTestable.TestResult.WEAKLY_ASSIGNABLE;

    return AssignmentTestable.TestResult.NOT_ASSIGNABLE;

  }

  if (elements.isEmpty())   return AssignmentTestable.TestResult.WEAKLY_ASSIGNABLE;

  ColumnSpecification valueSpec=valueSpecOf(receiver);

  return AssignmentTestable.TestResult.testAll(receiver.ksName,valueSpec,elements);

}

