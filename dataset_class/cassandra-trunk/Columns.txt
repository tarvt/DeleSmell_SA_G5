Location: Columns.java

Content: 

private Columns(Object[] columns){

  this(columns,findFirstComplexIdx(columns));

}

Location: Columns.java

Content: 

private Columns(Object[] columns,int complexIdx){

  assert complexIdx <= BTree.size(columns);

  this.columns=columns;

  this.complexIdx=complexIdx;

}

Location: Columns.java

Content: 

/** 

 * The number of complex columns (non-frozen collections, udts, ...) in this object.

 * @return the number of complex columns in this object.

 */

public int complexColumnCount(){

  return BTree.size(columns) - complexIdx;

}

Location: Columns.java

Content: 

/** 

 * Iterator over the complex columns of this object.

 * @return an iterator over the complex columns of this object.

 */

public Iterator<ColumnMetadata> complexColumns(){

  return BTree.iterator(columns,complexIdx,BTree.size(columns) - 1,BTree.Dir.ASC);

}

Location: Columns.java

Content: 

/** 

 * The index of the provided complex column in this object (if it contains the provided column).

 * @param c the complex column for which to return the index of.

 * @return the index for complex column {@code c} if it is contains in thisobject

 */

public int complexIdx(ColumnMetadata c){

  return BTree.findIndex(columns,Comparator.naturalOrder(),c) - complexIdx;

}

Location: Columns.java

Content: 

/** 

 * Whether the provided column is contained by this object.

 * @param c the column to check presence of.

 * @return whether {@code c} is contained by this object.

 */

public boolean contains(ColumnMetadata c){

  return BTree.findIndex(columns,Comparator.naturalOrder(),c) >= 0;

}

Location: Columns.java

Content: 

private static int findFirstComplexIdx(Object[] tree){

  if (BTree.isEmpty(tree))   return 0;

  int size=BTree.size(tree);

  ColumnMetadata last=BTree.findByIndex(tree,size - 1);

  return last.isSimple() ? size : BTree.ceilIndex(tree,Comparator.naturalOrder(),last.isStatic() ? FIRST_COMPLEX_STATIC : FIRST_COMPLEX_REGULAR);

}

Location: Columns.java

Content: 

/** 

 * Returns a new  {@code Columns} object holing the same columns than the provided set.

 * @param s the set from which to create the new {@code Columns}.

 * @return the newly created {@code Columns} containing the columns from {@code s}.

 */

public static Columns from(Collection<ColumnMetadata> s){

  Object[] tree=BTree.<ColumnMetadata>builder(Comparator.naturalOrder()).addAll(s).build();

  return new Columns(tree,findFirstComplexIdx(tree));

}

Location: Columns.java

Content: 

/** 

 * Returns the ith complex column of this object.

 * @param i the index for the complex column to fectch. This mustsatisfy  {@code 0 <= i < complexColumnCount()}.

 * @return the {@code i}th complex column in this object.

 */

public ColumnMetadata getComplex(int i){

  return BTree.findByIndex(columns,complexIdx + i);

}

Location: Columns.java

Content: 

/** 

 * Returns the ith simple column of this object.

 * @param i the index for the simple column to fectch. This mustsatisfy  {@code 0 <= i < simpleColumnCount()}.

 * @return the {@code i}th simple column in this object.

 */

public ColumnMetadata getSimple(int i){

  return BTree.findByIndex(columns,i);

}

Location: Columns.java

Content: 

/** 

 * Whether this objects contains simple columns.

 * @return whether this objects contains simple columns.

 */

public boolean hasSimple(){

  return complexIdx > 0;

}

Location: Columns.java

Content: 

/** 

 * Returns a predicate to test whether columns are included in this  {@code Columns} object,assuming that tes tested columns are passed to the predicate in sorted order.

 * @return a predicate to test the inclusion of sorted columns in this object.

 */

public Predicate<ColumnMetadata> inOrderInclusionTester(){

  SearchIterator<ColumnMetadata,ColumnMetadata> iter=BTree.slice(columns,Comparator.naturalOrder(),BTree.Dir.ASC);

  return column -> iter.next(column) != null;

}

Location: Columns.java

Content: 

/** 

 * Returns the result of merging this  {@code Columns} object with theprovided one.

 * @param other the other {@code Columns} to merge this object with.

 * @return the result of merging/taking the union of {@code this} and{@code other}. The returned object may be one of the operand and that operand is a subset of the other operand.

 */

public Columns mergeTo(Columns other){

  if (this == other || other == NONE)   return this;

  if (this == NONE)   return other;

  Object[] tree=BTree.<ColumnMetadata>merge(this.columns,other.columns,Comparator.naturalOrder(),UpdateFunction.noOp());

  if (tree == this.columns)   return this;

  if (tree == other.columns)   return other;

  return new Columns(tree,findFirstComplexIdx(tree));

}

Location: Columns.java

Content: 

/** 

 * Creates a  {@code Columns} holding only the one column provided.

 * @param c the column for which to create a {@code Columns} object.

 * @return the newly created {@code Columns} containing only {@code c}.

 */

public static Columns of(ColumnMetadata c){

  return new Columns(BTree.singleton(c),c.isComplex() ? 0 : 1);

}

Location: Columns.java

Content: 

/** 

 * An iterator that returns the columns of this object in "select" order (that is in global alphabetical order, where the "normal" iterator returns simple columns first and the complex second).

 * @return an iterator returning columns in alphabetical order.

 */

public Iterator<ColumnMetadata> selectOrderIterator(){

  return Iterators.<ColumnMetadata>mergeSorted(ImmutableList.of(simpleColumns(),complexColumns()),(s,c) -> {

    assert !s.kind.isPrimaryKeyKind();

    return s.name.bytes.compareTo(c.name.bytes);

  }

);

}

Location: Columns.java

Content: 

/** 

 * The number of simple columns in this object.

 * @return the number of simple columns in this object.

 */

public int simpleColumnCount(){

  return complexIdx;

}

Location: Columns.java

Content: 

/** 

 * Iterator over the simple columns of this object.

 * @return an iterator over the simple columns of this object.

 */

public Iterator<ColumnMetadata> simpleColumns(){

  return BTree.iterator(columns,0,complexIdx - 1,BTree.Dir.ASC);

}

Location: Columns.java

Content: 

/** 

 * The index of the provided simple column in this object (if it contains the provided column).

 * @param c the simple column for which to return the index of.

 * @return the index for simple column {@code c} if it is contains in thisobject

 */

public int simpleIdx(ColumnMetadata c){

  return BTree.findIndex(columns,Comparator.naturalOrder(),c);

}

Location: Columns.java

Content: 

/** 

 * Returns the equivalent of those columns but with the provided column removed.

 * @param column the column to remove.

 * @return newly allocated columns containing all the columns of {@code this} expectfor  {@code column}.

 */

public Columns without(ColumnMetadata column){

  if (!contains(column))   return this;

  Object[] newColumns=BTreeRemoval.<ColumnMetadata>remove(columns,Comparator.naturalOrder(),column);

  return new Columns(newColumns);

}

