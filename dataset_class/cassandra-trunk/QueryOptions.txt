Location: QueryOptions.java

Content: 

public static QueryOptions addColumnSpecifications(QueryOptions options,List<ColumnSpecification> columnSpecs){

  return new OptionsWithColumnSpecifications(options,columnSpecs);

}

Location: QueryOptions.java

Content: 

public static QueryOptions create(ConsistencyLevel consistency,List<ByteBuffer> values,boolean skipMetadata,int pageSize,PagingState pagingState,ConsistencyLevel serialConsistency,ProtocolVersion version,String keyspace){

  return create(consistency,values,skipMetadata,pageSize,pagingState,serialConsistency,version,keyspace,Long.MIN_VALUE,Integer.MIN_VALUE);

}

Location: QueryOptions.java

Content: 

public static QueryOptions create(ConsistencyLevel consistency,List<ByteBuffer> values,boolean skipMetadata,int pageSize,PagingState pagingState,ConsistencyLevel serialConsistency,ProtocolVersion version,String keyspace,long timestamp,int nowInSeconds){

  return new DefaultQueryOptions(consistency,values,skipMetadata,new SpecificOptions(pageSize,pagingState,serialConsistency,timestamp,keyspace,nowInSeconds),version);

}

Location: QueryOptions.java

Content: 

public static QueryOptions forInternalCalls(ConsistencyLevel consistency,List<ByteBuffer> values){

  return new DefaultQueryOptions(consistency,values,false,SpecificOptions.DEFAULT,ProtocolVersion.V3);

}

Location: QueryOptions.java

Content: 

public static QueryOptions forInternalCalls(List<ByteBuffer> values){

  return new DefaultQueryOptions(ConsistencyLevel.ONE,values,false,SpecificOptions.DEFAULT,ProtocolVersion.V3);

}

Location: QueryOptions.java

Content: 

public static QueryOptions forProtocolVersion(ProtocolVersion protocolVersion){

  return new DefaultQueryOptions(null,null,true,null,protocolVersion);

}

Location: QueryOptions.java

Content: 

/** 

 * Returns the term corresponding to column  {@code columnName} in the JSON value of bind index {@code bindIndex}. This is functionally equivalent to: {@code Json.parseJson(UTF8Type.instance.getSerializer().deserialize(getValues().get(bindIndex)), expectedReceivers).get(columnName)}but this caches the result of parsing the JSON, so that while this might be called for multiple columns on the same  {@code bindIndex}value, the underlying JSON value is only parsed/processed once. Note: this is a bit more involved in CQL specifics than this class generally is, but as we need to cache this per-query and in an object that is available when we bind values, this is the easiest place to have this.

 * @param bindIndex the index of the bind value that should be interpreted as a JSON value.

 * @param columnName the name of the column we want the value of.

 * @param expectedReceivers the columns expected in the JSON value at index {@code bindIndex}. This is only used when parsing the json initially and no check is done afterwards. So in practice, any call of this method on the same QueryOptions object and with the same {@code bindIndx} values should use the same value for this parameter, but this isn't validated in any way.

 * @return the value correspong to column {@code columnName} in the (JSON) bind value at index {@code bindIndex}. This may return null if the JSON value has no value for this column.

 */

public Term getJsonColumnValue(int bindIndex,ColumnIdentifier columnName,Collection<ColumnMetadata> expectedReceivers) throws InvalidRequestException {

  if (jsonValuesCache == null)   jsonValuesCache=new ArrayList<>(Collections.<Map<ColumnIdentifier,Term>>nCopies(getValues().size(),null));

  Map<ColumnIdentifier,Term> jsonValue=jsonValuesCache.get(bindIndex);

  if (jsonValue == null) {

    ByteBuffer value=getValues().get(bindIndex);

    if (value == null)     throw new InvalidRequestException("Got null for INSERT JSON values");

    jsonValue=Json.parseJson(UTF8Type.instance.getSerializer().deserialize(value),expectedReceivers);

    jsonValuesCache.set(bindIndex,jsonValue);

  }

  return jsonValue.get(columnName);

}

Location: QueryOptions.java

Content: 

/** 

 * The pageSize for this query. Will be  {@code <= 0} if not relevant for the query.  

 */

public int getPageSize(){

  return getSpecificOptions().pageSize;

}

Location: QueryOptions.java

Content: 

/** 

 * The paging state for this query, or null if not relevant. 

 */

public PagingState getPagingState(){

  return getSpecificOptions().state;

}

Location: QueryOptions.java

Content: 

abstract SpecificOptions getSpecificOptions();

Location: QueryOptions.java

Content: 

public abstract List<ByteBuffer> getValues();

Location: QueryOptions.java

Content: 

/** 

 * Tells whether or not this <code>QueryOptions</code> contains the column specifications for the bound variables. <p>The column specifications will be present only for prepared statements.</p>

 * @return <code>true</code> this <code>QueryOptions</code> contains the column specifications for the boundvariables, <code>false</code> otherwise.

 */

public boolean hasColumnSpecifications(){

  return false;

}

Location: QueryOptions.java

Content: 

public QueryOptions prepare(List<ColumnSpecification> specs){

  return this;

}

Location: QueryOptions.java

Content: 

public abstract boolean skipMetadata();

