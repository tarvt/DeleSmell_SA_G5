Location: ThreadPoolsTable.java

Content: 

private void addRow(SimpleDataSet dataSet,ThreadPoolMetrics metrics){

  dataSet.row(metrics.poolName).column(ACTIVE_TASKS,metrics.activeTasks.getValue()).column(ACTIVE_TASKS_LIMIT,metrics.maxPoolSize.getValue()).column(PENDING_TASKS,metrics.pendingTasks.getValue()).column(COMPLETED_TASKS,metrics.completedTasks.getValue()).column(BLOCKED_TASKS,metrics.currentBlocked.getCount()).column(BLOCKED_TASKS_ALL_TIME,metrics.totalBlocked.getCount());

}

Location: ThreadPoolsTable.java

Content: 

@Override public DataSet data(){

  SimpleDataSet result=new SimpleDataSet(metadata());

  Metrics.allThreadPoolMetrics().forEach(metrics -> addRow(result,metrics));

  return result;

}

Location: ThreadPoolsTable.java

Content: 

@Override public DataSet data(DecoratedKey partitionKey){

  String poolName=UTF8Type.instance.compose(partitionKey.getKey());

  SimpleDataSet result=new SimpleDataSet(metadata());

  Metrics.getThreadPoolMetrics(poolName).ifPresent(metrics -> addRow(result,metrics));

  return result;

}

Location: ThreadPoolsTable.java

Content: 

ThreadPoolsTable(String keyspace){

  super(TableMetadata.builder(keyspace,"thread_pools").kind(TableMetadata.Kind.VIRTUAL).partitioner(new LocalPartitioner(UTF8Type.instance)).addPartitionKeyColumn(NAME,UTF8Type.instance).addRegularColumn(ACTIVE_TASKS,Int32Type.instance).addRegularColumn(ACTIVE_TASKS_LIMIT,Int32Type.instance).addRegularColumn(PENDING_TASKS,Int32Type.instance).addRegularColumn(COMPLETED_TASKS,LongType.instance).addRegularColumn(BLOCKED_TASKS,LongType.instance).addRegularColumn(BLOCKED_TASKS_ALL_TIME,LongType.instance).build());

}

