Location: DataResource.java

Content: 

public Set<Permission> applicablePermissions(){

switch (level) {

case ROOT:

case KEYSPACE:

    return KEYSPACE_LEVEL_PERMISSIONS;

case TABLE:

  return TABLE_LEVEL_PERMISSIONS;

}

throw new AssertionError();

}

Location: DataResource.java

Content: 

private DataResource(Level level,String keyspace,String table){

  this.level=level;

  this.keyspace=keyspace;

  this.table=table;

  this.hash=Objects.hashCode(level,keyspace,table);

}

Location: DataResource.java

Content: 

/** 

 * Parses a data resource name into a DataResource instance.

 * @param name Name of the data resource.

 * @return DataResource instance matching the name.

 */

public static DataResource fromName(String name){

  String[] parts=StringUtils.split(name,'/');

  if (!parts[0].equals(ROOT_NAME) || parts.length > 3)   throw new IllegalArgumentException(String.format("%s is not a valid data resource name",name));

  if (parts.length == 1)   return root();

  if (parts.length == 2)   return keyspace(parts[1]);

  return table(parts[1],parts[2]);

}

Location: DataResource.java

Content: 

/** 

 * @return Parent of the resource, if any. Throws IllegalStateException if it's the root-level resource.

 */

public IResource getParent(){

switch (level) {

case KEYSPACE:

    return root();

case TABLE:

  return keyspace(keyspace);

}

throw new IllegalStateException("Root-level resource can't have a parent");

}

Location: DataResource.java

Content: 

/** 

 * @return Whether or not the resource has a parent in the hierarchy.

 */

public boolean hasParent(){

  return level != Level.ROOT;

}

Location: DataResource.java

Content: 

public boolean isKeyspaceLevel(){

  return level == Level.KEYSPACE;

}

Location: DataResource.java

Content: 

public boolean isRootLevel(){

  return level == Level.ROOT;

}

Location: DataResource.java

Content: 

public boolean isTableLevel(){

  return level == Level.TABLE;

}

Location: DataResource.java

Content: 

/** 

 * Creates a DataResource representing a keyspace.

 * @param keyspace Name of the keyspace.

 * @return DataResource instance representing the keyspace.

 */

public static DataResource keyspace(String keyspace){

  return new DataResource(Level.KEYSPACE,keyspace,null);

}

Location: DataResource.java

Content: 

/** 

 * @return the root-level resource.

 */

public static DataResource root(){

  return ROOT_RESOURCE;

}

