Location: TimeFcts.java

Content: 

public static final Function now(final String name,final TemporalType<?> type){

  return new NativeScalarFunction(name,type){

    @Override public ByteBuffer execute(    ProtocolVersion protocolVersion,    List<ByteBuffer> parameters){

      return type.now();

    }

  }

;

}

Location: TimeFcts.java

Content: 

/** 

 * Creates a function that convert a value of the specified type into a <code>DATE</code>.

 * @param type the temporal type

 * @return a function that convert a value of the specified type into a <code>DATE</code>.

 */

public static final NativeScalarFunction toDate(final TemporalType<?> type){

  return new NativeScalarFunction("todate",SimpleDateType.instance,type){

    public ByteBuffer execute(    ProtocolVersion protocolVersion,    List<ByteBuffer> parameters){

      ByteBuffer bb=parameters.get(0);

      if (bb == null || !bb.hasRemaining())       return null;

      long millis=type.toTimeInMillis(bb);

      return SimpleDateType.instance.fromTimeInMillis(millis);

    }

  }

;

}

Location: TimeFcts.java

Content: 

/** 

 * Creates a function that convert a value of the specified type into a <code>TIMESTAMP</code>.

 * @param type the temporal type

 * @return a function that convert a value of the specified type into a <code>TIMESTAMP</code>.

 */

public static final NativeScalarFunction toTimestamp(final TemporalType<?> type){

  return new NativeScalarFunction("totimestamp",TimestampType.instance,type){

    public ByteBuffer execute(    ProtocolVersion protocolVersion,    List<ByteBuffer> parameters){

      ByteBuffer bb=parameters.get(0);

      if (bb == null || !bb.hasRemaining())       return null;

      long millis=type.toTimeInMillis(bb);

      return TimestampType.instance.fromTimeInMillis(millis);

    }

  }

;

}

Location: TimeFcts.java

Content: 

/** 

 * Creates a function that convert a value of the specified type into an UNIX timestamp.

 * @param type the temporal type

 * @return a function that convert a value of the specified type into an UNIX timestamp.

 */

public static final NativeScalarFunction toUnixTimestamp(final TemporalType<?> type){

  return new NativeScalarFunction("tounixtimestamp",LongType.instance,type){

    public ByteBuffer execute(    ProtocolVersion protocolVersion,    List<ByteBuffer> parameters){

      ByteBuffer bb=parameters.get(0);

      if (bb == null || !bb.hasRemaining())       return null;

      return ByteBufferUtil.bytes(type.toTimeInMillis(bb));

    }

  }

;

}

