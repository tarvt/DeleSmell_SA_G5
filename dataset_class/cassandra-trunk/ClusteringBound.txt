Location: ClusteringBound.java

Content: 

public static ClusteringPrefix.Kind boundKind(boolean isStart,boolean isInclusive){

  return isStart ? (isInclusive ? ClusteringPrefix.Kind.INCL_START_BOUND : ClusteringPrefix.Kind.EXCL_START_BOUND) : (isInclusive ? ClusteringPrefix.Kind.INCL_END_BOUND : ClusteringPrefix.Kind.EXCL_END_BOUND);

}

Location: ClusteringBound.java

Content: 

default int compareTo(ClusteringComparator comparator,List<ByteBuffer> sstableBound){

  for (int i=0; i < sstableBound.size(); i++) {

    if (i >= size())     return isStart() ? -1 : 1;

    int cmp=comparator.compareComponent(i,get(i),accessor(),sstableBound.get(i),ByteBufferAccessor.instance);

    if (cmp != 0)     return cmp;

  }

  if (size() > sstableBound.size())   return isStart() ? -1 : 1;

  return isInclusive() ? 0 : (isStart() ? 1 : -1);

}

Location: ClusteringBound.java

Content: 

public static ClusteringBound<?> create(ClusteringComparator comparator,boolean isStart,boolean isInclusive,Object... values){

  CBuilder builder=CBuilder.create(comparator);

  for (  Object val : values) {

    if (val instanceof ByteBuffer)     builder.add((ByteBuffer)val);

 else     builder.add(val);

  }

  return builder.buildBound(isStart,isInclusive);

}

Location: ClusteringBound.java

Content: 

static <V>ClusteringBound<V> create(ClusteringPrefix.Kind kind,ClusteringPrefix<V> from){

  return from.accessor().factory().bound(kind,from.getRawValues());

}

Location: ClusteringBound.java

Content: 

public static ClusteringBound<?> exclusiveEndOf(ClusteringPrefix<?> from){

  return create(ClusteringPrefix.Kind.EXCL_END_BOUND,from);

}

Location: ClusteringBound.java

Content: 

public static ClusteringBound<?> exclusiveStartOf(ClusteringPrefix<?> from){

  return create(ClusteringPrefix.Kind.EXCL_START_BOUND,from);

}

Location: ClusteringBound.java

Content: 

public static ClusteringBound<?> inclusiveEndOf(ClusteringPrefix<?> from){

  return create(ClusteringPrefix.Kind.INCL_END_BOUND,from);

}

Location: ClusteringBound.java

Content: 

public static ClusteringBound<?> inclusiveStartOf(ClusteringPrefix<?> from){

  return create(ClusteringPrefix.Kind.INCL_START_BOUND,from);

}

Location: ClusteringBound.java

Content: 

default boolean isEnd(){

  return !isStart();

}

Location: ClusteringBound.java

Content: 

default boolean isExclusive(){

  return kind() == Kind.EXCL_START_BOUND || kind() == Kind.EXCL_END_BOUND;

}

Location: ClusteringBound.java

Content: 

default boolean isInclusive(){

  return kind() == Kind.INCL_START_BOUND || kind() == Kind.INCL_END_BOUND;

}

Location: ClusteringBound.java

Content: 

default boolean isStart(){

  return kind().isStart();

}

