Location: BTreeRow.java

Content: 

public <A>long accumulate(BiLongAccumulator<A,ColumnData> accumulator,A arg,Comparator<ColumnData> comparator,ColumnData from,long initialValue){

  return BTree.accumulate(btree,accumulator,arg,comparator,from,initialValue);

}

Location: BTreeRow.java

Content: 

public <A>long accumulate(BiLongAccumulator<A,ColumnData> accumulator,A arg,long initialValue){

  return BTree.accumulate(btree,accumulator,arg,initialValue);

}

Location: BTreeRow.java

Content: 

public long accumulate(LongAccumulator<ColumnData> accumulator,Comparator<ColumnData> comparator,ColumnData from,long initialValue){

  return BTree.accumulate(btree,accumulator,comparator,from,initialValue);

}

Location: BTreeRow.java

Content: 

public long accumulate(LongAccumulator<ColumnData> accumulator,long initialValue){

  return BTree.accumulate(btree,accumulator,initialValue);

}

Location: BTreeRow.java

Content: 

public <A>void apply(BiConsumer<A,ColumnData> function,A arg){

  BTree.apply(btree,function,arg);

}

Location: BTreeRow.java

Content: 

public void apply(Consumer<ColumnData> function){

  BTree.apply(btree,function);

}

Location: BTreeRow.java

Content: 

private BTreeRow(Clustering clustering,LivenessInfo primaryKeyLivenessInfo,Deletion deletion,Object[] btree,int minLocalDeletionTime){

  assert !deletion.isShadowedBy(primaryKeyLivenessInfo);

  this.clustering=clustering;

  this.primaryKeyLivenessInfo=primaryKeyLivenessInfo;

  this.deletion=deletion;

  this.btree=btree;

  this.minLocalDeletionTime=minLocalDeletionTime;

}

Location: BTreeRow.java

Content: 

private BTreeRow(Clustering<?> clustering,Object[] btree,int minLocalDeletionTime){

  this(clustering,LivenessInfo.EMPTY,Deletion.LIVE,btree,minLocalDeletionTime);

}

Location: BTreeRow.java

Content: 

public Iterable<Cell<?>> cells(){

  return CellIterator::new;

}

Location: BTreeRow.java

Content: 

public Iterable<Cell<?>> cellsInLegacyOrder(TableMetadata metadata,boolean reversed){

  return () -> new CellInLegacyOrderIterator(metadata,reversed);

}

Location: BTreeRow.java

Content: 

public Clustering<?> clustering(){

  return clustering;

}

Location: BTreeRow.java

Content: 

public int columnCount(){

  return BTree.size(btree);

}

Location: BTreeRow.java

Content: 

@Override public Collection<ColumnData> columnData(){

  return new AbstractCollection<ColumnData>(){

    @Override public Iterator<ColumnData> iterator(){

      return BTreeRow.this.iterator();

    }

    @Override public int size(){

      return BTree.size(btree);

    }

  }

;

}

Location: BTreeRow.java

Content: 

public static BTreeRow create(Clustering<?> clustering,LivenessInfo primaryKeyLivenessInfo,Deletion deletion,Object[] btree){

  int minDeletionTime=Math.min(minDeletionTime(primaryKeyLivenessInfo),minDeletionTime(deletion.time()));

  if (minDeletionTime != Integer.MIN_VALUE) {

    long result=BTree.<ColumnData>accumulate(btree,(cd,l) -> Math.min(l,minDeletionTime(cd)),minDeletionTime);

    minDeletionTime=Ints.checkedCast(result);

  }

  return create(clustering,primaryKeyLivenessInfo,deletion,btree,minDeletionTime);

}

Location: BTreeRow.java

Content: 

public static BTreeRow create(Clustering<?> clustering,LivenessInfo primaryKeyLivenessInfo,Deletion deletion,Object[] btree,int minDeletionTime){

  return new BTreeRow(clustering,primaryKeyLivenessInfo,deletion,btree,minDeletionTime);

}

Location: BTreeRow.java

Content: 

public int dataSize(){

  int dataSize=clustering.dataSize() + primaryKeyLivenessInfo.dataSize() + deletion.dataSize();

  return Ints.checkedCast(accumulate((cd,v) -> v + cd.dataSize(),dataSize));

}

Location: BTreeRow.java

Content: 

public Deletion deletion(){

  return deletion;

}

Location: BTreeRow.java

Content: 

public static BTreeRow emptyDeletedRow(Clustering<?> clustering,Deletion deletion){

  assert !deletion.isLive();

  return new BTreeRow(clustering,LivenessInfo.EMPTY,deletion,BTree.empty(),Integer.MIN_VALUE);

}

Location: BTreeRow.java

Content: 

public static BTreeRow emptyRow(Clustering<?> clustering){

  return new BTreeRow(clustering,BTree.empty(),Integer.MAX_VALUE);

}

Location: BTreeRow.java

Content: 

public Row filter(ColumnFilter filter,DeletionTime activeDeletion,boolean setActiveDeletionToRow,TableMetadata metadata){

  Map<ByteBuffer,DroppedColumn> droppedColumns=metadata.droppedColumns;

  boolean mayFilterColumns=!filter.fetchesAllColumns(isStatic());

  boolean mayHaveShadowed=!activeDeletion.isLive() && !deletion.time().supersedes(activeDeletion);

  if (!mayFilterColumns && !mayHaveShadowed && droppedColumns.isEmpty())   return this;

  LivenessInfo newInfo=primaryKeyLivenessInfo;

  Deletion newDeletion=deletion;

  if (mayHaveShadowed) {

    if (activeDeletion.deletes(newInfo.timestamp()))     newInfo=LivenessInfo.EMPTY;

    newDeletion=setActiveDeletionToRow ? Deletion.regular(activeDeletion) : Deletion.LIVE;

  }

  Columns columns=filter.fetchedColumns().columns(isStatic());

  Predicate<ColumnMetadata> inclusionTester=columns.inOrderInclusionTester();

  Predicate<ColumnMetadata> queriedByUserTester=filter.queriedColumns().columns(isStatic()).inOrderInclusionTester();

  final LivenessInfo rowLiveness=newInfo;

  return transformAndFilter(newInfo,newDeletion,(cd) -> {

    ColumnMetadata column=cd.column();

    if (!inclusionTester.test(column))     return null;

    DroppedColumn dropped=droppedColumns.get(column.name.bytes);

    if (column.isComplex())     return ((ComplexColumnData)cd).filter(filter,mayHaveShadowed ? activeDeletion : DeletionTime.LIVE,dropped,rowLiveness);

    Cell<?> cell=(Cell<?>)cd;

    boolean isForDropped=dropped != null && cell.timestamp() <= dropped.droppedTime;

    boolean isShadowed=mayHaveShadowed && activeDeletion.deletes(cell);

    boolean isSkippable=!queriedByUserTester.test(column) && cell.timestamp() < rowLiveness.timestamp();

    return isForDropped || isShadowed || isSkippable ? null : cell;

  }

);

}

Location: BTreeRow.java

Content: 

public Row filter(ColumnFilter filter,TableMetadata metadata){

  return filter(filter,DeletionTime.LIVE,false,metadata);

}

Location: BTreeRow.java

Content: 

public Cell<?> getCell(ColumnMetadata c){

  assert !c.isComplex();

  return (Cell<?>)BTree.<Object>find(btree,ColumnMetadata.asymmetricColumnDataComparator,c);

}

Location: BTreeRow.java

Content: 

public Cell<?> getCell(ColumnMetadata c,CellPath path){

  assert c.isComplex();

  ComplexColumnData cd=getComplexColumnData(c);

  if (cd == null)   return null;

  return cd.getCell(path);

}

Location: BTreeRow.java

Content: 

public ComplexColumnData getComplexColumnData(ColumnMetadata c){

  assert c.isComplex();

  return (ComplexColumnData)BTree.<Object>find(btree,ColumnMetadata.asymmetricColumnDataComparator,c);

}

Location: BTreeRow.java

Content: 

public boolean hasComplex(){

  if (BTree.isEmpty(btree))   return false;

  int size=BTree.size(btree);

  ColumnData last=BTree.findByIndex(btree,size - 1);

  return last.column.isComplex();

}

Location: BTreeRow.java

Content: 

public boolean hasComplexDeletion(){

  long result=accumulate((cd,v) -> ((ComplexColumnData)cd).complexDeletion().isLive() ? 0 : Long.MAX_VALUE,COLUMN_COMPARATOR,isStatic() ? FIRST_COMPLEX_STATIC : FIRST_COMPLEX_REGULAR,0L);

  return result == Long.MAX_VALUE;

}

Location: BTreeRow.java

Content: 

public boolean hasDeletion(int nowInSec){

  return nowInSec >= minLocalDeletionTime;

}

Location: BTreeRow.java

Content: 

public boolean hasInvalidDeletions(){

  if (primaryKeyLivenessInfo().isExpiring() && (primaryKeyLivenessInfo().ttl() < 0 || primaryKeyLivenessInfo().localExpirationTime() < 0))   return true;

  if (!deletion().time().validate())   return true;

  return accumulate((cd,v) -> cd.hasInvalidDeletions() ? Long.MAX_VALUE : v,0) != 0;

}

Location: BTreeRow.java

Content: 

public Row markCounterLocalToBeCleared(){

  return transformAndFilter(primaryKeyLivenessInfo,deletion,(cd) -> cd.column().isCounterColumn() ? cd.markCounterLocalToBeCleared() : cd);

}

Location: BTreeRow.java

Content: 

private static int minDeletionTime(Cell<?> cell){

  return cell.isTombstone() ? Integer.MIN_VALUE : cell.localDeletionTime();

}

Location: BTreeRow.java

Content: 

private static int minDeletionTime(ColumnData cd){

  return cd.column().isSimple() ? minDeletionTime((Cell<?>)cd) : minDeletionTime((ComplexColumnData)cd);

}

Location: BTreeRow.java

Content: 

private static int minDeletionTime(ComplexColumnData cd){

  int min=minDeletionTime(cd.complexDeletion());

  for (  Cell<?> cell : cd) {

    min=Math.min(min,minDeletionTime(cell));

    if (min == Integer.MIN_VALUE)     break;

  }

  return min;

}

Location: BTreeRow.java

Content: 

private static int minDeletionTime(DeletionTime dt){

  return dt.isLive() ? Integer.MAX_VALUE : Integer.MIN_VALUE;

}

Location: BTreeRow.java

Content: 

private static int minDeletionTime(LivenessInfo info){

  return info.isExpiring() ? info.localExpirationTime() : Integer.MAX_VALUE;

}

Location: BTreeRow.java

Content: 

private static int minDeletionTime(Object[] btree,LivenessInfo info,DeletionTime rowDeletion){

  long min=Math.min(minDeletionTime(info),minDeletionTime(rowDeletion));

  min=BTree.<ColumnData>accumulate(btree,(cd,l) -> {

    int m=Math.min((int)l,minDeletionTime(cd));

    return m != Integer.MIN_VALUE ? m : Long.MAX_VALUE;

  }

,min);

  if (min == Long.MAX_VALUE)   return Integer.MIN_VALUE;

  return Ints.checkedCast(min);

}

Location: BTreeRow.java

Content: 

public static BTreeRow noCellLiveRow(Clustering<?> clustering,LivenessInfo primaryKeyLivenessInfo){

  assert !primaryKeyLivenessInfo.isEmpty();

  return new BTreeRow(clustering,primaryKeyLivenessInfo,Deletion.LIVE,BTree.empty(),minDeletionTime(primaryKeyLivenessInfo));

}

Location: BTreeRow.java

Content: 

public LivenessInfo primaryKeyLivenessInfo(){

  return primaryKeyLivenessInfo;

}

Location: BTreeRow.java

Content: 

public Row purge(DeletionPurger purger,int nowInSec,boolean enforceStrictLiveness){

  if (!hasDeletion(nowInSec))   return this;

  LivenessInfo newInfo=purger.shouldPurge(primaryKeyLivenessInfo,nowInSec) ? LivenessInfo.EMPTY : primaryKeyLivenessInfo;

  Deletion newDeletion=purger.shouldPurge(deletion.time()) ? Deletion.LIVE : deletion;

  if (enforceStrictLiveness && newDeletion.isLive() && newInfo.isEmpty())   return null;

  return transformAndFilter(newInfo,newDeletion,(cd) -> cd.purge(purger,nowInSec));

}

Location: BTreeRow.java

Content: 

public BTreeSearchIterator<ColumnMetadata,ColumnData> searchIterator(){

  return BTree.slice(btree,ColumnMetadata.asymmetricColumnDataComparator,BTree.Dir.ASC);

}

Location: BTreeRow.java

Content: 

public void setValue(ColumnMetadata column,CellPath path,ByteBuffer value){

  ColumnData current=(ColumnData)BTree.<Object>find(btree,ColumnMetadata.asymmetricColumnDataComparator,column);

  if (column.isSimple())   BTree.replaceInSitu(btree,ColumnData.comparator,current,((Cell<?>)current).withUpdatedValue(value));

 else   ((ComplexColumnData)current).setValue(path,value);

}

Location: BTreeRow.java

Content: 

public static BTreeRow singleCellRow(Clustering<?> clustering,Cell<?> cell){

  if (cell.column().isSimple())   return new BTreeRow(clustering,BTree.singleton(cell),minDeletionTime(cell));

  ComplexColumnData complexData=new ComplexColumnData(cell.column(),new Cell<?>[]{cell},DeletionTime.LIVE);

  return new BTreeRow(clustering,BTree.singleton(complexData),minDeletionTime(cell));

}

Location: BTreeRow.java

Content: 

public static Row.Builder sortedBuilder(){

  return new Builder(true);

}

Location: BTreeRow.java

Content: 

private Row transformAndFilter(LivenessInfo info,Deletion deletion,Function<ColumnData,ColumnData> function){

  Object[] transformed=BTree.transformAndFilter(btree,function);

  if (btree == transformed && info == this.primaryKeyLivenessInfo && deletion == this.deletion)   return this;

  if (info.isEmpty() && deletion.isLive() && BTree.isEmpty(transformed))   return null;

  int minDeletionTime=minDeletionTime(transformed,info,deletion.time());

  return BTreeRow.create(clustering,info,deletion,transformed,minDeletionTime);

}

Location: BTreeRow.java

Content: 

public static Row.Builder unsortedBuilder(){

  return new Builder(false);

}

Location: BTreeRow.java

Content: 

/** 

 * Returns a copy of the row where all timestamps for live data have replaced by  {@code newTimestamp} andall deletion timestamp by  {@code newTimestamp - 1}. This exists for the Paxos path, see  {@link PartitionUpdate#updateAllTimestamp} for additional details.

 */

public Row updateAllTimestamp(long newTimestamp){

  LivenessInfo newInfo=primaryKeyLivenessInfo.isEmpty() ? primaryKeyLivenessInfo : primaryKeyLivenessInfo.withUpdatedTimestamp(newTimestamp);

  Deletion newDeletion=deletion.isLive() || (deletion.isShadowable() && !primaryKeyLivenessInfo.isEmpty()) ? Deletion.LIVE : new Deletion(new DeletionTime(newTimestamp - 1,deletion.time().localDeletionTime()),deletion.isShadowable());

  return transformAndFilter(newInfo,newDeletion,(cd) -> cd.updateAllTimestamp(newTimestamp));

}

Location: BTreeRow.java

Content: 

public Row withOnlyQueriedData(ColumnFilter filter){

  if (filter.allFetchedColumnsAreQueried())   return this;

  return transformAndFilter(primaryKeyLivenessInfo,deletion,(cd) -> {

    ColumnMetadata column=cd.column();

    if (column.isComplex())     return ((ComplexColumnData)cd).withOnlyQueriedData(filter);

    return filter.fetchedColumnIsQueried(column) ? cd : null;

  }

);

}

Location: BTreeRow.java

Content: 

public Row withRowDeletion(DeletionTime newDeletion){

  return newDeletion.isLive() || !deletion.isLive() ? this : new BTreeRow(clustering,primaryKeyLivenessInfo,Deletion.regular(newDeletion),btree,Integer.MIN_VALUE);

}

