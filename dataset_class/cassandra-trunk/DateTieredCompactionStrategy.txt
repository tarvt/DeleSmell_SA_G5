Location: DateTieredCompactionStrategy.java

Content: 

public static List<Pair<SSTableReader,Long>> createSSTableAndMinTimestampPairs(Iterable<SSTableReader> sstables){

  List<Pair<SSTableReader,Long>> sstableMinTimestampPairs=Lists.newArrayListWithCapacity(Iterables.size(sstables));

  for (  SSTableReader sstable : sstables)   sstableMinTimestampPairs.add(Pair.create(sstable,sstable.getMinTimestamp()));

  return sstableMinTimestampPairs;

}

Location: DateTieredCompactionStrategy.java

Content: 

public DateTieredCompactionStrategy(ColumnFamilyStore cfs,Map<String,String> options){

  super(cfs,options);

  this.estimatedRemainingTasks=0;

  this.options=new DateTieredCompactionStrategyOptions(options);

  if (!options.containsKey(AbstractCompactionStrategy.TOMBSTONE_COMPACTION_INTERVAL_OPTION) && !options.containsKey(AbstractCompactionStrategy.TOMBSTONE_THRESHOLD_OPTION)) {

    disableTombstoneCompactions=true;

    logger.trace("Disabling tombstone compactions for DTCS");

  }

 else   logger.trace("Enabling tombstone compactions for DTCS");

  this.stcsOptions=new SizeTieredCompactionStrategyOptions(options);

}

Location: DateTieredCompactionStrategy.java

Content: 

/** 

 * Removes all sstables with max timestamp older than maxSSTableAge.

 * @param sstables all sstables to consider

 * @param maxSSTableAge the age in milliseconds when an SSTable stops participating in compactions

 * @param now current time. SSTables with max timestamp less than (now - maxSSTableAge) are filtered.

 * @return a list of sstables with the oldest sstables excluded

 */

@VisibleForTesting static Iterable<SSTableReader> filterOldSSTables(List<SSTableReader> sstables,long maxSSTableAge,long now){

  if (maxSSTableAge == 0)   return sstables;

  final long cutoff=now - maxSSTableAge;

  return filter(sstables,new Predicate<SSTableReader>(){

    @Override public boolean apply(    SSTableReader sstable){

      return sstable.getMaxTimestamp() >= cutoff;

    }

  }

);

}

Location: DateTieredCompactionStrategy.java

Content: 

/** 

 * Group files with similar min timestamp into buckets. Files with recent min timestamps are grouped together into buckets designated to short timespans while files with older timestamps are grouped into buckets representing longer timespans.

 * @param files pairs consisting of a file and its min timestamp

 * @param timeUnit

 * @param base

 * @param now

 * @return a list of buckets of files. The list is ordered such that the files with newest timestamps come first.Each bucket is also a list of files ordered from newest to oldest.

 */

@VisibleForTesting static <T>List<List<T>> getBuckets(Collection<Pair<T,Long>> files,long timeUnit,int base,long now,long maxWindowSize){

  final List<Pair<T,Long>> sortedFiles=Lists.newArrayList(files);

  Collections.sort(sortedFiles,Collections.reverseOrder(new Comparator<Pair<T,Long>>(){

    public int compare(    Pair<T,Long> p1,    Pair<T,Long> p2){

      return p1.right.compareTo(p2.right);

    }

  }

));

  List<List<T>> buckets=Lists.newArrayList();

  Target target=getInitialTarget(now,timeUnit,maxWindowSize);

  PeekingIterator<Pair<T,Long>> it=Iterators.peekingIterator(sortedFiles.iterator());

  outerLoop:   while (it.hasNext()) {

    while (!target.onTarget(it.peek().right)) {

      if (target.compareToTimestamp(it.peek().right) < 0) {

        it.next();

        if (!it.hasNext())         break outerLoop;

      }

 else       target=target.nextTarget(base);

    }

    List<T> bucket=Lists.newArrayList();

    while (target.onTarget(it.peek().right)) {

      bucket.add(it.next().left);

      if (!it.hasNext())       break;

    }

    buckets.add(bucket);

  }

  return buckets;

}

Location: DateTieredCompactionStrategy.java

Content: 

private List<SSTableReader> getCompactionCandidates(Iterable<SSTableReader> candidateSSTables,long now,int base){

  Iterable<SSTableReader> candidates=filterOldSSTables(Lists.newArrayList(candidateSSTables),options.maxSSTableAge,now);

  List<List<SSTableReader>> buckets=getBuckets(createSSTableAndMinTimestampPairs(candidates),options.baseTime,base,now,options.maxWindowSize);

  logger.debug("Compaction buckets are {}",buckets);

  updateEstimatedCompactionsByTasks(buckets);

  List<SSTableReader> mostInteresting=newestBucket(buckets,cfs.getMinimumCompactionThreshold(),cfs.getMaximumCompactionThreshold(),now,options.baseTime,options.maxWindowSize,stcsOptions);

  if (!mostInteresting.isEmpty())   return mostInteresting;

  return null;

}

Location: DateTieredCompactionStrategy.java

Content: 

@VisibleForTesting static Target getInitialTarget(long now,long timeUnit,long maxWindowSize){

  return new Target(timeUnit,now / timeUnit,maxWindowSize);

}

Location: DateTieredCompactionStrategy.java

Content: 

private static List<SSTableReader> getSSTablesForSTCS(Collection<SSTableReader> sstables,int minThreshold,int maxThreshold,SizeTieredCompactionStrategyOptions stcsOptions){

  List<SSTableReader> s=SizeTieredCompactionStrategy.mostInterestingBucket(getSTCSBuckets(sstables,stcsOptions),minThreshold,maxThreshold);

  logger.debug("Got sstables {} for STCS from {}",s,sstables);

  return s;

}

Location: DateTieredCompactionStrategy.java

Content: 

private static List<List<SSTableReader>> getSTCSBuckets(Collection<SSTableReader> sstables,SizeTieredCompactionStrategyOptions stcsOptions){

  List<Pair<SSTableReader,Long>> pairs=SizeTieredCompactionStrategy.createSSTableAndLengthPairs(AbstractCompactionStrategy.filterSuspectSSTables(sstables));

  return SizeTieredCompactionStrategy.getBuckets(pairs,stcsOptions.bucketHigh,stcsOptions.bucketLow,stcsOptions.minSSTableSize);

}

Location: DateTieredCompactionStrategy.java

Content: 

/** 

 * DTCS should not group sstables for anticompaction - this can mix new and old data

 */

@Override public Collection<Collection<SSTableReader>> groupSSTablesForAntiCompaction(Collection<SSTableReader> sstablesToGroup){

  Collection<Collection<SSTableReader>> groups=new ArrayList<>(sstablesToGroup.size());

  for (  SSTableReader sstable : sstablesToGroup) {

    groups.add(Collections.singleton(sstable));

  }

  return groups;

}

Location: DateTieredCompactionStrategy.java

Content: 

/** 

 * @param buckets list of buckets, sorted from newest to oldest, from which to return the newest bucket within thresholds.

 * @param minThreshold minimum number of sstables in a bucket to qualify.

 * @param maxThreshold maximum number of sstables to compact at once (the returned bucket will be trimmed down to this).

 * @return a bucket (list) of sstables to compact.

 */

@VisibleForTesting static List<SSTableReader> newestBucket(List<List<SSTableReader>> buckets,int minThreshold,int maxThreshold,long now,long baseTime,long maxWindowSize,SizeTieredCompactionStrategyOptions stcsOptions){

  Target incomingWindow=getInitialTarget(now,baseTime,maxWindowSize);

  for (  List<SSTableReader> bucket : buckets) {

    boolean inFirstWindow=incomingWindow.onTarget(bucket.get(0).getMinTimestamp());

    if (bucket.size() >= minThreshold || (bucket.size() >= 2 && !inFirstWindow)) {

      List<SSTableReader> stcsSSTables=getSSTablesForSTCS(bucket,inFirstWindow ? minThreshold : 2,maxThreshold,stcsOptions);

      if (!stcsSSTables.isEmpty())       return stcsSSTables;

    }

  }

  return Collections.emptyList();

}

Location: DateTieredCompactionStrategy.java

Content: 

public CompactionLogger.Strategy strategyLogger(){

  return new CompactionLogger.Strategy(){

    public JsonNode sstable(    SSTableReader sstable){

      ObjectNode node=JsonNodeFactory.instance.objectNode();

      node.put("min_timestamp",sstable.getMinTimestamp());

      node.put("max_timestamp",sstable.getMaxTimestamp());

      return node;

    }

    public JsonNode options(){

      ObjectNode node=JsonNodeFactory.instance.objectNode();

      TimeUnit resolution=DateTieredCompactionStrategy.this.options.timestampResolution;

      node.put(DateTieredCompactionStrategyOptions.TIMESTAMP_RESOLUTION_KEY,resolution.toString());

      node.put(DateTieredCompactionStrategyOptions.BASE_TIME_KEY,resolution.toSeconds(DateTieredCompactionStrategy.this.options.baseTime));

      node.put(DateTieredCompactionStrategyOptions.MAX_WINDOW_SIZE_KEY,resolution.toSeconds(DateTieredCompactionStrategy.this.options.maxWindowSize));

      return node;

    }

  }

;

}

Location: DateTieredCompactionStrategy.java

Content: 

private void updateEstimatedCompactionsByTasks(List<List<SSTableReader>> tasks){

  int n=0;

  for (  List<SSTableReader> bucket : tasks) {

    for (    List<SSTableReader> stcsBucket : getSTCSBuckets(bucket,stcsOptions))     if (stcsBucket.size() >= cfs.getMinimumCompactionThreshold())     n+=Math.ceil((double)stcsBucket.size() / cfs.getMaximumCompactionThreshold());

  }

  estimatedRemainingTasks=n;

  cfs.getCompactionStrategyManager().compactionLogger.pending(this,n);

}

