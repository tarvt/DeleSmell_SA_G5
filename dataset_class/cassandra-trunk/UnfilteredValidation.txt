Location: UnfilteredValidation.java

Content: 

public static void handleInvalid(TableMetadata metadata,DecoratedKey key,SSTableReader sstable,String invalidContent){

  Config.CorruptedTombstoneStrategy strat=DatabaseDescriptor.getCorruptedTombstoneStrategy();

  String keyString;

  try {

    keyString=metadata.partitionKeyType.getString(key.getKey());

  }

 catch (  Throwable t) {

    keyString="[corrupt token=" + key.getToken() + "]";

  }

  if (strat == Config.CorruptedTombstoneStrategy.exception) {

    String msg=String.format("Key %s in %s.%s is invalid in %s: %s",keyString,metadata.keyspace,metadata.name,sstable,invalidContent);

    sstable.markSuspect();

    throw new CorruptSSTableException(new MarshalException(msg),sstable.getFilename());

  }

 else   if (strat == Config.CorruptedTombstoneStrategy.warn) {

    String msgTemplate=String.format("Key {} in %s.%s is invalid in %s: {}",metadata.keyspace,metadata.name,sstable);

    nospam1m.warn(msgTemplate,keyString,invalidContent);

  }

}

Location: UnfilteredValidation.java

Content: 

public static void maybeValidateUnfiltered(Unfiltered unfiltered,TableMetadata metadata,DecoratedKey key,SSTableReader sstable){

  Config.CorruptedTombstoneStrategy strat=DatabaseDescriptor.getCorruptedTombstoneStrategy();

  if (strat != Config.CorruptedTombstoneStrategy.disabled && unfiltered != null && !unfiltered.isEmpty()) {

    boolean hasInvalidDeletions=false;

    try {

      hasInvalidDeletions=unfiltered.hasInvalidDeletions();

    }

 catch (    Throwable t) {

      nospam1m.error("Could not check if Unfiltered in {} had any invalid deletions",sstable,t);

    }

    if (hasInvalidDeletions) {

      String content;

      try {

        content=unfiltered.toString(metadata,true);

      }

 catch (      Throwable t) {

        content="Could not get string representation: " + t.getMessage();

      }

      handleInvalid(metadata,key,sstable,content);

    }

  }

}

