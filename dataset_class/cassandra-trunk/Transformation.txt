Location: Transformation.java

Content: 

static <E extends BaseIterator>E add(E to,MoreContents add){

  to.add(add);

  return to;

}

Location: Transformation.java

Content: 

static <E extends BaseIterator>E add(E to,Transformation add){

  to.add(add);

  return to;

}

Location: Transformation.java

Content: 

/** 

 * Applied to the  {@code PartitionColumns} of any rows iterator.NOTE: same remark than for applyToDeletion: it is only applied to the first iterator in a sequence of iterators filled by MoreContents.

 */

protected RegularAndStaticColumns applyToPartitionColumns(RegularAndStaticColumns columns){

  return columns;

}

Location: Transformation.java

Content: 

/** 

 * Applied to the partition key of any rows/unfiltered iterator we are applied to

 */

protected DecoratedKey applyToPartitionKey(DecoratedKey key){

  return key;

}

Location: Transformation.java

Content: 

/** 

 * Applied to any rows iterator (partition) we encounter in a partitions iterator

 */

protected I applyToPartition(I partition){

  return partition;

}

Location: Transformation.java

Content: 

public static PartitionIterator apply(PartitionIterator iterator,Transformation<? super RowIterator> transformation){

  return add(mutable(iterator),transformation);

}

Location: Transformation.java

Content: 

public static RowIterator apply(RowIterator iterator,Transformation<?> transformation){

  return add(mutable(iterator),transformation);

}

Location: Transformation.java

Content: 

public static UnfilteredPartitionIterator apply(UnfilteredPartitionIterator iterator,Transformation<? super UnfilteredRowIterator> transformation){

  return add(mutable(iterator),transformation);

}

Location: Transformation.java

Content: 

public static UnfilteredRowIterator apply(UnfilteredRowIterator iterator,Transformation<?> transformation){

  return add(mutable(iterator),transformation);

}

Location: Transformation.java

Content: 

static FilteredPartitions mutable(PartitionIterator iterator){

  return iterator instanceof FilteredPartitions ? (FilteredPartitions)iterator : new FilteredPartitions(iterator);

}

Location: Transformation.java

Content: 

static FilteredRows mutable(RowIterator iterator){

  return iterator instanceof FilteredRows ? (FilteredRows)iterator : new FilteredRows(iterator);

}

Location: Transformation.java

Content: 

static UnfilteredPartitions mutable(UnfilteredPartitionIterator iterator){

  return iterator instanceof UnfilteredPartitions ? (UnfilteredPartitions)iterator : new UnfilteredPartitions(iterator);

}

Location: Transformation.java

Content: 

static UnfilteredRows mutable(UnfilteredRowIterator iterator){

  return iterator instanceof UnfilteredRows ? (UnfilteredRows)iterator : new UnfilteredRows(iterator);

}

Location: Transformation.java

Content: 

/** 

 * Even though this method is sumilar to `mutable`, it supresses the optimisation of avoiding creating an additional wrapping interator object (which both creates an extra object and grows the call stack during the iteration), it should be used with caution. It is useful in cases when the input has to be checked for more contents rather than directly checking if it is stopped. For example, when concatenating two iterators (pseudocode): iter1 = [row(1), row(2), row(3)] iter2 = [row(4), row(5), row(6)] UnfilteredRowIterators.concat(DataLimits.cqlLimits(1).filter(iter1), DataLimits.cqlLimits(1).filter(iter1)) Which should yield two rows: [row(1), row(4)]. Using stacked transformations instead of wrapping would result into returning a single row, since the first iterator will signal the iterator is stopped.

 */

static UnfilteredRows wrapIterator(UnfilteredRowIterator iterator,RegularAndStaticColumns columns){

  return new UnfilteredRows(iterator,columns);

}

