Location: SSTableReaderBuilder.java

Content: 

public SSTableReaderBuilder bf(IFilter bf){

  this.bf=bf;

  return this;

}

Location: SSTableReaderBuilder.java

Content: 

public abstract SSTableReader build();

Location: SSTableReaderBuilder.java

Content: 

/** 

 * Build index summary, first key, last key if  {@code summaryLoaded} is false and recreate bloom filter if{@code recreteBloomFilter} is true by reading through Index.db file.

 * @param recreateBloomFilter true if recreate bloom filter

 * @param summaryLoaded true if index summary, first key and last key are already loaded and not need to build again

 */

void buildSummaryAndBloomFilter(boolean recreateBloomFilter,boolean summaryLoaded,Set<Component> components,StatsMetadata statsMetadata) throws IOException {

  if (!components.contains(Component.PRIMARY_INDEX))   return;

  if (logger.isDebugEnabled())   logger.debug("Attempting to build summary for {}",descriptor);

  try (RandomAccessReader primaryIndex=RandomAccessReader.open(new File(descriptor.filenameFor(Component.PRIMARY_INDEX)))){

    long indexSize=primaryIndex.length();

    long histogramCount=statsMetadata.estimatedPartitionSize.count();

    long estimatedKeys=histogramCount > 0 && !statsMetadata.estimatedPartitionSize.isOverflowed() ? histogramCount : SSTable.estimateRowsFromIndex(primaryIndex,descriptor);

    if (recreateBloomFilter)     bf=FilterFactory.getFilter(estimatedKeys,metadata.params.bloomFilterFpChance);

    try (IndexSummaryBuilder summaryBuilder=summaryLoaded ? null : new IndexSummaryBuilder(estimatedKeys,metadata.params.minIndexInterval,Downsampling.BASE_SAMPLING_LEVEL)){

      long indexPosition;

      while ((indexPosition=primaryIndex.getFilePointer()) != indexSize) {

        ByteBuffer key=ByteBufferUtil.readWithShortLength(primaryIndex);

        RowIndexEntry.Serializer.skip(primaryIndex,descriptor.version);

        DecoratedKey decoratedKey=metadata.partitioner.decorateKey(key);

        if (!summaryLoaded) {

          if (first == null)           first=decoratedKey;

          last=decoratedKey;

        }

        if (recreateBloomFilter)         bf.add(decoratedKey);

        if (!summaryLoaded) {

          summaryBuilder.maybeAddEntry(decoratedKey,indexPosition);

        }

      }

      if (!summaryLoaded)       summary=summaryBuilder.build(metadata.partitioner);

    }

   }

   if (!summaryLoaded) {

    first=SSTable.getMinimalKey(first);

    last=SSTable.getMinimalKey(last);

  }

}

Location: SSTableReaderBuilder.java

Content: 

public SSTableReaderBuilder dfile(FileHandle dfile){

  this.dfile=dfile;

  return this;

}

Location: SSTableReaderBuilder.java

Content: 

public SSTableReaderBuilder ifile(FileHandle ifile){

  this.ifile=ifile;

  return this;

}

Location: SSTableReaderBuilder.java

Content: 

/** 

 * Load bloom filter from Filter.db file.

 * @throws IOException

 */

IFilter loadBloomFilter() throws IOException {

  try (DataInputStream stream=new DataInputStream(new BufferedInputStream(Files.newInputStream(Paths.get(descriptor.filenameFor(Component.FILTER)))))){

    return BloomFilterSerializer.deserialize(stream,descriptor.version.hasOldBfFormat());

  }

 }

Location: SSTableReaderBuilder.java

Content: 

/** 

 * Load index summary, first key and last key from Summary.db file if it exists. if loaded index summary has different index interval from current value stored in schema, then Summary.db file will be deleted and need to be rebuilt.

 */

void loadSummary(){

  File summariesFile=new File(descriptor.filenameFor(Component.SUMMARY));

  if (!summariesFile.exists()) {

    if (logger.isDebugEnabled())     logger.debug("SSTable Summary File {} does not exist",summariesFile.getAbsolutePath());

    return;

  }

  DataInputStream iStream=null;

  try {

    iStream=new DataInputStream(Files.newInputStream(summariesFile.toPath()));

    summary=IndexSummary.serializer.deserialize(iStream,metadata.partitioner,metadata.params.minIndexInterval,metadata.params.maxIndexInterval);

    first=metadata.partitioner.decorateKey(ByteBufferUtil.readWithLength(iStream));

    last=metadata.partitioner.decorateKey(ByteBufferUtil.readWithLength(iStream));

  }

 catch (  IOException e) {

    if (summary != null)     summary.close();

    logger.trace("Cannot deserialize SSTable Summary File {}: {}",summariesFile.getPath(),e.getMessage());

    FileUtils.closeQuietly(iStream);

    FileUtils.deleteWithConfirm(summariesFile);

  }

 finally {

    FileUtils.closeQuietly(iStream);

  }

}

Location: SSTableReaderBuilder.java

Content: 

public SSTableReaderBuilder(Descriptor descriptor,TableMetadataRef metadataRef,long maxDataAge,Set<Component> components,StatsMetadata statsMetadata,SSTableReader.OpenReason openReason,SerializationHeader header){

  this.descriptor=descriptor;

  this.metadataRef=metadataRef;

  this.metadata=metadataRef.get();

  this.maxDataAge=maxDataAge;

  this.components=components;

  this.statsMetadata=statsMetadata;

  this.openReason=openReason;

  this.header=header;

  this.readerFactory=descriptor.getFormat().getReaderFactory();

}

Location: SSTableReaderBuilder.java

Content: 

public SSTableReaderBuilder summary(IndexSummary summary){

  this.summary=summary;

  return this;

}

