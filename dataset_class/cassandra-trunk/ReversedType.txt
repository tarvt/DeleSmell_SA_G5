Location: ReversedType.java

Content: 

@Override public int compareForCQL(ByteBuffer v1,ByteBuffer v2){

  return baseType.compare(v1,v2);

}

Location: ReversedType.java

Content: 

public static <T>ReversedType<T> getInstance(AbstractType<T> baseType){

  ReversedType<T> t=instances.get(baseType);

  return null == t ? instances.computeIfAbsent(baseType,ReversedType::new) : t;

}

Location: ReversedType.java

Content: 

public <V>String getString(V value,ValueAccessor<V> accessor){

  return baseType.getString(value,accessor);

}

Location: ReversedType.java

Content: 

@Override public boolean isReversed(){

  return true;

}

Location: ReversedType.java

Content: 

@Override public boolean isValueCompatibleWith(AbstractType<?> otherType){

  return this.baseType.isValueCompatibleWith(otherType);

}

Location: ReversedType.java

Content: 

@Override public <V>boolean referencesUserType(V name,ValueAccessor<V> accessor){

  return baseType.referencesUserType(name,accessor);

}

Location: ReversedType.java

Content: 

private ReversedType(AbstractType<T> baseType){

  super(ComparisonType.CUSTOM);

  this.baseType=baseType;

}

