Location: Slice.java

Content: 

public ClusteringBound<?> end(){

  return end;

}

Location: Slice.java

Content: 

/** 

 * Returns whether a given clustering or bound is included in this slice.

 * @param comparator the comparator for the table this is a slice of.

 * @param bound the bound to test inclusion of.

 * @return whether {@code bound} is within the bounds of this slice.

 */

public boolean includes(ClusteringComparator comparator,ClusteringPrefix<?> bound){

  return comparator.compare(start,bound) <= 0 && comparator.compare(bound,end) <= 0;

}

Location: Slice.java

Content: 

/** 

 * Given the per-clustering column minimum and maximum value a sstable contains, whether or not this slice potentially intersects that sstable or not.

 * @param comparator the comparator for the table this is a slice of.

 * @param minClusteringValues the smallest values for each clustering column that a sstable contains.

 * @param maxClusteringValues the biggest values for each clustering column that a sstable contains.

 * @return whether the slice might intersects with the sstable having {@code minClusteringValues} and{@code maxClusteringValues}.

 */

public boolean intersects(ClusteringComparator comparator,List<ByteBuffer> minClusteringValues,List<ByteBuffer> maxClusteringValues){

  return start.compareTo(comparator,maxClusteringValues) <= 0 && end.compareTo(comparator,minClusteringValues) >= 0;

}

Location: Slice.java

Content: 

/** 

 * Return whether the slice is empty.

 * @param comparator the comparator to compare the bounds.

 * @return whether the slice formed is empty or not.

 */

public boolean isEmpty(ClusteringComparator comparator){

  return isEmpty(comparator,start(),end());

}

Location: Slice.java

Content: 

/** 

 * Return whether the slice formed by the two provided bound is empty or not.

 * @param comparator the comparator to compare the bounds.

 * @param start the start for the slice to consider. This must be a start bound.

 * @param end the end for the slice to consider. This must be an end bound.

 * @return whether the slice formed by {@code start} and {@code end} isempty or not.

 */

public static boolean isEmpty(ClusteringComparator comparator,ClusteringBound<?> start,ClusteringBound<?> end){

  assert start.isStart() && end.isEnd();

  int cmp=comparator.compare(start,end);

  if (cmp < 0)   return false;

 else   if (cmp > 0)   return true;

 else   return start.isExclusive() || end.isExclusive();

}

Location: Slice.java

Content: 

public static Slice make(Clustering<?> clustering){

  assert clustering != Clustering.STATIC_CLUSTERING;

  return new Slice(ClusteringBound.inclusiveStartOf(clustering),ClusteringBound.inclusiveEndOf(clustering));

}

Location: Slice.java

Content: 

public static Slice make(ClusteringBound<?> start,ClusteringBound<?> end){

  if (start.isBottom() && end.isTop())   return ALL;

  return new Slice(start,end);

}

Location: Slice.java

Content: 

public static Slice make(Clustering<?> start,Clustering<?> end){

  assert start != Clustering.STATIC_CLUSTERING && end != Clustering.STATIC_CLUSTERING;

  return new Slice(ClusteringBound.inclusiveStartOf(start),ClusteringBound.inclusiveEndOf(end));

}

Location: Slice.java

Content: 

public static Slice make(ClusteringComparator comparator,Object... values){

  CBuilder builder=CBuilder.create(comparator);

  for (  Object val : values) {

    if (val instanceof ByteBuffer)     builder.add((ByteBuffer)val);

 else     builder.add(val);

  }

  return new Slice(builder.buildBound(true,true),builder.buildBound(false,true));

}

Location: Slice.java

Content: 

public ClusteringBound<?> open(boolean reversed){

  return reversed ? end : start;

}

Location: Slice.java

Content: 

private Slice(ClusteringBound<?> start,ClusteringBound<?> end){

  assert start.isStart() && end.isEnd();

  this.start=start;

  this.end=end;

}

