Location: ChecksumWriter.java

Content: 

public void appendDirect(ByteBuffer bb,boolean checksumIncrementalResult){

  try {

    ByteBuffer toAppend=bb.duplicate();

    toAppend.mark();

    incrementalChecksum.update(toAppend);

    toAppend.reset();

    int incrementalChecksumValue=(int)incrementalChecksum.getValue();

    incrementalOut.writeInt(incrementalChecksumValue);

    fullChecksum.update(toAppend);

    if (checksumIncrementalResult) {

      ByteBuffer byteBuffer=ByteBuffer.allocate(4);

      byteBuffer.putInt(incrementalChecksumValue);

      assert byteBuffer.arrayOffset() == 0;

      fullChecksum.update(byteBuffer.array(),0,byteBuffer.array().length);

    }

    incrementalChecksum.reset();

  }

 catch (  IOException e) {

    throw new IOError(e);

  }

}

Location: ChecksumWriter.java

Content: 

public ChecksumWriter(DataOutput incrementalOut){

  this.incrementalOut=incrementalOut;

}

Location: ChecksumWriter.java

Content: 

public void writeChunkSize(int length){

  try {

    incrementalOut.writeInt(length);

  }

 catch (  IOException e) {

    throw new IOError(e);

  }

}

Location: ChecksumWriter.java

Content: 

public void writeFullChecksum(@Nonnull File digestFile){

  try (BufferedWriter out=Files.newBufferedWriter(digestFile.toPath(),Charsets.UTF_8)){

    out.write(String.valueOf(fullChecksum.getValue()));

  }

 catch (  IOException e) {

    throw new FSWriteError(e,digestFile);

  }

}

