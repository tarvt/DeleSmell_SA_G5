Location: ImmutableBTreePartition.java

Content: 

protected boolean canHaveShadowedData(){

  return false;

}

Location: ImmutableBTreePartition.java

Content: 

/** 

 * Creates an  {@code ImmutableBTreePartition} holding all the data of the provided iterator.Warning: Note that this method does not close the provided iterator and it is up to the caller to do so.

 * @param iterator the iterator to gather in memory.

 * @return the created partition.

 */

public static ImmutableBTreePartition create(UnfilteredRowIterator iterator){

  return create(iterator,16);

}

Location: ImmutableBTreePartition.java

Content: 

/** 

 * Creates an  {@code ImmutableBTreePartition} holding all the data of the provided iterator.Warning: Note that this method does not close the provided iterator and it is up to the caller to do so.

 * @param iterator the iterator to gather in memory.

 * @param ordered {@code true} if the iterator will return the rows in order, {@code false} otherwise.

 * @return the created partition.

 */

public static ImmutableBTreePartition create(UnfilteredRowIterator iterator,boolean ordered){

  return create(iterator,16,ordered);

}

Location: ImmutableBTreePartition.java

Content: 

/** 

 * Creates an  {@code ImmutableBTreePartition} holding all the data of the provided iterator.Warning: Note that this method does not close the provided iterator and it is up to the caller to do so.

 * @param iterator the iterator to gather in memory.

 * @param initialRowCapacity sizing hint (in rows) to use for the created partition. It should ideallycorrespond or be a good estimation of the number or rows in  {@code iterator}.

 * @return the created partition.

 */

public static ImmutableBTreePartition create(UnfilteredRowIterator iterator,int initialRowCapacity){

  return create(iterator,initialRowCapacity,true);

}

Location: ImmutableBTreePartition.java

Content: 

/** 

 * Creates an  {@code ImmutableBTreePartition} holding all the data of the provided iterator.Warning: Note that this method does not close the provided iterator and it is up to the caller to do so.

 * @param iterator the iterator to gather in memory.

 * @param initialRowCapacity sizing hint (in rows) to use for the created partition. It should ideallycorrespond or be a good estimation of the number or rows in  {@code iterator}.

 * @param ordered {@code true} if the iterator will return the rows in order, {@code false} otherwise.

 * @return the created partition.

 */

public static ImmutableBTreePartition create(UnfilteredRowIterator iterator,int initialRowCapacity,boolean ordered){

  return new ImmutableBTreePartition(iterator.metadata(),iterator.partitionKey(),build(iterator,initialRowCapacity,ordered));

}

Location: ImmutableBTreePartition.java

Content: 

protected Holder holder(){

  return holder;

}

Location: ImmutableBTreePartition.java

Content: 

protected ImmutableBTreePartition(TableMetadata metadata,DecoratedKey partitionKey,Holder holder){

  super(partitionKey);

  this.metadata=metadata;

  this.holder=holder;

}

Location: ImmutableBTreePartition.java

Content: 

public ImmutableBTreePartition(TableMetadata metadata,DecoratedKey partitionKey,RegularAndStaticColumns columns,Row staticRow,Object[] tree,DeletionInfo deletionInfo,EncodingStats stats){

  super(partitionKey);

  this.metadata=metadata;

  this.holder=new Holder(columns,tree,deletionInfo,staticRow,stats);

}

