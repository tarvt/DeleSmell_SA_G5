Location: UnfilteredSerializer.java

Content: 

public RangeTombstoneMarker deserializeMarkerBody(DataInputPlus in,SerializationHeader header,ClusteringBoundOrBoundary<?> bound) throws IOException {

  if (header.isForSSTable()) {

    in.readUnsignedVInt();

    in.readUnsignedVInt();

  }

  if (bound.isBoundary())   return new RangeTombstoneBoundaryMarker((ClusteringBoundary<?>)bound,header.readDeletionTime(in),header.readDeletionTime(in));

 else   return new RangeTombstoneBoundMarker((ClusteringBound<?>)bound,header.readDeletionTime(in));

}

Location: UnfilteredSerializer.java

Content: 

/** 

 * Deserialize a single  {@link Unfiltered} from the provided input.<p> <b>WARNING:</b> this can return an empty row because it's possible there is a row serialized, but that row only contains data for dropped columns, see CASSANDRA-13337. But as most code expect rows to not be empty, this isn't meant to be exposed publicly. But as  {@link UnfilteredRowIterator} should not return emptyrows, this mean consumer of this method should make sure to skip said empty rows.

 */

private Unfiltered deserializeOne(DataInputPlus in,SerializationHeader header,DeserializationHelper helper,Row.Builder builder) throws IOException {

  assert builder.isSorted();

  int flags=in.readUnsignedByte();

  if (isEndOfPartition(flags))   return null;

  int extendedFlags=readExtendedFlags(in,flags);

  if (kind(flags) == Unfiltered.Kind.RANGE_TOMBSTONE_MARKER) {

    ClusteringBoundOrBoundary<byte[]> bound=ClusteringBoundOrBoundary.serializer.deserialize(in,helper.version,header.clusteringTypes());

    return deserializeMarkerBody(in,header,bound);

  }

 else {

    if (isStatic(extendedFlags))     throw new IOException("Corrupt flags value for unfiltered partition (isStatic flag set): " + flags);

    builder.newRow(Clustering.serializer.deserialize(in,helper.version,header.clusteringTypes()));

    return deserializeRowBody(in,header,helper,flags,extendedFlags,builder);

  }

}

Location: UnfilteredSerializer.java

Content: 

public Row deserializeRowBody(DataInputPlus in,SerializationHeader header,DeserializationHelper helper,int flags,int extendedFlags,Row.Builder builder) throws IOException {

  try {

    boolean isStatic=isStatic(extendedFlags);

    boolean hasTimestamp=(flags & HAS_TIMESTAMP) != 0;

    boolean hasTTL=(flags & HAS_TTL) != 0;

    boolean hasDeletion=(flags & HAS_DELETION) != 0;

    boolean deletionIsShadowable=(extendedFlags & HAS_SHADOWABLE_DELETION) != 0;

    boolean hasComplexDeletion=(flags & HAS_COMPLEX_DELETION) != 0;

    boolean hasAllColumns=(flags & HAS_ALL_COLUMNS) != 0;

    Columns headerColumns=header.columns(isStatic);

    if (header.isForSSTable()) {

      in.readUnsignedVInt();

      in.readUnsignedVInt();

    }

    LivenessInfo rowLiveness=LivenessInfo.EMPTY;

    if (hasTimestamp) {

      long timestamp=header.readTimestamp(in);

      int ttl=hasTTL ? header.readTTL(in) : LivenessInfo.NO_TTL;

      int localDeletionTime=hasTTL ? header.readLocalDeletionTime(in) : LivenessInfo.NO_EXPIRATION_TIME;

      rowLiveness=LivenessInfo.withExpirationTime(timestamp,ttl,localDeletionTime);

    }

    builder.addPrimaryKeyLivenessInfo(rowLiveness);

    builder.addRowDeletion(hasDeletion ? new Row.Deletion(header.readDeletionTime(in),deletionIsShadowable) : Row.Deletion.LIVE);

    Columns columns=hasAllColumns ? headerColumns : Columns.serializer.deserializeSubset(headerColumns,in);

    final LivenessInfo livenessInfo=rowLiveness;

    try {

      columns.apply(column -> {

        try {

          if (column.isPlaceholder())           throw new UnknownColumnException("Unknown column " + UTF8Type.instance.getString(column.name.bytes) + " during deserialization");

          if (column.isSimple())           readSimpleColumn(column,in,header,helper,builder,livenessInfo);

 else           readComplexColumn(column,in,header,helper,hasComplexDeletion,builder,livenessInfo);

        }

 catch (        IOException e) {

          throw new WrappedException(e);

        }

      }

);

    }

 catch (    WrappedException e) {

      if (e.getCause() instanceof IOException)       throw (IOException)e.getCause();

      throw e;

    }

    return builder.build();

  }

 catch (  RuntimeException|AssertionError e) {

    throw new IOException("Error building row with data deserialized from " + in,e);

  }

}

Location: UnfilteredSerializer.java

Content: 

public Row deserializeStaticRow(DataInputPlus in,SerializationHeader header,DeserializationHelper helper) throws IOException {

  int flags=in.readUnsignedByte();

  assert !isEndOfPartition(flags) && kind(flags) == Unfiltered.Kind.ROW && isExtended(flags) : flags;

  int extendedFlags=in.readUnsignedByte();

  Row.Builder builder=BTreeRow.sortedBuilder();

  builder.newRow(Clustering.STATIC_CLUSTERING);

  return deserializeRowBody(in,header,helper,flags,extendedFlags,builder);

}

Location: UnfilteredSerializer.java

Content: 

public Unfiltered deserializeTombstonesOnly(FileDataInput in,SerializationHeader header,DeserializationHelper helper) throws IOException {

  while (true) {

    int flags=in.readUnsignedByte();

    if (isEndOfPartition(flags))     return null;

    int extendedFlags=readExtendedFlags(in,flags);

    if (kind(flags) == Unfiltered.Kind.RANGE_TOMBSTONE_MARKER) {

      ClusteringBoundOrBoundary<byte[]> bound=ClusteringBoundOrBoundary.serializer.deserialize(in,helper.version,header.clusteringTypes());

      return deserializeMarkerBody(in,header,bound);

    }

 else {

      assert !isStatic(extendedFlags);

      if ((flags & HAS_DELETION) != 0) {

        assert header.isForSSTable();

        boolean hasTimestamp=(flags & HAS_TIMESTAMP) != 0;

        boolean hasTTL=(flags & HAS_TTL) != 0;

        boolean deletionIsShadowable=(extendedFlags & HAS_SHADOWABLE_DELETION) != 0;

        Clustering<byte[]> clustering=Clustering.serializer.deserialize(in,helper.version,header.clusteringTypes());

        long nextPosition=in.readUnsignedVInt() + in.getFilePointer();

        in.readUnsignedVInt();

        if (hasTimestamp) {

          header.readTimestamp(in);

          if (hasTTL) {

            header.readTTL(in);

            header.readLocalDeletionTime(in);

          }

        }

        Deletion deletion=new Row.Deletion(header.readDeletionTime(in),deletionIsShadowable);

        in.seek(nextPosition);

        return BTreeRow.emptyDeletedRow(clustering,deletion);

      }

 else {

        Clustering.serializer.skip(in,helper.version,header.clusteringTypes());

        skipRowBody(in);

      }

    }

  }

}

Location: UnfilteredSerializer.java

Content: 

/** 

 * Deserialize an  {@link Unfiltered} from the provided input.

 * @param in the input from which to deserialize.

 * @param header serialization header corresponding to the serialized data.

 * @param helper the helper to use for deserialization.

 * @param builder a row builder, passed here so we don't allocate a new one for every new row.

 * @return the deserialized {@link Unfiltered} or {@code null} if we've read the end of a partition. This method isguaranteed to never return empty rows.

 */

public Unfiltered deserialize(DataInputPlus in,SerializationHeader header,DeserializationHelper helper,Row.Builder builder) throws IOException {

  while (true) {

    Unfiltered unfiltered=deserializeOne(in,header,helper,builder);

    if (unfiltered == null)     return null;

    if (!unfiltered.isEmpty())     return unfiltered;

  }

}

Location: UnfilteredSerializer.java

Content: 

public static boolean hasExtendedFlags(Row row){

  return row.isStatic() || row.deletion().isShadowable();

}

Location: UnfilteredSerializer.java

Content: 

public static boolean isEndOfPartition(int flags){

  return (flags & END_OF_PARTITION) != 0;

}

Location: UnfilteredSerializer.java

Content: 

private static boolean isExtended(int flags){

  return (flags & EXTENSION_FLAG) != 0;

}

Location: UnfilteredSerializer.java

Content: 

public static boolean isStatic(int extendedFlags){

  return (extendedFlags & IS_STATIC) != 0;

}

Location: UnfilteredSerializer.java

Content: 

public static Unfiltered.Kind kind(int flags){

  return (flags & IS_MARKER) != 0 ? Unfiltered.Kind.RANGE_TOMBSTONE_MARKER : Unfiltered.Kind.ROW;

}

Location: UnfilteredSerializer.java

Content: 

private void readComplexColumn(ColumnMetadata column,DataInputPlus in,SerializationHeader header,DeserializationHelper helper,boolean hasComplexDeletion,Row.Builder builder,LivenessInfo rowLiveness) throws IOException {

  if (helper.includes(column)) {

    helper.startOfComplexColumn(column);

    if (hasComplexDeletion) {

      DeletionTime complexDeletion=header.readDeletionTime(in);

      if (!helper.isDroppedComplexDeletion(complexDeletion))       builder.addComplexDeletion(column,complexDeletion);

    }

    int count=(int)in.readUnsignedVInt();

    while (--count >= 0) {

      Cell<byte[]> cell=Cell.serializer.deserialize(in,rowLiveness,column,header,helper,ByteArrayAccessor.instance);

      if (helper.includes(cell,rowLiveness) && !helper.isDropped(cell,true))       builder.addCell(cell);

    }

    helper.endOfComplexColumn();

  }

 else {

    skipComplexColumn(in,column,header,hasComplexDeletion);

  }

}

Location: UnfilteredSerializer.java

Content: 

public static int readExtendedFlags(DataInputPlus in,int flags) throws IOException {

  return isExtended(flags) ? in.readUnsignedByte() : 0;

}

Location: UnfilteredSerializer.java

Content: 

private void readSimpleColumn(ColumnMetadata column,DataInputPlus in,SerializationHeader header,DeserializationHelper helper,Row.Builder builder,LivenessInfo rowLiveness) throws IOException {

  if (helper.includes(column)) {

    Cell<byte[]> cell=Cell.serializer.deserialize(in,rowLiveness,column,header,helper,ByteArrayAccessor.instance);

    if (helper.includes(cell,rowLiveness) && !helper.isDropped(cell,false))     builder.addCell(cell);

  }

 else {

    Cell.serializer.skip(in,column,header);

  }

}

Location: UnfilteredSerializer.java

Content: 

private long serializedMarkerBodySize(RangeTombstoneMarker marker,SerializationHeader header,long previousUnfilteredSize,int version){

  long size=0;

  if (header.isForSSTable())   size+=TypeSizes.sizeofUnsignedVInt(previousUnfilteredSize);

  if (marker.isBoundary()) {

    RangeTombstoneBoundaryMarker bm=(RangeTombstoneBoundaryMarker)marker;

    size+=header.deletionTimeSerializedSize(bm.endDeletionTime());

    size+=header.deletionTimeSerializedSize(bm.startDeletionTime());

  }

 else {

    size+=header.deletionTimeSerializedSize(((RangeTombstoneBoundMarker)marker).deletionTime());

  }

  return size;

}

Location: UnfilteredSerializer.java

Content: 

private long serializedRowBodySize(Row row,SerializationHelper helper,long previousUnfilteredSize,int version){

  long size=0;

  SerializationHeader header=helper.header;

  if (header.isForSSTable())   size+=TypeSizes.sizeofUnsignedVInt(previousUnfilteredSize);

  boolean isStatic=row.isStatic();

  LivenessInfo pkLiveness=row.primaryKeyLivenessInfo();

  Row.Deletion deletion=row.deletion();

  boolean hasComplexDeletion=row.hasComplexDeletion();

  boolean hasAllColumns=helper.hasAllColumns(row,isStatic);

  if (!pkLiveness.isEmpty())   size+=header.timestampSerializedSize(pkLiveness.timestamp());

  if (pkLiveness.isExpiring()) {

    size+=header.ttlSerializedSize(pkLiveness.ttl());

    size+=header.localDeletionTimeSerializedSize(pkLiveness.localExpirationTime());

  }

  if (!deletion.isLive())   size+=header.deletionTimeSerializedSize(deletion.time());

  if (!hasAllColumns)   size+=Columns.serializer.serializedSubsetSize(row.columns(),header.columns(isStatic));

  SearchIterator<ColumnMetadata,ColumnMetadata> si=helper.iterator(isStatic);

  return row.accumulate((data,v) -> {

    ColumnMetadata column=si.next(data.column());

    if (column == null)     return v;

    if (data.column.isSimple())     return v + Cell.serializer.serializedSize((Cell<?>)data,column,pkLiveness,header);

 else     return v + sizeOfComplexColumn((ComplexColumnData)data,column,hasComplexDeletion,pkLiveness,header);

  }

,size);

}

Location: UnfilteredSerializer.java

Content: 

public long serializedSizeEndOfPartition(){

  return 1;

}

Location: UnfilteredSerializer.java

Content: 

private long serializedSize(RangeTombstoneMarker marker,SerializationHelper helper,long previousUnfilteredSize,int version){

  assert !helper.header.isForSSTable();

  return 1 + ClusteringBoundOrBoundary.serializer.serializedSize(marker.clustering(),version,helper.header.clusteringTypes()) + serializedMarkerBodySize(marker,helper.header,previousUnfilteredSize,version);

}

Location: UnfilteredSerializer.java

Content: 

private long serializedSize(Row row,SerializationHelper helper,long previousUnfilteredSize,int version){

  long size=1;

  if (hasExtendedFlags(row))   size+=1;

  if (!row.isStatic())   size+=Clustering.serializer.serializedSize(row.clustering(),version,helper.header.clusteringTypes());

  return size + serializedRowBodySize(row,helper,previousUnfilteredSize,version);

}

Location: UnfilteredSerializer.java

Content: 

public long serializedSize(Unfiltered unfiltered,SerializationHelper helper,int version){

  assert !helper.header.isForSSTable();

  return serializedSize(unfiltered,helper,0,version);

}

Location: UnfilteredSerializer.java

Content: 

public long serializedSize(Unfiltered unfiltered,SerializationHelper helper,long previousUnfilteredSize,int version){

  return unfiltered.kind() == Unfiltered.Kind.RANGE_TOMBSTONE_MARKER ? serializedSize((RangeTombstoneMarker)unfiltered,helper,previousUnfilteredSize,version) : serializedSize((Row)unfiltered,helper,previousUnfilteredSize,version);

}

Location: UnfilteredSerializer.java

Content: 

@Inline private void serializeRowBody(Row row,int flags,SerializationHelper helper,DataOutputPlus out) throws IOException {

  boolean isStatic=row.isStatic();

  SerializationHeader header=helper.header;

  Columns headerColumns=header.columns(isStatic);

  LivenessInfo pkLiveness=row.primaryKeyLivenessInfo();

  Row.Deletion deletion=row.deletion();

  if ((flags & HAS_TIMESTAMP) != 0)   header.writeTimestamp(pkLiveness.timestamp(),out);

  if ((flags & HAS_TTL) != 0) {

    header.writeTTL(pkLiveness.ttl(),out);

    header.writeLocalDeletionTime(pkLiveness.localExpirationTime(),out);

  }

  if ((flags & HAS_DELETION) != 0)   header.writeDeletionTime(deletion.time(),out);

  if ((flags & HAS_ALL_COLUMNS) == 0)   Columns.serializer.serializeSubset(row.columns(),headerColumns,out);

  SearchIterator<ColumnMetadata,ColumnMetadata> si=helper.iterator(isStatic);

  try {

    row.apply(cd -> {

      ColumnMetadata column=si.next(cd.column());

      if (column == null)       return;

      try {

        if (cd.column.isSimple())         Cell.serializer.serialize((Cell<?>)cd,column,out,pkLiveness,header);

 else         writeComplexColumn((ComplexColumnData)cd,column,(flags & HAS_COMPLEX_DELETION) != 0,pkLiveness,header,out);

      }

 catch (      IOException e) {

        throw new WrappedException(e);

      }

    }

);

  }

 catch (  WrappedException e) {

    if (e.getCause() instanceof IOException)     throw (IOException)e.getCause();

    throw e;

  }

}

Location: UnfilteredSerializer.java

Content: 

public void serializeStaticRow(Row row,SerializationHelper helper,DataOutputPlus out,int version) throws IOException {

  assert row.isStatic();

  serialize(row,helper,out,0,version);

}

Location: UnfilteredSerializer.java

Content: 

private void serialize(RangeTombstoneMarker marker,SerializationHelper helper,DataOutputPlus out,long previousUnfilteredSize,int version) throws IOException {

  SerializationHeader header=helper.header;

  out.writeByte((byte)IS_MARKER);

  ClusteringBoundOrBoundary.serializer.serialize(marker.clustering(),out,version,header.clusteringTypes());

  if (header.isForSSTable()) {

    out.writeUnsignedVInt(serializedMarkerBodySize(marker,header,previousUnfilteredSize,version));

    out.writeUnsignedVInt(previousUnfilteredSize);

  }

  if (marker.isBoundary()) {

    RangeTombstoneBoundaryMarker bm=(RangeTombstoneBoundaryMarker)marker;

    header.writeDeletionTime(bm.endDeletionTime(),out);

    header.writeDeletionTime(bm.startDeletionTime(),out);

  }

 else {

    header.writeDeletionTime(((RangeTombstoneBoundMarker)marker).deletionTime(),out);

  }

}

Location: UnfilteredSerializer.java

Content: 

private void serialize(Row row,SerializationHelper helper,DataOutputPlus out,long previousUnfilteredSize,int version) throws IOException {

  int flags=0;

  int extendedFlags=0;

  boolean isStatic=row.isStatic();

  SerializationHeader header=helper.header;

  LivenessInfo pkLiveness=row.primaryKeyLivenessInfo();

  Row.Deletion deletion=row.deletion();

  boolean hasComplexDeletion=row.hasComplexDeletion();

  boolean hasAllColumns=helper.hasAllColumns(row,isStatic);

  boolean hasExtendedFlags=hasExtendedFlags(row);

  if (isStatic)   extendedFlags|=IS_STATIC;

  if (!pkLiveness.isEmpty())   flags|=HAS_TIMESTAMP;

  if (pkLiveness.isExpiring())   flags|=HAS_TTL;

  if (!deletion.isLive()) {

    flags|=HAS_DELETION;

    if (deletion.isShadowable())     extendedFlags|=HAS_SHADOWABLE_DELETION;

  }

  if (hasComplexDeletion)   flags|=HAS_COMPLEX_DELETION;

  if (hasAllColumns)   flags|=HAS_ALL_COLUMNS;

  if (hasExtendedFlags)   flags|=EXTENSION_FLAG;

  out.writeByte((byte)flags);

  if (hasExtendedFlags)   out.writeByte((byte)extendedFlags);

  if (!isStatic)   Clustering.serializer.serialize(row.clustering(),out,version,header.clusteringTypes());

  if (header.isForSSTable()) {

    try (DataOutputBuffer dob=DataOutputBuffer.scratchBuffer.get()){

      serializeRowBody(row,flags,helper,dob);

      out.writeUnsignedVInt(dob.position() + TypeSizes.sizeofUnsignedVInt(previousUnfilteredSize));

      out.writeUnsignedVInt(previousUnfilteredSize);

      out.write(dob.getData(),0,dob.getLength());

    }

   }

 else {

    serializeRowBody(row,flags,helper,out);

  }

}

Location: UnfilteredSerializer.java

Content: 

public void serialize(Unfiltered unfiltered,SerializationHelper helper,DataOutputPlus out,int version) throws IOException {

  assert !helper.header.isForSSTable();

  serialize(unfiltered,helper,out,0,version);

}

Location: UnfilteredSerializer.java

Content: 

public void serialize(Unfiltered unfiltered,SerializationHelper helper,DataOutputPlus out,long previousUnfilteredSize,int version) throws IOException {

  if (unfiltered.kind() == Unfiltered.Kind.RANGE_TOMBSTONE_MARKER) {

    serialize((RangeTombstoneMarker)unfiltered,helper,out,previousUnfilteredSize,version);

  }

 else {

    serialize((Row)unfiltered,helper,out,previousUnfilteredSize,version);

  }

}

Location: UnfilteredSerializer.java

Content: 

private long sizeOfComplexColumn(ComplexColumnData data,ColumnMetadata column,boolean hasComplexDeletion,LivenessInfo rowLiveness,SerializationHeader header){

  long size=0;

  if (hasComplexDeletion)   size+=header.deletionTimeSerializedSize(data.complexDeletion());

  size+=TypeSizes.sizeofUnsignedVInt(data.cellsCount());

  for (  Cell<?> cell : data)   size+=Cell.serializer.serializedSize(cell,column,rowLiveness,header);

  return size;

}

Location: UnfilteredSerializer.java

Content: 

private void skipComplexColumn(DataInputPlus in,ColumnMetadata column,SerializationHeader header,boolean hasComplexDeletion) throws IOException {

  if (hasComplexDeletion)   header.skipDeletionTime(in);

  int count=(int)in.readUnsignedVInt();

  while (--count >= 0)   Cell.serializer.skip(in,column,header);

}

Location: UnfilteredSerializer.java

Content: 

public void skipMarkerBody(DataInputPlus in) throws IOException {

  int markerSize=(int)in.readUnsignedVInt();

  in.skipBytesFully(markerSize);

}

Location: UnfilteredSerializer.java

Content: 

public void skipRowBody(DataInputPlus in) throws IOException {

  int rowSize=(int)in.readUnsignedVInt();

  in.skipBytesFully(rowSize);

}

Location: UnfilteredSerializer.java

Content: 

public void skipStaticRow(DataInputPlus in,SerializationHeader header,DeserializationHelper helper) throws IOException {

  int flags=in.readUnsignedByte();

  assert !isEndOfPartition(flags) && kind(flags) == Unfiltered.Kind.ROW && isExtended(flags) : "Flags is " + flags;

  int extendedFlags=in.readUnsignedByte();

  assert isStatic(extendedFlags);

  skipRowBody(in);

}

Location: UnfilteredSerializer.java

Content: 

private void writeComplexColumn(ComplexColumnData data,ColumnMetadata column,boolean hasComplexDeletion,LivenessInfo rowLiveness,SerializationHeader header,DataOutputPlus out) throws IOException {

  if (hasComplexDeletion)   header.writeDeletionTime(data.complexDeletion(),out);

  out.writeUnsignedVInt(data.cellsCount());

  for (  Cell<?> cell : data)   Cell.serializer.serialize(cell,column,out,rowLiveness,header);

}

Location: UnfilteredSerializer.java

Content: 

public void writeEndOfPartition(DataOutputPlus out) throws IOException {

  out.writeByte((byte)1);

}

