Location: AbstractGettableData.java

Content: 

/** 

 * Creates a new AbstractGettableData object.

 * @param protocolVersion the protocol version in which values returned by {@link #getValue} willbe returned. This must be a protocol version supported by this driver. In general, the correct value will be the value returned by  {@code ProtocolOptions#getProtocolVersion}.

 * @throws IllegalArgumentException if {@code protocolVersion} is not a valid protocol version.

 */

AbstractGettableData(ProtocolVersion protocolVersion){

  super(protocolVersion);

}

Location: AbstractGettableData.java

Content: 

/** 

 * {@inheritDoc}

 */

@Override public boolean getBool(String name){

  return getBool(getIndexOf(name));

}

Location: AbstractGettableData.java

Content: 

/** 

 * {@inheritDoc}

 */

@Override public ByteBuffer getBytesUnsafe(String name){

  return getBytesUnsafe(getIndexOf(name));

}

Location: AbstractGettableData.java

Content: 

/** 

 * {@inheritDoc}

 */

@Override public ByteBuffer getBytes(String name){

  return getBytes(getIndexOf(name));

}

Location: AbstractGettableData.java

Content: 

/** 

 * {@inheritDoc}

 */

@Override public byte getByte(String name){

  return getByte(getIndexOf(name));

}

Location: AbstractGettableData.java

Content: 

/** 

 * {@inheritDoc}

 */

@Override public LocalDate getDate(String name){

  return getDate(getIndexOf(name));

}

Location: AbstractGettableData.java

Content: 

/** 

 * {@inheritDoc}

 */

@Override public BigDecimal getDecimal(String name){

  return getDecimal(getIndexOf(name));

}

Location: AbstractGettableData.java

Content: 

/** 

 * {@inheritDoc}

 */

@Override public double getDouble(String name){

  return getDouble(getIndexOf(name));

}

Location: AbstractGettableData.java

Content: 

/** 

 * {@inheritDoc}

 */

@Override public float getFloat(String name){

  return getFloat(getIndexOf(name));

}

Location: AbstractGettableData.java

Content: 

/** 

 * Returns the index corresponding to a given name.

 * @param name the name for which to return the index of.

 * @return the index for the value coressponding to {@code name}.

 * @throws IllegalArgumentException if {@code name} is not valid name for this object.

 */

protected abstract int getIndexOf(String name);

Location: AbstractGettableData.java

Content: 

/** 

 * {@inheritDoc}

 */

@Override public InetAddress getInet(String name){

  return getInet(getIndexOf(name));

}

Location: AbstractGettableData.java

Content: 

/** 

 * {@inheritDoc}

 */

@Override public int getInt(String name){

  return getInt(getIndexOf(name));

}

Location: AbstractGettableData.java

Content: 

/** 

 * {@inheritDoc}

 */

@Override public <T>List<T> getList(String name,Class<T> elementsClass){

  return getList(getIndexOf(name),elementsClass);

}

Location: AbstractGettableData.java

Content: 

/** 

 * {@inheritDoc}

 */

@Override public <T>List<T> getList(String name,TypeToken<T> elementsType){

  return getList(getIndexOf(name),elementsType);

}

Location: AbstractGettableData.java

Content: 

/** 

 * {@inheritDoc}

 */

@Override public long getLong(String name){

  return getLong(getIndexOf(name));

}

Location: AbstractGettableData.java

Content: 

/** 

 * {@inheritDoc}

 */

@Override public <K,V>Map<K,V> getMap(String name,Class<K> keysClass,Class<V> valuesClass){

  return getMap(getIndexOf(name),keysClass,valuesClass);

}

Location: AbstractGettableData.java

Content: 

/** 

 * {@inheritDoc}

 */

@Override public <K,V>Map<K,V> getMap(String name,TypeToken<K> keysType,TypeToken<V> valuesType){

  return getMap(getIndexOf(name),keysType,valuesType);

}

Location: AbstractGettableData.java

Content: 

/** 

 * {@inheritDoc}

 */

@Override public Object getObject(String name){

  return getObject(getIndexOf(name));

}

Location: AbstractGettableData.java

Content: 

/** 

 * {@inheritDoc}

 */

@Override public <T>Set<T> getSet(String name,Class<T> elementsClass){

  return getSet(getIndexOf(name),elementsClass);

}

Location: AbstractGettableData.java

Content: 

/** 

 * {@inheritDoc}

 */

@Override public <T>Set<T> getSet(String name,TypeToken<T> elementsType){

  return getSet(getIndexOf(name),elementsType);

}

Location: AbstractGettableData.java

Content: 

/** 

 * {@inheritDoc}

 */

@Override public short getShort(String name){

  return getShort(getIndexOf(name));

}

Location: AbstractGettableData.java

Content: 

/** 

 * {@inheritDoc}

 */

@Override public String getString(String name){

  return getString(getIndexOf(name));

}

Location: AbstractGettableData.java

Content: 

/** 

 * {@inheritDoc}

 */

@Override public Date getTimestamp(String name){

  return getTimestamp(getIndexOf(name));

}

Location: AbstractGettableData.java

Content: 

/** 

 * {@inheritDoc}

 */

@Override public long getTime(String name){

  return getTime(getIndexOf(name));

}

Location: AbstractGettableData.java

Content: 

/** 

 * {@inheritDoc}

 */

@Override public TupleValue getTupleValue(String name){

  return getTupleValue(getIndexOf(name));

}

Location: AbstractGettableData.java

Content: 

/** 

 * {@inheritDoc}

 */

@Override public UDTValue getUDTValue(String name){

  return getUDTValue(getIndexOf(name));

}

Location: AbstractGettableData.java

Content: 

/** 

 * {@inheritDoc}

 */

@Override public UUID getUUID(String name){

  return getUUID(getIndexOf(name));

}

Location: AbstractGettableData.java

Content: 

/** 

 * {@inheritDoc}

 */

@Override public BigInteger getVarint(String name){

  return getVarint(getIndexOf(name));

}

Location: AbstractGettableData.java

Content: 

/** 

 * {@inheritDoc}

 */

@Override public <T>T get(String name,Class<T> targetClass){

  return get(getIndexOf(name),targetClass);

}

Location: AbstractGettableData.java

Content: 

/** 

 * {@inheritDoc}

 */

@Override public <T>T get(String name,TypeCodec<T> codec){

  return get(getIndexOf(name),codec);

}

Location: AbstractGettableData.java

Content: 

/** 

 * {@inheritDoc}

 */

@Override public <T>T get(String name,TypeToken<T> targetType){

  return get(getIndexOf(name),targetType);

}

Location: AbstractGettableData.java

Content: 

/** 

 * {@inheritDoc}

 */

@Override public boolean isNull(String name){

  return isNull(getIndexOf(name));

}

