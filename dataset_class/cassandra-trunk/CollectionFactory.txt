Location: CollectionFactory.java

Content: 

protected final void addColumnMapping(SelectionColumnMapping mapping,ColumnSpecification resultsColumn){

  SelectionColumnMapping tmpMapping=SelectionColumnMapping.newMapping();

  for (  Factory factory : factories)   factory.addColumnMapping(tmpMapping,resultsColumn);

  if (tmpMapping.getMappings().get(resultsColumn).isEmpty())   mapping.addMapping(resultsColumn,(ColumnMetadata)null);

 else   mapping.addMapping(resultsColumn,tmpMapping.getMappings().values());

}

Location: CollectionFactory.java

Content: 

public CollectionFactory(AbstractType<?> type,SelectorFactories factories){

  this.type=type;

  this.factories=factories;

}

Location: CollectionFactory.java

Content: 

protected final AbstractType<?> getReturnType(){

  return type;

}

Location: CollectionFactory.java

Content: 

@Override public final boolean isAggregateSelectorFactory(){

  return factories.doesAggregation();

}

Location: CollectionFactory.java

Content: 

@Override public final boolean isTTLSelectorFactory(){

  return factories.containsTTLSelectorFactory();

}

Location: CollectionFactory.java

Content: 

@Override public final boolean isWritetimeSelectorFactory(){

  return factories.containsWritetimeSelectorFactory();

}

