Location: DecayingEstimatedHistogramReservoir.java

Content: 

private long bucketValue(int index,boolean withDecay){

  long val=0;

  AtomicLongArray bs=withDecay ? decayingBuckets : buckets;

  for (int stripe=0; stripe < nStripes; stripe++)   val+=bs.get(stripedIndex(index,stripe));

  return val;

}

Location: DecayingEstimatedHistogramReservoir.java

Content: 

private static float[] computeTable(int bits){

  float[] table=new float[1 << bits];

  for (int i=1; i < 1 << bits; ++i)   table[i]=(float)slowLog2(ratio(i,bits));

  return table;

}

Location: DecayingEstimatedHistogramReservoir.java

Content: 

/** 

 * Construct a decaying histogram with default number of buckets and without considering zeroes.

 */

public DecayingEstimatedHistogramReservoir(){

  this(DEFAULT_ZERO_CONSIDERATION,DEFAULT_BUCKET_COUNT,DEFAULT_STRIPE_COUNT,Clock.defaultClock());

}

Location: DecayingEstimatedHistogramReservoir.java

Content: 

/** 

 * Construct a decaying histogram with default number of buckets.

 * @param considerZeroes when true, 0-value measurements in a separate bucket, otherwise they will be collected insame bucket as 1-value measurements

 */

public DecayingEstimatedHistogramReservoir(boolean considerZeroes){

  this(considerZeroes,DEFAULT_BUCKET_COUNT,DEFAULT_STRIPE_COUNT,Clock.defaultClock());

}

Location: DecayingEstimatedHistogramReservoir.java

Content: 

/** 

 * Construct a decaying histogram.

 * @param considerZeroes when true, 0-value measurements in a separate bucket, otherwise they will be collected insame bucket as 1-value measurements

 * @param bucketCount number of buckets used to collect measured values

 */

public DecayingEstimatedHistogramReservoir(boolean considerZeroes,int bucketCount,int stripes){

  this(considerZeroes,bucketCount,stripes,Clock.defaultClock());

}

Location: DecayingEstimatedHistogramReservoir.java

Content: 

@VisibleForTesting DecayingEstimatedHistogramReservoir(boolean considerZeroes,int bucketCount,int stripes,Clock clock){

  assert bucketCount <= MAX_BUCKET_COUNT : "bucket count cannot exceed: " + MAX_BUCKET_COUNT;

  if (bucketCount == DEFAULT_BUCKET_COUNT) {

    if (considerZeroes == true) {

      bucketOffsets=DEFAULT_WITH_ZERO_BUCKET_OFFSETS;

    }

 else {

      bucketOffsets=DEFAULT_WITHOUT_ZERO_BUCKET_OFFSETS;

    }

  }

 else {

    bucketOffsets=EstimatedHistogram.newOffsets(bucketCount,considerZeroes);

  }

  nStripes=stripes;

  decayingBuckets=new AtomicLongArray((bucketOffsets.length + 1) * nStripes);

  buckets=new AtomicLongArray((bucketOffsets.length + 1) * nStripes);

  this.clock=clock;

  decayLandmark=clock.getTime();

  int distributionPrime=1;

  for (  int prime : DISTRIBUTION_PRIMES) {

    if (buckets.length() % prime != 0) {

      distributionPrime=prime;

      break;

    }

  }

  this.distributionPrime=distributionPrime;

}

Location: DecayingEstimatedHistogramReservoir.java

Content: 

@VisibleForTesting public DecayingEstimatedHistogramReservoir(Clock clock){

  this(DEFAULT_ZERO_CONSIDERATION,DEFAULT_BUCKET_COUNT,DEFAULT_STRIPE_COUNT,clock);

}

Location: DecayingEstimatedHistogramReservoir.java

Content: 

public static float fastLog12(long v){

  return fastLog2(v) * log2_12_recp;

}

Location: DecayingEstimatedHistogramReservoir.java

Content: 

private static float fastLog2(long v){

  v=max(v,1);

  int highestBitPosition=63 - Long.numberOfLeadingZeros(v);

  v=Long.rotateRight(v,highestBitPosition - TABLE_BITS);

  int index=(int)(v & TABLE_MASK);

  float result=LOG2_TABLE[index];

  result+=highestBitPosition;

  return result;

}

Location: DecayingEstimatedHistogramReservoir.java

Content: 

@VisibleForTesting public static int findIndex(long[] bucketOffsets,long value){

  value=max(value,0);

  int offset=(value > 2 ? 3 : 1) + (int)bucketOffsets[0];

  int firstCandidate=max(0,min(bucketOffsets.length - 1,((int)fastLog12(value)) - offset));

  return value <= bucketOffsets[firstCandidate] ? firstCandidate : firstCandidate + 1;

}

Location: DecayingEstimatedHistogramReservoir.java

Content: 

private double forwardDecayWeight(long now){

  return Math.exp(((now - decayLandmark) / 1000.0) / MEAN_LIFETIME_IN_S);

}

Location: DecayingEstimatedHistogramReservoir.java

Content: 

/** 

 * Returns a snapshot of the decaying values in this reservoir. Non-decaying reservoir will not be included in the snapshot.

 * @return the snapshot

 */

public Snapshot getSnapshot(){

  rescaleIfNeeded();

  return new EstimatedHistogramReservoirSnapshot(this);

}

Location: DecayingEstimatedHistogramReservoir.java

Content: 

/** 

 * @return true if this histogram has overflowed -- that is, a value larger than our largest bucket could bound was added

 */

@VisibleForTesting boolean isOverflowed(){

  return bucketValue(bucketOffsets.length,true) > 0;

}

Location: DecayingEstimatedHistogramReservoir.java

Content: 

private boolean needRescale(long now){

  return (now - decayLandmark) > LANDMARK_RESET_INTERVAL_IN_MS;

}

Location: DecayingEstimatedHistogramReservoir.java

Content: 

private static double ratio(int i,int bits){

  return Float.intBitsToFloat((127 << 23) | (i << (23 - bits)));

}

Location: DecayingEstimatedHistogramReservoir.java

Content: 

/** 

 * Replaces current internal values with the given one from a Snapshot. This method is NOT thread safe, values added at the same time to this reservoir using methods such as update may lose their data

 */

public void rebase(EstimatedHistogramReservoirSnapshot snapshot){

  if (size() != snapshot.decayingBuckets.length) {

    throw new IllegalStateException("Unable to merge two DecayingEstimatedHistogramReservoirs with different bucket sizes");

  }

  for (int i=0; i < bucketOffsets.length; i++) {

    if (bucketOffsets[i] != snapshot.bucketOffsets[i]) {

      throw new IllegalStateException("Merge is only supported with equal bucketOffsets");

    }

  }

  this.decayLandmark=snapshot.snapshotLandmark;

  for (int i=0; i < size(); i++) {

    decayingBuckets.set(stripedIndex(i,0),snapshot.decayingBuckets[i]);

    buckets.set(stripedIndex(i,0),snapshot.values[i]);

    for (int stripe=1; stripe < nStripes; stripe++) {

      decayingBuckets.set(stripedIndex(i,stripe),0);

      buckets.set(stripedIndex(i,stripe),0);

    }

  }

}

Location: DecayingEstimatedHistogramReservoir.java

Content: 

private void rescaleIfNeeded(){

  rescaleIfNeeded(clock.getTime());

}

Location: DecayingEstimatedHistogramReservoir.java

Content: 

private void rescaleIfNeeded(long now){

  if (needRescale(now)) {

    if (rescaling.compareAndSet(false,true)) {

      try {

        rescale(now);

      }

  finally {

        decayLandmark=now;

        rescaling.set(false);

      }

    }

  }

}

Location: DecayingEstimatedHistogramReservoir.java

Content: 

private void rescale(long now){

  final double rescaleFactor=forwardDecayWeight(now);

  for (int i=0; i < decayingBuckets.length(); i++) {

    long newValue=Math.round(decayingBuckets.get(i) / rescaleFactor);

    decayingBuckets.set(i,newValue);

  }

}

Location: DecayingEstimatedHistogramReservoir.java

Content: 

private static double slowLog2(double v){

  return Math.log(v) / Math.log(2);

}

Location: DecayingEstimatedHistogramReservoir.java

Content: 

public int stripeCount(){

  return nStripes;

}

Location: DecayingEstimatedHistogramReservoir.java

Content: 

@VisibleForTesting long stripedBucketValue(int i,boolean withDecay){

  return withDecay ? decayingBuckets.get(i) : buckets.get(i);

}

Location: DecayingEstimatedHistogramReservoir.java

Content: 

public int stripedIndex(int offsetIndex,int stripe){

  return (((offsetIndex * nStripes + stripe) * distributionPrime) % buckets.length());

}

Location: DecayingEstimatedHistogramReservoir.java

Content: 

public void updateBucket(AtomicLongArray buckets,int index,long value){

  int stripe=(int)(Thread.currentThread().getId() & (nStripes - 1));

  buckets.addAndGet(stripedIndex(index,stripe),value);

}

Location: DecayingEstimatedHistogramReservoir.java

Content: 

/** 

 * Increments the count of the bucket closest to n, rounding UP.

 * @param value the data point to add to the histogram

 */

public void update(long value){

  long now=clock.getTime();

  rescaleIfNeeded(now);

  int index=findIndex(bucketOffsets,value);

  updateBucket(decayingBuckets,index,Math.round(forwardDecayWeight(now)));

  updateBucket(buckets,index,1);

}

