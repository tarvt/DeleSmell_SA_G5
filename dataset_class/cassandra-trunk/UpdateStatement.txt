Location: UpdateStatement.java

Content: 

@Override public void addUpdateForKey(PartitionUpdate.Builder updateBuilder,Clustering<?> clustering,UpdateParameters params){

  if (updatesRegularRows()) {

    params.newRow(clustering);

    if (type.isInsert() && !metadata.isCompactTable())     params.addPrimaryKeyLivenessInfo();

    List<Operation> updates=getRegularOperations();

    if (metadata().isCompactTable() && updates.isEmpty()) {

      TableMetadata.CompactTableMetadata metadata=(TableMetadata.CompactTableMetadata)metadata();

      RequestValidations.checkTrue(metadata.hasEmptyCompactValue(),"Column %s is mandatory for this COMPACT STORAGE table",metadata.compactValueColumn);

      updates=Collections.singletonList(new Constants.Setter(metadata.compactValueColumn,EMPTY));

    }

    for (    Operation op : updates)     op.execute(updateBuilder.partitionKey(),params);

    updateBuilder.add(params.buildRow());

  }

  if (updatesStaticRow()) {

    params.newRow(Clustering.STATIC_CLUSTERING);

    for (    Operation op : getStaticOperations())     op.execute(updateBuilder.partitionKey(),params);

    updateBuilder.add(params.buildRow());

  }

}

Location: UpdateStatement.java

Content: 

@Override public void addUpdateForKey(PartitionUpdate.Builder update,Slice slice,UpdateParameters params){

  throw new UnsupportedOperationException();

}

Location: UpdateStatement.java

Content: 

private UpdateStatement(StatementType type,VariableSpecifications bindVariables,TableMetadata metadata,Operations operations,StatementRestrictions restrictions,Conditions conditions,Attributes attrs){

  super(type,bindVariables,metadata,operations,restrictions,conditions,attrs);

}

