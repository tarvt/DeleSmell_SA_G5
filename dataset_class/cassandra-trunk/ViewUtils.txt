Location: ViewUtils.java

Content: 

/** 

 * Calculate the natural endpoint for the view. The view natural endpoint is the endpoint which has the same cardinality as this node in the replication factor. The cardinality is the number at which this node would store a piece of data, given the change in replication factor. If the keyspace's replication strategy is a NetworkTopologyStrategy, we filter the ring to contain only nodes in the local datacenter when calculating cardinality. For example, if we have the following ring: {@code A, T1 -> B, T2 -> C, T3 -> A}For the token T1, at RF=1, A would be included, so A's cardinality for T1 is 1. For the token T1, at RF=2, B would be included, so B's cardinality for token T1 is 2. For token T3, at RF = 2, A would be included, so A's cardinality for T3 is 2. For a view whose base token is T1 and whose view token is T3, the pairings between the nodes would be: A writes to C (A's cardinality is 1 for T1, and C's cardinality is 1 for T3) B writes to A (B's cardinality is 2 for T1, and A's cardinality is 2 for T3) C writes to B (C's cardinality is 3 for T1, and B's cardinality is 3 for T3)

 * @return Optional.empty() if this method is called using a base token which does not belong to this replica

 */

public static Optional<Replica> getViewNaturalEndpoint(String keyspaceName,Token baseToken,Token viewToken){

  AbstractReplicationStrategy replicationStrategy=Keyspace.open(keyspaceName).getReplicationStrategy();

  String localDataCenter=DatabaseDescriptor.getEndpointSnitch().getLocalDatacenter();

  EndpointsForToken naturalBaseReplicas=replicationStrategy.getNaturalReplicasForToken(baseToken);

  EndpointsForToken naturalViewReplicas=replicationStrategy.getNaturalReplicasForToken(viewToken);

  Optional<Replica> localReplica=Iterables.tryFind(naturalViewReplicas,Replica::isSelf).toJavaUtil();

  if (localReplica.isPresent())   return localReplica;

  Predicate<Replica> isLocalDC=r -> !(replicationStrategy instanceof NetworkTopologyStrategy) || DatabaseDescriptor.getEndpointSnitch().getDatacenter(r).equals(localDataCenter);

  EndpointsForToken baseReplicas=naturalBaseReplicas.filter(r -> !naturalViewReplicas.endpoints().contains(r.endpoint()) && isLocalDC.test(r));

  EndpointsForToken viewReplicas=naturalViewReplicas.filter(r -> !naturalBaseReplicas.endpoints().contains(r.endpoint()) && isLocalDC.test(r));

  assert baseReplicas.size() == viewReplicas.size() : "Replication strategy should have the same number of endpoints for the base and the view";

  int baseIdx=-1;

  for (int i=0; i < baseReplicas.size(); i++) {

    if (baseReplicas.get(i).isSelf()) {

      baseIdx=i;

      break;

    }

  }

  if (baseIdx < 0)   return Optional.empty();

  return Optional.of(viewReplicas.get(baseIdx));

}

Location: ViewUtils.java

Content: 

private ViewUtils(){

}

