Location: RoleOptions.java

Content: 

/** 

 * Return a  {@code Map<String, String>} representing custom optionsIt is the responsiblity of IRoleManager implementations which support IRoleManager.Option.OPTION to handle type checking and conversion of these values, if present

 * @return map of custom options

 */

@SuppressWarnings("unchecked") public Optional<Map<String,String>> getCustomOptions(){

  return Optional.fromNullable((Map<String,String>)options.get(IRoleManager.Option.OPTIONS));

}

Location: RoleOptions.java

Content: 

/** 

 * Return a boolean value of the login option

 * @return login option value

 */

public Optional<Boolean> getLogin(){

  return Optional.fromNullable((Boolean)options.get(IRoleManager.Option.LOGIN));

}

Location: RoleOptions.java

Content: 

/** 

 * Return the string value of the password option

 * @return password option value

 */

public Optional<String> getPassword(){

  return Optional.fromNullable((String)options.get(IRoleManager.Option.PASSWORD));

}

Location: RoleOptions.java

Content: 

/** 

 * Return a boolean value of the superuser option

 * @return superuser option value

 */

public Optional<Boolean> getSuperuser(){

  return Optional.fromNullable((Boolean)options.get(IRoleManager.Option.SUPERUSER));

}

Location: RoleOptions.java

Content: 

/** 

 * Set a value for a specific option. Throws SyntaxException if the same option is set multiple times

 * @param option

 * @param value

 */

public void setOption(IRoleManager.Option option,Object value){

  if (options.containsKey(option))   throw new SyntaxException(String.format("Multiple definition for property '%s'",option.name()));

  options.put(option,value);

}

