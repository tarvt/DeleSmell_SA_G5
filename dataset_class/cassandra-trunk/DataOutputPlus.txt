Location: DataOutputPlus.java

Content: 

/** 

 * If the implementation supports providing a position, this method returns {@code true}, otherwise  {@code false}.

 */

default boolean hasPosition(){

  return false;

}

Location: DataOutputPlus.java

Content: 

/** 

 * This is more efficient for storing unsigned values, both in storage and CPU burden. Note that it is still possible to store negative values, they just take up more space. So this method doesn't forbid e.g. negative sentinel values in future, if they need to be snuck in. A protocol version bump can then be introduced to improve efficiency.

 */

default void writeUnsignedVInt(long i) throws IOException {

  VIntCoding.writeUnsignedVInt(i,this);

}

Location: DataOutputPlus.java

Content: 

default void writeVInt(long i) throws IOException {

  VIntCoding.writeVInt(i,this);

}

Location: DataOutputPlus.java

Content: 

void write(ByteBuffer buffer) throws IOException ;

Location: DataOutputPlus.java

Content: 

default void write(Memory memory,long offset,long length) throws IOException {

  for (  ByteBuffer buffer : memory.asByteBuffers(offset,length))   write(buffer);

}

