Location: EndpointMessagingVersions.java

Content: 

/** 

 * Returns the messaging-version exactly as announced by the given endpoint.

 */

public int getRaw(InetAddressAndPort endpoint){

  Integer v=versions.get(endpoint);

  if (v == null)   throw new IllegalStateException("getRawVersion() was called without checking knowsVersion() result first");

  return v;

}

Location: EndpointMessagingVersions.java

Content: 

/** 

 * Returns the messaging-version as announced by the given node but capped to the min of the version as announced by the node and  {@link MessagingService#current_version}.

 */

public int get(InetAddressAndPort endpoint){

  Integer v=versions.get(endpoint);

  if (v == null) {

    logger.trace("Assuming current protocol version for {}",endpoint);

    return MessagingService.current_version;

  }

 else   return Math.min(v,MessagingService.current_version);

}

Location: EndpointMessagingVersions.java

Content: 

public int get(String endpoint) throws UnknownHostException {

  return get(InetAddressAndPort.getByName(endpoint));

}

Location: EndpointMessagingVersions.java

Content: 

public boolean knows(InetAddressAndPort endpoint){

  return versions.containsKey(endpoint);

}

Location: EndpointMessagingVersions.java

Content: 

public void reset(InetAddressAndPort endpoint){

  logger.trace("Resetting version for {}",endpoint);

  versions.remove(endpoint);

}

Location: EndpointMessagingVersions.java

Content: 

/** 

 * @return the last version associated with address, or @param version if this is the first such version

 */

public int set(InetAddressAndPort endpoint,int version){

  logger.trace("Setting version {} for {}",version,endpoint);

  Integer v=versions.put(endpoint,version);

  return v == null ? version : v;

}

