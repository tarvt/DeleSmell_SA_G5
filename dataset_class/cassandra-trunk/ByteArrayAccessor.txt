Location: ByteArrayAccessor.java

Content: 

private ByteArrayAccessor(){

}

Location: ByteArrayAccessor.java

Content: 

@Override public int compareByteArrayTo(byte[] left,byte[] right){

  return ByteArrayUtil.compareUnsigned(left,right);

}

Location: ByteArrayAccessor.java

Content: 

@Override public int compareByteBufferTo(ByteBuffer left,byte[] right){

  return ByteBufferUtil.compare(left,right);

}

Location: ByteArrayAccessor.java

Content: 

@Override public <V2>int compare(byte[] left,V2 right,ValueAccessor<V2> accessorR){

  return accessorR.compareByteArrayTo(left,right);

}

Location: ByteArrayAccessor.java

Content: 

@Override public <V2>byte[] convert(V2 src,ValueAccessor<V2> accessor){

  return accessor.toArray(src);

}

Location: ByteArrayAccessor.java

Content: 

@Override public int copyByteArrayTo(byte[] src,int srcOffset,byte[] dst,int dstOffset,int size){

  FastByteOperations.copy(src,srcOffset,dst,dstOffset,size);

  return size;

}

Location: ByteArrayAccessor.java

Content: 

@Override public int copyByteBufferTo(ByteBuffer src,int srcOffset,byte[] dst,int dstOffset,int size){

  FastByteOperations.copy(src,src.position() + srcOffset,dst,dstOffset,size);

  return size;

}

Location: ByteArrayAccessor.java

Content: 

@Override public <V2>int copyTo(byte[] src,int srcOffset,V2 dst,ValueAccessor<V2> dstAccessor,int dstOffset,int size){

  dstAccessor.copyByteArrayTo(src,srcOffset,dst,dstOffset,size);

  return size;

}

Location: ByteArrayAccessor.java

Content: 

@Override public byte[][] createArray(int length){

  return new byte[length][];

}

Location: ByteArrayAccessor.java

Content: 

@Override public void digest(byte[] value,int offset,int size,Digest digest){

  digest.update(value,offset,size);

}

Location: ByteArrayAccessor.java

Content: 

@Override public ObjectFactory<byte[]> factory(){

  return factory;

}

Location: ByteArrayAccessor.java

Content: 

@Override public byte getByte(byte[] value,int offset){

  return value[offset];

}

Location: ByteArrayAccessor.java

Content: 

@Override public int getInt(byte[] value,int offset){

  return ByteArrayUtil.getInt(value,offset);

}

Location: ByteArrayAccessor.java

Content: 

@Override public long getLong(byte[] value,int offset){

  return ByteArrayUtil.getLong(value,offset);

}

Location: ByteArrayAccessor.java

Content: 

@Override public short getShort(byte[] value,int offset){

  return ByteArrayUtil.getShort(value,offset);

}

Location: ByteArrayAccessor.java

Content: 

@Override public int getUnsignedShort(byte[] value,int offset){

  return ByteArrayUtil.getUnsignedShort(value,offset);

}

Location: ByteArrayAccessor.java

Content: 

@Override public int putInt(byte[] dst,int offset,int value){

  ByteArrayUtil.putInt(dst,offset,value);

  return TypeSizes.INT_SIZE;

}

Location: ByteArrayAccessor.java

Content: 

@Override public int putLong(byte[] dst,int offset,long value){

  ByteArrayUtil.putLong(dst,offset,value);

  return TypeSizes.LONG_SIZE;

}

Location: ByteArrayAccessor.java

Content: 

@Override public int putShort(byte[] dst,int offset,short value){

  ByteArrayUtil.putShort(dst,offset,value);

  return TypeSizes.SHORT_SIZE;

}

Location: ByteArrayAccessor.java

Content: 

@Override public int size(byte[] value){

  return value.length;

}

Location: ByteArrayAccessor.java

Content: 

@Override public byte[] toArray(byte[] value){

  return value;

}

Location: ByteArrayAccessor.java

Content: 

@Override public byte[] toArray(byte[] value,int offset,int length){

  if (value == null)   return null;

  if (offset == 0 && length == value.length)   return value;

  return slice(value,offset,length);

}

Location: ByteArrayAccessor.java

Content: 

@Override public ByteBuffer toBuffer(byte[] value){

  if (value == null)   return null;

  return ByteBuffer.wrap(value);

}

Location: ByteArrayAccessor.java

Content: 

@Override public byte toByte(byte[] value){

  return value[0];

}

Location: ByteArrayAccessor.java

Content: 

@Override public double toDouble(byte[] value){

  return ByteArrayUtil.getDouble(value,0);

}

Location: ByteArrayAccessor.java

Content: 

@Override public float toFloat(byte[] value){

  return ByteArrayUtil.getFloat(value,0);

}

Location: ByteArrayAccessor.java

Content: 

@Override public String toHex(byte[] value){

  return Hex.bytesToHex(value);

}

Location: ByteArrayAccessor.java

Content: 

@Override public int toInt(byte[] value){

  return getInt(value,0);

}

Location: ByteArrayAccessor.java

Content: 

@Override public long toLong(byte[] value){

  return getLong(value,0);

}

Location: ByteArrayAccessor.java

Content: 

@Override public short toShort(byte[] value){

  return getShort(value,0);

}

Location: ByteArrayAccessor.java

Content: 

@Override public String toString(byte[] value,Charset charset) throws CharacterCodingException {

  return new String(value,charset);

}

Location: ByteArrayAccessor.java

Content: 

@Override public UUID toUUID(byte[] value){

  return new UUID(getLong(value,0),getLong(value,8));

}

Location: ByteArrayAccessor.java

Content: 

@Override public byte[] valueOf(boolean v){

  return v ? new byte[]{1} : new byte[]{0};

}

Location: ByteArrayAccessor.java

Content: 

@Override public byte[] valueOf(byte v){

  return ByteArrayUtil.bytes(v);

}

Location: ByteArrayAccessor.java

Content: 

@Override public byte[] valueOf(ByteBuffer bytes){

  return ByteBufferUtil.getArray(bytes);

}

Location: ByteArrayAccessor.java

Content: 

@Override public byte[] valueOf(double v){

  return ByteArrayUtil.bytes(v);

}

Location: ByteArrayAccessor.java

Content: 

@Override public byte[] valueOf(float v){

  return ByteArrayUtil.bytes(v);

}

Location: ByteArrayAccessor.java

Content: 

@Override public byte[] valueOf(int v){

  return ByteArrayUtil.bytes(v);

}

Location: ByteArrayAccessor.java

Content: 

@Override public byte[] valueOf(long v){

  return ByteArrayUtil.bytes(v);

}

Location: ByteArrayAccessor.java

Content: 

@Override public byte[] valueOf(short v){

  return ByteArrayUtil.bytes(v);

}

Location: ByteArrayAccessor.java

Content: 

@Override public byte[] valueOf(String s,Charset charset){

  return ByteArrayUtil.bytes(s,charset);

}

Location: ByteArrayAccessor.java

Content: 

@Override public byte[] valueOf(UUID v){

  return UUIDGen.decompose(v);

}

Location: ByteArrayAccessor.java

Content: 

@Override public void write(byte[] value,ByteBuffer out){

  out.put(value);

}

Location: ByteArrayAccessor.java

Content: 

@Override public void write(byte[] value,DataOutputPlus out) throws IOException {

  out.write(value);

}

