Location: SafeMemory.java

Content: 

@Inline protected void checkBounds(long start,long end){

  assert peer != 0 || size == 0 : ref.printDebugInfo();

  super.checkBounds(start,end);

}

Location: SafeMemory.java

Content: 

public Throwable close(Throwable accumulate){

  return ref.ensureReleased(accumulate);

}

Location: SafeMemory.java

Content: 

public SafeMemory copy(long newSize){

  SafeMemory copy=new SafeMemory(newSize);

  copy.put(0,this,0,Math.min(size(),newSize));

  return copy;

}

Location: SafeMemory.java

Content: 

public void free(){

  ref.release();

  peer=0;

}

Location: SafeMemory.java

Content: 

public SafeMemory(long size){

  super(size);

  ref=new Ref<>(null,new MemoryTidy(peer,size));

}

Location: SafeMemory.java

Content: 

private SafeMemory(SafeMemory copyOf){

  super(copyOf);

  ref=copyOf.ref.ref();

  if (peer == 0 && size != 0) {

    ref.ensureReleased();

    throw new IllegalStateException("Cannot create a sharedCopy of a SafeMemory object that has already been closed");

  }

}

