Location: ReplicationFactor.java

Content: 

public static ReplicationFactor fromString(String s){

  if (s.contains("/")) {

    String[] parts=s.split("/");

    Preconditions.checkArgument(parts.length == 2,"Replication factor format is <replicas> or <replicas>/<transient>");

    return new ReplicationFactor(Integer.valueOf(parts[0]),Integer.valueOf(parts[1]));

  }

 else {

    return new ReplicationFactor(Integer.valueOf(s),0);

  }

}

Location: ReplicationFactor.java

Content: 

public static ReplicationFactor fullOnly(int totalReplicas){

  return new ReplicationFactor(totalReplicas);

}

Location: ReplicationFactor.java

Content: 

private ReplicationFactor(int allReplicas){

  this(allReplicas,0);

}

Location: ReplicationFactor.java

Content: 

private ReplicationFactor(int allReplicas,int transientReplicas){

  validate(allReplicas,transientReplicas);

  this.allReplicas=allReplicas;

  this.fullReplicas=allReplicas - transientReplicas;

}

Location: ReplicationFactor.java

Content: 

public String toParseableString(){

  return String.valueOf(allReplicas) + (hasTransientReplicas() ? "/" + transientReplicas() : "");

}

Location: ReplicationFactor.java

Content: 

public int transientReplicas(){

  return allReplicas - fullReplicas;

}

Location: ReplicationFactor.java

Content: 

static void validate(int totalRF,int transientRF){

  Preconditions.checkArgument(transientRF == 0 || DatabaseDescriptor.isTransientReplicationEnabled(),"Transient replication is not enabled on this node");

  Preconditions.checkArgument(totalRF >= 0,"Replication factor must be non-negative, found %s",totalRF);

  Preconditions.checkArgument(transientRF == 0 || transientRF < totalRF,"Transient replicas must be zero, or less than total replication factor. For %s/%s",totalRF,transientRF);

  if (transientRF > 0) {

    Preconditions.checkArgument(DatabaseDescriptor.getNumTokens() == 1,"Transient nodes are not allowed with multiple tokens");

    Stream<InetAddressAndPort> endpoints=Stream.concat(Gossiper.instance.getLiveMembers().stream(),Gossiper.instance.getUnreachableMembers().stream());

    List<InetAddressAndPort> badVersionEndpoints=endpoints.filter(Predicates.not(FBUtilities.getBroadcastAddressAndPort()::equals)).filter(endpoint -> Gossiper.instance.getReleaseVersion(endpoint) != null && Gossiper.instance.getReleaseVersion(endpoint).major < 4).collect(Collectors.toList());

    if (!badVersionEndpoints.isEmpty())     throw new AssertionError("Transient replication is not supported in mixed version clusters with nodes < 4.0. Bad nodes: " + badVersionEndpoints);

  }

 else   if (transientRF < 0) {

    throw new AssertionError(String.format("Amount of transient nodes should be strictly positive, but was: '%d'",transientRF));

  }

}

Location: ReplicationFactor.java

Content: 

public static ReplicationFactor withTransient(int totalReplicas,int transientReplicas){

  return new ReplicationFactor(totalReplicas,transientReplicas);

}

