Location: TupleType.java

Content: 

private <T>boolean allRemainingComponentsAreNull(T v,ValueAccessor<T> accessor,int offset){

  while (!accessor.isEmptyFromOffset(v,offset)) {

    int size=accessor.getInt(v,offset);

    offset+=TypeSizes.INT_SIZE;

    if (size >= 0)     return false;

  }

  return true;

}

Location: TupleType.java

Content: 

public List<AbstractType<?>> allTypes(){

  return types;

}

Location: TupleType.java

Content: 

public static ByteBuffer buildValue(ByteBuffer[] components){

  return buildValue(ByteBufferAccessor.instance,components);

}

Location: TupleType.java

Content: 

public static <V>V buildValue(ValueAccessor<V> accessor,V[] components){

  int totalLength=0;

  for (  V component : components)   totalLength+=4 + (component == null ? 0 : accessor.size(component));

  int offset=0;

  V result=accessor.allocate(totalLength);

  for (  V component : components) {

    if (component == null) {

      offset+=accessor.putInt(result,offset,-1);

    }

 else {

      offset+=accessor.putInt(result,offset,accessor.size(component));

      offset+=accessor.copyTo(component,0,result,accessor,offset,accessor.size(component));

    }

  }

  return result;

}

Location: TupleType.java

Content: 

/** 

 * Return  {@code true} if this tuple type contains the given tuple type, and {@code false}otherwise. <p>A tuple type is said to contain another one if the latter has fewer components than the former, but all of them are of the same type. E.g. the type  {@code tuple<int, text>} iscontained by the type  {@code tuple<int, text, double>}. <p>A contained type can be seen as a "partial" view of a containing type, where the missing components are supposed to be  {@code null}.

 * @param other the tuple type to compare against the current one

 * @return {@code true} if this tuple type contains the given tuple type, and {@code false}otherwise.

 */

public boolean contains(TupleType other){

  if (this.equals(other))   return true;

  if (other.types.size() > this.types.size())   return false;

  return types.subList(0,other.types.size()).equals(other.types);

}

Location: TupleType.java

Content: 

private static List<TypeSerializer<?>> fieldSerializers(List<AbstractType<?>> types){

  int size=types.size();

  List<TypeSerializer<?>> serializers=new ArrayList<>(size);

  for (int i=0; i < size; i++)   serializers.add(types.get(i).getSerializer());

  return serializers;

}

Location: TupleType.java

Content: 

/** 

 * The (immutable) list of types composing this tuple type.

 * @return the (immutable) list of types composing this tuple type.

 */

List<DataType> getComponentTypes(){

  return types;

}

Location: TupleType.java

Content: 

/** 

 * Return the protocol version that has been used to deserialize this tuple type, or that will be used to serialize it. In most cases this should be the version currently in use by the cluster instance that this tuple type belongs to, as reported by  {@code ProtocolOptions#getProtocolVersion()}.

 * @return the protocol version that has been used to deserialize this tuple type, or that will beused to serialize it.

 */

ProtocolVersion getProtocolVersion(){

  return protocolVersion;

}

Location: TupleType.java

Content: 

/** 

 * Returns a new empty value for this tuple type.

 * @return an empty (with all component to {@code null}) value for this user type definition.

 */

public TupleValue newValue(){

  return new TupleValue(this);

}

Location: TupleType.java

Content: 

/** 

 * Returns a new value for this tuple type that uses the provided values for the components. <p>The numbers of values passed to this method must correspond to the number of components in this tuple type. The  {@code i}th parameter value will then be assigned to the  {@code i}th component of the resulting tuple value.

 * @param values the values to use for the component of the resulting tuple.

 * @return a new tuple values based on the provided values.

 * @throws IllegalArgumentException if the number of {@code values} provided does not correspondto the number of components in this tuple type.

 * @throws InvalidTypeException     if any of the provided value is not of the correct type for thecomponent.

 */

public TupleValue newValue(Object... values){

  if (values.length != types.size())   throw new IllegalArgumentException(String.format("Invalid number of values. Expecting %d but got %d",types.size(),values.length));

  TupleValue t=newValue();

  for (int i=0; i < values.length; i++) {

    DataType dataType=types.get(i);

    if (values[i] == null)     t.setValue(i,null);

 else     t.setValue(i,codecRegistry.codecFor(dataType,values[i]).serialize(values[i],protocolVersion));

  }

  return t;

}

Location: TupleType.java

Content: 

/** 

 * Creates a "disconnected" tuple type (<b>you should prefer  {@code Metadata#newTupleType(DataType...) cluster.getMetadata().newTupleType(...)} wheneverpossible</b>). <p>This method is only exposed for situations where you don't have a  {@code Cluster} instanceavailable. If you create a type with this method and use it with a  {@code Cluster} later, youwon't be able to set tuple fields with custom codecs registered against the cluster, or you might get errors if the protocol versions don't match.

 * @param protocolVersion the protocol version to use.

 * @param codecRegistry   the codec registry to use.

 * @param types           the types for the tuple type.

 * @return the newly created tuple type.

 */

public static TupleType of(ProtocolVersion protocolVersion,CodecRegistry codecRegistry,DataType... types){

  return new TupleType(Arrays.asList(types),protocolVersion,codecRegistry);

}

Location: TupleType.java

Content: 

public TupleType(List<AbstractType<?>> types){

  this(types,true);

}

Location: TupleType.java

Content: 

protected TupleType(List<AbstractType<?>> types,boolean freezeInner){

  super(ComparisonType.CUSTOM);

  if (freezeInner)   this.types=Lists.newArrayList(transform(types,AbstractType::freeze));

 else   this.types=types;

  this.serializer=new TupleSerializer(fieldSerializers(types));

}

Location: TupleType.java

Content: 

TupleType(List<DataType> types,ProtocolVersion protocolVersion,CodecRegistry codecRegistry){

  super(DataType.Name.TUPLE);

  this.types=ImmutableList.copyOf(types);

  this.protocolVersion=protocolVersion;

  this.codecRegistry=codecRegistry;

}

Location: TupleType.java

Content: 

public AbstractType<?> type(int i){

  return types.get(i);

}

