Location: SSTableWriter.java

Content: 

public final void abort(){

  txnProxy.abort();

}

Location: SSTableWriter.java

Content: 

private static Set<Component> components(TableMetadata metadata){

  Set<Component> components=new HashSet<Component>(Arrays.asList(Component.DATA,Component.PRIMARY_INDEX,Component.STATS,Component.SUMMARY,Component.TOC,Component.DIGEST));

  if (metadata.params.bloomFilterFpChance < 1.0)   components.add(Component.FILTER);

  if (metadata.params.compression.isEnabled()) {

    components.add(Component.COMPRESSION_INFO);

  }

 else {

    components.add(Component.CRC);

  }

  return components;

}

Location: SSTableWriter.java

Content: 

public static SSTableWriter create(Descriptor descriptor,long keyCount,long repairedAt,UUID pendingRepair,boolean isTransient,int sstableLevel,SerializationHeader header,Collection<Index> indexes,LifecycleNewTracker lifecycleNewTracker){

  TableMetadataRef metadata=Schema.instance.getTableMetadataRef(descriptor);

  return create(metadata,descriptor,keyCount,repairedAt,pendingRepair,isTransient,sstableLevel,header,indexes,lifecycleNewTracker);

}

Location: SSTableWriter.java

Content: 

@VisibleForTesting public static SSTableWriter create(Descriptor descriptor,long keyCount,long repairedAt,UUID pendingRepair,boolean isTransient,SerializationHeader header,Collection<Index> indexes,LifecycleNewTracker lifecycleNewTracker){

  return create(descriptor,keyCount,repairedAt,pendingRepair,isTransient,0,header,indexes,lifecycleNewTracker);

}

Location: SSTableWriter.java

Content: 

public static SSTableWriter create(Descriptor descriptor,Long keyCount,Long repairedAt,UUID pendingRepair,boolean isTransient,TableMetadataRef metadata,MetadataCollector metadataCollector,SerializationHeader header,Collection<Index> indexes,LifecycleNewTracker lifecycleNewTracker){

  Factory writerFactory=descriptor.getFormat().getWriterFactory();

  return writerFactory.open(descriptor,keyCount,repairedAt,pendingRepair,isTransient,metadata,metadataCollector,header,observers(descriptor,indexes,lifecycleNewTracker.opType()),lifecycleNewTracker);

}

Location: SSTableWriter.java

Content: 

public static SSTableWriter create(TableMetadataRef metadata,Descriptor descriptor,long keyCount,long repairedAt,UUID pendingRepair,boolean isTransient,int sstableLevel,SerializationHeader header,Collection<Index> indexes,LifecycleNewTracker lifecycleNewTracker){

  MetadataCollector collector=new MetadataCollector(metadata.get().comparator).sstableLevel(sstableLevel);

  return create(descriptor,keyCount,repairedAt,pendingRepair,isTransient,metadata,collector,header,indexes,lifecycleNewTracker);

}

Location: SSTableWriter.java

Content: 

protected Map<MetadataType,MetadataComponent> finalizeMetadata(){

  return metadataCollector.finalizeMetadata(getPartitioner().getClass().getCanonicalName(),metadata().params.bloomFilterFpChance,repairedAt,pendingRepair,isTransient,header);

}

Location: SSTableWriter.java

Content: 

private static Collection<SSTableFlushObserver> observers(Descriptor descriptor,Collection<Index> indexes,OperationType operationType){

  if (indexes == null)   return Collections.emptyList();

  List<SSTableFlushObserver> observers=new ArrayList<>(indexes.size());

  for (  Index index : indexes) {

    SSTableFlushObserver observer=index.getFlushObserver(descriptor,operationType);

    if (observer != null) {

      observer.begin();

      observers.add(observer);

    }

  }

  return ImmutableList.copyOf(observers);

}

Location: SSTableWriter.java

Content: 

public static void rename(Descriptor tmpdesc,Descriptor newdesc,Set<Component> components){

  for (  Component component : Sets.difference(components,Sets.newHashSet(Component.DATA,Component.SUMMARY))) {

    FileUtils.renameWithConfirm(tmpdesc.filenameFor(component),newdesc.filenameFor(component));

  }

  FileUtils.renameWithConfirm(tmpdesc.filenameFor(Component.DATA),newdesc.filenameFor(Component.DATA));

  FileUtils.renameWithOutConfirm(tmpdesc.filenameFor(Component.SUMMARY),newdesc.filenameFor(Component.SUMMARY));

}

Location: SSTableWriter.java

Content: 

public SSTableWriter setMaxDataAge(long maxDataAge){

  this.maxDataAge=maxDataAge;

  return this;

}

Location: SSTableWriter.java

Content: 

public SSTableWriter setRepairedAt(long repairedAt){

  if (repairedAt > 0)   this.repairedAt=repairedAt;

  return this;

}

Location: SSTableWriter.java

Content: 

protected SSTableWriter(Descriptor descriptor,long keyCount,long repairedAt,UUID pendingRepair,boolean isTransient,TableMetadataRef metadata,MetadataCollector metadataCollector,SerializationHeader header,Collection<SSTableFlushObserver> observers){

  super(descriptor,components(metadata.get()),metadata,DatabaseDescriptor.getDiskOptimizationStrategy());

  this.keyCount=keyCount;

  this.repairedAt=repairedAt;

  this.pendingRepair=pendingRepair;

  this.isTransient=isTransient;

  this.metadataCollector=metadataCollector;

  this.header=header;

  this.rowIndexEntrySerializer=descriptor.version.getSSTableFormat().getIndexSerializer(metadata.get(),descriptor.version,header);

  this.observers=observers == null ? Collections.emptySet() : observers;

}

Location: SSTableWriter.java

Content: 

protected StatsMetadata statsMetadata(){

  return (StatsMetadata)finalizeMetadata().get(MetadataType.STATS);

}

