Location: FunctionResource.java

Content: 

private String argListAsString(){

  return Joiner.on("^").join(argTypes);

}

Location: FunctionResource.java

Content: 

private static List<AbstractType<?>> argsListFromString(String s){

  List<AbstractType<?>> argTypes=new ArrayList<>();

  for (  String type : Splitter.on("^").omitEmptyStrings().trimResults().split(s))   argTypes.add(TypeParser.parse(type));

  return argTypes;

}

Location: FunctionResource.java

Content: 

public int compareTo(FunctionResource o){

  return this.name.compareTo(o.name);

}

Location: FunctionResource.java

Content: 

public static FunctionResource functionFromCql(FunctionName name,List<CQL3Type.Raw> argTypes){

  return functionFromCql(name.keyspace,name.name,argTypes);

}

Location: FunctionResource.java

Content: 

/** 

 * Creates a FunctionResource representing a specific, keyspace-scoped function. This variant is used to create an instance during parsing of a CQL statement. It includes transposition of the arg types from CQL types to AbstractType implementations

 * @param keyspace the keyspace in which the function is scoped

 * @param name     name of the function.

 * @param argTypes the types of the function arguments in raw CQL form

 * @return FunctionResource instance reresenting the function.

 */

public static FunctionResource functionFromCql(String keyspace,String name,List<CQL3Type.Raw> argTypes){

  if (keyspace == null)   throw new InvalidRequestException("In this context function name must be " + "explictly qualified by a keyspace");

  List<AbstractType<?>> abstractTypes=new ArrayList<>(argTypes.size());

  for (  CQL3Type.Raw cqlType : argTypes)   abstractTypes.add(cqlType.prepare(keyspace).getType());

  return new FunctionResource(keyspace,name,abstractTypes);

}

Location: FunctionResource.java

Content: 

private FunctionResource(){

  level=Level.ROOT;

  keyspace=null;

  name=null;

  argTypes=null;

}

Location: FunctionResource.java

Content: 

private FunctionResource(String keyspace){

  level=Level.KEYSPACE;

  this.keyspace=keyspace;

  name=null;

  argTypes=null;

}

Location: FunctionResource.java

Content: 

private FunctionResource(String keyspace,String name,List<AbstractType<?>> argTypes){

  level=Level.FUNCTION;

  this.keyspace=keyspace;

  this.name=name;

  this.argTypes=argTypes;

}

Location: FunctionResource.java

Content: 

public static FunctionResource function(Function function){

  return new FunctionResource(function.name().keyspace,function.name().name,function.argTypes());

}

Location: FunctionResource.java

Content: 

/** 

 * Creates a FunctionResource representing a specific, keyspace-scoped function.

 * @param keyspace the keyspace in which the function is scoped

 * @param name     name of the function.

 * @param argTypes the types of the arguments to the function

 * @return FunctionResource instance reresenting the function.

 */

public static FunctionResource function(String keyspace,String name,List<AbstractType<?>> argTypes){

  return new FunctionResource(keyspace,name,argTypes);

}

Location: FunctionResource.java

Content: 

/** 

 * @return a qualified FunctionName instance for a function-level resource.Throws IllegalStateException if called on the resource which doens't represent a single function.

 */

public FunctionName getFunctionName(){

  if (level != Level.FUNCTION)   throw new IllegalStateException(String.format("%s function resource has no function name",level));

  return new FunctionName(keyspace,name);

}

