Location: Duration.java

Content: 

/** 

 * Adds this duration to the specified time in milliseconds.

 * @param timeInMillis the time to which the duration must be added

 * @return the specified time plus this duration

 */

public long addTo(long timeInMillis){

  return add(timeInMillis,months,days,nanoseconds);

}

Location: Duration.java

Content: 

private static Builder add(Builder builder,long number,String symbol){

  String s=symbol.toLowerCase();

  if (s.equals("y")) {

    return builder.addYears(number);

  }

 else   if (s.equals("mo")) {

    return builder.addMonths(number);

  }

 else   if (s.equals("w")) {

    return builder.addWeeks(number);

  }

 else   if (s.equals("d")) {

    return builder.addDays(number);

  }

 else   if (s.equals("h")) {

    return builder.addHours(number);

  }

 else   if (s.equals("m")) {

    return builder.addMinutes(number);

  }

 else   if (s.equals("s")) {

    return builder.addSeconds(number);

  }

 else   if (s.equals("ms")) {

    return builder.addMillis(number);

  }

 else   if (s.equals("us") || s.equals("µs")) {

    return builder.addMicros(number);

  }

 else   if (s.equals("ns")) {

    return builder.addNanos(number);

  }

  throw new IllegalArgumentException(String.format("Unknown duration symbol '%s'",symbol));

}

Location: Duration.java

Content: 

/** 

 * Adds the specified months, days and nanoseconds to the specified time in milliseconds.

 * @param timeInMillis the time to which the months, days and nanoseconds must be added

 * @param months the number of months to add

 * @param days the number of days to add

 * @param nanoseconds the number of nanoseconds to add

 * @return the specified time plus the months, days and nanoseconds

 */

private static long add(long timeInMillis,int months,int days,long nanoseconds){

  if (months == 0) {

    long durationInMillis=(days * MILLIS_PER_DAY) + (nanoseconds / NANOS_PER_MILLI);

    return timeInMillis + durationInMillis;

  }

  Calendar calendar=Calendar.getInstance(TimeZone.getTimeZone("UTC"),Locale.US);

  calendar.setTimeInMillis(timeInMillis);

  calendar.add(Calendar.MONTH,months);

  calendar.add(Calendar.DAY_OF_MONTH,days);

  calendar.add(Calendar.MILLISECOND,(int)(nanoseconds / NANOS_PER_MILLI));

  return calendar.getTimeInMillis();

}

Location: Duration.java

Content: 

/** 

 * Appends the result of the division to the specified builder if the dividend is not zero.

 * @param builder  the builder to append to

 * @param dividend the dividend

 * @param divisor  the divisor

 * @param unit     the time unit to append after the result of the division

 * @return the remainder of the division

 */

private static long append(StringBuilder builder,long dividend,long divisor,String unit){

  if (dividend == 0 || dividend < divisor)   return dividend;

  builder.append(dividend / divisor).append(unit);

  return dividend % divisor;

}

Location: Duration.java

Content: 

private Duration(int months,int days,long nanoseconds){

  if ((months < 0 || days < 0 || nanoseconds < 0) && ((months > 0 || days > 0 || nanoseconds > 0))) {

    throw new IllegalArgumentException(String.format("All values must be either negative or positive, got %d months, %d days, %d nanoseconds",months,days,nanoseconds));

  }

  this.months=months;

  this.days=days;

  this.nanoseconds=nanoseconds;

}

Location: Duration.java

Content: 

/** 

 * Converts a <code>String</code> into a duration. <p>The accepted formats are: <ul> <li>multiple digits followed by a time unit like: 12h30m where the time unit can be: <ul> <li> {@code y}: years <li> {@code m}: months <li> {@code w}: weeks <li> {@code d}: days <li> {@code h}: hours <li> {@code m}: minutes <li> {@code s}: seconds <li> {@code ms}: milliseconds <li> {@code us} or {@code µs}: microseconds <li> {@code ns}: nanoseconds </ul> <li>ISO 8601 format: P[n]Y[n]M[n]DT[n]H[n]M[n]S or P[n]W <li>ISO 8601 alternative format: P[YYYY]-[MM]-[DD]T[hh]:[mm]:[ss] </ul>

 * @param input the <code>String</code> to convert

 * @return a {@link Duration}

 */

public static Duration from(String input){

  boolean isNegative=input.startsWith("-");

  String source=isNegative ? input.substring(1) : input;

  if (source.startsWith("P")) {

    if (source.endsWith("W"))     return parseIso8601WeekFormat(isNegative,source);

    if (source.contains("-"))     return parseIso8601AlternativeFormat(isNegative,source);

    return parseIso8601Format(isNegative,source);

  }

  return parseStandardFormat(isNegative,source);

}

Location: Duration.java

Content: 

/** 

 * Returns the number of days in this duration.

 * @return the number of days in this duration.

 */

public int getDays(){

  return days;

}

Location: Duration.java

Content: 

/** 

 * Returns the number of months in this duration.

 * @return the number of months in this duration.

 */

public int getMonths(){

  return months;

}

Location: Duration.java

Content: 

/** 

 * Returns the number of nanoseconds in this duration.

 * @return the number of months in this duration.

 */

public long getNanoseconds(){

  return nanoseconds;

}

Location: Duration.java

Content: 

private static long groupAsLong(Matcher matcher,int group){

  return Long.parseLong(matcher.group(group));

}

Location: Duration.java

Content: 

/** 

 * Checks if that duration has a day precision (nothing bellow the day level).

 * @return {@code true} if that duration has a day precision, {@code false} otherwise

 */

public boolean hasDayPrecision(){

  return getNanoseconds() == 0;

}

Location: Duration.java

Content: 

/** 

 * Checks if that duration has a millisecond precision (nothing bellow the millisecond level).

 * @return {@code true} if that duration has a millisecond precision, {@code false} otherwise

 */

public boolean hasMillisecondPrecision(){

  return getNanoseconds() % NANOS_PER_MILLI == 0;

}

Location: Duration.java

Content: 

/** 

 * Creates a duration with the given number of months, days and nanoseconds. <p>A duration can be negative. In this case, all the non zero values must be negative.

 * @param months      the number of months

 * @param days        the number of days

 * @param nanoseconds the number of nanoseconds

 * @throws IllegalArgumentException if the values are not all negative or all positive

 */

public static Duration newInstance(int months,int days,long nanoseconds){

  return new Duration(months,days,nanoseconds);

}

Location: Duration.java

Content: 

private static Duration parseIso8601AlternativeFormat(boolean isNegative,String source){

  Matcher matcher=ISO8601_ALTERNATIVE_PATTERN.matcher(source);

  if (!matcher.matches())   throw new IllegalArgumentException(String.format("Unable to convert '%s' to a duration",source));

  return new Builder(isNegative).addYears(groupAsLong(matcher,1)).addMonths(groupAsLong(matcher,2)).addDays(groupAsLong(matcher,3)).addHours(groupAsLong(matcher,4)).addMinutes(groupAsLong(matcher,5)).addSeconds(groupAsLong(matcher,6)).build();

}

Location: Duration.java

Content: 

private static Duration parseIso8601Format(boolean isNegative,String source){

  Matcher matcher=ISO8601_PATTERN.matcher(source);

  if (!matcher.matches())   throw new IllegalArgumentException(String.format("Unable to convert '%s' to a duration",source));

  Builder builder=new Builder(isNegative);

  if (matcher.group(1) != null)   builder.addYears(groupAsLong(matcher,2));

  if (matcher.group(3) != null)   builder.addMonths(groupAsLong(matcher,4));

  if (matcher.group(5) != null)   builder.addDays(groupAsLong(matcher,6));

  if (matcher.group(7) != null) {

    if (matcher.group(8) != null)     builder.addHours(groupAsLong(matcher,9));

    if (matcher.group(10) != null)     builder.addMinutes(groupAsLong(matcher,11));

    if (matcher.group(12) != null)     builder.addSeconds(groupAsLong(matcher,13));

  }

  return builder.build();

}

Location: Duration.java

Content: 

private static Duration parseIso8601WeekFormat(boolean isNegative,String source){

  Matcher matcher=ISO8601_WEEK_PATTERN.matcher(source);

  if (!matcher.matches())   throw new IllegalArgumentException(String.format("Unable to convert '%s' to a duration",source));

  return new Builder(isNegative).addWeeks(groupAsLong(matcher,1)).build();

}

Location: Duration.java

Content: 

private static Duration parseStandardFormat(boolean isNegative,String source){

  Matcher matcher=STANDARD_PATTERN.matcher(source);

  if (!matcher.find())   throw new IllegalArgumentException(String.format("Unable to convert '%s' to a duration",source));

  Builder builder=new Builder(isNegative);

  boolean done;

  do {

    long number=groupAsLong(matcher,1);

    String symbol=matcher.group(2);

    add(builder,number,symbol);

    done=matcher.end() == source.length();

  }

 while (matcher.find());

  if (!done)   throw new IllegalArgumentException(String.format("Unable to convert '%s' to a duration",source));

  return builder.build();

}

Location: Duration.java

Content: 

/** 

 * Substracts this duration from the specified time in milliseconds.

 * @param timeInMillis the time from which the duration must be substracted

 * @return the specified time minus this duration

 */

public long substractFrom(long timeInMillis){

  return add(timeInMillis,-months,-days,-nanoseconds);

}

