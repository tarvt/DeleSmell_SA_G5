Location: ChannelProxy.java

Content: 

public ChannelProxy(ChannelProxy copy){

  super(copy);

  this.filePath=copy.filePath;

  this.channel=copy.channel;

}

Location: ChannelProxy.java

Content: 

public ChannelProxy(File file){

  this(file.getPath(),openChannel(file));

}

Location: ChannelProxy.java

Content: 

public ChannelProxy(String path){

  this(new File(path));

}

Location: ChannelProxy.java

Content: 

public ChannelProxy(String filePath,FileChannel channel){

  super(new Cleanup(filePath,channel));

  this.filePath=filePath;

  this.channel=channel;

}

Location: ChannelProxy.java

Content: 

public String filePath(){

  return filePath;

}

Location: ChannelProxy.java

Content: 

public int getFileDescriptor(){

  return NativeLibrary.getfd(channel);

}

Location: ChannelProxy.java

Content: 

public MappedByteBuffer map(FileChannel.MapMode mode,long position,long size){

  try {

    return channel.map(mode,position,size);

  }

 catch (  IOException e) {

    throw new FSReadError(e,filePath);

  }

}

Location: ChannelProxy.java

Content: 

/** 

 * {@link #sharedCopy()} can not be used if thread will be interruped, as the backing channel will be closed.

 * @return a new channel instance

 */

public final ChannelProxy newChannel(){

  return new ChannelProxy(filePath);

}

Location: ChannelProxy.java

Content: 

public static FileChannel openChannel(File file){

  try {

    return FileChannel.open(file.toPath(),StandardOpenOption.READ);

  }

 catch (  IOException e) {

    throw new RuntimeException(e);

  }

}

Location: ChannelProxy.java

Content: 

public int read(ByteBuffer buffer,long position){

  try {

    return channel.read(buffer,position);

  }

 catch (  IOException e) {

    throw new FSReadError(e,filePath);

  }

}

Location: ChannelProxy.java

Content: 

public long transferTo(long position,long count,WritableByteChannel target){

  try {

    return channel.transferTo(position,count,target);

  }

 catch (  IOException e) {

    throw new FSReadError(e,filePath);

  }

}

