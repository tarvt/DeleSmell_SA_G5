Location: UnfilteredRowIteratorSerializer.java

Content: 

public Header deserializeHeader(TableMetadata metadata,ColumnFilter selection,DataInputPlus in,int version,DeserializationHelper.Flag flag) throws IOException {

  DecoratedKey key=metadata.partitioner.decorateKey(ByteBufferUtil.readWithVIntLength(in));

  int flags=in.readUnsignedByte();

  boolean isReversed=(flags & IS_REVERSED) != 0;

  if ((flags & IS_EMPTY) != 0) {

    SerializationHeader sh=new SerializationHeader(false,metadata,RegularAndStaticColumns.NONE,EncodingStats.NO_STATS);

    return new Header(sh,key,isReversed,true,null,null,0);

  }

  boolean hasPartitionDeletion=(flags & HAS_PARTITION_DELETION) != 0;

  boolean hasStatic=(flags & HAS_STATIC_ROW) != 0;

  boolean hasRowEstimate=(flags & HAS_ROW_ESTIMATE) != 0;

  SerializationHeader header=SerializationHeader.serializer.deserializeForMessaging(in,metadata,selection,hasStatic);

  DeletionTime partitionDeletion=hasPartitionDeletion ? header.readDeletionTime(in) : DeletionTime.LIVE;

  Row staticRow=Rows.EMPTY_STATIC_ROW;

  if (hasStatic)   staticRow=UnfilteredSerializer.serializer.deserializeStaticRow(in,header,new DeserializationHelper(metadata,version,flag));

  int rowEstimate=hasRowEstimate ? (int)in.readUnsignedVInt() : -1;

  return new Header(header,key,isReversed,false,partitionDeletion,staticRow,rowEstimate);

}

Location: UnfilteredRowIteratorSerializer.java

Content: 

public UnfilteredRowIterator deserialize(DataInputPlus in,int version,TableMetadata metadata,ColumnFilter selection,DeserializationHelper.Flag flag) throws IOException {

  return deserialize(in,version,metadata,flag,deserializeHeader(metadata,selection,in,version,flag));

}

Location: UnfilteredRowIteratorSerializer.java

Content: 

public UnfilteredRowIterator deserialize(DataInputPlus in,int version,TableMetadata metadata,DeserializationHelper.Flag flag,Header header) throws IOException {

  if (header.isEmpty)   return EmptyIterators.unfilteredRow(metadata,header.key,header.isReversed);

  final DeserializationHelper helper=new DeserializationHelper(metadata,version,flag);

  final SerializationHeader sHeader=header.sHeader;

  return new AbstractUnfilteredRowIterator(metadata,header.key,header.partitionDeletion,sHeader.columns(),header.staticRow,header.isReversed,sHeader.stats()){

    private final Row.Builder builder=BTreeRow.sortedBuilder();

    protected Unfiltered computeNext(){

      try {

        Unfiltered unfiltered=UnfilteredSerializer.serializer.deserialize(in,sHeader,helper,builder);

        return unfiltered == null ? endOfData() : unfiltered;

      }

 catch (      IOException e) {

        throw new IOError(e);

      }

    }

  }

;

}

Location: UnfilteredRowIteratorSerializer.java

Content: 

public long serializedSize(UnfilteredRowIterator iterator,ColumnFilter selection,int version,int rowEstimate){

  SerializationHeader header=new SerializationHeader(false,iterator.metadata(),iterator.columns(),iterator.stats());

  SerializationHelper helper=new SerializationHelper(header);

  assert rowEstimate >= 0;

  long size=ByteBufferUtil.serializedSizeWithVIntLength(iterator.partitionKey().getKey()) + 1;

  if (iterator.isEmpty())   return size;

  DeletionTime partitionDeletion=iterator.partitionLevelDeletion();

  Row staticRow=iterator.staticRow();

  boolean hasStatic=staticRow != Rows.EMPTY_STATIC_ROW;

  size+=SerializationHeader.serializer.serializedSizeForMessaging(header,selection,hasStatic);

  if (!partitionDeletion.isLive())   size+=header.deletionTimeSerializedSize(partitionDeletion);

  if (hasStatic)   size+=UnfilteredSerializer.serializer.serializedSize(staticRow,helper,version);

  if (rowEstimate >= 0)   size+=TypeSizes.sizeofUnsignedVInt(rowEstimate);

  while (iterator.hasNext())   size+=UnfilteredSerializer.serializer.serializedSize(iterator.next(),helper,version);

  size+=UnfilteredSerializer.serializer.serializedSizeEndOfPartition();

  return size;

}

Location: UnfilteredRowIteratorSerializer.java

Content: 

public void serialize(UnfilteredRowIterator iterator,ColumnFilter selection,DataOutputPlus out,int version) throws IOException {

  serialize(iterator,selection,out,version,-1);

}

Location: UnfilteredRowIteratorSerializer.java

Content: 

public void serialize(UnfilteredRowIterator iterator,ColumnFilter selection,DataOutputPlus out,int version,int rowEstimate) throws IOException {

  SerializationHeader header=new SerializationHeader(false,iterator.metadata(),iterator.columns(),iterator.stats());

  try {

    serialize(iterator,header,selection,out,version,rowEstimate);

  }

 catch (  BufferOverflowException boe) {

    throw new PartitionSerializationException(iterator,boe);

  }

}

Location: UnfilteredRowIteratorSerializer.java

Content: 

private void serialize(UnfilteredRowIterator iterator,SerializationHeader header,ColumnFilter selection,DataOutputPlus out,int version,int rowEstimate) throws IOException {

  assert !header.isForSSTable();

  ByteBufferUtil.writeWithVIntLength(iterator.partitionKey().getKey(),out);

  int flags=0;

  if (iterator.isReverseOrder())   flags|=IS_REVERSED;

  if (iterator.isEmpty()) {

    out.writeByte((byte)(flags | IS_EMPTY));

    return;

  }

  DeletionTime partitionDeletion=iterator.partitionLevelDeletion();

  if (!partitionDeletion.isLive())   flags|=HAS_PARTITION_DELETION;

  Row staticRow=iterator.staticRow();

  boolean hasStatic=staticRow != Rows.EMPTY_STATIC_ROW;

  if (hasStatic)   flags|=HAS_STATIC_ROW;

  if (rowEstimate >= 0)   flags|=HAS_ROW_ESTIMATE;

  out.writeByte((byte)flags);

  SerializationHeader.serializer.serializeForMessaging(header,selection,out,hasStatic);

  SerializationHelper helper=new SerializationHelper(header);

  if (!partitionDeletion.isLive())   header.writeDeletionTime(partitionDeletion,out);

  if (hasStatic)   UnfilteredSerializer.serializer.serialize(staticRow,helper,out,version);

  if (rowEstimate >= 0)   out.writeUnsignedVInt(rowEstimate);

  while (iterator.hasNext())   UnfilteredSerializer.serializer.serialize(iterator.next(),helper,out,version);

  UnfilteredSerializer.serializer.writeEndOfPartition(out);

}

