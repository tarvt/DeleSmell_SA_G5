Location: QueryPlan.java

Content: 

/** 

 * Converts expressions into operation tree (which is currently just a single AND). Operation tree allows us to do a couple of important optimizations namely, group flattening for AND operations (query rewrite), expression bounds checks, "satisfies by" checks for resulting rows with an early exit.

 * @return root of the operations tree.

 */

private Operation analyze(){

  try {

    Operation.Builder and=new Operation.Builder(OperationType.AND,controller);

    controller.getExpressions().forEach(and::add);

    return and.complete();

  }

 catch (  Exception|Error e) {

    controller.finish();

    throw e;

  }

}

Location: QueryPlan.java

Content: 

public UnfilteredPartitionIterator execute(ReadExecutionController executionController) throws RequestTimeoutException {

  return new ResultIterator(analyze(),controller,executionController);

}

Location: QueryPlan.java

Content: 

public QueryPlan(ColumnFamilyStore cfs,ReadCommand command,long executionQuotaMs){

  this.controller=new QueryController(cfs,(PartitionRangeReadCommand)command,executionQuotaMs);

}

