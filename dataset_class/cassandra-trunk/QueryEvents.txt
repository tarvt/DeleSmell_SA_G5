Location: QueryEvents.java

Content: 

public boolean hasListeners(){

  return !listeners.isEmpty();

}

Location: QueryEvents.java

Content: 

@VisibleForTesting public int listenerCount(){

  return listeners.size();

}

Location: QueryEvents.java

Content: 

public void notifyBatchFailure(List<QueryHandler.Prepared> prepared,BatchStatement.Type batchType,List<Object> queryOrIdList,List<List<ByteBuffer>> values,QueryOptions options,QueryState state,Exception cause){

  if (hasListeners()) {

    List<CQLStatement> statements=new ArrayList<>(queryOrIdList.size());

    List<String> queries=new ArrayList<>(queryOrIdList.size());

    if (prepared != null) {

      prepared.forEach(p -> {

        statements.add(p.statement);

        queries.add(p.rawCQLStatement);

      }

);

    }

    try {

      for (      Listener listener : listeners)       listener.batchFailure(batchType,statements,queries,values,options,state,cause);

    }

 catch (    Throwable t) {

      noSpam1m.error("Failed notifying listeners",t);

      JVMStabilityInspector.inspectThrowable(t);

    }

  }

}

Location: QueryEvents.java

Content: 

public void notifyBatchSuccess(BatchStatement.Type batchType,List<? extends CQLStatement> statements,List<String> queries,List<List<ByteBuffer>> values,QueryOptions options,QueryState state,long queryTime,Message.Response response){

  try {

    for (    Listener listener : listeners)     listener.batchSuccess(batchType,statements,queries,values,options,state,queryTime,response);

  }

 catch (  Throwable t) {

    noSpam1m.error("Failed notifying listeners",t);

    JVMStabilityInspector.inspectThrowable(t);

  }

}

Location: QueryEvents.java

Content: 

public void notifyExecuteFailure(QueryHandler.Prepared prepared,QueryOptions options,QueryState state,Exception cause){

  CQLStatement statement=prepared != null ? prepared.statement : null;

  String query=prepared != null ? prepared.rawCQLStatement : null;

  try {

    for (    Listener listener : listeners)     listener.executeFailure(statement,query,options,state,cause);

  }

 catch (  Throwable t) {

    noSpam1m.error("Failed notifying listeners",t);

    JVMStabilityInspector.inspectThrowable(t);

  }

}

Location: QueryEvents.java

Content: 

public void notifyExecuteSuccess(CQLStatement statement,String query,QueryOptions options,QueryState state,long queryTime,Message.Response response){

  try {

    for (    Listener listener : listeners)     listener.executeSuccess(statement,query,options,state,queryTime,response);

  }

 catch (  Throwable t) {

    noSpam1m.error("Failed notifying listeners",t);

    JVMStabilityInspector.inspectThrowable(t);

  }

}

Location: QueryEvents.java

Content: 

public void notifyPrepareFailure(@Nullable CQLStatement statement,String query,QueryState state,Exception cause){

  try {

    for (    Listener listener : listeners)     listener.prepareFailure(statement,query,state,cause);

  }

 catch (  Throwable t) {

    noSpam1m.error("Failed notifying listeners",t);

    JVMStabilityInspector.inspectThrowable(t);

  }

}

Location: QueryEvents.java

Content: 

public void notifyPrepareSuccess(Supplier<QueryHandler.Prepared> preparedProvider,String query,QueryState state,long queryTime,ResultMessage.Prepared response){

  if (hasListeners()) {

    QueryHandler.Prepared prepared=preparedProvider.get();

    if (prepared != null) {

      try {

        for (        Listener listener : listeners)         listener.prepareSuccess(prepared.statement,query,state,queryTime,response);

      }

 catch (      Throwable t) {

        noSpam1m.error("Failed notifying listeners",t);

        JVMStabilityInspector.inspectThrowable(t);

      }

    }

 else {

      notifyPrepareFailure(null,query,state,new RuntimeException("Successfully prepared, but could not find prepared statement for " + response.statementId));

    }

  }

}

Location: QueryEvents.java

Content: 

public void notifyQueryFailure(CQLStatement statement,String query,QueryOptions options,QueryState state,Exception cause){

  try {

    for (    Listener listener : listeners)     listener.queryFailure(statement,query,options,state,cause);

  }

 catch (  Throwable t) {

    noSpam1m.error("Failed notifying listeners",t);

    JVMStabilityInspector.inspectThrowable(t);

  }

}

Location: QueryEvents.java

Content: 

public void notifyQuerySuccess(CQLStatement statement,String query,QueryOptions options,QueryState state,long queryTime,Message.Response response){

  try {

    for (    Listener listener : listeners)     listener.querySuccess(statement,query,options,state,queryTime,response);

  }

 catch (  Throwable t) {

    noSpam1m.error("Failed notifying listeners",t);

    JVMStabilityInspector.inspectThrowable(t);

  }

}

Location: QueryEvents.java

Content: 

public void registerListener(Listener listener){

  listeners.add(listener);

}

Location: QueryEvents.java

Content: 

public void unregisterListener(Listener listener){

  listeners.remove(listener);

}

