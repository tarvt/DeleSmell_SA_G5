Location: AbstractSSTableSimpleWriter.java

Content: 

protected AbstractSSTableSimpleWriter(File directory,TableMetadataRef metadata,RegularAndStaticColumns columns){

  this.metadata=metadata;

  this.directory=directory;

  this.columns=columns;

}

Location: AbstractSSTableSimpleWriter.java

Content: 

private static Descriptor createDescriptor(File directory,final String keyspace,final String columnFamily,final SSTableFormat.Type fmt){

  int maxGen=getNextGeneration(directory,columnFamily);

  return new Descriptor(directory,keyspace,columnFamily,maxGen + 1,fmt);

}

Location: AbstractSSTableSimpleWriter.java

Content: 

protected SSTableTxnWriter createWriter(){

  SerializationHeader header=new SerializationHeader(true,metadata.get(),columns,EncodingStats.NO_STATS);

  if (makeRangeAware)   return SSTableTxnWriter.createRangeAware(metadata,0,ActiveRepairService.UNREPAIRED_SSTABLE,ActiveRepairService.NO_PENDING_REPAIR,false,formatType,0,header);

  return SSTableTxnWriter.create(metadata,createDescriptor(directory,metadata.keyspace,metadata.name,formatType),0,ActiveRepairService.UNREPAIRED_SSTABLE,ActiveRepairService.NO_PENDING_REPAIR,false,0,header,Collections.emptySet());

}

Location: AbstractSSTableSimpleWriter.java

Content: 

private static int getNextGeneration(File directory,final String columnFamily){

  final Set<Descriptor> existing=new HashSet<>();

  directory.listFiles(new FileFilter(){

    public boolean accept(    File file){

      Descriptor desc=SSTable.tryDescriptorFromFilename(file);

      if (desc == null)       return false;

      if (desc.cfname.equals(columnFamily))       existing.add(desc);

      return false;

    }

  }

);

  int maxGen=generation.getAndIncrement();

  for (  Descriptor desc : existing) {

    while (desc.generation > maxGen) {

      maxGen=generation.getAndIncrement();

    }

  }

  return maxGen;

}

Location: AbstractSSTableSimpleWriter.java

Content: 

PartitionUpdate.Builder getUpdateFor(ByteBuffer key) throws IOException {

  return getUpdateFor(metadata.get().partitioner.decorateKey(key));

}

Location: AbstractSSTableSimpleWriter.java

Content: 

protected void setRangeAwareWriting(boolean makeRangeAware){

  this.makeRangeAware=makeRangeAware;

}

Location: AbstractSSTableSimpleWriter.java

Content: 

protected void setSSTableFormatType(SSTableFormat.Type type){

  this.formatType=type;

}

