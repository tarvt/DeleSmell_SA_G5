Location: UnfilteredRowIteratorWithLowerBound.java

Content: 

/** 

 * Whether we can use the clustering values in the stats of the sstable to build the lower bound. <p> Currently, the clustering values of the stats file records for each clustering component the min and max value seen, null excluded. In other words, having a non-null value for a component in those min/max clustering values does _not_ guarantee that there isn't an unfiltered in the sstable whose clustering has either no value for that component (it's a prefix) or a null value. <p> This is problematic as this means we can't in general build a lower bound from those values since the "min" values doesn't actually guarantee minimality. <p> However, we can use those values if we can guarantee that no clustering in the sstable 1) is a true prefix and 2) uses null values. Nat having true prefixes means having no range tombstone markers since rows use {@link Clustering} which is always "full" (all components are always present). As for null values, we happen toonly allow those in compact tables (for backward compatibility), so we can simply exclude those tables. <p> Note that the information we currently have at our disposal make this condition less precise that it could be. In particular,  {@link SSTableReader#mayHaveTombstones} could return {@code true} (making us not use the stats)because of cell tombstone or even expiring cells even if the sstable has no range tombstone markers, even though it's really only markers we want to exclude here (more precisely, as said above, we want to exclude anything whose clustering is not "full", but that's only markers). It wouldn't be very hard to collect whether a sstable has any range tombstone marker however so it's a possible improvement.

 */

private boolean canUseMetadataLowerBound(){

  return !sstable.mayHaveTombstones() && !sstable.metadata().isCompactTable();

}

Location: UnfilteredRowIteratorWithLowerBound.java

Content: 

private static <V>ClusteringBound<V> createInclusiveOpen(boolean isReversed,ClusteringPrefix<V> from){

  return from.accessor().factory().inclusiveOpen(isReversed,from.getRawValues());

}

Location: UnfilteredRowIteratorWithLowerBound.java

Content: 

/** 

 * @return a global lower bound made from the clustering values stored in the sstable metadata, note thatthis currently does not correctly compare tombstone bounds, especially ranges.

 */

private ClusteringBound<?> getMetadataLowerBound(){

  if (!canUseMetadataLowerBound())   return null;

  final StatsMetadata m=sstable.getSSTableMetadata();

  List<ByteBuffer> vals=filter.isReversed() ? m.maxClusteringValues : m.minClusteringValues;

  assert vals.size() <= metadata().comparator.size() : String.format("Unexpected number of clustering values %d, expected %d or fewer for %s",vals.size(),metadata().comparator.size(),sstable.getFilename());

  return ByteBufferAccessor.instance.factory().inclusiveOpen(filter.isReversed(),vals.toArray(new ByteBuffer[vals.size()]));

}

Location: UnfilteredRowIteratorWithLowerBound.java

Content: 

/** 

 * @return the lower bound stored on the index entry for this partition, if available.

 */

private ClusteringBound<?> getPartitionIndexLowerBound(){

  if (!canUseMetadataLowerBound())   maybeInit();

  RowIndexEntry rowIndexEntry=sstable.getCachedPosition(partitionKey(),false);

  if (rowIndexEntry == null || !rowIndexEntry.indexOnHeap())   return null;

  try (RowIndexEntry.IndexInfoRetriever onHeapRetriever=rowIndexEntry.openWithIndex(null)){

    IndexInfo column=onHeapRetriever.columnsIndex(filter.isReversed() ? rowIndexEntry.columnsIndexCount() - 1 : 0);

    ClusteringPrefix<?> lowerBoundPrefix=filter.isReversed() ? column.lastName : column.firstName;

    assert lowerBoundPrefix.getRawValues().length <= metadata().comparator.size() : String.format("Unexpected number of clustering values %d, expected %d or fewer for %s",lowerBoundPrefix.getRawValues().length,metadata().comparator.size(),sstable.getFilename());

    return createInclusiveOpen(filter.isReversed(),lowerBoundPrefix);

  }

 catch (  IOException e) {

    throw new RuntimeException("should never occur",e);

  }

}

Location: UnfilteredRowIteratorWithLowerBound.java

Content: 

@Override protected UnfilteredRowIterator initializeIterator(){

  @SuppressWarnings("resource") UnfilteredRowIterator iter=RTBoundValidator.validate(sstable.iterator(partitionKey(),filter.getSlices(metadata()),selectedColumns,filter.isReversed(),listener),RTBoundValidator.Stage.SSTABLE,false);

  return iter;

}

Location: UnfilteredRowIteratorWithLowerBound.java

Content: 

public Unfiltered lowerBound(){

  if (lowerBound != null)   return makeBound(lowerBound);

  ClusteringBound<?> ret=getPartitionIndexLowerBound();

  return ret != null ? makeBound(ret) : makeBound(getMetadataLowerBound());

}

Location: UnfilteredRowIteratorWithLowerBound.java

Content: 

private Unfiltered makeBound(ClusteringBound<?> bound){

  if (bound == null)   return null;

  if (lowerBound != bound)   lowerBound=bound;

  return new RangeTombstoneBoundMarker(lowerBound,DeletionTime.LIVE);

}

Location: UnfilteredRowIteratorWithLowerBound.java

Content: 

public UnfilteredRowIteratorWithLowerBound(DecoratedKey partitionKey,SSTableReader sstable,ClusteringIndexFilter filter,ColumnFilter selectedColumns,SSTableReadsListener listener){

  super(partitionKey);

  this.sstable=sstable;

  this.filter=filter;

  this.selectedColumns=selectedColumns;

  this.listener=listener;

  this.lowerBound=null;

  this.firstItemRetrieved=false;

}

