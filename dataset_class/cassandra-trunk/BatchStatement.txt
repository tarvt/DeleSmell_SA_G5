Location: BatchStatement.java

Content: 

/** 

 * Creates a new BatchStatement.

 * @param type       type of the batch

 * @param statements the list of statements in the batch

 * @param attrs      additional attributes for statement (CL, timestamp, timeToLive)

 */

public BatchStatement(Type type,VariableSpecifications bindVariables,List<ModificationStatement> statements,Attributes attrs){

  this.type=type;

  this.bindVariables=bindVariables;

  this.statements=statements;

  this.attrs=attrs;

  boolean hasConditions=false;

  MultiTableColumnsBuilder regularBuilder=new MultiTableColumnsBuilder();

  RegularAndStaticColumns.Builder conditionBuilder=RegularAndStaticColumns.builder();

  boolean updateRegular=false;

  boolean updateStatic=false;

  boolean updatesVirtualTables=false;

  for (  ModificationStatement stmt : statements) {

    regularBuilder.addAll(stmt.metadata(),stmt.updatedColumns());

    updateRegular|=stmt.updatesRegularRows();

    updatesVirtualTables|=stmt.isVirtual();

    if (stmt.hasConditions()) {

      hasConditions=true;

      conditionBuilder.addAll(stmt.conditionColumns());

      updateStatic|=stmt.updatesStaticRow();

    }

  }

  this.updatedColumns=regularBuilder.build();

  this.conditionColumns=conditionBuilder.build();

  this.updatesRegularRows=updateRegular;

  this.updatesStaticRow=updateStatic;

  this.hasConditions=hasConditions;

  this.updatesVirtualTables=updatesVirtualTables;

}

Location: BatchStatement.java

Content: 

private ResultMessage executeInternalWithConditions(BatchQueryOptions options,QueryState state){

  Pair<CQL3CasRequest,Set<ColumnMetadata>> p=makeCasRequest(options,state);

  CQL3CasRequest request=p.left;

  Set<ColumnMetadata> columnsWithConditions=p.right;

  String ksName=request.metadata.keyspace;

  String tableName=request.metadata.name;

  long timestamp=options.getTimestamp(state);

  int nowInSeconds=options.getNowInSeconds(state);

  try (RowIterator result=ModificationStatement.casInternal(request,timestamp,nowInSeconds)){

    ResultSet resultSet=ModificationStatement.buildCasResultSet(ksName,tableName,result,columnsWithConditions,true,state,options.forStatement(0));

    return new ResultMessage.Rows(resultSet);

  }

 }

Location: BatchStatement.java

Content: 

private ResultMessage executeInternalWithoutCondition(QueryState queryState,BatchQueryOptions batchOptions,long queryStartNanoTime){

  long timestamp=batchOptions.getTimestamp(queryState);

  int nowInSeconds=batchOptions.getNowInSeconds(queryState);

  for (  IMutation mutation : getMutations(batchOptions,true,timestamp,nowInSeconds,queryStartNanoTime))   mutation.apply();

  return null;

}

Location: BatchStatement.java

Content: 

private ResultMessage executeWithConditions(BatchQueryOptions options,QueryState state,long queryStartNanoTime){

  Pair<CQL3CasRequest,Set<ColumnMetadata>> p=makeCasRequest(options,state);

  CQL3CasRequest casRequest=p.left;

  Set<ColumnMetadata> columnsWithConditions=p.right;

  String ksName=casRequest.metadata.keyspace;

  String tableName=casRequest.metadata.name;

  try (RowIterator result=StorageProxy.cas(ksName,tableName,casRequest.key,casRequest,options.getSerialConsistency(),options.getConsistency(),state.getClientState(),options.getNowInSeconds(state),queryStartNanoTime)){

    return new ResultMessage.Rows(ModificationStatement.buildCasResultSet(ksName,tableName,result,columnsWithConditions,true,state,options.forStatement(0)));

  }

 }

Location: BatchStatement.java

Content: 

private void executeWithoutConditions(List<? extends IMutation> mutations,ConsistencyLevel cl,long queryStartNanoTime) throws RequestExecutionException, RequestValidationException {

  if (mutations.isEmpty())   return;

  verifyBatchSize(mutations);

  verifyBatchType(mutations);

  updatePartitionsPerBatchMetrics(mutations.size());

  boolean mutateAtomic=(isLogged() && mutations.size() > 1);

  StorageProxy.mutateWithTriggers(mutations,cl,mutateAtomic,queryStartNanoTime);

}

Location: BatchStatement.java

Content: 

public ResultMessage execute(QueryState queryState,BatchQueryOptions options,long queryStartNanoTime){

  long timestamp=options.getTimestamp(queryState);

  int nowInSeconds=options.getNowInSeconds(queryState);

  if (options.getConsistency() == null)   throw new InvalidRequestException("Invalid empty consistency level");

  if (options.getSerialConsistency() == null)   throw new InvalidRequestException("Invalid empty serial consistency level");

  if (hasConditions)   return executeWithConditions(options,queryState,queryStartNanoTime);

  if (updatesVirtualTables)   executeInternalWithoutCondition(queryState,options,queryStartNanoTime);

 else   executeWithoutConditions(getMutations(options,false,timestamp,nowInSeconds,queryStartNanoTime),options.getConsistency(),queryStartNanoTime);

  return new ResultMessage.Void();

}

Location: BatchStatement.java

Content: 

private List<? extends IMutation> getMutations(BatchQueryOptions options,boolean local,long batchTimestamp,int nowInSeconds,long queryStartNanoTime){

  Set<String> tablesWithZeroGcGs=null;

  BatchUpdatesCollector collector=new BatchUpdatesCollector(updatedColumns,updatedRows());

  for (int i=0; i < statements.size(); i++) {

    ModificationStatement statement=statements.get(i);

    if (isLogged() && statement.metadata().params.gcGraceSeconds == 0) {

      if (tablesWithZeroGcGs == null)       tablesWithZeroGcGs=new HashSet<>();

      tablesWithZeroGcGs.add(statement.metadata.toString());

    }

    QueryOptions statementOptions=options.forStatement(i);

    long timestamp=attrs.getTimestamp(batchTimestamp,statementOptions);

    statement.addUpdates(collector,statementOptions,local,timestamp,nowInSeconds,queryStartNanoTime);

  }

  if (tablesWithZeroGcGs != null) {

    String suffix=tablesWithZeroGcGs.size() == 1 ? "" : "s";

    NoSpamLogger.log(logger,NoSpamLogger.Level.WARN,1,TimeUnit.MINUTES,LOGGED_BATCH_LOW_GCGS_WARNING,suffix,tablesWithZeroGcGs);

    ClientWarn.instance.warn(MessageFormatter.arrayFormat(LOGGED_BATCH_LOW_GCGS_WARNING,new Object[]{suffix,tablesWithZeroGcGs}).getMessage());

  }

  return collector.toMutations();

}

Location: BatchStatement.java

Content: 

public List<ModificationStatement> getStatements(){

  return statements;

}

Location: BatchStatement.java

Content: 

private boolean isLogged(){

  return type == Type.LOGGED;

}

Location: BatchStatement.java

Content: 

private Pair<CQL3CasRequest,Set<ColumnMetadata>> makeCasRequest(BatchQueryOptions options,QueryState state){

  long batchTimestamp=options.getTimestamp(state);

  int nowInSeconds=options.getNowInSeconds(state);

  DecoratedKey key=null;

  CQL3CasRequest casRequest=null;

  Set<ColumnMetadata> columnsWithConditions=new LinkedHashSet<>();

  for (int i=0; i < statements.size(); i++) {

    ModificationStatement statement=statements.get(i);

    QueryOptions statementOptions=options.forStatement(i);

    long timestamp=attrs.getTimestamp(batchTimestamp,statementOptions);

    List<ByteBuffer> pks=statement.buildPartitionKeyNames(statementOptions);

    if (statement.getRestrictions().keyIsInRelation())     throw new IllegalArgumentException("Batch with conditions cannot span multiple partitions (you cannot use IN on the partition key)");

    if (key == null) {

      key=statement.metadata().partitioner.decorateKey(pks.get(0));

      casRequest=new CQL3CasRequest(statement.metadata(),key,conditionColumns,updatesRegularRows,updatesStaticRow);

    }

 else     if (!key.getKey().equals(pks.get(0))) {

      throw new InvalidRequestException("Batch with conditions cannot span multiple partitions");

    }

    checkFalse(statement.getRestrictions().clusteringKeyRestrictionsHasIN(),"IN on the clustering key columns is not supported with conditional %s",statement.type.isUpdate() ? "updates" : "deletions");

    if (statement.hasSlices()) {

      assert !statement.hasConditions();

      Slices slices=statement.createSlices(statementOptions);

      if (slices.isEmpty())       continue;

      for (      Slice slice : slices) {

        casRequest.addRangeDeletion(slice,statement,statementOptions,timestamp,nowInSeconds);

      }

    }

 else {

      Clustering<?> clustering=Iterables.getOnlyElement(statement.createClustering(statementOptions));

      if (statement.hasConditions()) {

        statement.addConditions(clustering,casRequest,statementOptions);

        if (statement.hasIfNotExistCondition() || statement.hasIfExistCondition())         columnsWithConditions=null;

 else         if (columnsWithConditions != null)         Iterables.addAll(columnsWithConditions,statement.getColumnsWithConditions());

      }

      casRequest.addRowUpdate(clustering,statement,statementOptions,timestamp,nowInSeconds);

    }

  }

  return Pair.create(casRequest,columnsWithConditions);

}

Location: BatchStatement.java

Content: 

private int updatedRows(){

  return statements.size();

}

Location: BatchStatement.java

Content: 

private void updatePartitionsPerBatchMetrics(int updatedPartitions){

  if (isLogged()) {

    metrics.partitionsPerLoggedBatch.update(updatedPartitions);

  }

 else   if (isCounter()) {

    metrics.partitionsPerCounterBatch.update(updatedPartitions);

  }

 else {

    metrics.partitionsPerUnloggedBatch.update(updatedPartitions);

  }

}

Location: BatchStatement.java

Content: 

/** 

 * Checks batch size to ensure threshold is met. If not, a warning is logged.

 * @param mutations - the batch mutations.

 */

private static void verifyBatchSize(Collection<? extends IMutation> mutations) throws InvalidRequestException {

  if (mutations.size() <= 1)   return;

  long warnThreshold=DatabaseDescriptor.getBatchSizeWarnThreshold();

  long size=IMutation.dataSize(mutations);

  if (size > warnThreshold) {

    Set<String> tableNames=new HashSet<>();

    for (    IMutation mutation : mutations) {

      for (      PartitionUpdate update : mutation.getPartitionUpdates())       tableNames.add(update.metadata().toString());

    }

    long failThreshold=DatabaseDescriptor.getBatchSizeFailThreshold();

    String format="Batch for {} is of size {}, exceeding specified threshold of {} by {}.{}";

    if (size > failThreshold) {

      Tracing.trace(format,tableNames,FBUtilities.prettyPrintMemory(size),FBUtilities.prettyPrintMemory(failThreshold),FBUtilities.prettyPrintMemory(size - failThreshold)," (see batch_size_fail_threshold_in_kb)");

      logger.error(format,tableNames,FBUtilities.prettyPrintMemory(size),FBUtilities.prettyPrintMemory(failThreshold),FBUtilities.prettyPrintMemory(size - failThreshold)," (see batch_size_fail_threshold_in_kb)");

      throw new InvalidRequestException("Batch too large");

    }

 else     if (logger.isWarnEnabled()) {

      logger.warn(format,tableNames,FBUtilities.prettyPrintMemory(size),FBUtilities.prettyPrintMemory(warnThreshold),FBUtilities.prettyPrintMemory(size - warnThreshold),"");

    }

    ClientWarn.instance.warn(MessageFormatter.arrayFormat(format,new Object[]{tableNames,size,warnThreshold,size - warnThreshold,""}).getMessage());

  }

}

Location: BatchStatement.java

Content: 

private void verifyBatchType(Collection<? extends IMutation> mutations){

  if (!isLogged() && mutations.size() > 1) {

    Set<DecoratedKey> keySet=new HashSet<>();

    Set<String> tableNames=new HashSet<>();

    for (    IMutation mutation : mutations) {

      for (      PartitionUpdate update : mutation.getPartitionUpdates()) {

        keySet.add(update.partitionKey());

        tableNames.add(update.metadata().toString());

      }

    }

    if (keySet.size() > DatabaseDescriptor.getUnloggedBatchAcrossPartitionsWarnThreshold()) {

      NoSpamLogger.log(logger,NoSpamLogger.Level.WARN,1,TimeUnit.MINUTES,UNLOGGED_BATCH_WARNING,keySet.size(),tableNames.size() == 1 ? "" : "s",tableNames);

      ClientWarn.instance.warn(MessageFormatter.arrayFormat(UNLOGGED_BATCH_WARNING,new Object[]{keySet.size(),tableNames.size() == 1 ? "" : "s",tableNames}).getMessage());

    }

  }

}

