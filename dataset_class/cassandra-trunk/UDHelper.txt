Location: UDHelper.java

Content: 

public static Class<?> asJavaClass(TypeCodec<?> codec){

  return codec.getJavaType().getRawType();

}

Location: UDHelper.java

Content: 

static TypeCodec<Object>[] codecsFor(DataType[] dataType){

  TypeCodec<Object>[] codecs=new TypeCodec[dataType.length];

  for (int i=0; i < dataType.length; i++)   codecs[i]=codecFor(dataType[i]);

  return codecs;

}

Location: UDHelper.java

Content: 

public static Object deserialize(TypeCodec<?> codec,ProtocolVersion protocolVersion,ByteBuffer value){

  return codec.deserialize(value,protocolVersion);

}

Location: UDHelper.java

Content: 

public static DataType driverTypeFromAbstractType(String abstractTypeDef){

  return DataTypeClassNameParser.parseOne(abstractTypeDef,ProtocolVersion.CURRENT,codecRegistry);

}

Location: UDHelper.java

Content: 

/** 

 * Construct an array containing the  {@link DataType}s for the C* internal types.

 * @param abstractTypes list with UDF argument types

 * @return array with argument types as {@link DataType}

 */

public static DataType[] driverTypes(List<AbstractType<?>> abstractTypes){

  DataType[] argDataTypes=new DataType[abstractTypes.size()];

  for (int i=0; i < argDataTypes.length; i++)   argDataTypes[i]=driverType(abstractTypes.get(i));

  return argDataTypes;

}

Location: UDHelper.java

Content: 

/** 

 * Returns the  {@link DataType} for the C* internal type.

 */

public static DataType driverType(AbstractType abstractType){

  CQL3Type cqlType=abstractType.asCQL3Type();

  String abstractTypeDef=cqlType.getType().toString();

  return driverTypeFromAbstractType(abstractTypeDef);

}

Location: UDHelper.java

Content: 

public static boolean isNullOrEmpty(AbstractType<?> type,ByteBuffer bb){

  return bb == null || (bb.remaining() == 0 && type.isEmptyValueMeaningless());

}

Location: UDHelper.java

Content: 

public static ByteBuffer serialize(TypeCodec<?> codec,ProtocolVersion protocolVersion,Object value){

  if (!codec.getJavaType().getRawType().isAssignableFrom(value.getClass()))   throw new InvalidTypeException("Invalid value for CQL type " + codec.getCqlType().getName());

  return ((TypeCodec)codec).serialize(value,protocolVersion);

}

Location: UDHelper.java

Content: 

/** 

 * Construct an array containing the Java classes for the given  {@link DataType}s.

 * @param dataTypes  array with UDF argument types

 * @param calledOnNullInput whether to allow {@code null} as an argument value

 * @return array of same size with UDF arguments

 */

public static TypeToken<?>[] typeTokens(TypeCodec<Object>[] dataTypes,boolean calledOnNullInput){

  TypeToken<?>[] paramTypes=new TypeToken[dataTypes.length];

  for (int i=0; i < paramTypes.length; i++) {

    TypeToken<?> typeToken=dataTypes[i].getJavaType();

    if (!calledOnNullInput) {

      Class<?> clazz=typeToken.getRawType();

      if (clazz == Integer.class)       typeToken=TypeToken.of(int.class);

 else       if (clazz == Long.class)       typeToken=TypeToken.of(long.class);

 else       if (clazz == Byte.class)       typeToken=TypeToken.of(byte.class);

 else       if (clazz == Short.class)       typeToken=TypeToken.of(short.class);

 else       if (clazz == Float.class)       typeToken=TypeToken.of(float.class);

 else       if (clazz == Double.class)       typeToken=TypeToken.of(double.class);

 else       if (clazz == Boolean.class)       typeToken=TypeToken.of(boolean.class);

    }

    paramTypes[i]=typeToken;

  }

  return paramTypes;

}

