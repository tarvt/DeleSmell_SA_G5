Location: HintsDescriptor.java

Content: 

String checksumFileName(){

  return String.format("%s-%s-%s.crc32",hostId,timestamp,version);

}

Location: HintsDescriptor.java

Content: 

@SuppressWarnings("unchecked") static ParameterizedClass createCompressionConfig(Map<String,Object> params){

  if (params.containsKey(COMPRESSION)) {

    Map<String,Object> compressorConfig=(Map<String,Object>)params.get(COMPRESSION);

    return new ParameterizedClass((String)compressorConfig.get(ParameterizedClass.CLASS_NAME),(Map<String,String>)compressorConfig.get(ParameterizedClass.PARAMETERS));

  }

 else {

    return null;

  }

}

Location: HintsDescriptor.java

Content: 

public ICompressor createCompressor(){

  if (isCompressed())   return CompressionParams.createCompressor(compressionConfig);

  if (isEncrypted())   return compressor;

  return null;

}

Location: HintsDescriptor.java

Content: 

/** 

 * Create, if necessary, the required encryption components (for either decrpyt or encrypt operations). Note that in the case of encyption (this is, when writing out a new hints file), we need to write the cipher's IV out to the header so it can be used when decrypting. Thus, we need to add an additional entry to the  {@code params} map.

 * @param params the base parameters into the descriptor.

 * @return null if not using encryption; else, the initialized {@link Cipher} and a possibly updated versionof the  {@code params} map.

 */

@SuppressWarnings("unchecked") static EncryptionData createEncryption(ImmutableMap<String,Object> params){

  if (params.containsKey(ENCRYPTION)) {

    Map<?,?> encryptionConfig=(Map<?,?>)params.get(ENCRYPTION);

    EncryptionContext encryptionContext=EncryptionContext.createFromMap(encryptionConfig,DatabaseDescriptor.getEncryptionContext());

    try {

      Cipher cipher;

      if (encryptionConfig.containsKey(EncryptionContext.ENCRYPTION_IV)) {

        cipher=encryptionContext.getDecryptor();

      }

 else {

        cipher=encryptionContext.getEncryptor();

        ImmutableMap<String,Object> encParams=ImmutableMap.<String,Object>builder().putAll(encryptionContext.toHeaderParameters()).put(EncryptionContext.ENCRYPTION_IV,Hex.bytesToHex(cipher.getIV())).build();

        Map<String,Object> map=new HashMap<>(params);

        map.put(ENCRYPTION,encParams);

        params=ImmutableMap.<String,Object>builder().putAll(map).build();

      }

      return new EncryptionData(cipher,encryptionContext.getCompressor(),params);

    }

 catch (    IOException ioe) {

      logger.warn("failed to create encyption context for hints file. ignoring encryption for hints.",ioe);

      return null;

    }

  }

 else {

    return null;

  }

}

Location: HintsDescriptor.java

Content: 

@SuppressWarnings("unchecked") private static ImmutableMap<String,Object> decodeJSONBytes(byte[] bytes){

  return ImmutableMap.copyOf((Map<String,Object>)JSONValue.parse(new String(bytes,StandardCharsets.UTF_8)));

}

Location: HintsDescriptor.java

Content: 

static HintsDescriptor deserialize(DataInput in) throws IOException {

  CRC32 crc=new CRC32();

  int version=in.readInt();

  updateChecksumInt(crc,version);

  long timestamp=in.readLong();

  updateChecksumLong(crc,timestamp);

  long msb=in.readLong();

  updateChecksumLong(crc,msb);

  long lsb=in.readLong();

  updateChecksumLong(crc,lsb);

  UUID hostId=new UUID(msb,lsb);

  int paramsLength=in.readInt();

  updateChecksumInt(crc,paramsLength);

  validateCRC(in.readInt(),(int)crc.getValue());

  byte[] paramsBytes=new byte[paramsLength];

  in.readFully(paramsBytes,0,paramsLength);

  crc.update(paramsBytes,0,paramsLength);

  validateCRC(in.readInt(),(int)crc.getValue());

  return new HintsDescriptor(hostId,version,timestamp,decodeJSONBytes(paramsBytes));

}

Location: HintsDescriptor.java

Content: 

String fileName(){

  return String.format("%s-%s-%s.hints",hostId,timestamp,version);

}

Location: HintsDescriptor.java

Content: 

public Cipher getCipher(){

  return isEncrypted() ? cipher : null;

}

Location: HintsDescriptor.java

Content: 

HintsDescriptor(UUID hostId,int version,long timestamp,ImmutableMap<String,Object> parameters){

  this.hostId=hostId;

  this.version=version;

  this.timestamp=timestamp;

  compressionConfig=createCompressionConfig(parameters);

  EncryptionData encryption=createEncryption(parameters);

  if (encryption == null) {

    cipher=null;

    compressor=null;

  }

 else {

    if (compressionConfig != null)     throw new IllegalStateException("a hints file cannot be configured for both compression and encryption");

    cipher=encryption.cipher;

    compressor=encryption.compressor;

    parameters=encryption.params;

  }

  this.parameters=parameters;

}

Location: HintsDescriptor.java

Content: 

HintsDescriptor(UUID hostId,long timestamp){

  this(hostId,CURRENT_VERSION,timestamp,ImmutableMap.<String,Object>of());

}

Location: HintsDescriptor.java

Content: 

HintsDescriptor(UUID hostId,long timestamp,ImmutableMap<String,Object> parameters){

  this(hostId,CURRENT_VERSION,timestamp,parameters);

}

Location: HintsDescriptor.java

Content: 

public boolean isCompressed(){

  return compressionConfig != null;

}

Location: HintsDescriptor.java

Content: 

public boolean isEncrypted(){

  return cipher != null;

}

Location: HintsDescriptor.java

Content: 

static boolean isHintFileName(Path path){

  return pattern.matcher(path.getFileName().toString()).matches();

}

Location: HintsDescriptor.java

Content: 

static int messagingVersion(int hintsVersion){

switch (hintsVersion) {

case VERSION_30:

    return MessagingService.VERSION_30;

case VERSION_40:

  return MessagingService.VERSION_40;

default :

throw new AssertionError();

}

}

Location: HintsDescriptor.java

Content: 

static Optional<HintsDescriptor> readFromFileQuietly(Path path){

  try (RandomAccessFile raf=new RandomAccessFile(path.toFile(),"r")){

    return Optional.of(deserialize(raf));

  }

 catch (  ChecksumMismatchException e) {

    throw new FSReadError(e,path.toFile());

  }

catch (  IOException e) {

    logger.error("Failed to deserialize hints descriptor {}",path.toString(),e);

    return Optional.empty();

  }

}

Location: HintsDescriptor.java

Content: 

static HintsDescriptor readFromFile(Path path){

  try (RandomAccessFile raf=new RandomAccessFile(path.toFile(),"r")){

    return deserialize(raf);

  }

 catch (  IOException e) {

    throw new FSReadError(e,path.toFile());

  }

}

Location: HintsDescriptor.java

Content: 

void serialize(DataOutputPlus out) throws IOException {

  CRC32 crc=new CRC32();

  out.writeInt(version);

  updateChecksumInt(crc,version);

  out.writeLong(timestamp);

  updateChecksumLong(crc,timestamp);

  out.writeLong(hostId.getMostSignificantBits());

  updateChecksumLong(crc,hostId.getMostSignificantBits());

  out.writeLong(hostId.getLeastSignificantBits());

  updateChecksumLong(crc,hostId.getLeastSignificantBits());

  byte[] paramsBytes=JSONValue.toJSONString(parameters).getBytes(StandardCharsets.UTF_8);

  out.writeInt(paramsBytes.length);

  updateChecksumInt(crc,paramsBytes.length);

  out.writeInt((int)crc.getValue());

  out.write(paramsBytes);

  crc.update(paramsBytes,0,paramsBytes.length);

  out.writeInt((int)crc.getValue());

}

Location: HintsDescriptor.java

Content: 

private static void updateChecksumLong(CRC32 crc,long value){

  updateChecksumInt(crc,(int)(value & 0xFFFFFFFFL));

  updateChecksumInt(crc,(int)(value >>> 32));

}

Location: HintsDescriptor.java

Content: 

private static void validateCRC(int expected,int actual) throws IOException {

  if (expected != actual)   throw new ChecksumMismatchException("Hints Descriptor CRC Mismatch");

}

