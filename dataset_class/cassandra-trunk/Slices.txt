Location: Slices.java

Content: 

/** 

 * Returns slices for continuing the paging of those slices given the last returned clustering prefix.

 * @param comparator the comparator for the table this is a filter for.

 * @param lastReturned the last clustering that was returned for the query we are paging for. Theresulting slices will be such that only results coming stricly after  {@code lastReturned} are returned(where coming after means "greater than" if  {@code !reversed} and "lesser than" otherwise).

 * @param inclusive whether or not we want to include the {@code lastReturned} in the newly returned page of results.

 * @param reversed whether the query we're paging for is reversed or not.

 * @return new slices that select results coming after {@code lastReturned}.

 */

public abstract Slices forPaging(ClusteringComparator comparator,Clustering<?> lastReturned,boolean inclusive,boolean reversed);

Location: Slices.java

Content: 

/** 

 * Whether the slices has a lower bound, that is whether it's first slice start is  {@code Slice.BOTTOM}.

 * @return whether the slices has a lower bound.

 */

public abstract boolean hasLowerBound();

Location: Slices.java

Content: 

/** 

 * Whether the slices has an upper bound, that is whether it's last slice end is  {@code Slice.TOP}.

 * @return whether the slices has an upper bound.

 */

public abstract boolean hasUpperBound();

Location: Slices.java

Content: 

/** 

 * An object that allows to test whether rows are selected by this  {@code Slices} objects assuming those rowsare tested in clustering order.

 * @param reversed if true, the rows passed to the returned object will be assumed to be in reversed clusteringorder, otherwise they should be in clustering order.

 * @return an object that tests for selection of rows by this {@code Slices} object.

 */

public abstract InOrderTester inOrderTester(boolean reversed);

Location: Slices.java

Content: 

/** 

 * Given the per-clustering column minimum and maximum value a sstable contains, whether or not this slices potentially intersects that sstable or not.

 * @param minClusteringValues the smallest values for each clustering column that a sstable contains.

 * @param maxClusteringValues the biggest values for each clustering column that a sstable contains.

 * @return whether the slices might intersects with the sstable having {@code minClusteringValues} and{@code maxClusteringValues}.

 */

public abstract boolean intersects(List<ByteBuffer> minClusteringValues,List<ByteBuffer> maxClusteringValues);

Location: Slices.java

Content: 

protected Slices(){

}

Location: Slices.java

Content: 

/** 

 * Creates a  {@code Slices} object that contains a single slice.

 * @param comparator the comparator for the table {@code slice} is a slice of.

 * @param slice the single slice that the return object should contains.

 * @return the newly created {@code Slices} object.

 */

public static Slices with(ClusteringComparator comparator,Slice slice){

  if (slice.start().isBottom() && slice.end().isTop())   return Slices.ALL;

  Preconditions.checkArgument(!slice.isEmpty(comparator));

  return new ArrayBackedSlices(comparator,new Slice[]{slice});

}

