Location: SizeTieredCompactionStrategy.java

Content: 

public static List<Pair<SSTableReader,Long>> createSSTableAndLengthPairs(Iterable<SSTableReader> sstables){

  List<Pair<SSTableReader,Long>> sstableLengthPairs=new ArrayList<>(Iterables.size(sstables));

  for (  SSTableReader sstable : sstables)   sstableLengthPairs.add(Pair.create(sstable,sstable.onDiskLength()));

  return sstableLengthPairs;

}

Location: SizeTieredCompactionStrategy.java

Content: 

public static <T>List<List<T>> getBuckets(Collection<Pair<T,Long>> files,double bucketHigh,double bucketLow,long minSSTableSize){

  List<Pair<T,Long>> sortedFiles=new ArrayList<Pair<T,Long>>(files);

  Collections.sort(sortedFiles,new Comparator<Pair<T,Long>>(){

    public int compare(    Pair<T,Long> p1,    Pair<T,Long> p2){

      return p1.right.compareTo(p2.right);

    }

  }

);

  Map<Long,List<T>> buckets=new HashMap<Long,List<T>>();

  outer:   for (  Pair<T,Long> pair : sortedFiles) {

    long size=pair.right;

    for (    Entry<Long,List<T>> entry : buckets.entrySet()) {

      List<T> bucket=entry.getValue();

      long oldAverageSize=entry.getKey();

      if ((size > (oldAverageSize * bucketLow) && size < (oldAverageSize * bucketHigh)) || (size < minSSTableSize && oldAverageSize < minSSTableSize)) {

        buckets.remove(oldAverageSize);

        long totalSize=bucket.size() * oldAverageSize;

        long newAverageSize=(totalSize + size) / (bucket.size() + 1);

        bucket.add(pair.left);

        buckets.put(newAverageSize,bucket);

        continue outer;

      }

    }

    ArrayList<T> bucket=new ArrayList<T>();

    bucket.add(pair.left);

    buckets.put(size,bucket);

  }

  return new ArrayList<List<T>>(buckets.values());

}

Location: SizeTieredCompactionStrategy.java

Content: 

public static int getEstimatedCompactionsByTasks(ColumnFamilyStore cfs,List<List<SSTableReader>> tasks){

  int n=0;

  for (  List<SSTableReader> bucket : tasks) {

    if (bucket.size() >= cfs.getMinimumCompactionThreshold())     n+=Math.ceil((double)bucket.size() / cfs.getMaximumCompactionThreshold());

  }

  return n;

}

Location: SizeTieredCompactionStrategy.java

Content: 

private static Map<SSTableReader,Double> getHotnessMap(Collection<SSTableReader> sstables){

  Map<SSTableReader,Double> hotness=new HashMap<>(sstables.size());

  for (  SSTableReader sstable : sstables)   hotness.put(sstable,hotness(sstable));

  return hotness;

}

Location: SizeTieredCompactionStrategy.java

Content: 

/** 

 * Returns the reads per second per key for this sstable, or 0.0 if the sstable has no read meter

 */

private static double hotness(SSTableReader sstr){

  return sstr.getReadMeter() == null ? 0.0 : sstr.getReadMeter().twoHourRate() / sstr.estimatedKeys();

}

Location: SizeTieredCompactionStrategy.java

Content: 

/** 

 * @param buckets list of buckets from which to return the most interesting, where "interesting" is the total hotness for reads

 * @param minThreshold minimum number of sstables in a bucket to qualify as interesting

 * @param maxThreshold maximum number of sstables to compact at once (the returned bucket will be trimmed down to this)

 * @return a bucket (list) of sstables to compact

 */

public static List<SSTableReader> mostInterestingBucket(List<List<SSTableReader>> buckets,int minThreshold,int maxThreshold){

  final List<Pair<List<SSTableReader>,Double>> prunedBucketsAndHotness=new ArrayList<>(buckets.size());

  for (  List<SSTableReader> bucket : buckets) {

    Pair<List<SSTableReader>,Double> bucketAndHotness=trimToThresholdWithHotness(bucket,maxThreshold);

    if (bucketAndHotness != null && bucketAndHotness.left.size() >= minThreshold)     prunedBucketsAndHotness.add(bucketAndHotness);

  }

  if (prunedBucketsAndHotness.isEmpty())   return Collections.emptyList();

  Pair<List<SSTableReader>,Double> hottest=Collections.max(prunedBucketsAndHotness,bucketsByHotnessComparator);

  return hottest.left;

}

Location: SizeTieredCompactionStrategy.java

Content: 

public SizeTieredCompactionStrategy(ColumnFamilyStore cfs,Map<String,String> options){

  super(cfs,options);

  this.estimatedRemainingTasks=0;

  this.sizeTieredOptions=new SizeTieredCompactionStrategyOptions(options);

}

Location: SizeTieredCompactionStrategy.java

Content: 

/** 

 * Returns a (bucket, hotness) pair or null if there were not enough sstables in the bucket to meet minThreshold. If there are more than maxThreshold sstables, the coldest sstables will be trimmed to meet the threshold.

 */

@VisibleForTesting static Pair<List<SSTableReader>,Double> trimToThresholdWithHotness(List<SSTableReader> bucket,int maxThreshold){

  final Map<SSTableReader,Double> hotnessSnapshot=getHotnessMap(bucket);

  Collections.sort(bucket,new Comparator<SSTableReader>(){

    public int compare(    SSTableReader o1,    SSTableReader o2){

      return -1 * Double.compare(hotnessSnapshot.get(o1),hotnessSnapshot.get(o2));

    }

  }

);

  List<SSTableReader> prunedBucket=bucket.subList(0,Math.min(bucket.size(),maxThreshold));

  double bucketHotness=0.0;

  for (  SSTableReader sstr : prunedBucket)   bucketHotness+=hotness(sstr);

  return Pair.create(prunedBucket,bucketHotness);

}

