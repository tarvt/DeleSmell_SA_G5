Location: ClusteringIndexFilter.java

Content: 

/** 

 * Returns an iterator that only returns the rows of the provided iterator that this filter selects. <p> This method is the "dumb" counterpart to  {@link #getSlices(TableMetadata)} in that it has no way to quickly getto what is actually selected, so it simply iterate over it all and filters out what shouldn't be returned. This should be avoided in general. Another difference with  {@link #getSlices(TableMetadata)} is that this method also filter the queriedcolumns in the returned result, while the former assumes that the provided iterator has already done it.

 * @param columnFilter the columns to include in the rows of the result iterator.

 * @param iterator the iterator for which we should filter rows.

 * @return an iterator that only returns the rows (or rather Unfilted) from {@code iterator} that are selected by this filter.

 */

public UnfilteredRowIterator filterNotIndexed(ColumnFilter columnFilter,UnfilteredRowIterator iterator);

Location: ClusteringIndexFilter.java

Content: 

/** 

 * Returns a filter for continuing the paging of this filter given the last returned clustering prefix.

 * @param comparator the comparator for the table this is a filter for.

 * @param lastReturned the last clustering that was returned for the query we are paging for. Theresulting filter will be such that results coming after  {@code lastReturned} are returned(where coming after means "greater than" if the filter is not reversed, "lesser than" otherwise; futher, whether the comparison is strict or not depends on  {@code inclusive}).

 * @param inclusive whether or not we want to include the {@code lastReturned} in the newly returnedpage of results.

 * @return a new filter that selects results coming after {@code lastReturned}.

 */

public ClusteringIndexFilter forPaging(ClusteringComparator comparator,Clustering<?> lastReturned,boolean inclusive);

Location: ClusteringIndexFilter.java

Content: 

public Slices getSlices(TableMetadata metadata);

Location: ClusteringIndexFilter.java

Content: 

/** 

 * Given a partition, returns a row iterator for the rows of this partition that are selected by this filter.

 * @param columnFilter the columns to include in the rows of the result iterator.

 * @param partition the partition containing the rows to filter.

 * @return a unfiltered row iterator returning those rows (or rather Unfiltered) from {@code partition} that are selected by this filter.

 */

public UnfilteredRowIterator getUnfilteredRowIterator(ColumnFilter columnFilter,Partition partition);

Location: ClusteringIndexFilter.java

Content: 

/** 

 * Returns whether we can guarantee that a given cached partition contains all the data selected by this filter.

 * @param partition the cached partition. This method assumed that the rows of this partition contains all the table columns.

 * @return whether we can guarantee that all data selected by this filter are in {@code partition}.

 */

public boolean isFullyCoveredBy(CachedPartition partition);

Location: ClusteringIndexFilter.java

Content: 

/** 

 * Whether this filter selects the head of a partition (i.e. it isn't reversed and selects all rows up to a certain point).

 * @return whether this filter selects the head of a partition.

 */

public boolean isHeadFilter();

Location: ClusteringIndexFilter.java

Content: 

/** 

 * Whether this filter selects all the row of a partition (it's an "identity" filter).

 * @return whether this filter selects all the row of a partition (it's an "identity" filter).

 */

public boolean selectsAllPartition();

Location: ClusteringIndexFilter.java

Content: 

/** 

 * Whether a given row is selected by this filter.

 * @param clustering the clustering of the row to test the selection of.

 * @return whether the row with clustering {@code clustering} is selected by this filter.

 */

public boolean selects(Clustering<?> clustering);

Location: ClusteringIndexFilter.java

Content: 

/** 

 * Whether the provided sstable may contain data that is selected by this filter (based on the sstable metadata).

 * @param sstable the sstable for which we want to test the need for inclusion.

 * @return whether {@code sstable} should be included to answer this filter.

 */

public boolean shouldInclude(SSTableReader sstable);

Location: ClusteringIndexFilter.java

Content: 

public String toCQLString(TableMetadata metadata);

