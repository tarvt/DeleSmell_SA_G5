Location: InternodeOutboundMetrics.java

Content: 

/** 

 * Create metrics for given connection pool.

 * @param ip IP address to use for metrics label

 */

public InternodeOutboundMetrics(InetAddressAndPort ip,final OutboundConnections messagingPool){

  address=ip.getHostAddressAndPortForJMX();

  factory=new DefaultNameFactory("Connection",address);

  largeMessagePendingTasks=Metrics.register(factory.createMetricName("LargeMessagePendingTasks"),messagingPool.large::pendingCount);

  largeMessagePendingBytes=Metrics.register(factory.createMetricName("LargeMessagePendingBytes"),messagingPool.large::pendingBytes);

  largeMessageCompletedTasks=Metrics.register(factory.createMetricName("LargeMessageCompletedTasks"),messagingPool.large::sentCount);

  largeMessageCompletedBytes=Metrics.register(factory.createMetricName("LargeMessageCompletedBytes"),messagingPool.large::sentBytes);

  largeMessageDropped=Metrics.register(factory.createMetricName("LargeMessageDroppedTasks"),messagingPool.large::dropped);

  largeMessageDroppedTasksDueToOverload=Metrics.register(factory.createMetricName("LargeMessageDroppedTasksDueToOverload"),messagingPool.large::overloadedCount);

  largeMessageDroppedBytesDueToOverload=Metrics.register(factory.createMetricName("LargeMessageDroppedBytesDueToOverload"),messagingPool.large::overloadedBytes);

  largeMessageDroppedTasksDueToTimeout=Metrics.register(factory.createMetricName("LargeMessageDroppedTasksDueToTimeout"),messagingPool.large::expiredCount);

  largeMessageDroppedBytesDueToTimeout=Metrics.register(factory.createMetricName("LargeMessageDroppedBytesDueToTimeout"),messagingPool.large::expiredBytes);

  largeMessageDroppedTasksDueToError=Metrics.register(factory.createMetricName("LargeMessageDroppedTasksDueToError"),messagingPool.large::errorCount);

  largeMessageDroppedBytesDueToError=Metrics.register(factory.createMetricName("LargeMessageDroppedBytesDueToError"),messagingPool.large::errorBytes);

  smallMessagePendingTasks=Metrics.register(factory.createMetricName("SmallMessagePendingTasks"),messagingPool.small::pendingCount);

  smallMessagePendingBytes=Metrics.register(factory.createMetricName("SmallMessagePendingBytes"),messagingPool.small::pendingBytes);

  smallMessageCompletedTasks=Metrics.register(factory.createMetricName("SmallMessageCompletedTasks"),messagingPool.small::sentCount);

  smallMessageCompletedBytes=Metrics.register(factory.createMetricName("SmallMessageCompletedBytes"),messagingPool.small::sentBytes);

  smallMessageDroppedTasks=Metrics.register(factory.createMetricName("SmallMessageDroppedTasks"),messagingPool.small::dropped);

  smallMessageDroppedTasksDueToOverload=Metrics.register(factory.createMetricName("SmallMessageDroppedTasksDueToOverload"),messagingPool.small::overloadedCount);

  smallMessageDroppedBytesDueToOverload=Metrics.register(factory.createMetricName("SmallMessageDroppedBytesDueToOverload"),messagingPool.small::overloadedBytes);

  smallMessageDroppedTasksDueToTimeout=Metrics.register(factory.createMetricName("SmallMessageDroppedTasksDueToTimeout"),messagingPool.small::expiredCount);

  smallMessageDroppedBytesDueToTimeout=Metrics.register(factory.createMetricName("SmallMessageDroppedBytesDueToTimeout"),messagingPool.small::expiredBytes);

  smallMessageDroppedTasksDueToError=Metrics.register(factory.createMetricName("SmallMessageDroppedTasksDueToError"),messagingPool.small::errorCount);

  smallMessageDroppedBytesDueToError=Metrics.register(factory.createMetricName("SmallMessageDroppedBytesDueToError"),messagingPool.small::errorBytes);

  urgentMessagePendingTasks=Metrics.register(factory.createMetricName("UrgentMessagePendingTasks"),messagingPool.urgent::pendingCount);

  urgentMessagePendingBytes=Metrics.register(factory.createMetricName("UrgentMessagePendingBytes"),messagingPool.urgent::pendingBytes);

  urgentMessageCompletedTasks=Metrics.register(factory.createMetricName("UrgentMessageCompletedTasks"),messagingPool.urgent::sentCount);

  urgentMessageCompletedBytes=Metrics.register(factory.createMetricName("UrgentMessageCompletedBytes"),messagingPool.urgent::sentBytes);

  urgentMessageDroppedTasks=Metrics.register(factory.createMetricName("UrgentMessageDroppedTasks"),messagingPool.urgent::dropped);

  urgentMessageDroppedTasksDueToOverload=Metrics.register(factory.createMetricName("UrgentMessageDroppedTasksDueToOverload"),messagingPool.urgent::overloadedCount);

  urgentMessageDroppedBytesDueToOverload=Metrics.register(factory.createMetricName("UrgentMessageDroppedBytesDueToOverload"),messagingPool.urgent::overloadedBytes);

  urgentMessageDroppedTasksDueToTimeout=Metrics.register(factory.createMetricName("UrgentMessageDroppedTasksDueToTimeout"),messagingPool.urgent::expiredCount);

  urgentMessageDroppedBytesDueToTimeout=Metrics.register(factory.createMetricName("UrgentMessageDroppedBytesDueToTimeout"),messagingPool.urgent::expiredBytes);

  urgentMessageDroppedTasksDueToError=Metrics.register(factory.createMetricName("UrgentMessageDroppedTasksDueToError"),messagingPool.urgent::errorCount);

  urgentMessageDroppedBytesDueToError=Metrics.register(factory.createMetricName("UrgentMessageDroppedBytesDueToError"),messagingPool.urgent::errorBytes);

  expiredCallbacks=Metrics.meter(factory.createMetricName("Timeouts"));

  Metrics.register(factory.createMetricName("GossipMessagePendingTasks"),(Gauge<Integer>)messagingPool.urgent::pendingCount);

  Metrics.register(factory.createMetricName("GossipMessageCompletedTasks"),(Gauge<Long>)messagingPool.urgent::sentCount);

  Metrics.register(factory.createMetricName("GossipMessageDroppedTasks"),(Gauge<Long>)messagingPool.urgent::dropped);

}

