Location: DescribeStatement.java

Content: 

/** 

 * Creates a  {@link DescribeStatement} for {@code DESCRIBE AGGREGATES}.

 */

public static DescribeStatement<SchemaElement> aggregates(){

  return new Listing(ks -> ks.functions.udas());

}

Location: DescribeStatement.java

Content: 

/** 

 * Creates a  {@link DescribeStatement} for {@code DESCRIBE FUNCTION}.

 */

public static DescribeStatement<SchemaElement> aggregate(String keyspace,String name){

  return new Element(keyspace,name,(ks,n) -> {

    return checkNotEmpty(ks.functions.getUdas(new FunctionName(ks.name,n)),"User defined aggregate '%s' not found in '%s'",n,ks.name).stream().sorted(SchemaElement.NAME_COMPARATOR);

  }

);

}

Location: DescribeStatement.java

Content: 

/** 

 * Creates a  {@link DescribeStatement} for {@code DESCRIBE CLUSTER}.

 */

public static DescribeStatement<List<Object>> cluster(){

  return new DescribeStatement<List<Object>>(){

    /** 

 * The column index of the cluster name

 */

    private static final int CLUSTER_NAME_INDEX=0;

    /** 

 * The column index of the partitioner name

 */

    private static final int PARTITIONER_NAME_INDEX=1;

    /** 

 * The column index of the snitch class

 */

    private static final int SNITCH_CLASS_INDEX=2;

    /** 

 * The range ownerships index

 */

    private static final int RANGE_OWNERSHIPS_INDEX=3;

    @Override protected Stream<List<Object>> describe(    ClientState state,    Keyspaces keyspaces){

      List<Object> list=new ArrayList<Object>();

      list.add(DatabaseDescriptor.getClusterName());

      list.add(trimIfPresent(DatabaseDescriptor.getPartitionerName(),"org.apache.cassandra.dht."));

      list.add(trimIfPresent(DatabaseDescriptor.getEndpointSnitch().getClass().getName(),"org.apache.cassandra.locator."));

      String useKs=state.getRawKeyspace();

      if (mustReturnsRangeOwnerships(useKs)) {

        list.add(StorageService.instance.getRangeToAddressMap(useKs).entrySet().stream().sorted(Comparator.comparing(Map.Entry::getKey)).collect(Collectors.toMap(e -> e.getKey().right.toString(),e -> e.getValue().stream().map(r -> r.endpoint().toString()).collect(Collectors.toList()))));

      }

      return Stream.of(list);

    }

    private boolean mustReturnsRangeOwnerships(    String useKs){

      return useKs != null && !SchemaConstants.isLocalSystemKeyspace(useKs) && !SchemaConstants.isSystemKeyspace(useKs);

    }

    @Override protected List<ColumnSpecification> metadata(    ClientState state){

      ImmutableList.Builder<ColumnSpecification> builder=ImmutableList.builder();

      builder.add(new ColumnSpecification(KS,CF,new ColumnIdentifier("cluster",true),UTF8Type.instance),new ColumnSpecification(KS,CF,new ColumnIdentifier("partitioner",true),UTF8Type.instance),new ColumnSpecification(KS,CF,new ColumnIdentifier("snitch",true),UTF8Type.instance));

      if (mustReturnsRangeOwnerships(state.getRawKeyspace()))       builder.add(new ColumnSpecification(KS,CF,new ColumnIdentifier("range_ownership",true),MapType.getInstance(UTF8Type.instance,ListType.getInstance(UTF8Type.instance,false),false)));

      return builder.build();

    }

    @Override protected List<ByteBuffer> toRow(    List<Object> elements,    boolean withInternals){

      ImmutableList.Builder<ByteBuffer> builder=ImmutableList.builder();

      builder.add(UTF8Type.instance.decompose((String)elements.get(CLUSTER_NAME_INDEX)),UTF8Type.instance.decompose((String)elements.get(PARTITIONER_NAME_INDEX)),UTF8Type.instance.decompose((String)elements.get(SNITCH_CLASS_INDEX)));

      if (elements.size() > 3) {

        MapType<String,List<String>> rangeOwnershipType=MapType.getInstance(UTF8Type.instance,ListType.getInstance(UTF8Type.instance,false),false);

        builder.add(rangeOwnershipType.decompose((Map<String,List<String>>)elements.get(RANGE_OWNERSHIPS_INDEX)));

      }

      return builder.build();

    }

    private String trimIfPresent(    String src,    String begin){

      if (src.startsWith(begin))       return src.substring(begin.length());

      return src;

    }

  }

;

}

Location: DescribeStatement.java

Content: 

/** 

 * Returns the schema elements that must be part of the output.

 */

protected abstract Stream<? extends T> describe(ClientState state,Keyspaces keyspaces);

Location: DescribeStatement.java

Content: 

/** 

 * Creates a  {@link DescribeStatement} for {@code DESCRIBE FUNCTION}.

 */

public static DescribeStatement<SchemaElement> function(String keyspace,String name){

  return new Element(keyspace,name,(ks,n) -> {

    return checkNotEmpty(ks.functions.getUdfs(new FunctionName(ks.name,n)),"User defined function '%s' not found in '%s'",n,ks.name).stream().sorted(SchemaElement.NAME_COMPARATOR);

  }

);

}

Location: DescribeStatement.java

Content: 

/** 

 * Creates a  {@link DescribeStatement} for the generic {@code DESCRIBE ...}.

 */

public static DescribeStatement<SchemaElement> generic(String keyspace,String name){

  return new DescribeStatement<SchemaElement>(){

    private DescribeStatement<SchemaElement> delegate;

    private DescribeStatement<SchemaElement> resolve(    ClientState state,    Keyspaces keyspaces){

      String ks=keyspace;

      if (keyspace == null) {

        if (keyspaces.containsKeyspace(name))         return keyspace(name,false);

        String rawKeyspace=state.getRawKeyspace();

        ks=rawKeyspace == null ? name : rawKeyspace;

      }

      KeyspaceMetadata keyspaceMetadata=validateKeyspace(ks,keyspaces);

      if (keyspaceMetadata.tables.getNullable(name) != null)       return table(ks,name);

      Optional<TableMetadata> indexed=keyspaceMetadata.findIndexedTable(name);

      if (indexed.isPresent()) {

        Optional<IndexMetadata> index=indexed.get().indexes.get(name);

        if (index.isPresent())         return index(ks,name);

      }

      if (keyspaceMetadata.views.getNullable(name) != null)       return view(ks,name);

      throw invalidRequest("'%s' not found in keyspace '%s'",name,ks);

    }

    @Override protected Stream<? extends SchemaElement> describe(    ClientState state,    Keyspaces keyspaces){

      delegate=resolve(state,keyspaces);

      return delegate.describe(state,keyspaces);

    }

    @Override protected List<ColumnSpecification> metadata(    ClientState state){

      return delegate.metadata(state);

    }

    @Override protected List<ByteBuffer> toRow(    SchemaElement element,    boolean withInternals){

      return delegate.toRow(element,withInternals);

    }

  }

;

}

Location: DescribeStatement.java

Content: 

private static Stream<? extends SchemaElement> getKeyspaceElements(KeyspaceMetadata ks,boolean onlyKeyspace){

  Stream<? extends SchemaElement> s=Stream.of(ks);

  if (!onlyKeyspace) {

    s=Stream.concat(s,ks.types.sortedStream());

    s=Stream.concat(s,ks.functions.udfs().sorted(SchemaElement.NAME_COMPARATOR));

    s=Stream.concat(s,ks.functions.udas().sorted(SchemaElement.NAME_COMPARATOR));

    s=Stream.concat(s,ks.tables.stream().sorted(SchemaElement.NAME_COMPARATOR).flatMap(tm -> getTableElements(ks,tm)));

  }

  return s;

}

Location: DescribeStatement.java

Content: 

private long getOffset(PagingState pagingState,UUID schemaVersion){

  if (pagingState == null)   return 0L;

  try (DataInputBuffer in=new DataInputBuffer(pagingState.partitionKey,false)){

    checkTrue(in.readShort() == PAGING_STATE_VERSION,"Incompatible paging state");

    final String pagingStateServerVersion=in.readUTF();

    final String releaseVersion=FBUtilities.getReleaseVersionString();

    checkTrue(pagingStateServerVersion.equals(releaseVersion),"The server version of the paging state %s is different from the one of the server %s",pagingStateServerVersion,releaseVersion);

    byte[] bytes=new byte[UUIDGen.UUID_LEN];

    in.read(bytes);

    UUID version=UUIDGen.getUUID(ByteBuffer.wrap(bytes));

    checkTrue(schemaVersion.equals(version),SCHEMA_CHANGED_WHILE_PAGING_MESSAGE);

    return in.readLong();

  }

 catch (  IOException e) {

    throw new InvalidRequestException("Invalid paging state.",e);

  }

}

Location: DescribeStatement.java

Content: 

private PagingState getPagingState(long nextPageOffset,UUID schemaVersion){

  try (DataOutputBuffer out=new DataOutputBuffer()){

    out.writeShort(PAGING_STATE_VERSION);

    out.writeUTF(FBUtilities.getReleaseVersionString());

    out.write(UUIDGen.decompose(schemaVersion));

    out.writeLong(nextPageOffset);

    return new PagingState(out.asNewBuffer(),null,Integer.MAX_VALUE,Integer.MAX_VALUE);

  }

 catch (  IOException e) {

    throw new InvalidRequestException("Invalid paging state.",e);

  }

}

Location: DescribeStatement.java

Content: 

private static Stream<? extends SchemaElement> getTableElements(KeyspaceMetadata ks,TableMetadata table){

  Stream<? extends SchemaElement> s=Stream.of(table);

  s=Stream.concat(s,table.indexes.stream().map(i -> toDescribable(table,i)).sorted(SchemaElement.NAME_COMPARATOR));

  s=Stream.concat(s,ks.views.stream(table.id).sorted(SchemaElement.NAME_COMPARATOR));

  return s;

}

Location: DescribeStatement.java

Content: 

/** 

 * Creates a  {@link DescribeStatement} for {@code DESCRIBE INDEX}.

 */

public static DescribeStatement<SchemaElement> index(String keyspace,String name){

  return new Element(keyspace,name,(ks,index) -> {

    TableMetadata tm=ks.findIndexedTable(index).orElseThrow(() -> invalidRequest("Table for existing index '%s' not found in '%s'",index,ks.name));

    return tm.indexes.get(index).map(i -> toDescribable(tm,i)).map(Stream::of).orElseThrow(() -> invalidRequest("Index '%s' not found in '%s'",index,ks.name));

  }

);

}

Location: DescribeStatement.java

Content: 

/** 

 * Creates a  {@link DescribeStatement} for {@code DESCRIBE KEYSPACES}.

 */

public static DescribeStatement<SchemaElement> keyspaces(){

  return new DescribeStatement<SchemaElement>(){

    @Override protected Stream<? extends SchemaElement> describe(    ClientState state,    Keyspaces keyspaces){

      return keyspaces.stream().sorted(SchemaElement.NAME_COMPARATOR);

    }

    @Override protected List<ColumnSpecification> metadata(    ClientState state){

      return LIST_METADATA;

    }

    @Override protected List<ByteBuffer> toRow(    SchemaElement element,    boolean withInternals){

      return ImmutableList.of(bytes(element.elementKeyspaceQuotedIfNeeded()),bytes(element.elementType().toString()),bytes(element.elementNameQuotedIfNeeded()));

    }

  }

;

}

Location: DescribeStatement.java

Content: 

/** 

 * Creates a  {@link DescribeStatement} for {@code DESCRIBE KEYSPACE}.

 */

public static DescribeStatement<SchemaElement> keyspace(String keyspace,boolean onlyKeyspaceDefinition){

  return new Element(keyspace,null,(ks,t) -> getKeyspaceElements(ks,onlyKeyspaceDefinition));

}

Location: DescribeStatement.java

Content: 

/** 

 * Returns the columns of the  {@code ResultMetadata}

 */

protected abstract List<ColumnSpecification> metadata(ClientState state);

Location: DescribeStatement.java

Content: 

@Override public final CQLStatement prepare(ClientState clientState) throws RequestValidationException {

  return this;

}

Location: DescribeStatement.java

Content: 

/** 

 * Creates a  {@link DescribeStatement} for {@code DESCRIBE [FULL] SCHEMA}.

 */

public static DescribeStatement<SchemaElement> schema(boolean includeSystemKeyspaces){

  return new DescribeStatement<SchemaElement>(){

    @Override protected Stream<? extends SchemaElement> describe(    ClientState state,    Keyspaces keyspaces){

      return keyspaces.stream().filter(ks -> includeSystemKeyspaces || !SchemaConstants.isSystemKeyspace(ks.name)).sorted(SchemaElement.NAME_COMPARATOR).flatMap(ks -> getKeyspaceElements(ks,false));

    }

    @Override protected List<ColumnSpecification> metadata(    ClientState state){

      return ELEMENT_METADATA;

    }

    @Override protected List<ByteBuffer> toRow(    SchemaElement element,    boolean withInternals){

      return ImmutableList.of(bytes(element.elementKeyspaceQuotedIfNeeded()),bytes(element.elementType().toString()),bytes(element.elementNameQuotedIfNeeded()),bytes(element.toCqlString(withInternals,false)));

    }

  }

;

}

Location: DescribeStatement.java

Content: 

/** 

 * Creates a  {@link DescribeStatement} for {@code DESCRIBE TABLE}.

 */

public static DescribeStatement<SchemaElement> table(String keyspace,String name){

  return new Element(keyspace,name,(ks,t) -> {

    TableMetadata table=checkNotNull(ks.getTableOrViewNullable(t),"Table '%s' not found in keyspace '%s'",t,ks.name);

    return Stream.concat(Stream.of(table),table.indexes.stream().map(index -> toDescribable(table,index)).sorted(SchemaElement.NAME_COMPARATOR));

  }

);

}

Location: DescribeStatement.java

Content: 

private static SchemaElement toDescribable(TableMetadata table,IndexMetadata index){

  return new SchemaElement(){

    @Override public SchemaElementType elementType(){

      return SchemaElementType.INDEX;

    }

    @Override public String elementKeyspace(){

      return table.keyspace;

    }

    @Override public String elementName(){

      return index.name;

    }

    @Override public String toCqlString(    boolean withInternals,    boolean ifNotExists){

      return index.toCqlString(table,ifNotExists);

    }

  }

;

}

Location: DescribeStatement.java

Content: 

protected abstract List<ByteBuffer> toRow(T element,boolean withInternals);

Location: DescribeStatement.java

Content: 

/** 

 * Creates a  {@link DescribeStatement} for {@code DESCRIBE TYPES}.

 */

public static DescribeStatement<SchemaElement> types(){

  return new Listing(ks -> ks.types.stream());

}

Location: DescribeStatement.java

Content: 

/** 

 * Creates a  {@link DescribeStatement} for {@code DESCRIBE TYPE}.

 */

public static DescribeStatement<SchemaElement> type(String keyspace,String name){

  return new Element(keyspace,name,(ks,type) -> {

    return ks.types.get(ByteBufferUtil.bytes(type)).map(Stream::of).orElseThrow(() -> invalidRequest("User defined type '%s' not found in '%s'",type,ks.name));

  }

);

}

Location: DescribeStatement.java

Content: 

/** 

 * Returns the metadata for the given keyspace or throws a  {@link KeyspaceNotDefinedException} exception.

 */

private static KeyspaceMetadata validateKeyspace(String ks,Keyspaces keyspaces){

  return keyspaces.get(ks).orElseThrow(() -> new KeyspaceNotDefinedException(format("'%s' not found in keyspaces",ks)));

}

Location: DescribeStatement.java

Content: 

/** 

 * Creates a  {@link DescribeStatement} for {@code DESCRIBE MATERIALIZED VIEW}.

 */

public static DescribeStatement<SchemaElement> view(String keyspace,String name){

  return new Element(keyspace,name,(ks,view) -> {

    return ks.views.get(view).map(Stream::of).orElseThrow(() -> invalidRequest("Materialized view '%s' not found in '%s'",view,ks.name));

  }

);

}

Location: DescribeStatement.java

Content: 

public final void withInternalDetails(){

  this.includeInternalDetails=true;

}

