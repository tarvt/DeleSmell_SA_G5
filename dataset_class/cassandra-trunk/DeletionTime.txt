Location: DeletionTime.java

Content: 

public int compareTo(DeletionTime dt){

  if (markedForDeleteAt() < dt.markedForDeleteAt())   return -1;

 else   if (markedForDeleteAt() > dt.markedForDeleteAt())   return 1;

 else   if (localDeletionTime() < dt.localDeletionTime())   return -1;

 else   if (localDeletionTime() > dt.localDeletionTime())   return 1;

 else   return 0;

}

Location: DeletionTime.java

Content: 

public boolean deletes(Cell<?> cell){

  return deletes(cell.timestamp());

}

Location: DeletionTime.java

Content: 

public boolean deletes(LivenessInfo info){

  return deletes(info.timestamp());

}

Location: DeletionTime.java

Content: 

public boolean deletes(long timestamp){

  return timestamp <= markedForDeleteAt();

}

Location: DeletionTime.java

Content: 

public DeletionTime(long markedForDeleteAt,int localDeletionTime){

  this.markedForDeleteAt=markedForDeleteAt;

  this.localDeletionTime=localDeletionTime;

}

Location: DeletionTime.java

Content: 

/** 

 * A timestamp (typically in microseconds since the unix epoch, although this is not enforced) after which data should be considered deleted. If set to Long.MIN_VALUE, this implies that the data has not been marked for deletion at all.

 */

public long markedForDeleteAt(){

  return markedForDeleteAt;

}

Location: DeletionTime.java

Content: 

public boolean supersedes(DeletionTime dt){

  return markedForDeleteAt() > dt.markedForDeleteAt() || (markedForDeleteAt() == dt.markedForDeleteAt() && localDeletionTime() > dt.localDeletionTime());

}

