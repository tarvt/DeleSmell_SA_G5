Location: CastFcts.java

Content: 

/** 

 * Adds to the list a function converting the input type in to the output type if they are not the same.

 * @param functions the list to add to

 * @param inputType the input type

 * @param outputType the output type

 * @param converter the function use to convert the input type into the output type

 */

private static <I,O>void addFunctionIfNeeded(List<Function> functions,AbstractType<I> inputType,AbstractType<O> outputType,java.util.function.Function<I,O> converter){

  if (!inputType.equals(outputType))   functions.add(wrapJavaFunction(inputType,outputType,converter));

}

Location: CastFcts.java

Content: 

/** 

 * The class must not be instantiated as it contains only static variables.

 */

private CastFcts(){

}

Location: CastFcts.java

Content: 

/** 

 * Returns the conversion function to convert the specified type into a Decimal type

 * @param inputType the input type

 * @return the conversion function to convert the specified type into a Decimal type

 */

private static <I extends Number>java.util.function.Function<I,BigDecimal> getDecimalConversionFunction(AbstractType<? extends Number> inputType){

  if (inputType == FloatType.instance || inputType == DoubleType.instance)   return p -> BigDecimal.valueOf(p.doubleValue());

  if (inputType == IntegerType.instance)   return p -> new BigDecimal((BigInteger)p);

  return p -> BigDecimal.valueOf(p.longValue());

}

Location: CastFcts.java

Content: 

/** 

 * Creates the name of the cast function use to cast to the specified type.

 * @param outputType the output type

 * @return the name of the cast function use to cast to the specified type

 */

public static String getFunctionName(AbstractType<?> outputType){

  return getFunctionName(outputType.asCQL3Type());

}

Location: CastFcts.java

Content: 

/** 

 * Creates the name of the cast function use to cast to the specified type.

 * @param outputType the output type

 * @return the name of the cast function use to cast to the specified type

 */

public static String getFunctionName(CQL3Type outputType){

  return FUNCTION_NAME_PREFIX + WordUtils.capitalize(toLowerCaseString(outputType));

}

Location: CastFcts.java

Content: 

private static String toLowerCaseString(CQL3Type type){

  return type.toString().toLowerCase();

}

Location: CastFcts.java

Content: 

@SuppressWarnings("unchecked") private static <O,I>Function wrapJavaFunction(AbstractType<I> inputType,AbstractType<O> outputType,java.util.function.Function<I,O> converter){

  return inputType.equals(CounterColumnType.instance) ? JavaCounterFunctionWrapper.create(outputType,(java.util.function.Function<Long,O>)converter) : JavaFunctionWrapper.create(inputType,outputType,converter);

}

