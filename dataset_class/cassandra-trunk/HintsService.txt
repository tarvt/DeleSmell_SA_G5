Location: HintsService.java

Content: 

private static ImmutableMap<String,Object> createDescriptorParams(){

  ImmutableMap.Builder<String,Object> builder=ImmutableMap.builder();

  ParameterizedClass compressionConfig=DatabaseDescriptor.getHintsCompression();

  if (compressionConfig != null) {

    ImmutableMap.Builder<String,Object> compressorParams=ImmutableMap.builder();

    compressorParams.put(ParameterizedClass.CLASS_NAME,compressionConfig.class_name);

    if (compressionConfig.parameters != null) {

      compressorParams.put(ParameterizedClass.PARAMETERS,compressionConfig.parameters);

    }

    builder.put(HintsDescriptor.COMPRESSION,compressorParams.build());

  }

  return builder.build();

}

Location: HintsService.java

Content: 

/** 

 * Deletes all hints for all destinations. Doesn't make snapshots - should be used with care.

 */

public void deleteAllHints(){

  catalog.deleteAllHints();

}

Location: HintsService.java

Content: 

/** 

 * Deletes all hints for the provided destination. Doesn't make snapshots - should be used with care.

 * @param target inet address of the target node

 */

public void deleteAllHintsForEndpoint(InetAddressAndPort target){

  UUID hostId=StorageService.instance.getHostIdForEndpoint(target);

  if (hostId == null)   throw new IllegalArgumentException("Can't delete hints for unknown address " + target);

  catalog.deleteAllHints(hostId);

}

Location: HintsService.java

Content: 

/** 

 * Deletes all hints for the provided destination. Doesn't make snapshots - should be used with care.

 * @param address inet address of the target node - encoded as a string for easier JMX consumption

 */

public void deleteAllHintsForEndpoint(String address){

  InetAddressAndPort target;

  try {

    target=InetAddressAndPort.getByName(address);

  }

 catch (  UnknownHostException e) {

    throw new IllegalArgumentException(e);

  }

  deleteAllHintsForEndpoint(target);

}

Location: HintsService.java

Content: 

/** 

 * Cleans up hints-related state after a node with id = hostId left. Dispatcher can not stop itself (isHostAlive() can not start returning false for the leaving host because this method is called by the same thread as gossip, which blocks gossip), so we can't simply wait for completion. We should also flush the buffer if there are any hints for the node there, and close the writer (if any), so that we don't leave any hint files lying around. Once that is done, we can simply delete all hint files and remove the host id from the catalog. The worst that can happen if we don't get everything right is a hints file (or two) remaining undeleted.

 * @param hostId id of the node being excised

 */

public void excise(UUID hostId){

  HintsStore store=catalog.getNullable(hostId);

  if (store == null)   return;

  Future flushFuture=writeExecutor.flushBufferPool(bufferPool,Collections.singleton(store));

  Future closeFuture=writeExecutor.closeWriter(store);

  try {

    flushFuture.get();

    closeFuture.get();

  }

 catch (  InterruptedException|ExecutionException e) {

    throw new RuntimeException(e);

  }

  dispatchExecutor.interruptDispatch(store.hostId);

  catalog.exciseStore(hostId);

}

Location: HintsService.java

Content: 

/** 

 * Flush the buffer pool for the selected target nodes, then fsync their writers.

 * @param hostIds host ids of the nodes to flush and fsync hints for

 */

public void flushAndFsyncBlockingly(Iterable<UUID> hostIds){

  Iterable<HintsStore> stores=transform(hostIds,catalog::get);

  writeExecutor.flushBufferPool(bufferPool,stores);

  writeExecutor.fsyncWritersBlockingly(stores);

}

Location: HintsService.java

Content: 

HintsCatalog getCatalog(){

  return catalog;

}

Location: HintsService.java

Content: 

private HintsService(){

  this(FailureDetector.instance);

}

Location: HintsService.java

Content: 

@VisibleForTesting HintsService(IFailureDetector failureDetector){

  File hintsDirectory=DatabaseDescriptor.getHintsDirectory();

  int maxDeliveryThreads=DatabaseDescriptor.getMaxHintsDeliveryThreads();

  catalog=HintsCatalog.load(hintsDirectory,createDescriptorParams());

  writeExecutor=new HintsWriteExecutor(catalog);

  int bufferSize=Math.max(DatabaseDescriptor.getMaxMutationSize() * 2,MIN_BUFFER_SIZE);

  bufferPool=new HintsBufferPool(bufferSize,writeExecutor::flushBuffer);

  isDispatchPaused=new AtomicBoolean(true);

  dispatchExecutor=new HintsDispatchExecutor(hintsDirectory,maxDeliveryThreads,isDispatchPaused,failureDetector::isAlive);

  int flushPeriod=DatabaseDescriptor.getHintsFlushPeriodInMS();

  triggerFlushingFuture=ScheduledExecutors.optionalTasks.scheduleWithFixedDelay(() -> writeExecutor.flushBufferPool(bufferPool),flushPeriod,flushPeriod,TimeUnit.MILLISECONDS);

  metrics=new HintedHandoffMetrics();

}

Location: HintsService.java

Content: 

/** 

 * Returns true in case service is shut down.

 */

public boolean isShutDown(){

  return isShutDown;

}

Location: HintsService.java

Content: 

public void pauseDispatch(){

  logger.info("Paused hints dispatch");

  isDispatchPaused.set(true);

  HintsServiceDiagnostics.dispatchingPaused(this);

}

Location: HintsService.java

Content: 

public void resumeDispatch(){

  logger.info("Resumed hints dispatch");

  isDispatchPaused.set(false);

  HintsServiceDiagnostics.dispatchingResumed(this);

}

Location: HintsService.java

Content: 

public synchronized void startDispatch(){

  if (isShutDown)   throw new IllegalStateException("HintsService is shut down and cannot be restarted");

  isDispatchPaused.set(false);

  HintsServiceDiagnostics.dispatchingStarted(this);

  HintsDispatchTrigger trigger=new HintsDispatchTrigger(catalog,writeExecutor,dispatchExecutor,isDispatchPaused);

  triggerDispatchFuture=ScheduledExecutors.scheduledTasks.scheduleWithFixedDelay(trigger,10,10,TimeUnit.SECONDS);

}

Location: HintsService.java

Content: 

/** 

 * Transfer all local hints to the hostId supplied by hostIdSupplier Flushes the buffer to make sure all hints are on disk and closes the hint writers so we don't leave any hint files around. After that, we serially dispatch all the hints in the HintsCatalog. If we fail delivering all hints, we will ask the hostIdSupplier for a new target host and retry delivering any remaining hints there, once, with a delay of 10 seconds before retrying.

 * @param hostIdSupplier supplier of stream target host ids. This is generallythe closest one according to the DynamicSnitch

 * @return When this future is done, it either has streamed all hints to remote nodes or has failed with a properlog message

 */

public Future transferHints(Supplier<UUID> hostIdSupplier){

  Future flushFuture=writeExecutor.flushBufferPool(bufferPool);

  Future closeFuture=writeExecutor.closeAllWriters();

  try {

    flushFuture.get();

    closeFuture.get();

  }

 catch (  InterruptedException|ExecutionException e) {

    throw new RuntimeException(e);

  }

  resumeDispatch();

  catalog.stores().forEach(dispatchExecutor::completeDispatchBlockingly);

  return dispatchExecutor.transfer(catalog,hostIdSupplier);

}

Location: HintsService.java

Content: 

/** 

 * Write a hint for all replicas. Used to re-dispatch hints whose destination is either missing or no longer correct.

 */

void writeForAllReplicas(Hint hint){

  String keyspaceName=hint.mutation.getKeyspaceName();

  Token token=hint.mutation.key().getToken();

  EndpointsForToken replicas=ReplicaLayout.forTokenWriteLiveAndDown(Keyspace.open(keyspaceName),token).all();

  List<UUID> hostIds=replicas.stream().filter(StorageProxy::shouldHint).map(replica -> StorageService.instance.getHostIdForEndpoint(replica.endpoint())).collect(Collectors.toList());

  write(hostIds,hint);

}

Location: HintsService.java

Content: 

/** 

 * Write a hint for a iterable of nodes.

 * @param hostIds host ids of the hint's target nodes

 * @param hint the hint to store

 */

public void write(Collection<UUID> hostIds,Hint hint){

  if (isShutDown)   throw new IllegalStateException("HintsService is shut down and can't accept new hints");

  catalog.maybeLoadStores(hostIds);

  bufferPool.write(hostIds,hint);

  StorageMetrics.totalHints.inc(hostIds.size());

}

Location: HintsService.java

Content: 

/** 

 * Write a hint for a single node.

 * @param hostId host id of the hint's target node

 * @param hint the hint to store

 */

public void write(UUID hostId,Hint hint){

  write(Collections.singleton(hostId),hint);

}

