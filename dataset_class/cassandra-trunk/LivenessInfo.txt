Location: LivenessInfo.java

Content: 

public static LivenessInfo create(long timestamp,int nowInSec){

  return new LivenessInfo(timestamp);

}

Location: LivenessInfo.java

Content: 

public static LivenessInfo create(long timestamp,int ttl,int nowInSec){

  return ttl == NO_TTL ? create(timestamp,nowInSec) : expiring(timestamp,ttl,nowInSec);

}

Location: LivenessInfo.java

Content: 

public static LivenessInfo expiring(long timestamp,int ttl,int nowInSec){

  assert ttl != EXPIRED_LIVENESS_TTL;

  return new ExpiringLivenessInfo(timestamp,ttl,ExpirationDateOverflowHandling.computeLocalExpirationTime(nowInSec,ttl));

}

Location: LivenessInfo.java

Content: 

protected LivenessInfo(long timestamp){

  this.timestamp=timestamp;

}

Location: LivenessInfo.java

Content: 

/** 

 * The expiration time (in seconds) if the info is expiring ( {@link #NO_EXPIRATION_TIME} otherwise).

 */

public int localExpirationTime(){

  return NO_EXPIRATION_TIME;

}

Location: LivenessInfo.java

Content: 

/** 

 * Whether this liveness information supersedes another one (that is whether is has a greater timestamp than the other or not). </br> If timestamps are the same and none of them are expired livenessInfo, livenessInfo with greater TTL supersedes another. It also means, if timestamps are the same, ttl superseders no-ttl. This is the same rule as  {@link Conflicts#resolveRegular}If timestamps are the same and one of them is expired livenessInfo. Expired livenessInfo supersedes, ie. tombstone supersedes. If timestamps are the same and both of them are expired livenessInfo(Ideally it shouldn't happen), greater localDeletionTime wins.

 * @param other the  {@code LivenessInfo} to compare this info to.

 * @return whether this {@code LivenessInfo} supersedes {@code other}.

 */

public boolean supersedes(LivenessInfo other){

  if (timestamp != other.timestamp)   return timestamp > other.timestamp;

  if (isExpired() ^ other.isExpired())   return isExpired();

  if (isExpiring() == other.isExpiring())   return localExpirationTime() > other.localExpirationTime();

  return isExpiring();

}

Location: LivenessInfo.java

Content: 

public static LivenessInfo withExpirationTime(long timestamp,int ttl,int localExpirationTime){

  if (ttl == EXPIRED_LIVENESS_TTL)   return new ExpiredLivenessInfo(timestamp,ttl,localExpirationTime);

  return ttl == NO_TTL ? new LivenessInfo(timestamp) : new ExpiringLivenessInfo(timestamp,ttl,localExpirationTime);

}

Location: LivenessInfo.java

Content: 

/** 

 * Returns a copy of this liveness info updated with the provided timestamp.

 * @param newTimestamp the timestamp for the returned info.

 * @return if this liveness info has a timestamp, a copy of it with {@code newTimestamp}as timestamp. If it has no timestamp however, this liveness info is returned unchanged.

 */

public LivenessInfo withUpdatedTimestamp(long newTimestamp){

  return new LivenessInfo(newTimestamp);

}

