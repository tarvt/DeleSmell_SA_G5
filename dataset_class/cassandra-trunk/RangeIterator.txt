Location: RangeIterator.java

Content: 

public final long getCount(){

  return count;

}

Location: RangeIterator.java

Content: 

public final K getCurrent(){

  return current;

}

Location: RangeIterator.java

Content: 

public final K getMaximum(){

  return max;

}

Location: RangeIterator.java

Content: 

public final K getMinimum(){

  return min;

}

Location: RangeIterator.java

Content: 

/** 

 * Ranges are overlapping the following cases: * When they have a common subrange: min       b.current      max          b.max +---------|--------------+------------| b.current      min       max          b.max |--------------+---------+------------| min        b.current     b.max        max +----------|-------------|------------+ If either range is empty, they're disjoint.

 */

@VisibleForTesting protected static <K extends Comparable<K>,D extends CombinedValue<K>>boolean isOverlapping(K min,K max,RangeIterator<K,D> b){

  return (min != null && max != null) && b.getCount() != 0 && (min.compareTo(b.getMaximum()) <= 0 && b.getCurrent().compareTo(max) <= 0);

}

Location: RangeIterator.java

Content: 

@VisibleForTesting protected static <K extends Comparable<K>,D extends CombinedValue<K>>boolean isOverlapping(RangeIterator<K,D> a,RangeIterator<K,D> b){

  return isOverlapping(a.getCurrent(),a.getMaximum(),b);

}

Location: RangeIterator.java

Content: 

@SuppressWarnings("unchecked") private static <T extends Comparable>T nullSafeMax(T a,T b){

  if (a == null)   return b;

  if (b == null)   return a;

  return a.compareTo(b) > 0 ? a : b;

}

Location: RangeIterator.java

Content: 

@SuppressWarnings("unchecked") private static <T extends Comparable>T nullSafeMin(T a,T b){

  if (a == null)   return b;

  if (b == null)   return a;

  return a.compareTo(b) > 0 ? b : a;

}

Location: RangeIterator.java

Content: 

protected abstract void performSkipTo(K nextToken);

Location: RangeIterator.java

Content: 

protected RangeIterator(Builder.Statistics<K,T> statistics){

  this(statistics.min,statistics.max,statistics.tokenCount);

}

Location: RangeIterator.java

Content: 

public RangeIterator(K min,K max,long count){

  if (min == null || max == null || count == 0)   assert min == null && max == null && (count == 0 || count == -1);

  this.min=min;

  this.current=min;

  this.max=max;

  this.count=count;

}

Location: RangeIterator.java

Content: 

public RangeIterator(RangeIterator<K,T> range){

  this(range == null ? null : range.min,range == null ? null : range.max,range == null ? -1 : range.count);

}

Location: RangeIterator.java

Content: 

protected T recomputeNext(){

  return tryToComputeNext() ? peek() : endOfData();

}

Location: RangeIterator.java

Content: 

/** 

 * When called, this iterators current position should be skipped forwards until finding either: 1) an element equal to or bigger than next 2) the end of the iterator

 * @param nextToken value to skip the iterator forward until matching

 * @return The next current token after the skip was performed

 */

public final T skipTo(K nextToken){

  if (min == null || max == null)   return endOfData();

  if (current.compareTo(nextToken) >= 0)   return next == null ? recomputeNext() : next;

  if (max.compareTo(nextToken) < 0)   return endOfData();

  performSkipTo(nextToken);

  return recomputeNext();

}

Location: RangeIterator.java

Content: 

protected boolean tryToComputeNext(){

  boolean hasNext=super.tryToComputeNext();

  current=hasNext ? next.get() : getMaximum();

  return hasNext;

}

