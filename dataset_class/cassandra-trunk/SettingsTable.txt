Location: SettingsTable.java

Content: 

private void addAuditLoggingOptions(SimpleDataSet result,Field f){

  Preconditions.checkArgument(AuditLogOptions.class.isAssignableFrom(f.getType()));

  AuditLogOptions value=(AuditLogOptions)getValue(f);

  result.row(f.getName() + "_enabled").column(VALUE,Boolean.toString(value.enabled));

  result.row(f.getName() + "_logger").column(VALUE,value.logger.class_name);

  result.row(f.getName() + "_audit_logs_dir").column(VALUE,value.audit_logs_dir);

  result.row(f.getName() + "_included_keyspaces").column(VALUE,value.included_keyspaces);

  result.row(f.getName() + "_excluded_keyspaces").column(VALUE,value.excluded_keyspaces);

  result.row(f.getName() + "_included_categories").column(VALUE,value.included_categories);

  result.row(f.getName() + "_excluded_categories").column(VALUE,value.excluded_categories);

  result.row(f.getName() + "_included_users").column(VALUE,value.included_users);

  result.row(f.getName() + "_excluded_users").column(VALUE,value.excluded_users);

}

Location: SettingsTable.java

Content: 

private void addEncryptionOptions(SimpleDataSet result,Field f){

  Preconditions.checkArgument(EncryptionOptions.class.isAssignableFrom(f.getType()));

  EncryptionOptions value=(EncryptionOptions)getValue(f);

  result.row(f.getName() + "_enabled").column(VALUE,Boolean.toString(value.isEnabled()));

  result.row(f.getName() + "_algorithm").column(VALUE,value.algorithm);

  result.row(f.getName() + "_protocol").column(VALUE,Objects.toString(value.acceptedProtocols(),null));

  result.row(f.getName() + "_cipher_suites").column(VALUE,Objects.toString(value.cipher_suites,null));

  result.row(f.getName() + "_client_auth").column(VALUE,Boolean.toString(value.require_client_auth));

  result.row(f.getName() + "_endpoint_verification").column(VALUE,Boolean.toString(value.require_endpoint_verification));

  result.row(f.getName() + "_optional").column(VALUE,Boolean.toString(value.isOptional()));

  if (value instanceof EncryptionOptions.ServerEncryptionOptions) {

    EncryptionOptions.ServerEncryptionOptions server=(EncryptionOptions.ServerEncryptionOptions)value;

    result.row(f.getName() + "_internode_encryption").column(VALUE,server.internode_encryption.toString());

    result.row(f.getName() + "_legacy_ssl_storage_port").column(VALUE,Boolean.toString(server.enable_legacy_ssl_storage_port));

  }

}

Location: SettingsTable.java

Content: 

private void addTransparentEncryptionOptions(SimpleDataSet result,Field f){

  Preconditions.checkArgument(TransparentDataEncryptionOptions.class.isAssignableFrom(f.getType()));

  TransparentDataEncryptionOptions value=(TransparentDataEncryptionOptions)getValue(f);

  result.row(f.getName() + "_enabled").column(VALUE,Boolean.toString(value.enabled));

  result.row(f.getName() + "_cipher").column(VALUE,value.cipher);

  result.row(f.getName() + "_chunk_length_kb").column(VALUE,Integer.toString(value.chunk_length_kb));

  result.row(f.getName() + "_iv_length").column(VALUE,Integer.toString(value.iv_length));

}

Location: SettingsTable.java

Content: 

private void addValue(SimpleDataSet result,Field f){

  Object value=getValue(f);

  if (value == null) {

    result.row(f.getName());

  }

 else   if (overrides.containsKey(f.getName())) {

    overrides.get(f.getName()).accept(result,f);

  }

 else {

    if (value.getClass().isArray())     value=Arrays.toString((Object[])value);

    result.row(f.getName()).column(VALUE,value.toString());

  }

}

Location: SettingsTable.java

Content: 

@VisibleForTesting Object getValue(Field f){

  Object value;

  try {

    value=f.get(config);

  }

 catch (  IllegalAccessException|IllegalArgumentException e) {

    throw new ServerError(e);

  }

  return value;

}

Location: SettingsTable.java

Content: 

SettingsTable(String keyspace){

  this(keyspace,DatabaseDescriptor.getRawConfig());

}

Location: SettingsTable.java

Content: 

SettingsTable(String keyspace,Config config){

  super(TableMetadata.builder(keyspace,"settings").comment("current settings").kind(TableMetadata.Kind.VIRTUAL).partitioner(new LocalPartitioner(UTF8Type.instance)).addPartitionKeyColumn(NAME,UTF8Type.instance).addRegularColumn(VALUE,UTF8Type.instance).build());

  this.config=config;

}

