Location: ListPermissionsStatement.java

Content: 

public ListPermissionsStatement(Set<Permission> permissions,IResource resource,RoleName grantee,boolean recursive){

  this.permissions=permissions;

  this.resource=resource;

  this.recursive=recursive;

  this.grantee=grantee.hasName() ? RoleResource.role(grantee.getName()) : null;

}

Location: ListPermissionsStatement.java

Content: 

private Set<PermissionDetails> list(ClientState state,IResource resource) throws RequestValidationException, RequestExecutionException {

  try {

    return DatabaseDescriptor.getAuthorizer().list(state.getUser(),permissions,resource,grantee);

  }

 catch (  UnsupportedOperationException e) {

    throw new InvalidRequestException(e.getMessage());

  }

}

Location: ListPermissionsStatement.java

Content: 

private ResultMessage resultMessage(List<PermissionDetails> details){

  if (details.isEmpty())   return new ResultMessage.Void();

  ResultSet.ResultMetadata resultMetadata=new ResultSet.ResultMetadata(metadata);

  ResultSet result=new ResultSet(resultMetadata);

  for (  PermissionDetails pd : details) {

    result.addColumnValue(UTF8Type.instance.decompose(pd.grantee));

    result.addColumnValue(UTF8Type.instance.decompose(pd.grantee));

    result.addColumnValue(UTF8Type.instance.decompose(pd.resource.toString()));

    result.addColumnValue(UTF8Type.instance.decompose(pd.permission.toString()));

  }

  return new ResultMessage.Rows(result);

}

