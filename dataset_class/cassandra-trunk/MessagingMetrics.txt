Location: MessagingMetrics.java

Content: 

public DCLatencyRecorder internodeLatencyRecorder(InetAddressAndPort from){

  String dcName=DatabaseDescriptor.getEndpointSnitch().getDatacenter(from);

  DCLatencyRecorder dcUpdater=dcLatency.get(dcName);

  if (dcUpdater == null)   dcUpdater=dcLatency.computeIfAbsent(dcName,k -> new DCLatencyRecorder(Metrics.timer(factory.createMetricName(dcName + "-Latency")),allLatency));

  return dcUpdater;

}

Location: MessagingMetrics.java

Content: 

private void logDroppedMessages(){

  if (resetAndConsumeDroppedErrors(logger::info) > 0)   StatusLogger.log();

}

Location: MessagingMetrics.java

Content: 

public MessagingMetrics(){

  allLatency=Metrics.timer(factory.createMetricName("CrossNodeLatency"));

  dcLatency=new ConcurrentHashMap<>();

  internalLatency=new EnumMap<>(Verb.class);

  for (  Verb verb : Verb.VERBS)   internalLatency.put(verb,Metrics.timer(factory.createMetricName(verb + "-WaitLatency")));

  for (  Verb verb : Verb.values())   droppedMessages.put(verb,new DroppedForVerb(verb));

}

Location: MessagingMetrics.java

Content: 

private static void recordDroppedMessage(DroppedForVerb droppedMessages,boolean isCrossNode){

  droppedMessages.metrics.dropped.mark();

  if (isCrossNode)   droppedMessages.droppedFromPeer.incrementAndGet();

 else   droppedMessages.droppedFromSelf.incrementAndGet();

}

Location: MessagingMetrics.java

Content: 

private static void recordDroppedMessage(DroppedForVerb droppedMessages,long timeTaken,TimeUnit units,boolean isCrossNode){

  if (isCrossNode)   droppedMessages.metrics.crossNodeDroppedLatency.update(timeTaken,units);

 else   droppedMessages.metrics.internalDroppedLatency.update(timeTaken,units);

  recordDroppedMessage(droppedMessages,isCrossNode);

}

Location: MessagingMetrics.java

Content: 

public void recordDroppedMessage(Message<?> message,long timeElapsed,TimeUnit timeUnit){

  recordDroppedMessage(message.verb(),timeElapsed,timeUnit,message.isCrossNode());

}

Location: MessagingMetrics.java

Content: 

public void recordDroppedMessage(Verb verb,long timeElapsed,TimeUnit timeUnit,boolean isCrossNode){

  recordDroppedMessage(droppedMessages.get(verb),timeElapsed,timeUnit,isCrossNode);

}

Location: MessagingMetrics.java

Content: 

public void recordInternalLatency(Verb verb,long timeTaken,TimeUnit units){

  if (timeTaken > 0)   internalLatency.get(verb).update(timeTaken,units);

}

Location: MessagingMetrics.java

Content: 

public void recordInternodeDroppedMessage(Verb verb,long timeElapsed,TimeUnit timeUnit){

  recordDroppedMessage(verb,timeElapsed,timeUnit,true);

}

Location: MessagingMetrics.java

Content: 

public void recordSelfDroppedMessage(Verb verb){

  recordDroppedMessage(droppedMessages.get(verb),false);

}

Location: MessagingMetrics.java

Content: 

public void recordSelfDroppedMessage(Verb verb,long timeElapsed,TimeUnit timeUnit){

  recordDroppedMessage(verb,timeElapsed,timeUnit,false);

}

Location: MessagingMetrics.java

Content: 

@VisibleForTesting public int resetAndConsumeDroppedErrors(Consumer<String> messageConsumer){

  int count=0;

  for (  Map.Entry<Verb,DroppedForVerb> entry : droppedMessages.entrySet()) {

    Verb verb=entry.getKey();

    DroppedForVerb droppedForVerb=entry.getValue();

    int droppedInternal=droppedForVerb.droppedFromSelf.getAndSet(0);

    int droppedCrossNode=droppedForVerb.droppedFromPeer.getAndSet(0);

    if (droppedInternal > 0 || droppedCrossNode > 0) {

      messageConsumer.accept(String.format("%s messages were dropped in last %d ms: %d internal and %d cross node." + " Mean internal dropped latency: %d ms and Mean cross-node dropped latency: %d ms",verb,LOG_DROPPED_INTERVAL_IN_MS,droppedInternal,droppedCrossNode,TimeUnit.NANOSECONDS.toMillis((long)droppedForVerb.metrics.internalDroppedLatency.getSnapshot().getMean()),TimeUnit.NANOSECONDS.toMillis((long)droppedForVerb.metrics.crossNodeDroppedLatency.getSnapshot().getMean())));

      ++count;

    }

  }

  return count;

}

Location: MessagingMetrics.java

Content: 

@VisibleForTesting public void resetDroppedMessages(String scope){

  for (  Verb verb : droppedMessages.keySet()) {

    droppedMessages.put(verb,new DroppedForVerb(new DroppedMessageMetrics(metricName -> new CassandraMetricsRegistry.MetricName("DroppedMessages",metricName,scope))));

  }

}

Location: MessagingMetrics.java

Content: 

public void scheduleLogging(){

  ScheduledExecutors.scheduledTasks.scheduleWithFixedDelay(this::logDroppedMessages,LOG_DROPPED_INTERVAL_IN_MS,LOG_DROPPED_INTERVAL_IN_MS,MILLISECONDS);

}

