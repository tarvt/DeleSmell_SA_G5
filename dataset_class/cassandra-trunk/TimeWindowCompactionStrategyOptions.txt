Location: TimeWindowCompactionStrategyOptions.java

Content: 

public TimeWindowCompactionStrategyOptions(){

  sstableWindowUnit=DEFAULT_COMPACTION_WINDOW_UNIT;

  timestampResolution=DEFAULT_TIMESTAMP_RESOLUTION;

  sstableWindowSize=DEFAULT_COMPACTION_WINDOW_SIZE;

  expiredSSTableCheckFrequency=TimeUnit.MILLISECONDS.convert(DEFAULT_EXPIRED_SSTABLE_CHECK_FREQUENCY_SECONDS,TimeUnit.SECONDS);

  ignoreOverlaps=DEFAULT_UNSAFE_AGGRESSIVE_SSTABLE_EXPIRATION;

  stcsOptions=new SizeTieredCompactionStrategyOptions();

}

Location: TimeWindowCompactionStrategyOptions.java

Content: 

public TimeWindowCompactionStrategyOptions(Map<String,String> options){

  String optionValue=options.get(TIMESTAMP_RESOLUTION_KEY);

  timestampResolution=optionValue == null ? DEFAULT_TIMESTAMP_RESOLUTION : TimeUnit.valueOf(optionValue);

  if (timestampResolution != DEFAULT_TIMESTAMP_RESOLUTION)   logger.warn("Using a non-default timestamp_resolution {} - are you really doing inserts with USING TIMESTAMP <non_microsecond_timestamp> (or driver equivalent)?",timestampResolution);

  optionValue=options.get(COMPACTION_WINDOW_UNIT_KEY);

  sstableWindowUnit=optionValue == null ? DEFAULT_COMPACTION_WINDOW_UNIT : TimeUnit.valueOf(optionValue);

  optionValue=options.get(COMPACTION_WINDOW_SIZE_KEY);

  sstableWindowSize=optionValue == null ? DEFAULT_COMPACTION_WINDOW_SIZE : Integer.parseInt(optionValue);

  optionValue=options.get(EXPIRED_SSTABLE_CHECK_FREQUENCY_SECONDS_KEY);

  expiredSSTableCheckFrequency=TimeUnit.MILLISECONDS.convert(optionValue == null ? DEFAULT_EXPIRED_SSTABLE_CHECK_FREQUENCY_SECONDS : Long.parseLong(optionValue),TimeUnit.SECONDS);

  optionValue=options.get(UNSAFE_AGGRESSIVE_SSTABLE_EXPIRATION_KEY);

  ignoreOverlaps=optionValue == null ? DEFAULT_UNSAFE_AGGRESSIVE_SSTABLE_EXPIRATION : (Boolean.getBoolean(UNSAFE_AGGRESSIVE_SSTABLE_EXPIRATION_PROPERTY) && Boolean.parseBoolean(optionValue));

  stcsOptions=new SizeTieredCompactionStrategyOptions(options);

}

Location: TimeWindowCompactionStrategyOptions.java

Content: 

public static Map<String,String> validateOptions(Map<String,String> options,Map<String,String> uncheckedOptions) throws ConfigurationException {

  String optionValue=options.get(TIMESTAMP_RESOLUTION_KEY);

  try {

    if (optionValue != null)     if (!validTimestampTimeUnits.contains(TimeUnit.valueOf(optionValue)))     throw new ConfigurationException(String.format("%s is not valid for %s",optionValue,TIMESTAMP_RESOLUTION_KEY));

  }

 catch (  IllegalArgumentException e) {

    throw new ConfigurationException(String.format("%s is not valid for %s",optionValue,TIMESTAMP_RESOLUTION_KEY));

  }

  optionValue=options.get(COMPACTION_WINDOW_UNIT_KEY);

  try {

    if (optionValue != null)     if (!validWindowTimeUnits.contains(TimeUnit.valueOf(optionValue)))     throw new ConfigurationException(String.format("%s is not valid for %s",optionValue,COMPACTION_WINDOW_UNIT_KEY));

  }

 catch (  IllegalArgumentException e) {

    throw new ConfigurationException(String.format("%s is not valid for %s",optionValue,COMPACTION_WINDOW_UNIT_KEY),e);

  }

  optionValue=options.get(COMPACTION_WINDOW_SIZE_KEY);

  try {

    int sstableWindowSize=optionValue == null ? DEFAULT_COMPACTION_WINDOW_SIZE : Integer.parseInt(optionValue);

    if (sstableWindowSize < 1) {

      throw new ConfigurationException(String.format("%d must be greater than 1 for %s",sstableWindowSize,COMPACTION_WINDOW_SIZE_KEY));

    }

  }

 catch (  NumberFormatException e) {

    throw new ConfigurationException(String.format("%s is not a parsable int (base10) for %s",optionValue,COMPACTION_WINDOW_SIZE_KEY),e);

  }

  optionValue=options.get(EXPIRED_SSTABLE_CHECK_FREQUENCY_SECONDS_KEY);

  try {

    long expiredCheckFrequency=optionValue == null ? DEFAULT_EXPIRED_SSTABLE_CHECK_FREQUENCY_SECONDS : Long.parseLong(optionValue);

    if (expiredCheckFrequency < 0) {

      throw new ConfigurationException(String.format("%s must not be negative, but was %d",EXPIRED_SSTABLE_CHECK_FREQUENCY_SECONDS_KEY,expiredCheckFrequency));

    }

  }

 catch (  NumberFormatException e) {

    throw new ConfigurationException(String.format("%s is not a parsable int (base10) for %s",optionValue,EXPIRED_SSTABLE_CHECK_FREQUENCY_SECONDS_KEY),e);

  }

  optionValue=options.get(UNSAFE_AGGRESSIVE_SSTABLE_EXPIRATION_KEY);

  if (optionValue != null) {

    if (!(optionValue.equalsIgnoreCase("true") || optionValue.equalsIgnoreCase("false")))     throw new ConfigurationException(String.format("%s is not 'true' or 'false' (%s)",UNSAFE_AGGRESSIVE_SSTABLE_EXPIRATION_KEY,optionValue));

    if (optionValue.equalsIgnoreCase("true") && !Boolean.getBoolean(UNSAFE_AGGRESSIVE_SSTABLE_EXPIRATION_PROPERTY))     throw new ConfigurationException(String.format("%s is requested but not allowed, restart cassandra with -D%s=true to allow it",UNSAFE_AGGRESSIVE_SSTABLE_EXPIRATION_KEY,UNSAFE_AGGRESSIVE_SSTABLE_EXPIRATION_PROPERTY));

  }

  uncheckedOptions.remove(COMPACTION_WINDOW_SIZE_KEY);

  uncheckedOptions.remove(COMPACTION_WINDOW_UNIT_KEY);

  uncheckedOptions.remove(TIMESTAMP_RESOLUTION_KEY);

  uncheckedOptions.remove(EXPIRED_SSTABLE_CHECK_FREQUENCY_SECONDS_KEY);

  uncheckedOptions.remove(UNSAFE_AGGRESSIVE_SSTABLE_EXPIRATION_KEY);

  uncheckedOptions=SizeTieredCompactionStrategyOptions.validateOptions(options,uncheckedOptions);

  return uncheckedOptions;

}

