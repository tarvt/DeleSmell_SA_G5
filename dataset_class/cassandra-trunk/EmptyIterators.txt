Location: EmptyIterators.java

Content: 

public static PartitionIterator partition(){

  return EmptyPartitionIterator.instance;

}

Location: EmptyIterators.java

Content: 

public static RowIterator row(TableMetadata metadata,DecoratedKey partitionKey,boolean isReverseOrder){

  return new EmptyRowIterator(metadata,partitionKey,isReverseOrder,Rows.EMPTY_STATIC_ROW);

}

Location: EmptyIterators.java

Content: 

public static UnfilteredPartitionIterator unfilteredPartition(TableMetadata metadata){

  return new EmptyUnfilteredPartitionIterator(metadata);

}

Location: EmptyIterators.java

Content: 

public static UnfilteredRowIterator unfilteredRow(TableMetadata metadata,DecoratedKey partitionKey,boolean isReverseOrder){

  return new EmptyUnfilteredRowIterator(RegularAndStaticColumns.NONE,metadata,partitionKey,isReverseOrder,Rows.EMPTY_STATIC_ROW,DeletionTime.LIVE);

}

Location: EmptyIterators.java

Content: 

public static UnfilteredRowIterator unfilteredRow(TableMetadata metadata,DecoratedKey partitionKey,boolean isReverseOrder,Row staticRow,DeletionTime partitionDeletion){

  RegularAndStaticColumns columns=RegularAndStaticColumns.NONE;

  if (!staticRow.isEmpty())   columns=new RegularAndStaticColumns(Columns.from(staticRow.columns()),Columns.NONE);

 else   staticRow=Rows.EMPTY_STATIC_ROW;

  if (partitionDeletion.isLive())   partitionDeletion=DeletionTime.LIVE;

  return new EmptyUnfilteredRowIterator(columns,metadata,partitionKey,isReverseOrder,staticRow,partitionDeletion);

}

