Location: Selectable.java

Content: 

default int addAndGetIndex(ColumnMetadata def,List<ColumnMetadata> l){

  int idx=l.indexOf(def);

  if (idx < 0) {

    idx=l.size();

    l.add(def);

  }

  return idx;

}

Location: Selectable.java

Content: 

/** 

 * Checks if any processing is performed on the selected columns,  {@code false} otherwise.

 * @return {@code true} if any processing is performed on the selected columns, {@code false} otherwise.

 */

public default boolean processesSelection(){

  return true;

}

Location: Selectable.java

Content: 

/** 

 * Checks if the specified Selectables select columns matching the specified predicate.

 * @param selectables the selectables to check.

 * @return {@code true} if the specified Selectables select columns matching the specified predicate,{@code false} otherwise.

 */

public static boolean selectColumns(List<Selectable> selectables,Predicate<ColumnMetadata> predicate){

  for (  Selectable selectable : selectables) {

    if (selectable.selectColumns(predicate))     return true;

  }

  return false;

}

Location: Selectable.java

Content: 

default ColumnSpecification specForElementOrSlice(Selectable selected,ColumnSpecification receiver,String selectionType){

switch (((CollectionType)receiver.type).kind) {

case LIST:

    throw new InvalidRequestException(String.format("%s selection is only allowed on sets and maps, but %s is a list",selectionType,selected));

case SET:

  return Sets.valueSpecOf(receiver);

case MAP:

return Maps.keySpecOf(receiver);

default :

throw new AssertionError();

}

}

