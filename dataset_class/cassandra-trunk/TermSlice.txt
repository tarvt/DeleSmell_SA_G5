Location: TermSlice.java

Content: 

/** 

 * Returns the boundary value.

 * @param bound the boundary type

 * @return the boundary value

 */

public Term bound(Bound bound){

  return bounds[bound.idx];

}

Location: TermSlice.java

Content: 

/** 

 * Returns the index operator corresponding to the specified boundary.

 * @param b the boundary type

 * @return the index operator corresponding to the specified boundary

 */

public Operator getIndexOperator(Bound b){

  if (b.isStart())   return boundInclusive[b.idx] ? Operator.GTE : Operator.GT;

  return boundInclusive[b.idx] ? Operator.LTE : Operator.LT;

}

Location: TermSlice.java

Content: 

/** 

 * Check if this <code>TermSlice</code> is supported by the specified index.

 * @param index the secondary index

 * @return <code>true</code> this type of <code>TermSlice</code> is supported by the specified index,<code>false</code> otherwise.

 */

public boolean isSupportedBy(ColumnMetadata column,Index index){

  boolean supported=false;

  if (hasBound(Bound.START))   supported|=isInclusive(Bound.START) ? index.supportsExpression(column,Operator.GTE) : index.supportsExpression(column,Operator.GT);

  if (hasBound(Bound.END))   supported|=isInclusive(Bound.END) ? index.supportsExpression(column,Operator.LTE) : index.supportsExpression(column,Operator.LT);

  return supported;

}

Location: TermSlice.java

Content: 

/** 

 * Merges this slice with the specified one.

 * @param otherSlice the slice to merge to

 * @return the new slice resulting from the merge

 */

public TermSlice merge(TermSlice otherSlice){

  if (hasBound(Bound.START)) {

    assert !otherSlice.hasBound(Bound.START);

    return new TermSlice(bound(Bound.START),isInclusive(Bound.START),otherSlice.bound(Bound.END),otherSlice.isInclusive(Bound.END));

  }

  assert !otherSlice.hasBound(Bound.END);

  return new TermSlice(otherSlice.bound(Bound.START),otherSlice.isInclusive(Bound.START),bound(Bound.END),isInclusive(Bound.END));

}

Location: TermSlice.java

Content: 

/** 

 * Creates a new <code>TermSlice</code> with the specified boundary.

 * @param bound the boundary type

 * @param include <code>true</code> if the boundary is inclusive

 * @param term the value

 * @return a new <code>TermSlice</code> instance

 */

public static TermSlice newInstance(Bound bound,boolean include,Term term){

  return bound.isStart() ? new TermSlice(term,include,null,false) : new TermSlice(null,false,term,include);

}

Location: TermSlice.java

Content: 

/** 

 * Creates a new <code>TermSlice</code> with the specified boundaries.

 * @param start the lower boundary

 * @param includeStart <code>true</code> if the lower boundary is inclusive

 * @param end the upper boundary

 * @param includeEnd <code>true</code> if the upper boundary is inclusive

 */

private TermSlice(Term start,boolean includeStart,Term end,boolean includeEnd){

  bounds=new Term[]{start,end};

  boundInclusive=new boolean[]{includeStart,includeEnd};

}

