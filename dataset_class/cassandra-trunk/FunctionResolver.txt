Location: FunctionResolver.java

Content: 

private static Collection<Function> collectCandidates(String keyspace,FunctionName name,String receiverKs,String receiverCf,AbstractType<?> receiverType){

  Collection<Function> candidates=new ArrayList<>();

  if (name.equalsNativeFunction(TOKEN_FUNCTION_NAME))   candidates.add(new TokenFct(Schema.instance.getTableMetadata(receiverKs,receiverCf)));

  if (name.equalsNativeFunction(ToJsonFct.NAME))   throw new InvalidRequestException("toJson() may only be used within the selection clause of SELECT statements");

  if (name.equalsNativeFunction(FromJsonFct.NAME)) {

    if (receiverType == null)     throw new InvalidRequestException("fromJson() cannot be used in the selection clause of a SELECT statement");

    candidates.add(FromJsonFct.getInstance(receiverType));

  }

  if (!name.hasKeyspace()) {

    candidates.addAll(Schema.instance.getFunctions(name.asNativeFunction()));

    candidates.addAll(Schema.instance.getFunctions(new FunctionName(keyspace,name.name)));

  }

 else {

    candidates.addAll(Schema.instance.getFunctions(name));

  }

  return candidates;

}

Location: FunctionResolver.java

Content: 

/** 

 * Checks if at least one of the specified arguments is a marker.

 * @param args the arguments to check

 * @return {@code true} if if at least one of the specified arguments is a marker, {@code false} otherwise

 */

private static boolean containsMarkers(List<? extends AssignmentTestable> args){

  return args.stream().anyMatch(AbstractMarker.Raw.class::isInstance);

}

Location: FunctionResolver.java

Content: 

private static String format(Collection<Function> funs){

  return funs.stream().map(Function::toString).collect(joining(", "));

}

Location: FunctionResolver.java

Content: 

private FunctionResolver(){

}

Location: FunctionResolver.java

Content: 

/** 

 * @param keyspace the current keyspace

 * @param name the name of the function

 * @param providedArgs the arguments provided for the function call

 * @param receiverKs the receiver's keyspace

 * @param receiverCf the receiver's table

 * @param receiverType if the receiver type is known (during inserts, for example), this should be the type ofthe receiver

 * @throws InvalidRequestException

 */

public static Function get(String keyspace,FunctionName name,List<? extends AssignmentTestable> providedArgs,String receiverKs,String receiverCf,AbstractType<?> receiverType) throws InvalidRequestException {

  Collection<Function> candidates=collectCandidates(keyspace,name,receiverKs,receiverCf,receiverType);

  if (candidates.isEmpty())   return null;

  if (candidates.size() == 1) {

    Function fun=candidates.iterator().next();

    validateTypes(keyspace,fun,providedArgs,receiverKs,receiverCf);

    return fun;

  }

  return pickBestMatch(keyspace,name,providedArgs,receiverKs,receiverCf,receiverType,candidates);

}

Location: FunctionResolver.java

Content: 

public static ColumnSpecification makeArgSpec(String receiverKs,String receiverCf,Function fun,int i){

  return new ColumnSpecification(receiverKs,receiverCf,new ColumnIdentifier("arg" + i + '('+ fun.name().toString().toLowerCase()+ ')',true),fun.argTypes().get(i));

}

Location: FunctionResolver.java

Content: 

private static AssignmentTestable.TestResult matchAguments(String keyspace,Function fun,List<? extends AssignmentTestable> providedArgs,String receiverKs,String receiverCf){

  if (providedArgs.size() != fun.argTypes().size())   return AssignmentTestable.TestResult.NOT_ASSIGNABLE;

  AssignmentTestable.TestResult res=AssignmentTestable.TestResult.EXACT_MATCH;

  for (int i=0; i < providedArgs.size(); i++) {

    AssignmentTestable provided=providedArgs.get(i);

    if (provided == null) {

      res=AssignmentTestable.TestResult.WEAKLY_ASSIGNABLE;

      continue;

    }

    ColumnSpecification expected=makeArgSpec(receiverKs,receiverCf,fun,i);

    AssignmentTestable.TestResult argRes=provided.testAssignment(keyspace,expected);

    if (argRes == AssignmentTestable.TestResult.NOT_ASSIGNABLE)     return AssignmentTestable.TestResult.NOT_ASSIGNABLE;

    if (argRes == AssignmentTestable.TestResult.WEAKLY_ASSIGNABLE)     res=AssignmentTestable.TestResult.WEAKLY_ASSIGNABLE;

  }

  return res;

}

Location: FunctionResolver.java

Content: 

/** 

 * Checks that the return type of the specified function can be assigned to the specified receiver.

 * @param fun the function to check

 * @param receiverType the receiver type

 * @return {@code true} if the return type of the specified function can be assigned to the specified receiver,{@code false} otherwise.

 */

private static boolean matchReturnType(Function fun,AbstractType<?> receiverType){

  return receiverType == null || fun.returnType().testAssignment(receiverType).isAssignable();

}

Location: FunctionResolver.java

Content: 

private static Function pickBestMatch(String keyspace,FunctionName name,List<? extends AssignmentTestable> providedArgs,String receiverKs,String receiverCf,AbstractType<?> receiverType,Collection<Function> candidates){

  List<Function> compatibles=null;

  for (  Function toTest : candidates) {

    if (matchReturnType(toTest,receiverType)) {

      AssignmentTestable.TestResult r=matchAguments(keyspace,toTest,providedArgs,receiverKs,receiverCf);

switch (r) {

case EXACT_MATCH:

        return toTest;

case WEAKLY_ASSIGNABLE:

      if (compatibles == null)       compatibles=new ArrayList<>();

    compatibles.add(toTest);

  break;

}

}

}

if (compatibles == null) {

if (OperationFcts.isOperation(name)) throw invalidRequest("the '%s' operation is not supported between %s and %s",OperationFcts.getOperator(name),providedArgs.get(0),providedArgs.get(1));

throw invalidRequest("Invalid call to function %s, none of its type signatures match (known type signatures: %s)",name,format(candidates));

}

if (compatibles.size() > 1) {

if (OperationFcts.isOperation(name)) {

if (receiverType != null && !containsMarkers(providedArgs)) {

for (Function toTest : compatibles) {

  List<AbstractType<?>> argTypes=toTest.argTypes();

  if (receiverType.equals(argTypes.get(0)) && receiverType.equals(argTypes.get(1)))   return toTest;

}

}

throw invalidRequest("Ambiguous '%s' operation with args %s and %s: use type casts to disambiguate",OperationFcts.getOperator(name),providedArgs.get(0),providedArgs.get(1));

}

if (OperationFcts.isNegation(name)) throw invalidRequest("Ambiguous negation: use type casts to disambiguate");

throw invalidRequest("Ambiguous call to function %s (can be matched by following signatures: %s): use type casts to disambiguate",name,format(compatibles));

}

return compatibles.get(0);

}

Location: FunctionResolver.java

Content: 

private static void validateTypes(String keyspace,Function fun,List<? extends AssignmentTestable> providedArgs,String receiverKs,String receiverCf){

  if (providedArgs.size() != fun.argTypes().size())   throw invalidRequest("Invalid number of arguments in call to function %s: %d required but %d provided",fun.name(),fun.argTypes().size(),providedArgs.size());

  for (int i=0; i < providedArgs.size(); i++) {

    AssignmentTestable provided=providedArgs.get(i);

    if (provided == null)     continue;

    ColumnSpecification expected=makeArgSpec(receiverKs,receiverCf,fun,i);

    if (!provided.testAssignment(keyspace,expected).isAssignable())     throw invalidRequest("Type error: %s cannot be passed as argument %d of function %s of type %s",provided,i,fun.name(),expected.type.asCQL3Type());

  }

}

