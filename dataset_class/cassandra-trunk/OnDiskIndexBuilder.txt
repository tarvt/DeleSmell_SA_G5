Location: OnDiskIndexBuilder.java

Content: 

private void addTerm(InMemoryDataTerm term,SequentialWriter out) throws IOException {

  InMemoryPointerTerm ptr=dataLevel.add(term);

  if (ptr == null)   return;

  int levelIdx=0;

  for (; ; ) {

    MutableLevel<InMemoryPointerTerm> level=getIndexLevel(levelIdx++,out);

    if ((ptr=level.add(ptr)) == null)     break;

  }

}

Location: OnDiskIndexBuilder.java

Content: 

public OnDiskIndexBuilder add(ByteBuffer term,DecoratedKey key,long keyPosition){

  if (term.remaining() >= MAX_TERM_SIZE) {

    logger.error("Rejecting value (value size {}, maximum size {}).",FBUtilities.prettyPrintMemory(term.remaining()),FBUtilities.prettyPrintMemory(Short.MAX_VALUE));

    return this;

  }

  TokenTreeBuilder tokens=terms.get(term);

  if (tokens == null) {

    terms.put(term,(tokens=new DynamicTokenTreeBuilder()));

    estimatedBytes+=64 + 48 + term.remaining();

  }

  tokens.add((Long)key.getToken().getTokenValue(),keyPosition);

  minKey=(minKey == null || keyComparator.compare(minKey,key.getKey()) > 0) ? key.getKey() : minKey;

  maxKey=(maxKey == null || keyComparator.compare(maxKey,key.getKey()) < 0) ? key.getKey() : maxKey;

  estimatedBytes+=60 + 40 + 8;

  return this;

}

Location: OnDiskIndexBuilder.java

Content: 

protected static void alignToBlock(SequentialWriter out) throws IOException {

  long endOfBlock=out.position();

  if ((endOfBlock & (BLOCK_SIZE - 1)) != 0)   out.skipBytes((int)(FBUtilities.align(endOfBlock,BLOCK_SIZE) - endOfBlock));

}

Location: OnDiskIndexBuilder.java

Content: 

public long estimatedMemoryUse(){

  return estimatedBytes;

}

Location: OnDiskIndexBuilder.java

Content: 

@VisibleForTesting protected boolean finish(Descriptor descriptor,File file) throws FSWriteError {

  if (terms.isEmpty()) {

    try {

      file.createNewFile();

    }

 catch (    IOException e) {

      throw new FSWriteError(e,file);

    }

    return false;

  }

  SA sa=((termComparator instanceof UTF8Type || termComparator instanceof AsciiType) && mode == Mode.CONTAINS) ? new SuffixSA(termComparator,mode) : new IntegralSA(termComparator,mode);

  for (  Map.Entry<ByteBuffer,TokenTreeBuilder> term : terms.entrySet())   sa.add(term.getKey(),term.getValue());

  finish(descriptor,Pair.create(minKey,maxKey),file,sa.finish());

  return true;

}

Location: OnDiskIndexBuilder.java

Content: 

@SuppressWarnings("resource") protected void finish(Descriptor descriptor,Pair<ByteBuffer,ByteBuffer> range,File file,TermIterator terms){

  SequentialWriter out=null;

  try {

    out=new SequentialWriter(file,WRITER_OPTION);

    out.writeUTF(descriptor.version.toString());

    out.writeShort(termSize.size);

    ByteBufferUtil.writeWithShortLength(terms.minTerm(),out);

    ByteBufferUtil.writeWithShortLength(terms.maxTerm(),out);

    ByteBufferUtil.writeWithShortLength(range.left,out);

    ByteBufferUtil.writeWithShortLength(range.right,out);

    out.writeUTF(mode.toString());

    out.writeBoolean(marksPartials);

    out.skipBytes((int)(BLOCK_SIZE - out.position()));

    dataLevel=mode == Mode.SPARSE ? new DataBuilderLevel(out,new MutableDataBlock(termComparator,mode)) : new MutableLevel<>(out,new MutableDataBlock(termComparator,mode));

    while (terms.hasNext()) {

      Pair<IndexedTerm,TokenTreeBuilder> term=terms.next();

      addTerm(new InMemoryDataTerm(term.left,term.right),out);

    }

    dataLevel.finalFlush();

    for (    MutableLevel l : levels)     l.flush();

    final long levelIndexPosition=out.position();

    out.writeInt(levels.size());

    for (int i=levels.size() - 1; i >= 0; i--)     levels.get(i).flushMetadata();

    dataLevel.flushMetadata();

    out.writeLong(levelIndexPosition);

    out.sync();

  }

 catch (  IOException e) {

    throw new FSWriteError(e,file);

  }

 finally {

    FileUtils.closeQuietly(out);

  }

}

Location: OnDiskIndexBuilder.java

Content: 

/** 

 * Finishes up index building process by creating/populating index file.

 * @param indexFile The file to write index contents to.

 * @return true if index was written successfully, false otherwise (e.g. if index was empty).

 * @throws FSWriteError on I/O error.

 */

public boolean finish(File indexFile) throws FSWriteError {

  return finish(Descriptor.CURRENT,indexFile);

}

Location: OnDiskIndexBuilder.java

Content: 

public void finish(Pair<ByteBuffer,ByteBuffer> range,File file,TermIterator terms){

  finish(Descriptor.CURRENT,range,file,terms);

}

Location: OnDiskIndexBuilder.java

Content: 

private MutableLevel<InMemoryPointerTerm> getIndexLevel(int idx,SequentialWriter out){

  if (levels.size() == 0)   levels.add(new MutableLevel<>(out,new MutableBlock<>()));

  if (levels.size() - 1 < idx) {

    int toAdd=idx - (levels.size() - 1);

    for (int i=0; i < toAdd; i++)     levels.add(new MutableLevel<>(out,new MutableBlock<>()));

  }

  return levels.get(idx);

}

Location: OnDiskIndexBuilder.java

Content: 

public OnDiskIndexBuilder(AbstractType<?> keyComparator,AbstractType<?> comparator,Mode mode){

  this(keyComparator,comparator,mode,true);

}

Location: OnDiskIndexBuilder.java

Content: 

public OnDiskIndexBuilder(AbstractType<?> keyComparator,AbstractType<?> comparator,Mode mode,boolean marksPartials){

  this.keyComparator=keyComparator;

  this.termComparator=comparator;

  this.terms=new HashMap<>();

  this.termSize=TermSize.sizeOf(comparator);

  this.mode=mode;

  this.marksPartials=marksPartials;

}

