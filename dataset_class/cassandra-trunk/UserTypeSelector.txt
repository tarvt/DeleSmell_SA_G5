Location: UserTypeSelector.java

Content: 

public static Factory newFactory(final AbstractType<?> type,final Map<FieldIdentifier,Factory> factories){

  return new Factory(){

    protected String getColumnName(){

      return UserTypes.userTypeToString(factories,Factory::getColumnName);

    }

    protected AbstractType<?> getReturnType(){

      return type;

    }

    protected final void addColumnMapping(    SelectionColumnMapping mapping,    ColumnSpecification resultsColumn){

      SelectionColumnMapping tmpMapping=SelectionColumnMapping.newMapping();

      for (      Factory factory : factories.values()) {

        factory.addColumnMapping(tmpMapping,resultsColumn);

      }

      if (tmpMapping.getMappings().get(resultsColumn).isEmpty())       mapping.addMapping(resultsColumn,(ColumnMetadata)null);

 else       mapping.addMapping(resultsColumn,tmpMapping.getMappings().values());

    }

    public Selector newInstance(    final QueryOptions options){

      Map<FieldIdentifier,Selector> fields=new HashMap<>(factories.size());

      for (      Entry<FieldIdentifier,Factory> factory : factories.entrySet())       fields.put(factory.getKey(),factory.getValue().newInstance(options));

      return new UserTypeSelector(type,fields);

    }

    @Override public boolean isAggregateSelectorFactory(){

      for (      Factory factory : factories.values()) {

        if (factory.isAggregateSelectorFactory())         return true;

      }

      return false;

    }

    @Override public void addFunctionsTo(    List<Function> functions){

      for (      Factory factory : factories.values())       factory.addFunctionsTo(functions);

    }

    @Override public boolean isWritetimeSelectorFactory(){

      for (      Factory factory : factories.values()) {

        if (factory.isWritetimeSelectorFactory())         return true;

      }

      return false;

    }

    @Override public boolean isTTLSelectorFactory(){

      for (      Factory factory : factories.values()) {

        if (factory.isTTLSelectorFactory())         return true;

      }

      return false;

    }

    @Override boolean areAllFetchedColumnsKnown(){

      for (      Factory factory : factories.values()) {

        if (!factory.areAllFetchedColumnsKnown())         return false;

      }

      return true;

    }

    @Override void addFetchedColumns(    Builder builder){

      for (      Factory factory : factories.values())       factory.addFetchedColumns(builder);

    }

  }

;

}

Location: UserTypeSelector.java

Content: 

private UserTypeSelector(AbstractType<?> type,Map<FieldIdentifier,Selector> fields){

  this.type=type;

  this.fields=fields;

}

