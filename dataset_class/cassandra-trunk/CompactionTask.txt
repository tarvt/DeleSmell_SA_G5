Location: CompactionTask.java

Content: 

public static synchronized long addToTotalBytesCompacted(long bytesCompacted){

  return totalBytesCompacted+=bytesCompacted;

}

Location: CompactionTask.java

Content: 

protected void buildCompactionCandidatesForAvailableDiskSpace(final Set<SSTableReader> fullyExpiredSSTables){

  if (!cfs.isCompactionDiskSpaceCheckEnabled() && compactionType == OperationType.COMPACTION) {

    logger.info("Compaction space check is disabled");

    return;

  }

  final Set<SSTableReader> nonExpiredSSTables=Sets.difference(transaction.originals(),fullyExpiredSSTables);

  CompactionStrategyManager strategy=cfs.getCompactionStrategyManager();

  int sstablesRemoved=0;

  while (!nonExpiredSSTables.isEmpty()) {

    long expectedWriteSize=cfs.getExpectedCompactedFileSize(nonExpiredSSTables,compactionType);

    long estimatedSSTables=Math.max(1,expectedWriteSize / strategy.getMaxSSTableBytes());

    if (cfs.getDirectories().hasAvailableDiskSpace(estimatedSSTables,expectedWriteSize))     break;

    if (!reduceScopeForLimitedSpace(nonExpiredSSTables,expectedWriteSize)) {

      if (partialCompactionsAcceptable() && fullyExpiredSSTables.size() > 0) {

        assert transaction.originals().equals(fullyExpiredSSTables);

        break;

      }

      String msg=String.format("Not enough space for compaction, estimated sstables = %d, expected write size = %d",estimatedSSTables,expectedWriteSize);

      logger.warn(msg);

      CompactionManager.instance.incrementAborted();

      throw new RuntimeException(msg);

    }

    sstablesRemoved++;

    logger.warn("Not enough space for compaction, {}MB estimated.  Reducing scope.",(float)expectedWriteSize / 1024 / 1024);

  }

  if (sstablesRemoved > 0) {

    CompactionManager.instance.incrementCompactionsReduced();

    CompactionManager.instance.incrementSstablesDropppedFromCompactions(sstablesRemoved);

  }

}

Location: CompactionTask.java

Content: 

public CompactionTask(ColumnFamilyStore cfs,LifecycleTransaction txn,int gcBefore){

  this(cfs,txn,gcBefore,false);

}

Location: CompactionTask.java

Content: 

public CompactionTask(ColumnFamilyStore cfs,LifecycleTransaction txn,int gcBefore,boolean keepOriginals){

  super(cfs,txn);

  this.gcBefore=gcBefore;

  this.keepOriginals=keepOriginals;

}

Location: CompactionTask.java

Content: 

@Deprecated public CompactionTask(ColumnFamilyStore cfs,LifecycleTransaction txn,int gcBefore,boolean offline,boolean keepOriginals){

  this(cfs,txn,gcBefore,keepOriginals);

}

Location: CompactionTask.java

Content: 

public static boolean getIsTransient(Set<SSTableReader> sstables){

  if (sstables.isEmpty()) {

    return false;

  }

  boolean isTransient=sstables.iterator().next().isTransient();

  if (!Iterables.all(sstables,sstable -> sstable.isTransient() == isTransient)) {

    throw new RuntimeException("Attempting to compact transient sstables with non transient sstables");

  }

  return isTransient;

}

Location: CompactionTask.java

Content: 

public static long getMaxDataAge(Collection<SSTableReader> sstables){

  long max=0;

  for (  SSTableReader sstable : sstables) {

    if (sstable.maxDataAge > max)     max=sstable.maxDataAge;

  }

  return max;

}

Location: CompactionTask.java

Content: 

public static long getMinRepairedAt(Set<SSTableReader> actuallyCompact){

  long minRepairedAt=Long.MAX_VALUE;

  for (  SSTableReader sstable : actuallyCompact)   minRepairedAt=Math.min(minRepairedAt,sstable.getSSTableMetadata().repairedAt);

  if (minRepairedAt == Long.MAX_VALUE)   return ActiveRepairService.UNREPAIRED_SSTABLE;

  return minRepairedAt;

}

Location: CompactionTask.java

Content: 

public static UUID getPendingRepair(Set<SSTableReader> sstables){

  if (sstables.isEmpty()) {

    return ActiveRepairService.NO_PENDING_REPAIR;

  }

  Set<UUID> ids=new HashSet<>();

  for (  SSTableReader sstable : sstables)   ids.add(sstable.getSSTableMetadata().pendingRepair);

  if (ids.size() != 1)   throw new RuntimeException(String.format("Attempting to compact pending repair sstables with sstables from other repair, or sstables not pending repair: %s",ids));

  return ids.iterator().next();

}

Location: CompactionTask.java

Content: 

public boolean reduceScopeForLimitedSpace(Set<SSTableReader> nonExpiredSSTables,long expectedSize){

  if (partialCompactionsAcceptable() && transaction.originals().size() > 1) {

    logger.warn("insufficient space to compact all requested files. {}MB required, {}",(float)expectedSize / 1024 / 1024,StringUtils.join(transaction.originals(),", "));

    SSTableReader removedSSTable=cfs.getMaxSizeFile(nonExpiredSSTables);

    transaction.cancel(removedSSTable);

    return true;

  }

  return false;

}

Location: CompactionTask.java

Content: 

/** 

 * For internal use and testing only.  The rest of the system should go through the submit* methods, which are properly serialized. Caller is in charge of marking/unmarking the sstables as compacting.

 */

protected void runMayThrow() throws Exception {

  assert transaction != null;

  if (transaction.originals().isEmpty())   return;

  CompactionStrategyManager strategy=cfs.getCompactionStrategyManager();

  if (DatabaseDescriptor.isSnapshotBeforeCompaction())   cfs.snapshotWithoutFlush(System.currentTimeMillis() + "-compact-" + cfs.name);

  try (CompactionController controller=getCompactionController(transaction.originals())){

    final Set<SSTableReader> fullyExpiredSSTables=controller.getFullyExpiredSSTables();

    buildCompactionCandidatesForAvailableDiskSpace(fullyExpiredSSTables);

    assert !Iterables.any(transaction.originals(),new Predicate<SSTableReader>(){

      @Override public boolean apply(      SSTableReader sstable){

        return !sstable.descriptor.cfname.equals(cfs.name);

      }

    }

);

    UUID taskId=transaction.opId();

    StringBuilder ssTableLoggerMsg=new StringBuilder("[");

    for (    SSTableReader sstr : transaction.originals()) {

      ssTableLoggerMsg.append(String.format("%s:level=%d, ",sstr.getFilename(),sstr.getSSTableLevel()));

    }

    ssTableLoggerMsg.append("]");

    logger.info("Compacting ({}) {}",taskId,ssTableLoggerMsg);

    RateLimiter limiter=CompactionManager.instance.getRateLimiter();

    long start=System.nanoTime();

    long startTime=System.currentTimeMillis();

    long totalKeysWritten=0;

    long estimatedKeys=0;

    long inputSizeBytes;

    Set<SSTableReader> actuallyCompact=Sets.difference(transaction.originals(),fullyExpiredSSTables);

    Collection<SSTableReader> newSStables;

    long[] mergedRowCounts;

    long totalSourceCQLRows;

    int nowInSec=FBUtilities.nowInSeconds();

    try (Refs<SSTableReader> refs=Refs.ref(actuallyCompact);AbstractCompactionStrategy.ScannerList scanners=strategy.getScanners(actuallyCompact);CompactionIterator ci=new CompactionIterator(compactionType,scanners.scanners,controller,nowInSec,taskId)){

      long lastCheckObsoletion=start;

      inputSizeBytes=scanners.getTotalCompressedSize();

      double compressionRatio=scanners.getCompressionRatio();

      if (compressionRatio == MetadataCollector.NO_COMPRESSION_RATIO)       compressionRatio=1.0;

      long lastBytesScanned=0;

      activeCompactions.beginCompaction(ci);

      try (CompactionAwareWriter writer=getCompactionAwareWriter(cfs,getDirectories(),transaction,actuallyCompact)){

        if (!controller.cfs.getCompactionStrategyManager().isActive())         throw new CompactionInterruptedException(ci.getCompactionInfo());

        estimatedKeys=writer.estimatedKeys();

        while (ci.hasNext()) {

          if (writer.append(ci.next()))           totalKeysWritten++;

          long bytesScanned=scanners.getTotalBytesScanned();

          CompactionManager.compactionRateLimiterAcquire(limiter,bytesScanned,lastBytesScanned,compressionRatio);

          lastBytesScanned=bytesScanned;

          if (System.nanoTime() - lastCheckObsoletion > TimeUnit.MINUTES.toNanos(1L)) {

            controller.maybeRefreshOverlaps();

            lastCheckObsoletion=System.nanoTime();

          }

        }

        newSStables=writer.finish();

      }

  finally {

        activeCompactions.finishCompaction(ci);

        mergedRowCounts=ci.getMergedRowCounts();

        totalSourceCQLRows=ci.getTotalSourceCQLRows();

      }

    }

     if (transaction.isOffline()) {

      Refs.release(Refs.selfRefs(newSStables));

    }

 else {

      long durationInNano=System.nanoTime() - start;

      long dTime=TimeUnit.NANOSECONDS.toMillis(durationInNano);

      long startsize=inputSizeBytes;

      long endsize=SSTableReader.getTotalBytes(newSStables);

      double ratio=(double)endsize / (double)startsize;

      StringBuilder newSSTableNames=new StringBuilder();

      for (      SSTableReader reader : newSStables)       newSSTableNames.append(reader.descriptor.baseFilename()).append(",");

      long totalSourceRows=0;

      for (int i=0; i < mergedRowCounts.length; i++)       totalSourceRows+=mergedRowCounts[i] * (i + 1);

      String mergeSummary=updateCompactionHistory(cfs.keyspace.getName(),cfs.getTableName(),mergedRowCounts,startsize,endsize);

      logger.info(String.format("Compacted (%s) %d sstables to [%s] to level=%d.  %s to %s (~%d%% of original) in %,dms.  Read Throughput = %s, Write Throughput = %s, Row Throughput = ~%,d/s.  %,d total partitions merged to %,d.  Partition merge counts were {%s}",taskId,transaction.originals().size(),newSSTableNames.toString(),getLevel(),FBUtilities.prettyPrintMemory(startsize),FBUtilities.prettyPrintMemory(endsize),(int)(ratio * 100),dTime,FBUtilities.prettyPrintMemoryPerSecond(startsize,durationInNano),FBUtilities.prettyPrintMemoryPerSecond(endsize,durationInNano),(int)totalSourceCQLRows / (TimeUnit.NANOSECONDS.toSeconds(durationInNano) + 1),totalSourceRows,totalKeysWritten,mergeSummary));

      if (logger.isTraceEnabled()) {

        logger.trace("CF Total Bytes Compacted: {}",FBUtilities.prettyPrintMemory(CompactionTask.addToTotalBytesCompacted(endsize)));

        logger.trace("Actual #keys: {}, Estimated #keys:{}, Err%: {}",totalKeysWritten,estimatedKeys,((double)(totalKeysWritten - estimatedKeys) / totalKeysWritten));

      }

      cfs.getCompactionStrategyManager().compactionLogger.compaction(startTime,transaction.originals(),System.currentTimeMillis(),newSStables);

      cfs.metric.compactionBytesWritten.inc(endsize);

    }

  }

 }

Location: CompactionTask.java

Content: 

public static String updateCompactionHistory(String keyspaceName,String columnFamilyName,long[] mergedRowCounts,long startSize,long endSize){

  StringBuilder mergeSummary=new StringBuilder(mergedRowCounts.length * 10);

  Map<Integer,Long> mergedRows=new HashMap<>();

  for (int i=0; i < mergedRowCounts.length; i++) {

    long count=mergedRowCounts[i];

    if (count == 0)     continue;

    int rows=i + 1;

    mergeSummary.append(String.format("%d:%d, ",rows,count));

    mergedRows.put(rows,count);

  }

  SystemKeyspace.updateCompactionHistory(keyspaceName,columnFamilyName,System.currentTimeMillis(),startSize,endSize,mergedRows);

  return mergeSummary.toString();

}

