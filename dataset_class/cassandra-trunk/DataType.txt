Location: DataType.java

Content: 

/** 

 * Returns the ASCII type.

 * @return The ASCII type.

 */

public static DataType ascii(){

  return primitiveTypeMap.get(Name.ASCII);

}

Location: DataType.java

Content: 

/** 

 * Returns a String representation of this data type suitable for inclusion as a parameter type in a function or aggregate signature. <p>In such places, the String representation might vary from the canonical one as returned by {@link #toString()}; e.g. the  {@code frozen} keyword is not accepted.

 * @return a String representation of this data type suitable for inclusion as a parameter type ina function or aggregate signature.

 */

public String asFunctionParameterString(){

  return toString();

}

Location: DataType.java

Content: 

/** 

 * Returns the BIGINT type.

 * @return The BIGINT type.

 */

public static DataType bigint(){

  return primitiveTypeMap.get(Name.BIGINT);

}

Location: DataType.java

Content: 

/** 

 * Returns the BLOB type.

 * @return The BLOB type.

 */

public static DataType blob(){

  return primitiveTypeMap.get(Name.BLOB);

}

Location: DataType.java

Content: 

/** 

 * Returns the BOOLEAN type.

 * @return The BOOLEAN type.

 */

public static DataType cboolean(){

  return primitiveTypeMap.get(Name.BOOLEAN);

}

Location: DataType.java

Content: 

/** 

 * Returns the DOUBLE type.

 * @return The DOUBLE type.

 */

public static DataType cdouble(){

  return primitiveTypeMap.get(Name.DOUBLE);

}

Location: DataType.java

Content: 

/** 

 * Returns the FLOAT type.

 * @return The FLOAT type.

 */

public static DataType cfloat(){

  return primitiveTypeMap.get(Name.FLOAT);

}

Location: DataType.java

Content: 

/** 

 * Returns the INT type.

 * @return The INT type.

 */

public static DataType cint(){

  return primitiveTypeMap.get(Name.INT);

}

Location: DataType.java

Content: 

/** 

 * Returns the COUNTER type.

 * @return The COUNTER type.

 */

public static DataType counter(){

  return primitiveTypeMap.get(Name.COUNTER);

}

Location: DataType.java

Content: 

/** 

 * Returns a Custom type. <p>A custom type is defined by the name of the class used on the Cassandra side to implement it. Note that the support for custom types by the driver is limited. <p>The use of custom types is rarely useful and is thus not encouraged.

 * @param typeClassName the server-side fully qualified class name for the type.

 * @return the custom type for {@code typeClassName}.

 */

public static DataType.CustomType custom(String typeClassName){

  if (typeClassName == null)   throw new NullPointerException();

  return new DataType.CustomType(Name.CUSTOM,typeClassName);

}

Location: DataType.java

Content: 

protected DataType(DataType.Name name){

  this.name=name;

}

Location: DataType.java

Content: 

/** 

 * Returns the DATE type.

 * @return The DATE type.

 */

public static DataType date(){

  return primitiveTypeMap.get(Name.DATE);

}

Location: DataType.java

Content: 

/** 

 * Returns the DECIMAL type.

 * @return The DECIMAL type.

 */

public static DataType decimal(){

  return primitiveTypeMap.get(Name.DECIMAL);

}

Location: DataType.java

Content: 

/** 

 * Returns the Duration type, introduced in Cassandra 3.10. <p>Note that a Duration type does not have a native representation in CQL, and technically, is merely a special  {@link DataType#custom(String) custom type} from the driver's point of view.

 * @return the Duration type. The returned instance is a singleton.

 */

public static DataType duration(){

  return primitiveTypeMap.get(Name.DURATION);

}

Location: DataType.java

Content: 

/** 

 * Returns the type arguments of this type. <p>Note that only the collection types (LIST, MAP, SET) have type arguments. For the other types, this will return an empty list. <p>For the collection types: <ul> <li>For lists and sets, this method returns one argument, the type of the elements. <li>For maps, this method returns two arguments, the first one is the type of the map keys, the second one is the type of the map values. </ul>

 * @return an immutable list containing the type arguments of this type.

 */

public List<DataType> getTypeArguments(){

  return Collections.emptyList();

}

Location: DataType.java

Content: 

/** 

 * Returns the INET type.

 * @return The INET type.

 */

public static DataType inet(){

  return primitiveTypeMap.get(Name.INET);

}

Location: DataType.java

Content: 

/** 

 * Returns whether this data type is frozen. <p>This applies to User Defined Types, tuples and nested collections. Frozen types are serialized as a single value in Cassandra's storage engine, whereas non-frozen types are stored in a form that allows updates to individual subfields.

 * @return whether this data type is frozen.

 */

public abstract boolean isFrozen();

Location: DataType.java

Content: 

/** 

 * Returns the type of "not frozen" lists of  {@code elementType} elements.<p>This is a shorthand for  {@code list(elementType, false);}.

 * @param elementType the type of the list elements.

 * @return the type of "not frozen" lists of {@code elementType} elements.

 */

public static CollectionType list(DataType elementType){

  return list(elementType,false);

}

Location: DataType.java

Content: 

/** 

 * Returns the type of lists of  {@code elementType} elements.

 * @param elementType the type of the list elements.

 * @param frozen      whether the list is frozen.

 * @return the type of lists of {@code elementType} elements.

 */

public static CollectionType list(DataType elementType,boolean frozen){

  return new DataType.CollectionType(Name.LIST,ImmutableList.of(elementType),frozen);

}

Location: DataType.java

Content: 

/** 

 * Returns the type of "not frozen" maps of  {@code keyType} to {@code valueType} elements.<p>This is a shorthand for  {@code map(keyType, valueType, false);}.

 * @param keyType   the type of the map keys.

 * @param valueType the type of the map values.

 * @return the type of "not frozen" maps of {@code keyType} to {@code valueType} elements.

 */

public static CollectionType map(DataType keyType,DataType valueType){

  return map(keyType,valueType,false);

}

Location: DataType.java

Content: 

/** 

 * Returns the type of maps of  {@code keyType} to {@code valueType} elements.

 * @param keyType   the type of the map keys.

 * @param valueType the type of the map values.

 * @param frozen    whether the map is frozen.

 * @return the type of maps of {@code keyType} to {@code valueType} elements.

 */

public static CollectionType map(DataType keyType,DataType valueType,boolean frozen){

  return new DataType.CollectionType(Name.MAP,ImmutableList.of(keyType,valueType),frozen);

}

Location: DataType.java

Content: 

/** 

 * Returns the type of "not frozen" sets of  {@code elementType} elements.<p>This is a shorthand for  {@code set(elementType, false);}.

 * @param elementType the type of the set elements.

 * @return the type of "not frozen" sets of {@code elementType} elements.

 */

public static CollectionType set(DataType elementType){

  return set(elementType,false);

}

Location: DataType.java

Content: 

/** 

 * Returns the type of sets of  {@code elementType} elements.

 * @param elementType the type of the set elements.

 * @param frozen      whether the set is frozen.

 * @return the type of sets of {@code elementType} elements.

 */

public static CollectionType set(DataType elementType,boolean frozen){

  return new DataType.CollectionType(Name.SET,ImmutableList.of(elementType),frozen);

}

Location: DataType.java

Content: 

/** 

 * Returns the SMALLINT type.

 * @return The SMALLINT type.

 */

public static DataType smallint(){

  return primitiveTypeMap.get(Name.SMALLINT);

}

Location: DataType.java

Content: 

/** 

 * Returns the TEXT type.

 * @return The TEXT type.

 */

public static DataType text(){

  return primitiveTypeMap.get(Name.TEXT);

}

Location: DataType.java

Content: 

/** 

 * Returns the TIME type.

 * @return The TIME type.

 */

public static DataType time(){

  return primitiveTypeMap.get(Name.TIME);

}

Location: DataType.java

Content: 

/** 

 * Returns the TIMEUUID type.

 * @return The TIMEUUID type.

 */

public static DataType timeuuid(){

  return primitiveTypeMap.get(Name.TIMEUUID);

}

Location: DataType.java

Content: 

/** 

 * Returns the TINYINT type.

 * @return The TINYINT type.

 */

public static DataType tinyint(){

  return primitiveTypeMap.get(Name.TINYINT);

}

Location: DataType.java

Content: 

/** 

 * Returns the UUID type.

 * @return The UUID type.

 */

public static DataType uuid(){

  return primitiveTypeMap.get(Name.UUID);

}

Location: DataType.java

Content: 

/** 

 * Returns the VARCHAR type.

 * @return The VARCHAR type.

 */

public static DataType varchar(){

  return primitiveTypeMap.get(Name.VARCHAR);

}

Location: DataType.java

Content: 

/** 

 * Returns the VARINT type.

 * @return The VARINT type.

 */

public static DataType varint(){

  return primitiveTypeMap.get(Name.VARINT);

}

