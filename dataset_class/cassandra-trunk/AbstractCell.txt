Location: AbstractCell.java

Content: 

protected AbstractCell(ColumnMetadata column){

  super(column);

}

Location: AbstractCell.java

Content: 

public static <V1,V2>boolean equals(Cell<V1> left,Cell<V2> right){

  return left.column().equals(right.column()) && left.isCounterCell() == right.isCounterCell() && left.timestamp() == right.timestamp() && left.ttl() == right.ttl() && left.localDeletionTime() == right.localDeletionTime() && ValueAccessor.equals(left.value(),left.accessor(),right.value(),right.accessor()) && Objects.equals(left.path(),right.path());

}

Location: AbstractCell.java

Content: 

private String livenessInfoString(){

  if (isExpiring())   return String.format("ts=%d ttl=%d ldt=%d",timestamp(),ttl(),localDeletionTime());

 else   if (isTombstone())   return String.format("ts=%d ldt=%d",timestamp(),localDeletionTime());

 else   return String.format("ts=%d",timestamp());

}

Location: AbstractCell.java

Content: 

private String safeToString(AbstractType<?> type){

  try {

    return type.getString(value(),accessor());

  }

 catch (  Exception e) {

    return "0x" + ByteBufferUtil.bytesToHex(buffer());

  }

}

