Location: Directories.java

Content: 

public static void clearSnapshot(String snapshotName,List<File> snapshotDirectories,RateLimiter snapshotRateLimiter){

  String tag=snapshotName == null ? "" : snapshotName;

  for (  File dir : snapshotDirectories) {

    File snapshotDir=new File(dir,join(SNAPSHOT_SUBDIR,tag));

    if (snapshotDir.exists()) {

      logger.trace("Removing snapshot directory {}",snapshotDir);

      try {

        FileUtils.deleteRecursiveWithThrottle(snapshotDir,snapshotRateLimiter);

      }

 catch (      FSWriteError e) {

        if (FBUtilities.isWindows)         SnapshotDeletingTask.addFailedSnapshot(snapshotDir);

 else         throw e;

      }

    }

  }

}

Location: Directories.java

Content: 

public Directories(final TableMetadata metadata){

  this(metadata,dataDirectories);

}

Location: Directories.java

Content: 

public Directories(final TableMetadata metadata,Collection<DataDirectory> paths){

  this(metadata,paths.toArray(new DataDirectory[paths.size()]));

}

Location: Directories.java

Content: 

/** 

 * Create Directories of given ColumnFamily. SSTable directories are created under data_directories defined in cassandra.yaml if not exist at this time.

 * @param metadata metadata of ColumnFamily

 */

public Directories(final TableMetadata metadata,DataDirectory[] paths){

  this.metadata=metadata;

  this.paths=paths;

  ImmutableMap.Builder<Path,DataDirectory> canonicalPathsBuilder=ImmutableMap.builder();

  String tableId=metadata.id.toHexString();

  int idx=metadata.name.indexOf(SECONDARY_INDEX_NAME_SEPARATOR);

  String cfName=idx >= 0 ? metadata.name.substring(0,idx) : metadata.name;

  String indexNameWithDot=idx >= 0 ? metadata.name.substring(idx) : null;

  this.dataPaths=new File[paths.length];

  String oldSSTableRelativePath=join(metadata.keyspace,cfName);

  for (int i=0; i < paths.length; ++i) {

    File dataPath=new File(paths[i].location,oldSSTableRelativePath);

    dataPaths[i]=dataPath;

    canonicalPathsBuilder.put(Paths.get(FileUtils.getCanonicalPath(dataPath)),paths[i]);

  }

  boolean olderDirectoryExists=Iterables.any(Arrays.asList(dataPaths),File::exists);

  if (!olderDirectoryExists) {

    canonicalPathsBuilder=ImmutableMap.builder();

    String newSSTableRelativePath=join(metadata.keyspace,cfName + '-' + tableId);

    for (int i=0; i < paths.length; ++i) {

      File dataPath=new File(paths[i].location,newSSTableRelativePath);

      dataPaths[i]=dataPath;

      canonicalPathsBuilder.put(Paths.get(FileUtils.getCanonicalPath(dataPath)),paths[i]);

    }

  }

  if (indexNameWithDot != null) {

    canonicalPathsBuilder=ImmutableMap.builder();

    for (int i=0; i < paths.length; ++i) {

      File dataPath=new File(dataPaths[i],indexNameWithDot);

      dataPaths[i]=dataPath;

      canonicalPathsBuilder.put(Paths.get(FileUtils.getCanonicalPath(dataPath)),paths[i]);

    }

  }

  for (  File dir : dataPaths) {

    try {

      FileUtils.createDirectory(dir);

    }

 catch (    FSError e) {

      logger.error("Failed to create {} directory",dir);

      JVMStabilityInspector.inspectThrowable(e);

    }

  }

  if (indexNameWithDot != null) {

    for (    File dataPath : dataPaths) {

      File[] indexFiles=dataPath.getParentFile().listFiles(new FileFilter(){

        @Override public boolean accept(        File file){

          if (file.isDirectory())           return false;

          Descriptor desc=SSTable.tryDescriptorFromFilename(file);

          return desc != null && desc.ksname.equals(metadata.keyspace) && desc.cfname.equals(metadata.name);

        }

      }

);

      for (      File indexFile : indexFiles) {

        File destFile=new File(dataPath,indexFile.getName());

        logger.trace("Moving index file {} to {}",indexFile,destFile);

        FileUtils.renameWithConfirm(indexFile,destFile);

      }

    }

  }

  canonicalPathToDD=canonicalPathsBuilder.build();

}

Location: Directories.java

Content: 

public Descriptor find(String filename){

  for (  File dir : dataPaths) {

    File file=new File(dir,filename);

    if (file.exists())     return Descriptor.fromFilename(file);

  }

  return null;

}

Location: Directories.java

Content: 

public static File getBackupsDirectory(Descriptor desc){

  return getBackupsDirectory(desc.directory);

}

Location: Directories.java

Content: 

public static File getBackupsDirectory(File location){

  if (isSecondaryIndexFolder(location)) {

    return getOrCreate(location.getParentFile(),BACKUPS_SUBDIR,location.getName());

  }

 else {

    return getOrCreate(location,BACKUPS_SUBDIR);

  }

}

Location: Directories.java

Content: 

public List<File> getCFDirectories(){

  List<File> result=new ArrayList<>();

  for (  File dataDirectory : dataPaths) {

    if (dataDirectory.isDirectory())     result.add(dataDirectory);

  }

  return result;

}

Location: Directories.java

Content: 

public DataDirectory getDataDirectoryForFile(Descriptor descriptor){

  if (descriptor != null)   return canonicalPathToDD.get(descriptor.directory.toPath());

  return null;

}

Location: Directories.java

Content: 

/** 

 * Basically the same as calling  {@link #getWriteableLocationAsFile(long)} with an unknown size ({@code -1L}), which may return any allowed directory - even a data directory that has no usable space. Do not use this method in production code.

 * @throws FSWriteError if all directories are disallowed.

 */

public File getDirectoryForNewSSTables(){

  return getWriteableLocationAsFile(-1L);

}

Location: Directories.java

Content: 

private static File getEphemeralSnapshotMarkerFile(File snapshotDirectory){

  return new File(snapshotDirectory,"ephemeral.snapshot");

}

Location: Directories.java

Content: 

public static List<File> getKSChildDirectories(String ksName){

  return getKSChildDirectories(ksName,dataDirectories);

}

Location: Directories.java

Content: 

public static List<File> getKSChildDirectories(String ksName,DataDirectory[] directories){

  List<File> result=new ArrayList<>();

  for (  DataDirectory dataDirectory : directories) {

    File ksDir=new File(dataDirectory.location,ksName);

    File[] cfDirs=ksDir.listFiles();

    if (cfDirs == null)     continue;

    for (    File cfDir : cfDirs) {

      if (cfDir.isDirectory())       result.add(cfDir);

    }

  }

  return result;

}

Location: Directories.java

Content: 

/** 

 * Returns SSTable location which is inside given data directory.

 * @param dataDirectory

 * @return SSTable location

 */

public File getLocationForDisk(DataDirectory dataDirectory){

  if (dataDirectory != null)   for (  File dir : dataPaths) {

    Path dirPath=Paths.get(dir.getAbsolutePath());

    Path locationPath=Paths.get(dataDirectory.location.getAbsolutePath());

    if (dirPath.startsWith(locationPath))     return dir;

  }

  return null;

}

Location: Directories.java

Content: 

public File getNewEphemeralSnapshotMarkerFile(String snapshotName){

  File snapshotDir=new File(getWriteableLocationAsFile(1L),join(SNAPSHOT_SUBDIR,snapshotName));

  return getEphemeralSnapshotMarkerFile(snapshotDir);

}

Location: Directories.java

Content: 

private static File getOrCreate(File base,String... subdirs){

  File dir=subdirs == null || subdirs.length == 0 ? base : new File(base,join(subdirs));

  if (dir.exists()) {

    if (!dir.isDirectory())     throw new AssertionError(String.format("Invalid directory path %s: path exists but is not a directory",dir));

  }

 else   if (!dir.mkdirs() && !(dir.exists() && dir.isDirectory())) {

    throw new FSWriteError(new IOException("Unable to create directory " + dir),dir);

  }

  return dir;

}

Location: Directories.java

Content: 

/** 

 * @return Raw size on disk for all directories

 */

public long getRawDiretoriesSize(){

  long totalAllocatedSize=0L;

  for (  File path : dataPaths)   totalAllocatedSize+=FileUtils.folderSize(path);

  return totalAllocatedSize;

}

Location: Directories.java

Content: 

/** 

 * @return  Return a map of all snapshots to space being usedThe pair for a snapshot has size on disk and true size.

 */

public Map<String,SnapshotSizeDetails> getSnapshotDetails(){

  List<File> snapshots=listSnapshots();

  final Map<String,SnapshotSizeDetails> snapshotSpaceMap=Maps.newHashMapWithExpectedSize(snapshots.size());

  for (  File snapshot : snapshots) {

    final long sizeOnDisk=FileUtils.folderSize(snapshot);

    final long trueSize=getTrueAllocatedSizeIn(snapshot);

    SnapshotSizeDetails spaceUsed=snapshotSpaceMap.get(snapshot.getName());

    if (spaceUsed == null)     spaceUsed=new SnapshotSizeDetails(sizeOnDisk,trueSize);

 else     spaceUsed=new SnapshotSizeDetails(spaceUsed.sizeOnDiskBytes + sizeOnDisk,spaceUsed.dataSizeBytes + trueSize);

    snapshotSpaceMap.put(snapshot.getName(),spaceUsed);

  }

  return snapshotSpaceMap;

}

Location: Directories.java

Content: 

public static File getSnapshotDirectory(Descriptor desc,String snapshotName){

  return getSnapshotDirectory(desc.directory,snapshotName);

}

Location: Directories.java

Content: 

/** 

 * Returns directory to write snapshot. If directory does not exist, then one is created. If given  {@code location} indicates secondary index, this will return{@code <cf dir>/snapshots/<snapshot name>/.<index name>}. Otherwise, this will return  {@code <cf dir>/snapshots/<snapshot name>}.

 * @param location base directory

 * @param snapshotName snapshot name

 * @return directory to write snapshot

 */

public static File getSnapshotDirectory(File location,String snapshotName){

  if (isSecondaryIndexFolder(location)) {

    return getOrCreate(location.getParentFile(),SNAPSHOT_SUBDIR,snapshotName,location.getName());

  }

 else {

    return getOrCreate(location,SNAPSHOT_SUBDIR,snapshotName);

  }

}

Location: Directories.java

Content: 

public File getSnapshotManifestFile(String snapshotName){

  File snapshotDir=getSnapshotDirectory(getDirectoryForNewSSTables(),snapshotName);

  return new File(snapshotDir,"manifest.json");

}

Location: Directories.java

Content: 

public File getSnapshotSchemaFile(String snapshotName){

  File snapshotDir=getSnapshotDirectory(getDirectoryForNewSSTables(),snapshotName);

  return new File(snapshotDir,"schema.cql");

}

Location: Directories.java

Content: 

/** 

 * Returns a temporary subdirectory on allowed data directory that _currently_ has  {@code writeSize} bytes as usable space.This method does not create the temporary directory.

 * @throws IOError if all directories are disallowed.

 */

public File getTemporaryWriteableDirectoryAsFile(long writeSize){

  File location=getLocationForDisk(getWriteableLocation(writeSize));

  if (location == null)   return null;

  return new File(location,TMP_SUBDIR);

}

Location: Directories.java

Content: 

public long getTrueAllocatedSizeIn(File input){

  if (!input.isDirectory())   return 0;

  SSTableSizeSummer visitor=new SSTableSizeSummer(input,sstableLister(Directories.OnTxnErr.THROW).listFiles());

  try {

    Files.walkFileTree(input.toPath(),visitor);

  }

 catch (  IOException e) {

    logger.error("Could not calculate the size of {}. {}",input,e.getMessage());

  }

  return visitor.getAllocatedSize();

}

Location: Directories.java

Content: 

/** 

 * Returns an allowed directory that _currently_ has  {@code writeSize} bytes as usable space.

 * @throws FSWriteError if all directories are disallowed.

 */

public File getWriteableLocationAsFile(long writeSize){

  File location=getLocationForDisk(getWriteableLocation(writeSize));

  if (location == null)   throw new FSWriteError(new IOException("No configured data directory contains enough space to write " + writeSize + " bytes"),"");

  return location;

}

Location: Directories.java

Content: 

public DataDirectory[] getWriteableLocations(){

  List<DataDirectory> allowedDirs=new ArrayList<>();

  for (  DataDirectory dir : paths) {

    if (!DisallowedDirectories.isUnwritable(dir.location))     allowedDirs.add(dir);

  }

  Collections.sort(allowedDirs,new Comparator<DataDirectory>(){

    @Override public int compare(    DataDirectory o1,    DataDirectory o2){

      return o1.location.compareTo(o2.location);

    }

  }

);

  return allowedDirs.toArray(new DataDirectory[allowedDirs.size()]);

}

Location: Directories.java

Content: 

/** 

 * Returns a data directory to load the file  {@code sourceFile}. If the sourceFile is on same disk partition as any data directory then use that one as data directory otherwise use  {@link #getWriteableLocationAsFile(long)} tofind suitable data directory. Also makes sure returned directory is not disallowed.

 * @throws FSWriteError if all directories are disallowed.

 */

public File getWriteableLocationToLoadFile(final File sourceFile){

  try {

    final FileStore srcFileStore=Files.getFileStore(sourceFile.toPath());

    for (    final File dataPath : dataPaths) {

      if (DisallowedDirectories.isUnwritable(dataPath)) {

        continue;

      }

      if (Files.getFileStore(dataPath.toPath()).equals(srcFileStore)) {

        return dataPath;

      }

    }

  }

 catch (  final IOException e) {

  }

  return getWriteableLocationAsFile(sourceFile.length());

}

Location: Directories.java

Content: 

/** 

 * Returns an allowed data directory that _currently_ has  {@code writeSize} bytes as usable space.

 * @throws FSWriteError if all directories are disallowed.

 */

public DataDirectory getWriteableLocation(long writeSize){

  List<DataDirectoryCandidate> candidates=new ArrayList<>();

  long totalAvailable=0L;

  boolean tooBig=false;

  for (  DataDirectory dataDir : paths) {

    if (DisallowedDirectories.isUnwritable(getLocationForDisk(dataDir))) {

      logger.trace("removing disallowed candidate {}",dataDir.location);

      continue;

    }

    DataDirectoryCandidate candidate=new DataDirectoryCandidate(dataDir);

    if (candidate.availableSpace < writeSize) {

      logger.trace("removing candidate {}, usable={}, requested={}",candidate.dataDirectory.location,candidate.availableSpace,writeSize);

      tooBig=true;

      continue;

    }

    candidates.add(candidate);

    totalAvailable+=candidate.availableSpace;

  }

  if (candidates.isEmpty())   if (tooBig)   throw new FSDiskFullWriteError(new IOException("Insufficient disk space to write " + writeSize + " bytes"),"");

 else   throw new FSWriteError(new IOException("All configured data directories have been disallowed as unwritable for erroring out"),"");

  if (candidates.size() == 1)   return candidates.get(0).dataDirectory;

  sortWriteableCandidates(candidates,totalAvailable);

  return pickWriteableDirectory(candidates);

}

Location: Directories.java

Content: 

public boolean hasAvailableDiskSpace(long estimatedSSTables,long expectedTotalWriteSize){

  long writeSize=expectedTotalWriteSize / estimatedSSTables;

  long totalAvailable=0L;

  for (  DataDirectory dataDir : paths) {

    if (DisallowedDirectories.isUnwritable(getLocationForDisk(dataDir)))     continue;

    DataDirectoryCandidate candidate=new DataDirectoryCandidate(dataDir);

    if (candidate.availableSpace < writeSize)     continue;

    totalAvailable+=candidate.availableSpace;

  }

  return totalAvailable > expectedTotalWriteSize;

}

Location: Directories.java

Content: 

public static boolean isSecondaryIndexFolder(File dir){

  return dir.getName().startsWith(SECONDARY_INDEX_NAME_SEPARATOR);

}

Location: Directories.java

Content: 

private static String join(String... s){

  return StringUtils.join(s,File.separator);

}

Location: Directories.java

Content: 

public List<String> listEphemeralSnapshots(){

  final List<String> ephemeralSnapshots=new LinkedList<>();

  for (  File snapshot : listSnapshots()) {

    if (getEphemeralSnapshotMarkerFile(snapshot).exists())     ephemeralSnapshots.add(snapshot.getName());

  }

  return ephemeralSnapshots;

}

Location: Directories.java

Content: 

private List<File> listSnapshots(){

  final List<File> snapshots=new LinkedList<>();

  for (  final File dir : dataPaths) {

    File snapshotDir=isSecondaryIndexFolder(dir) ? new File(dir.getParent(),SNAPSHOT_SUBDIR) : new File(dir,SNAPSHOT_SUBDIR);

    if (snapshotDir.exists() && snapshotDir.isDirectory()) {

      final File[] snapshotDirs=snapshotDir.listFiles();

      if (snapshotDirs != null) {

        for (        final File snapshot : snapshotDirs) {

          if (snapshot.isDirectory())           snapshots.add(snapshot);

        }

      }

    }

  }

  return snapshots;

}

Location: Directories.java

Content: 

@VisibleForTesting static void overrideDataDirectoriesForTest(String loc){

  for (int i=0; i < dataDirectories.length; ++i)   dataDirectories[i]=new DataDirectory(new File(loc));

}

Location: Directories.java

Content: 

static DataDirectory pickWriteableDirectory(List<DataDirectoryCandidate> candidates){

  double rnd=ThreadLocalRandom.current().nextDouble();

  for (  DataDirectoryCandidate candidate : candidates) {

    rnd-=candidate.perc;

    if (rnd <= 0)     return candidate.dataDirectory;

  }

  return candidates.get(0).dataDirectory;

}

Location: Directories.java

Content: 

public void removeTemporaryDirectories(){

  for (  File dataDir : dataPaths) {

    File tmpDir=new File(dataDir,TMP_SUBDIR);

    if (tmpDir.exists()) {

      logger.debug("Removing temporary directory {}",tmpDir);

      FileUtils.deleteRecursive(tmpDir);

    }

  }

}

Location: Directories.java

Content: 

@VisibleForTesting static void resetDataDirectoriesAfterTest(){

  String[] locations=DatabaseDescriptor.getAllDataFileLocations();

  for (int i=0; i < locations.length; ++i)   dataDirectories[i]=new DataDirectory(new File(locations[i]));

}

Location: Directories.java

Content: 

public long snapshotCreationTime(String snapshotName){

  for (  File dir : dataPaths) {

    File snapshotDir=getSnapshotDirectory(dir,snapshotName);

    if (snapshotDir.exists())     return snapshotDir.lastModified();

  }

  throw new RuntimeException("Snapshot " + snapshotName + " doesn't exist");

}

Location: Directories.java

Content: 

public boolean snapshotExists(String snapshotName){

  for (  File dir : dataPaths) {

    File snapshotDir;

    if (isSecondaryIndexFolder(dir)) {

      snapshotDir=new File(dir.getParentFile(),join(SNAPSHOT_SUBDIR,snapshotName,dir.getName()));

    }

 else {

      snapshotDir=new File(dir,join(SNAPSHOT_SUBDIR,snapshotName));

    }

    if (snapshotDir.exists())     return true;

  }

  return false;

}

Location: Directories.java

Content: 

static void sortWriteableCandidates(List<DataDirectoryCandidate> candidates,long totalAvailable){

  for (  DataDirectoryCandidate candidate : candidates)   candidate.calcFreePerc(totalAvailable);

  Collections.sort(candidates);

}

Location: Directories.java

Content: 

public SSTableLister sstableLister(File directory,OnTxnErr onTxnErr){

  return new SSTableLister(new File[]{directory},metadata,onTxnErr);

}

Location: Directories.java

Content: 

public SSTableLister sstableLister(OnTxnErr onTxnErr){

  return new SSTableLister(this.dataPaths,this.metadata,onTxnErr);

}

Location: Directories.java

Content: 

/** 

 * Checks whether Cassandra has RWX permissions to the specified directory.  Logs an error with the details if it does not.

 * @param dir File object of the directory.

 * @param dataDir String representation of the directory's location

 * @return status representing Cassandra's RWX permissions to the supplied folder location.

 */

public static boolean verifyFullPermissions(File dir,String dataDir){

  if (!dir.isDirectory()) {

    logger.error("Not a directory {}",dataDir);

    return false;

  }

 else   if (!FileAction.hasPrivilege(dir,FileAction.X)) {

    logger.error("Doesn't have execute permissions for {} directory",dataDir);

    return false;

  }

 else   if (!FileAction.hasPrivilege(dir,FileAction.R)) {

    logger.error("Doesn't have read permissions for {} directory",dataDir);

    return false;

  }

 else   if (dir.exists() && !FileAction.hasPrivilege(dir,FileAction.W)) {

    logger.error("Doesn't have write permissions for {} directory",dataDir);

    return false;

  }

  return true;

}

