Location: PendingAntiCompaction.java

Content: 

@VisibleForTesting protected AcquisitionCallable getAcquisitionCallable(ColumnFamilyStore cfs,Set<Range<Token>> ranges,UUID prsId,int acquireRetrySeconds,int acquireSleepMillis){

  return new AcquisitionCallable(cfs,ranges,prsId,acquireRetrySeconds,acquireSleepMillis);

}

Location: PendingAntiCompaction.java

Content: 

@VisibleForTesting protected AcquisitionCallback getAcquisitionCallback(UUID prsId,RangesAtEndpoint tokenRanges){

  return new AcquisitionCallback(prsId,tokenRanges,isCancelled);

}

Location: PendingAntiCompaction.java

Content: 

public PendingAntiCompaction(UUID prsId,Collection<ColumnFamilyStore> tables,RangesAtEndpoint tokenRanges,ExecutorService executor,BooleanSupplier isCancelled){

  this(prsId,tables,tokenRanges,ACQUIRE_RETRY_SECONDS,ACQUIRE_SLEEP_MS,executor,isCancelled);

}

Location: PendingAntiCompaction.java

Content: 

@VisibleForTesting PendingAntiCompaction(UUID prsId,Collection<ColumnFamilyStore> tables,RangesAtEndpoint tokenRanges,int acquireRetrySeconds,int acquireSleepMillis,ExecutorService executor,BooleanSupplier isCancelled){

  this.prsId=prsId;

  this.tables=tables;

  this.tokenRanges=tokenRanges;

  this.executor=executor;

  this.acquireRetrySeconds=acquireRetrySeconds;

  this.acquireSleepMillis=acquireSleepMillis;

  this.isCancelled=isCancelled;

}

