Location: AsyncStreamingOutputPlus.java

Content: 

private void allocateBuffer(){

  buffer=bufferPool.getAtLeast(8 << 10,BufferType.OFF_HEAP);

}

Location: AsyncStreamingOutputPlus.java

Content: 

public AsyncStreamingOutputPlus(Channel channel){

  super(channel);

  WriteBufferWaterMark waterMark=channel.config().getWriteBufferWaterMark();

  this.defaultLowWaterMark=waterMark.low();

  this.defaultHighWaterMark=waterMark.high();

  allocateBuffer();

}

Location: AsyncStreamingOutputPlus.java

Content: 

/** 

 * Discard any buffered data, and the buffers that contain it. May be invoked instead of  {@link #close()} if we terminate exceptionally.

 */

public void discard(){

  if (buffer != null) {

    bufferPool.put(buffer);

    buffer=null;

  }

}

Location: AsyncStreamingOutputPlus.java

Content: 

@Override protected void doFlush(int count) throws IOException {

  if (!channel.isOpen())   throw new ClosedChannelException();

  ByteBuffer flush=buffer;

  if (flush.position() == 0)   return;

  flush.flip();

  int byteCount=flush.limit();

  ChannelPromise promise=beginFlush(byteCount,0,Integer.MAX_VALUE);

  channel.writeAndFlush(GlobalBufferPoolAllocator.wrap(flush),promise);

  allocateBuffer();

}

Location: AsyncStreamingOutputPlus.java

Content: 

public long position(){

  return flushed() + buffer.position();

}

Location: AsyncStreamingOutputPlus.java

Content: 

@VisibleForTesting long writeFileToChannelZeroCopy(FileChannel file,StreamRateLimiter limiter,int batchSize,int lowWaterMark,int highWaterMark) throws IOException {

  final long length=file.size();

  long bytesTransferred=0;

  final SharedFileChannel sharedFile=SharedDefaultFileRegion.share(file);

  try {

    while (bytesTransferred < length) {

      int toWrite=(int)min(batchSize,length - bytesTransferred);

      limiter.acquire(toWrite);

      ChannelPromise promise=beginFlush(toWrite,lowWaterMark,highWaterMark);

      SharedDefaultFileRegion fileRegion=new SharedDefaultFileRegion(sharedFile,bytesTransferred,toWrite);

      channel.writeAndFlush(fileRegion,promise);

      if (logger.isTraceEnabled())       logger.trace("Writing {} bytes at position {} of {}",toWrite,bytesTransferred,length);

      bytesTransferred+=toWrite;

    }

    return bytesTransferred;

  }

  finally {

    sharedFile.release();

  }

}

Location: AsyncStreamingOutputPlus.java

Content: 

/** 

 * Writes all data in file channel to stream: <br> * For zero-copy-streaming, 1MiB at a time, with at most 2MiB in flight at once. <br> * For streaming with SSL, 64kb at a time, with at most 32+64kb (default low water mark + batch size) in flight. <br> <p> This method takes ownership of the provided  {@link FileChannel}. <p> WARNING: this method blocks only for permission to write to the netty channel; it exits before the  {@link FileRegion}(zero-copy) or  {@link ByteBuffer}(ssl) is flushed to the network.

 */

public long writeFileToChannel(FileChannel file,StreamRateLimiter limiter) throws IOException {

  if (channel.pipeline().get(SslHandler.class) != null)   return writeFileToChannel(file,limiter,1 << 16);

 else   return writeFileToChannelZeroCopy(file,limiter,1 << 20,1 << 20,2 << 20);

}

Location: AsyncStreamingOutputPlus.java

Content: 

@VisibleForTesting long writeFileToChannel(FileChannel fc,StreamRateLimiter limiter,int batchSize) throws IOException {

  final long length=fc.size();

  long bytesTransferred=0;

  try {

    while (bytesTransferred < length) {

      int toWrite=(int)min(batchSize,length - bytesTransferred);

      final long position=bytesTransferred;

      writeToChannel(bufferSupplier -> {

        ByteBuffer outBuffer=bufferSupplier.get(toWrite);

        long read=fc.read(outBuffer,position);

        if (read != toWrite)         throw new IOException(String.format("could not read required number of bytes from " + "file to be streamed: read %d bytes, wanted %d bytes",read,toWrite));

        outBuffer.flip();

      }

,limiter);

      if (logger.isTraceEnabled())       logger.trace("Writing {} bytes at position {} of {}",toWrite,bytesTransferred,length);

      bytesTransferred+=toWrite;

    }

  }

  finally {

    fc.close();

  }

  return bytesTransferred;

}

Location: AsyncStreamingOutputPlus.java

Content: 

/** 

 * Provide a lambda that can request a buffer of suitable size, then fill the buffer and have that buffer written and flushed to the underlying channel, without having to handle buffer allocation, lifetime or cleanup, including in case of exceptions. <p> Any exception thrown by the Write will be propagated to the caller, after any buffer is cleaned up.

 */

public int writeToChannel(Write write,StreamRateLimiter limiter) throws IOException {

  doFlush(0);

class Holder {

    ChannelPromise promise;

    ByteBuffer buffer;

  }

  Holder holder=new Holder();

  try {

    write.write(size -> {

      if (holder.buffer != null)       throw new IllegalStateException("Can only allocate one ByteBuffer");

      limiter.acquire(size);

      holder.promise=beginFlush(size,defaultLowWaterMark,defaultHighWaterMark);

      holder.buffer=bufferPool.get(size,BufferType.OFF_HEAP);

      return holder.buffer;

    }

);

  }

 catch (  Throwable t) {

    if (holder.buffer != null)     bufferPool.put(holder.buffer);

    if (holder.promise != null)     holder.promise.tryFailure(t);

    throw t;

  }

  ByteBuffer buffer=holder.buffer;

  bufferPool.putUnusedPortion(buffer);

  int length=buffer.limit();

  channel.writeAndFlush(GlobalBufferPoolAllocator.wrap(buffer),holder.promise);

  return length;

}

