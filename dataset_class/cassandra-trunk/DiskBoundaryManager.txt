Location: DiskBoundaryManager.java

Content: 

public DiskBoundaries getDiskBoundaries(ColumnFamilyStore cfs){

  if (!cfs.getPartitioner().splitter().isPresent())   return new DiskBoundaries(cfs,cfs.getDirectories().getWriteableLocations(),DisallowedDirectories.getDirectoriesVersion());

  if (diskBoundaries == null || diskBoundaries.isOutOfDate()) {

synchronized (this) {

      if (diskBoundaries == null || diskBoundaries.isOutOfDate()) {

        logger.debug("Refreshing disk boundary cache for {}.{}",cfs.keyspace.getName(),cfs.getTableName());

        DiskBoundaries oldBoundaries=diskBoundaries;

        diskBoundaries=getDiskBoundaryValue(cfs);

        logger.debug("Updating boundaries from {} to {} for {}.{}",oldBoundaries,diskBoundaries,cfs.keyspace.getName(),cfs.getTableName());

      }

    }

  }

  return diskBoundaries;

}

Location: DiskBoundaryManager.java

Content: 

/** 

 * Returns a list of disk boundaries, the result will differ depending on whether vnodes are enabled or not. What is returned are upper bounds for the disks, meaning everything from partitioner.minToken up to getDiskBoundaries(..).get(0) should be on the first disk, everything between 0 to 1 should be on the second disk etc. The final entry in the returned list will always be the partitioner maximum tokens upper key bound

 */

private static List<PartitionPosition> getDiskBoundaries(RangesAtEndpoint replicas,IPartitioner partitioner,Directories.DataDirectory[] dataDirectories){

  assert partitioner.splitter().isPresent();

  Splitter splitter=partitioner.splitter().get();

  boolean dontSplitRanges=DatabaseDescriptor.getNumTokens() > 1;

  List<Splitter.WeightedRange> weightedRanges=new ArrayList<>(replicas.size());

  for (  Range<Token> r : Range.sort(replicas.onlyFull().ranges()))   weightedRanges.add(new Splitter.WeightedRange(1.0,r));

  for (  Range<Token> r : Range.sort(replicas.onlyTransient().ranges()))   weightedRanges.add(new Splitter.WeightedRange(0.1,r));

  weightedRanges.sort(Comparator.comparing(Splitter.WeightedRange::left));

  List<Token> boundaries=splitter.splitOwnedRanges(dataDirectories.length,weightedRanges,dontSplitRanges);

  if (dontSplitRanges && boundaries.size() < dataDirectories.length)   boundaries=splitter.splitOwnedRanges(dataDirectories.length,weightedRanges,false);

  List<PartitionPosition> diskBoundaries=new ArrayList<>();

  for (int i=0; i < boundaries.size() - 1; i++)   diskBoundaries.add(boundaries.get(i).maxKeyBound());

  diskBoundaries.add(partitioner.getMaximumToken().maxKeyBound());

  return diskBoundaries;

}

Location: DiskBoundaryManager.java

Content: 

private static DiskBoundaries getDiskBoundaryValue(ColumnFamilyStore cfs){

  RangesAtEndpoint localRanges;

  long ringVersion;

  TokenMetadata tmd;

  do {

    tmd=StorageService.instance.getTokenMetadata();

    ringVersion=tmd.getRingVersion();

    if (StorageService.instance.isBootstrapMode() && !StorageService.isReplacingSameAddress()) {

      PendingRangeCalculatorService.instance.blockUntilFinished();

      localRanges=tmd.getPendingRanges(cfs.keyspace.getName(),FBUtilities.getBroadcastAddressAndPort());

    }

 else {

      localRanges=cfs.keyspace.getReplicationStrategy().getAddressReplicas(tmd.cloneAfterAllSettled(),FBUtilities.getBroadcastAddressAndPort());

    }

    logger.debug("Got local ranges {} (ringVersion = {})",localRanges,ringVersion);

  }

 while (ringVersion != tmd.getRingVersion());

  int directoriesVersion;

  Directories.DataDirectory[] dirs;

  do {

    directoriesVersion=DisallowedDirectories.getDirectoriesVersion();

    dirs=cfs.getDirectories().getWriteableLocations();

  }

 while (directoriesVersion != DisallowedDirectories.getDirectoriesVersion());

  if (localRanges == null || localRanges.isEmpty())   return new DiskBoundaries(cfs,dirs,null,ringVersion,directoriesVersion);

  List<PartitionPosition> positions=getDiskBoundaries(localRanges,cfs.getPartitioner(),dirs);

  return new DiskBoundaries(cfs,dirs,positions,ringVersion,directoriesVersion);

}

Location: DiskBoundaryManager.java

Content: 

public void invalidate(){

  if (diskBoundaries != null)   diskBoundaries.invalidate();

}

