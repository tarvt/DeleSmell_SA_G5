Location: HadoopCompat.java

Content: 

/** 

 * Invoke getConfiguration() on JobContext. Works with both Hadoop 1 and 2.

 */

public static Configuration getConfiguration(JobContext context){

  return (Configuration)invoke(GET_CONFIGURATION_METHOD,context);

}

Location: HadoopCompat.java

Content: 

/** 

 * Invoke getCounter() on TaskInputOutputContext. Works with both Hadoop 1 and 2.

 */

public static Counter getCounter(TaskInputOutputContext context,String groupName,String counterName){

  return (Counter)invoke(GET_COUNTER_METHOD,context,groupName,counterName);

}

Location: HadoopCompat.java

Content: 

/** 

 * returns TaskAttemptContext.getTaskAttemptID(). Works with both Hadoop 1 and 2.

 */

public static TaskAttemptID getTaskAttemptID(TaskAttemptContext taskContext){

  return (TaskAttemptID)invoke(GET_TASK_ATTEMPT_ID,taskContext);

}

Location: HadoopCompat.java

Content: 

/** 

 * Increment the counter. Works with both Hadoop 1 and 2

 */

public static void incrementCounter(Counter counter,long increment){

  invoke(INCREMENT_COUNTER_METHOD,counter,increment);

}

Location: HadoopCompat.java

Content: 

/** 

 * Invokes a method and rethrows any exception as runtime excetpions.

 */

private static Object invoke(Method method,Object obj,Object... args){

  try {

    return method.invoke(obj,args);

  }

 catch (  IllegalAccessException|InvocationTargetException e) {

    throw new IllegalArgumentException("Can't invoke method " + method.getName(),e);

  }

}

Location: HadoopCompat.java

Content: 

/** 

 * True if runtime Hadoop version is 2.x, false otherwise.

 */

public static boolean isVersion2x(){

  return useV21;

}

Location: HadoopCompat.java

Content: 

/** 

 * @return with Hadoop 2 : <code>new GenericCounter(args)</code>,<br>with Hadoop 1 : <code>new Counter(args)</code>

 */

public static Counter newGenericCounter(String name,String displayName,long value){

  try {

    return (Counter)GENERIC_COUNTER_CONSTRUCTOR.newInstance(name,displayName,value);

  }

 catch (  InstantiationException|IllegalAccessException|InvocationTargetException e) {

    throw new IllegalArgumentException("Can't instantiate Counter",e);

  }

}

Location: HadoopCompat.java

Content: 

private static Object newInstance(Constructor<?> constructor,Object... args){

  try {

    return constructor.newInstance(args);

  }

 catch (  InstantiationException e) {

    throw new IllegalArgumentException("Can't instantiate " + constructor,e);

  }

catch (  IllegalAccessException e) {

    throw new IllegalArgumentException("Can't instantiate " + constructor,e);

  }

catch (  InvocationTargetException e) {

    throw new IllegalArgumentException("Can't instantiate " + constructor,e);

  }

}

Location: HadoopCompat.java

Content: 

/** 

 * Creates JobContext from a JobConf and jobId using the correct constructor for based on Hadoop version. <code>jobId</code> could be null.

 */

public static JobContext newJobContext(Configuration conf,JobID jobId){

  return (JobContext)newInstance(JOB_CONTEXT_CONSTRUCTOR,conf,jobId);

}

Location: HadoopCompat.java

Content: 

/** 

 * Instantiates MapContext under Hadoop 1 and MapContextImpl under Hadoop 2.

 */

public static MapContext newMapContext(Configuration conf,TaskAttemptID taskAttemptID,RecordReader recordReader,RecordWriter recordWriter,OutputCommitter outputCommitter,StatusReporter statusReporter,InputSplit inputSplit){

  return (MapContext)newInstance(MAP_CONTEXT_CONSTRUCTOR,conf,taskAttemptID,recordReader,recordWriter,outputCommitter,statusReporter,inputSplit);

}

Location: HadoopCompat.java

Content: 

/** 

 * Creates TaskAttempContext from a JobConf and jobId using the correct constructor for based on Hadoop version.

 */

public static TaskAttemptContext newTaskAttemptContext(Configuration conf,TaskAttemptID taskAttemptId){

  return (TaskAttemptContext)newInstance(TASK_CONTEXT_CONSTRUCTOR,conf,taskAttemptId);

}

Location: HadoopCompat.java

Content: 

/** 

 * Invoke TaskAttemptContext.progress(). Works with both Hadoop 1 and 2.

 */

public static void progress(TaskAttemptContext context){

  invoke(PROGRESS_METHOD,context);

}

Location: HadoopCompat.java

Content: 

/** 

 * Invoke setStatus() on TaskAttemptContext. Works with both Hadoop 1 and 2.

 */

public static void setStatus(TaskAttemptContext context,String status){

  invoke(SET_STATUS_METHOD,context,status);

}

