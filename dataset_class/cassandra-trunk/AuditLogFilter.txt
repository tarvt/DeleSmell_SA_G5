Location: AuditLogFilter.java

Content: 

private AuditLogFilter(ImmutableSet<String> excludedKeyspaces,ImmutableSet<String> includedKeyspaces,ImmutableSet<String> excludedCategories,ImmutableSet<String> includedCategories,ImmutableSet<String> excludedUsers,ImmutableSet<String> includedUsers){

  this.excludedKeyspaces=excludedKeyspaces;

  this.includedKeyspaces=includedKeyspaces;

  this.excludedCategories=excludedCategories;

  this.includedCategories=includedCategories;

  this.includedUsers=includedUsers;

  this.excludedUsers=excludedUsers;

}

Location: AuditLogFilter.java

Content: 

/** 

 * (Re-)Loads filters from config. Called during startup as well as JMX invocations.

 */

public static AuditLogFilter create(AuditLogOptions auditLogOptions){

  logger.trace("Loading AuditLog filters");

  IncludeExcludeHolder keyspaces=loadInputSets(auditLogOptions.included_keyspaces,auditLogOptions.excluded_keyspaces);

  IncludeExcludeHolder categories=loadInputSets(auditLogOptions.included_categories,auditLogOptions.excluded_categories);

  IncludeExcludeHolder users=loadInputSets(auditLogOptions.included_users,auditLogOptions.excluded_users);

  return new AuditLogFilter(keyspaces.excludedSet,keyspaces.includedSet,categories.excludedSet,categories.includedSet,users.excludedSet,users.includedSet);

}

Location: AuditLogFilter.java

Content: 

/** 

 * Checks whether a give AuditLog Entry is filtered or not

 * @param auditLogEntry AuditLogEntry to verify

 * @return true if it is filtered, false otherwise

 */

boolean isFiltered(AuditLogEntry auditLogEntry){

  return isFiltered(auditLogEntry.getKeyspace(),includedKeyspaces,excludedKeyspaces) || isFiltered(auditLogEntry.getType().getCategory().toString(),includedCategories,excludedCategories) || isFiltered(auditLogEntry.getUser(),includedUsers,excludedUsers);

}

Location: AuditLogFilter.java

Content: 

/** 

 * Checks whether given input is being filtered or not. If excludeSet does not contain any items, by default nothing is excluded (unless there are entries in the includeSet). If includeSet does not contain any items, by default everything is included If an input is part of both includeSet and excludeSet, excludeSet takes the priority over includeSet

 * @param input      Input to be checked for filtereing based on includeSet and excludeSet

 * @param includeSet Include filtering set

 * @param excludeSet Exclude filtering set

 * @return true if the input is filtered, false when the input is not filtered

 */

static boolean isFiltered(String input,Set<String> includeSet,Set<String> excludeSet){

  if (!excludeSet.isEmpty() && excludeSet.contains(input))   return true;

  return !(includeSet.isEmpty() || includeSet.contains(input));

}

Location: AuditLogFilter.java

Content: 

/** 

 * Constructs mutually exclusive sets of included and excluded data. When there is a conflict, the entry is put into the excluded set (and removed fron the included).

 */

private static IncludeExcludeHolder loadInputSets(String includedInput,String excludedInput){

  final ImmutableSet<String> excludedSet;

  if (StringUtils.isEmpty(excludedInput)) {

    excludedSet=EMPTY_FILTERS;

  }

 else {

    String[] excludes=excludedInput.split(",");

    ImmutableSet.Builder<String> builder=ImmutableSet.builderWithExpectedSize(excludes.length);

    for (    String exclude : excludes) {

      if (!exclude.isEmpty()) {

        builder.add(exclude);

      }

    }

    excludedSet=builder.build();

  }

  final ImmutableSet<String> includedSet;

  if (StringUtils.isEmpty(includedInput)) {

    includedSet=EMPTY_FILTERS;

  }

 else {

    String[] includes=includedInput.split(",");

    ImmutableSet.Builder<String> builder=ImmutableSet.builderWithExpectedSize(includes.length);

    for (    String include : includes) {

      if (!include.isEmpty() && !excludedSet.contains(include)) {

        builder.add(include);

      }

    }

    includedSet=builder.build();

  }

  return new IncludeExcludeHolder(includedSet,excludedSet);

}

