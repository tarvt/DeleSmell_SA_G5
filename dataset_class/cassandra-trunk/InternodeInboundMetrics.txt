Location: InternodeInboundMetrics.java

Content: 

/** 

 * Create metrics for given inbound message handlers.

 * @param peer IP address and port to use for metrics label

 */

public InternodeInboundMetrics(InetAddressAndPort peer,InboundMessageHandlers handlers){

  MetricNameFactory factory=new DefaultNameFactory("InboundConnection",peer.getHostAddressAndPortForJMX());

  register(corruptFramesRecovered=factory.createMetricName("CorruptFramesRecovered"),handlers::corruptFramesRecovered);

  register(corruptFramesUnrecovered=factory.createMetricName("CorruptFramesUnrecovered"),handlers::corruptFramesUnrecovered);

  register(errorBytes=factory.createMetricName("ErrorBytes"),handlers::errorBytes);

  register(errorCount=factory.createMetricName("ErrorCount"),handlers::errorCount);

  register(expiredBytes=factory.createMetricName("ExpiredBytes"),handlers::expiredBytes);

  register(expiredCount=factory.createMetricName("ExpiredCount"),handlers::expiredCount);

  register(pendingBytes=factory.createMetricName("ScheduledBytes"),handlers::scheduledBytes);

  register(pendingCount=factory.createMetricName("ScheduledCount"),handlers::scheduledCount);

  register(processedBytes=factory.createMetricName("ProcessedBytes"),handlers::processedBytes);

  register(processedCount=factory.createMetricName("ProcessedCount"),handlers::processedCount);

  register(receivedBytes=factory.createMetricName("ReceivedBytes"),handlers::receivedBytes);

  register(receivedCount=factory.createMetricName("ReceivedCount"),handlers::receivedCount);

  register(throttledCount=factory.createMetricName("ThrottledCount"),handlers::throttledCount);

  register(throttledNanos=factory.createMetricName("ThrottledNanos"),handlers::throttledNanos);

}

Location: InternodeInboundMetrics.java

Content: 

private static void register(MetricName name,Gauge gauge){

  CassandraMetricsRegistry.Metrics.register(name,gauge);

}

