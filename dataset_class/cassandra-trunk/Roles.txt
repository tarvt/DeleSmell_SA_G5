Location: Roles.java

Content: 

@VisibleForTesting public static void clearCache(){

  cache.invalidate();

}

Location: Roles.java

Content: 

/** 

 * Constructs a Role object from a RoleResource, using the methods of the supplied IRoleManager. This is used by the default implementation of IRoleManager#getRoleDetails so that IRoleManager impls which don't implement an optimized getRoleDetails remain compatible. Depending on the IRoleManager implementation this could be quite heavyweight, so should not be used on any hot path.

 * @param resource identifies the role

 * @param roleManager provides lookup functions to retrieve role info

 * @return Role object including superuser status, login privilege, custom options and the set of rolesgranted to identified role.

 */

public static Role fromRoleResource(RoleResource resource,IRoleManager roleManager){

  return new Role(resource.getName(),roleManager.isSuper(resource),roleManager.canLogin(resource),roleManager.getCustomOptions(resource),roleManager.getRoles(resource,false).stream().map(RoleResource::getRoleName).collect(Collectors.toSet()));

}

Location: Roles.java

Content: 

/** 

 * Returns the map of custom options for the named role. These options are not inherited from granted roles, but are set directly.

 * @param role the role identifier

 * @return map of option_name -> value. If no options are set for the named role, the map will be emptybut never null.

 */

public static Map<String,String> getOptions(RoleResource role){

  for (  Role r : getRoleDetails(role))   if (r.resource.equals(role))   return r.options;

  return NO_ROLE.options;

}

Location: Roles.java

Content: 

/** 

 * Returns true if the supplied role or any other role granted to it (directly or indirectly) has superuser status.

 * @param role the primary role

 * @return true if the role has superuser status, false otherwise

 */

public static boolean hasSuperuserStatus(RoleResource role){

  try {

    for (    Role r : getRoleDetails(role))     if (r.isSuper)     return true;

    return false;

  }

 catch (  RequestExecutionException e) {

    logger.debug("Failed to authorize {} for super-user permission",role.getRoleName());

    throw new UnauthorizedException("Unable to perform authorization of super-user permission: " + e.getMessage(),e);

  }

}

Location: Roles.java

Content: 

@VisibleForTesting public static void initRolesCache(IRoleManager roleManager,BooleanSupplier enableCache){

  if (cache != null)   cache.unregisterMBean();

  cache=new RolesCache(roleManager,enableCache);

}

Location: Roles.java

Content: 

/** 

 * Just a convenience method which compares a role instance with the null object version, indicating if the return from some query/lookup method was a valid Role or indicates that the role does not exist.

 * @param role

 * @return true if the supplied role is the null role instance, false otherwise.

 */

public static boolean isNullRole(Role role){

  return NO_ROLE.equals(role);

}

Location: Roles.java

Content: 

/** 

 * Return the NullObject Role instance which can be safely used to indicate no information is available when querying for a specific named role.

 * @return singleton null role object

 */

public static Role nullRole(){

  return NO_ROLE;

}

