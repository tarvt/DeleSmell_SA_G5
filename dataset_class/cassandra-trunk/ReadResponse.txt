Location: ReadResponse.java

Content: 

public static ReadResponse createDataResponse(UnfilteredPartitionIterator data,ReadCommand command){

  return new LocalDataResponse(data,command);

}

Location: ReadResponse.java

Content: 

public static ReadResponse createDigestResponse(UnfilteredPartitionIterator data,ReadCommand command){

  return new DigestResponse(makeDigest(data,command));

}

Location: ReadResponse.java

Content: 

@VisibleForTesting public static ReadResponse createRemoteDataResponse(UnfilteredPartitionIterator data,ByteBuffer repairedDataDigest,boolean isRepairedDigestConclusive,ReadCommand command,int version){

  return new RemoteDataResponse(LocalDataResponse.build(data,command.columnFilter()),repairedDataDigest,isRepairedDigestConclusive,version);

}

Location: ReadResponse.java

Content: 

public abstract ByteBuffer digest(ReadCommand command);

Location: ReadResponse.java

Content: 

public abstract boolean isDigestResponse();

Location: ReadResponse.java

Content: 

public abstract boolean isRepairedDigestConclusive();

Location: ReadResponse.java

Content: 

protected static ByteBuffer makeDigest(UnfilteredPartitionIterator iterator,ReadCommand command){

  Digest digest=Digest.forReadResponse();

  UnfilteredPartitionIterators.digest(iterator,digest,command.digestVersion());

  return ByteBuffer.wrap(digest.digest());

}

Location: ReadResponse.java

Content: 

public abstract UnfilteredPartitionIterator makeIterator(ReadCommand command);

Location: ReadResponse.java

Content: 

public abstract boolean mayIncludeRepairedDigest();

Location: ReadResponse.java

Content: 

protected ReadResponse(){

}

Location: ReadResponse.java

Content: 

public abstract ByteBuffer repairedDataDigest();

Location: ReadResponse.java

Content: 

/** 

 * Creates a string of the requested partition in this read response suitable for debugging.

 */

public String toDebugString(ReadCommand command,DecoratedKey key){

  if (isDigestResponse())   return "Digest:0x" + ByteBufferUtil.bytesToHex(digest(command));

  try (UnfilteredPartitionIterator iter=makeIterator(command)){

    while (iter.hasNext()) {

      try (UnfilteredRowIterator partition=iter.next()){

        if (partition.partitionKey().equals(key))         return toDebugString(partition,command.metadata());

      }

     }

  }

   return String.format("<key %s not found (repaired_digest=%s repaired_digest_conclusive=%s)>",key,ByteBufferUtil.bytesToHex(repairedDataDigest()),isRepairedDigestConclusive());

}

Location: ReadResponse.java

Content: 

private String toDebugString(UnfilteredRowIterator partition,TableMetadata metadata){

  StringBuilder sb=new StringBuilder();

  sb.append(String.format("[%s] key=%s partition_deletion=%s columns=%s repaired_digest=%s repaired_digest_conclusive==%s",metadata,metadata.partitionKeyType.getString(partition.partitionKey().getKey()),partition.partitionLevelDeletion(),partition.columns(),ByteBufferUtil.bytesToHex(repairedDataDigest()),isRepairedDigestConclusive()));

  if (partition.staticRow() != Rows.EMPTY_STATIC_ROW)   sb.append("\n    ").append(partition.staticRow().toString(metadata,true));

  while (partition.hasNext())   sb.append("\n    ").append(partition.next().toString(metadata,true));

  return sb.toString();

}

