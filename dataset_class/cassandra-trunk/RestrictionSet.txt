Location: RestrictionSet.java

Content: 

/** 

 * Adds the specified restriction to this set of restrictions.

 * @param restriction the restriction to add

 * @return the new set of restrictions

 */

public RestrictionSet addRestriction(SingleRestriction restriction){

  TreeMap<ColumnMetadata,SingleRestriction> newRestrictions=new TreeMap<>(this.restrictions);

  return new RestrictionSet(mergeRestrictions(newRestrictions,restriction),hasMultiColumnRestrictions || restriction.isMultiColumn());

}

Location: RestrictionSet.java

Content: 

/** 

 * Returns all the restrictions applied to the specified columns.

 * @param columnDefs the column definitions

 * @return all the restrictions applied to the specified columns

 */

private Set<SingleRestriction> getRestrictions(Collection<ColumnMetadata> columnDefs){

  Set<SingleRestriction> set=new HashSet<>();

  for (  ColumnMetadata columnDef : columnDefs) {

    SingleRestriction existing=restrictions.get(columnDef);

    if (existing != null)     set.add(existing);

  }

  return set;

}

Location: RestrictionSet.java

Content: 

/** 

 * Checks if the restrictions contains multiple contains, contains key, or map[key] = value.

 * @return <code>true</code> if the restrictions contains multiple contains, contains key, or ,map[key] = value; <code>false</code> otherwise

 */

public final boolean hasMultipleContains(){

  int numberOfContains=0;

  for (  SingleRestriction restriction : restrictions.values()) {

    if (restriction.isContains()) {

      ContainsRestriction contains=(ContainsRestriction)restriction;

      numberOfContains+=(contains.numberOfValues() + contains.numberOfKeys() + contains.numberOfEntries());

    }

  }

  return numberOfContains > 1;

}

Location: RestrictionSet.java

Content: 

/** 

 * Checks if one of the restrictions applies to a column of the specific kind.

 * @param kind the column kind

 * @return {@code true} if one of the restrictions applies to a column of the specific kind, {@code false} otherwise.

 */

public boolean hasRestrictionFor(ColumnMetadata.Kind kind){

  for (  ColumnMetadata column : restrictions.keySet()) {

    if (column.kind == kind)     return true;

  }

  return false;

}

Location: RestrictionSet.java

Content: 

/** 

 * Returns the last restriction.

 * @return the last restriction.

 */

SingleRestriction lastRestriction(){

  return isEmpty() ? null : this.restrictions.lastEntry().getValue();

}

Location: RestrictionSet.java

Content: 

/** 

 * Merges the two specified restrictions.

 * @param restriction the first restriction

 * @param otherRestriction the second restriction

 * @return the merged restriction

 * @throws InvalidRequestException if the two restrictions cannot be merged

 */

private static SingleRestriction mergeRestrictions(SingleRestriction restriction,SingleRestriction otherRestriction){

  return restriction == null ? otherRestriction : restriction.mergeWith(otherRestriction);

}

Location: RestrictionSet.java

Content: 

private TreeMap<ColumnMetadata,SingleRestriction> mergeRestrictions(TreeMap<ColumnMetadata,SingleRestriction> restrictions,SingleRestriction restriction){

  Collection<ColumnMetadata> columnDefs=restriction.getColumnDefs();

  Set<SingleRestriction> existingRestrictions=getRestrictions(columnDefs);

  if (existingRestrictions.isEmpty()) {

    for (    ColumnMetadata columnDef : columnDefs)     restrictions.put(columnDef,restriction);

  }

 else {

    for (    SingleRestriction existing : existingRestrictions) {

      SingleRestriction newRestriction=mergeRestrictions(existing,restriction);

      for (      ColumnMetadata columnDef : columnDefs)       restrictions.put(columnDef,newRestriction);

    }

  }

  return restrictions;

}

Location: RestrictionSet.java

Content: 

/** 

 * Returns the column after the specified one.

 * @param columnDef the column for which the next one need to be found

 * @return the column after the specified one.

 */

ColumnMetadata nextColumn(ColumnMetadata columnDef){

  return restrictions.tailMap(columnDef,false).firstKey();

}

Location: RestrictionSet.java

Content: 

public RestrictionSet(){

  this(new TreeMap<ColumnMetadata,SingleRestriction>(COLUMN_DEFINITION_COMPARATOR),false);

}

Location: RestrictionSet.java

Content: 

private RestrictionSet(TreeMap<ColumnMetadata,SingleRestriction> restrictions,boolean hasMultiColumnRestrictions){

  this.restrictions=restrictions;

  this.hasMultiColumnRestrictions=hasMultiColumnRestrictions;

}

