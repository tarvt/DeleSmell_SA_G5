Location: CassandraMetricsRegistry.java

Content: 

public Collection<ThreadPoolMetrics> allThreadPoolMetrics(){

  return Collections.unmodifiableCollection(threadPoolMetrics.values());

}

Location: CassandraMetricsRegistry.java

Content: 

private CassandraMetricsRegistry(){

  super();

}

Location: CassandraMetricsRegistry.java

Content: 

public Counter counter(MetricName name){

  Counter counter=counter(name.getMetricName());

  registerMBean(counter,name.getMBeanName());

  return counter;

}

Location: CassandraMetricsRegistry.java

Content: 

public Counter counter(MetricName name,MetricName alias){

  Counter counter=counter(name);

  registerAlias(name,alias);

  return counter;

}

Location: CassandraMetricsRegistry.java

Content: 

/** 

 * Used to determine the changes in a histogram since the last time checked.

 * @param now The current histogram

 * @param last The previous value of the histogram

 * @return the difference between <i>now</> and <i>last</i>

 */

@VisibleForTesting static long[] delta(long[] now,long[] last){

  long[] delta=new long[now.length];

  if (last == null) {

    last=new long[now.length];

  }

  for (int i=0; i < now.length; i++) {

    delta[i]=now[i] - (i < last.length ? last[i] : 0);

  }

  return delta;

}

Location: CassandraMetricsRegistry.java

Content: 

public Optional<ThreadPoolMetrics> getThreadPoolMetrics(String poolName){

  return Optional.ofNullable(threadPoolMetrics.get(poolName));

}

Location: CassandraMetricsRegistry.java

Content: 

public Histogram histogram(MetricName name,boolean considerZeroes){

  Histogram histogram=register(name,new ClearableHistogram(new DecayingEstimatedHistogramReservoir(considerZeroes)));

  registerMBean(histogram,name.getMBeanName());

  return histogram;

}

Location: CassandraMetricsRegistry.java

Content: 

public Histogram histogram(MetricName name,MetricName alias,boolean considerZeroes){

  Histogram histogram=histogram(name,considerZeroes);

  registerAlias(name,alias);

  return histogram;

}

Location: CassandraMetricsRegistry.java

Content: 

public Meter meter(MetricName name){

  Meter meter=meter(name.getMetricName());

  registerMBean(meter,name.getMBeanName());

  return meter;

}

Location: CassandraMetricsRegistry.java

Content: 

public Meter meter(MetricName name,MetricName alias){

  Meter meter=meter(name);

  registerAlias(name,alias);

  return meter;

}

Location: CassandraMetricsRegistry.java

Content: 

private void registerAlias(MetricName existingName,MetricName aliasName){

  Metric existing=Metrics.getMetrics().get(existingName.getMetricName());

  assert existing != null : existingName + " not registered";

  registerMBean(existing,aliasName.getMBeanName());

}

Location: CassandraMetricsRegistry.java

Content: 

public void registerMBean(Metric metric,ObjectName name){

  AbstractBean mbean;

  if (metric instanceof Gauge)   mbean=new JmxGauge((Gauge<?>)metric,name);

 else   if (metric instanceof Counter)   mbean=new JmxCounter((Counter)metric,name);

 else   if (metric instanceof Histogram)   mbean=new JmxHistogram((Histogram)metric,name);

 else   if (metric instanceof Timer)   mbean=new JmxTimer((Timer)metric,name,TimeUnit.SECONDS,TimeUnit.MICROSECONDS);

 else   if (metric instanceof Metered)   mbean=new JmxMeter((Metered)metric,name,TimeUnit.SECONDS);

 else   throw new IllegalArgumentException("Unknown metric type: " + metric.getClass());

  if (!mBeanServer.isRegistered(name))   mBeanServer.registerMBean(mbean,name,MBeanWrapper.OnException.LOG);

}

Location: CassandraMetricsRegistry.java

Content: 

public <T extends Metric>T register(MetricName name,MetricName aliasName,T metric){

  T ret=register(name,metric);

  registerAlias(name,aliasName);

  return ret;

}

Location: CassandraMetricsRegistry.java

Content: 

public <T extends Metric>T register(MetricName name,T metric){

  try {

    register(name.getMetricName(),metric);

    registerMBean(metric,name.getMBeanName());

    return metric;

  }

 catch (  IllegalArgumentException e) {

    Metric existing=Metrics.getMetrics().get(name.getMetricName());

    return (T)existing;

  }

}

Location: CassandraMetricsRegistry.java

Content: 

public <T extends Metric>T register(MetricName name,T metric,MetricName... aliases){

  T ret=register(name,metric);

  for (  MetricName aliasName : aliases) {

    registerAlias(name,aliasName);

  }

  return ret;

}

Location: CassandraMetricsRegistry.java

Content: 

ThreadPoolMetrics register(ThreadPoolMetrics metrics){

  threadPoolMetrics.put(metrics.poolName,metrics);

  return metrics;

}

Location: CassandraMetricsRegistry.java

Content: 

private void removeAlias(MetricName name){

  if (mBeanServer.isRegistered(name.getMBeanName()))   MBeanWrapper.instance.unregisterMBean(name.getMBeanName(),MBeanWrapper.OnException.IGNORE);

}

Location: CassandraMetricsRegistry.java

Content: 

public boolean remove(MetricName name){

  boolean removed=remove(name.getMetricName());

  mBeanServer.unregisterMBean(name.getMBeanName(),MBeanWrapper.OnException.IGNORE);

  return removed;

}

Location: CassandraMetricsRegistry.java

Content: 

public boolean remove(MetricName name,MetricName... aliases){

  if (remove(name)) {

    for (    MetricName alias : aliases) {

      removeAlias(alias);

    }

    return true;

  }

  return false;

}

Location: CassandraMetricsRegistry.java

Content: 

void remove(ThreadPoolMetrics metrics){

  threadPoolMetrics.remove(metrics.poolName,metrics);

}

Location: CassandraMetricsRegistry.java

Content: 

public Timer timer(MetricName name){

  Timer timer=register(name,new Timer(new DecayingEstimatedHistogramReservoir()));

  registerMBean(timer,name.getMBeanName());

  return timer;

}

Location: CassandraMetricsRegistry.java

Content: 

public Timer timer(MetricName name,MetricName alias){

  Timer timer=timer(name);

  registerAlias(name,alias);

  return timer;

}

Location: CassandraMetricsRegistry.java

Content: 

/** 

 * Strips a single final '$' from input

 * @param s String to strip

 * @return a string with one less '$' at end

 */

private static String withoutFinalDollar(String s){

  int l=s.length();

  return (l != 0 && '$' == s.charAt(l - 1)) ? s.substring(0,l - 1) : s;

}

