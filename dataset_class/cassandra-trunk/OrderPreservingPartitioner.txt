Location: OrderPreservingPartitioner.java

Content: 

/** 

 * Copies the characters of the given string into a BigInteger. TODO: Does not acknowledge any codepoints above 0xFFFF... problem?

 */

private static BigInteger bigForString(String str,int sigchars){

  assert str.length() <= sigchars;

  BigInteger big=BigInteger.ZERO;

  for (int i=0; i < str.length(); i++) {

    int charpos=16 * (sigchars - (i + 1));

    BigInteger charbig=BigInteger.valueOf(str.charAt(i) & 0xFFFF);

    big=big.or(charbig.shiftLeft(charpos));

  }

  return big;

}

Location: OrderPreservingPartitioner.java

Content: 

/** 

 * Convert a (positive) BigInteger into a String. If remainder is true, an additional char with the high order bit enabled will be added to the end of the String.

 */

private String stringForBig(BigInteger big,int sigchars,boolean remainder){

  char[] chars=new char[sigchars + (remainder ? 1 : 0)];

  if (remainder)   chars[sigchars]|=0x8000;

  for (int i=0; i < sigchars; i++) {

    int maskpos=16 * (sigchars - (i + 1));

    chars[i]=(char)(big.and(CHAR_MASK.shiftLeft(maskpos)).shiftRight(maskpos).intValue() & 0xFFFF);

  }

  return new String(chars);

}

