Location: AbstractStrategyHolder.java

Content: 

AbstractStrategyHolder(ColumnFamilyStore cfs,DestinationRouter router){

  this.cfs=cfs;

  this.router=router;

}

Location: AbstractStrategyHolder.java

Content: 

public abstract void addSSTables(GroupedSSTableContainer sstables);

Location: AbstractStrategyHolder.java

Content: 

public abstract Iterable<AbstractCompactionStrategy> allStrategies();

Location: AbstractStrategyHolder.java

Content: 

public abstract boolean containsSSTable(SSTableReader sstable);

Location: AbstractStrategyHolder.java

Content: 

public GroupedSSTableContainer createGroupedSSTableContainer(){

  return new GroupedSSTableContainer(this);

}

Location: AbstractStrategyHolder.java

Content: 

public abstract SSTableMultiWriter createSSTableMultiWriter(Descriptor descriptor,long keyCount,long repairedAt,UUID pendingRepair,boolean isTransient,MetadataCollector collector,SerializationHeader header,Collection<Index> indexes,LifecycleNewTracker lifecycleNewTracker);

Location: AbstractStrategyHolder.java

Content: 

public abstract Collection<TaskSupplier> getBackgroundTaskSuppliers(int gcBefore);

Location: AbstractStrategyHolder.java

Content: 

public abstract Collection<AbstractCompactionTask> getMaximalTasks(int gcBefore,boolean splitOutput);

Location: AbstractStrategyHolder.java

Content: 

public abstract List<ISSTableScanner> getScanners(GroupedSSTableContainer sstables,Collection<Range<Token>> ranges);

Location: AbstractStrategyHolder.java

Content: 

public abstract AbstractCompactionStrategy getStrategyFor(SSTableReader sstable);

Location: AbstractStrategyHolder.java

Content: 

/** 

 * Return the directory index the given compaction strategy belongs to, or -1 if it's not held by this holder

 */

public abstract int getStrategyIndex(AbstractCompactionStrategy strategy);

Location: AbstractStrategyHolder.java

Content: 

public abstract Collection<AbstractCompactionTask> getUserDefinedTasks(GroupedSSTableContainer sstables,int gcBefore);

Location: AbstractStrategyHolder.java

Content: 

/** 

 * SSTables are grouped by their repaired and pending repair status. This method determines if this holder holds the sstable for the given repaired/grouped statuses. Holders should be mutually exclusive in the groups they deal with. IOW, if one holder returns true for a given isRepaired/isPendingRepair combo, none of the others should.

 */

public abstract boolean managesRepairedGroup(boolean isRepaired,boolean isPendingRepair,boolean isTransient);

Location: AbstractStrategyHolder.java

Content: 

public boolean managesSSTable(SSTableReader sstable){

  return managesRepairedGroup(sstable.isRepaired(),sstable.isPendingRepair(),sstable.isTransient());

}

Location: AbstractStrategyHolder.java

Content: 

public abstract void removeSSTables(GroupedSSTableContainer sstables);

Location: AbstractStrategyHolder.java

Content: 

public abstract void replaceSSTables(GroupedSSTableContainer removed,GroupedSSTableContainer added);

Location: AbstractStrategyHolder.java

Content: 

protected abstract void setStrategyInternal(CompactionParams params,int numTokenPartitions);

Location: AbstractStrategyHolder.java

Content: 

final void setStrategy(CompactionParams params,int numTokenPartitions){

  Preconditions.checkArgument(numTokenPartitions > 0,"at least one token partition required");

  shutdown();

  this.numTokenPartitions=numTokenPartitions;

  setStrategyInternal(params,numTokenPartitions);

}

Location: AbstractStrategyHolder.java

Content: 

public abstract void startup();

