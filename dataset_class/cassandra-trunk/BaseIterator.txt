Location: BaseIterator.java

Content: 

/** 

 * apply the relevant method from the transformation to the value. used in hasMoreContents to apply the functions that follow the MoreContents

 */

protected abstract V applyOne(V value,Transformation transformation);

Location: BaseIterator.java

Content: 

private V apply(V next,int from){

  while (next != null & from < length)   next=applyOne(next,stack[from++]);

  return next;

}

Location: BaseIterator.java

Content: 

BaseIterator(BaseIterator<? extends V,? extends I,?> copyFrom){

  super(copyFrom);

  this.input=copyFrom.input;

  this.next=copyFrom.next;

  this.stop=copyFrom.stop;

  this.stopChild=copyFrom.stopChild;

}

Location: BaseIterator.java

Content: 

BaseIterator(I input){

  this.input=input;

  this.stop=new Stop();

  this.stopChild=this.stop;

}

Location: BaseIterator.java

Content: 

protected final boolean hasMoreContents(){

  return moreContents.length > 0 && tryGetMoreContents();

}

Location: BaseIterator.java

Content: 

@DontInline private boolean tryGetMoreContents(){

  for (int i=0; i < moreContents.length; i++) {

    MoreContentsHolder holder=moreContents[i];

    MoreContents provider=holder.moreContents;

    I newContents=(I)provider.moreContents();

    if (newContents == null)     continue;

    input.close();

    input=newContents;

    Stack prefix=EMPTY;

    if (newContents instanceof BaseIterator) {

      BaseIterator abstr=(BaseIterator)newContents;

      prefix=abstr;

      input=(I)abstr.input;

      stopChild=abstr.stop;

      next=apply((V)abstr.next,holder.length);

    }

    maybeFail(runOnClose(holder.length));

    refill(prefix,holder,i);

    if (next != null || input.hasNext())     return true;

    i=-1;

  }

  return false;

}

