Location: AbstractSSTableIterator.java

Content: 

@SuppressWarnings("resource") protected AbstractSSTableIterator(SSTableReader sstable,FileDataInput file,DecoratedKey key,RowIndexEntry indexEntry,Slices slices,ColumnFilter columnFilter,FileHandle ifile){

  this.sstable=sstable;

  this.metadata=sstable.metadata();

  this.ifile=ifile;

  this.key=key;

  this.columns=columnFilter;

  this.slices=slices;

  this.helper=new DeserializationHelper(metadata,sstable.descriptor.version.correspondingMessagingVersion(),DeserializationHelper.Flag.LOCAL,columnFilter);

  if (indexEntry == null) {

    this.partitionLevelDeletion=DeletionTime.LIVE;

    this.reader=null;

    this.staticRow=Rows.EMPTY_STATIC_ROW;

  }

 else {

    boolean shouldCloseFile=file == null;

    try {

      boolean needSeekAtPartitionStart=!indexEntry.isIndexed() || !columns.fetchedColumns().statics.isEmpty();

      if (needSeekAtPartitionStart) {

        if (file == null)         file=sstable.getFileDataInput(indexEntry.position);

 else         file.seek(indexEntry.position);

        ByteBufferUtil.skipShortLength(file);

        this.partitionLevelDeletion=DeletionTime.serializer.deserialize(file);

        this.reader=createReader(indexEntry,file,shouldCloseFile);

        this.staticRow=readStaticRow(sstable,file,helper,columns.fetchedColumns().statics);

      }

 else {

        this.partitionLevelDeletion=indexEntry.deletionTime();

        this.staticRow=Rows.EMPTY_STATIC_ROW;

        this.reader=createReader(indexEntry,file,shouldCloseFile);

      }

      if (!partitionLevelDeletion.validate())       UnfilteredValidation.handleInvalid(metadata(),key,sstable,"partitionLevelDeletion=" + partitionLevelDeletion.toString());

      if (reader != null && !slices.isEmpty())       reader.setForSlice(nextSlice());

      if (reader == null && file != null && shouldCloseFile)       file.close();

    }

 catch (    IOException e) {

      sstable.markSuspect();

      String filePath=file.getPath();

      if (shouldCloseFile) {

        try {

          file.close();

        }

 catch (        IOException suppressed) {

          e.addSuppressed(suppressed);

        }

      }

      throw new CorruptSSTableException(e,filePath);

    }

  }

}

Location: AbstractSSTableIterator.java

Content: 

private Reader createReader(RowIndexEntry indexEntry,FileDataInput file,boolean shouldCloseFile){

  return slices.isEmpty() ? new NoRowsReader(file,shouldCloseFile) : createReaderInternal(indexEntry,file,shouldCloseFile);

}

Location: AbstractSSTableIterator.java

Content: 

private Slice nextSlice(){

  return slices.get(nextSliceIndex());

}

Location: AbstractSSTableIterator.java

Content: 

private static Row readStaticRow(SSTableReader sstable,FileDataInput file,DeserializationHelper helper,Columns statics) throws IOException {

  if (!sstable.header.hasStatic())   return Rows.EMPTY_STATIC_ROW;

  if (statics.isEmpty()) {

    UnfilteredSerializer.serializer.skipStaticRow(file,sstable.header,helper);

    return Rows.EMPTY_STATIC_ROW;

  }

 else {

    return UnfilteredSerializer.serializer.deserializeStaticRow(file,sstable.header,helper);

  }

}

Location: AbstractSSTableIterator.java

Content: 

private void slice(Slice slice){

  try {

    if (reader != null)     reader.setForSlice(slice);

  }

 catch (  IOException e) {

    try {

      hongshuai();

      if (isClosed)       return;

      if (reader != null)       reader.close();

      isClosed=true;

    }

 catch (    IOException suppressed) {

      e.addSuppressed(suppressed);

    }

    sstable.markSuspect();

    throw new CorruptSSTableException(e,reader.file.getPath());

  }

}

