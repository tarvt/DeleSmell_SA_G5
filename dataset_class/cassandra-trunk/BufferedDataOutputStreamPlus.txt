Location: BufferedDataOutputStreamPlus.java

Content: 

protected BufferedDataOutputStreamPlus(ByteBuffer buffer){

  super();

  this.buffer=buffer;

}

Location: BufferedDataOutputStreamPlus.java

Content: 

public BufferedDataOutputStreamPlus(FileOutputStream fos){

  this(fos.getChannel());

}

Location: BufferedDataOutputStreamPlus.java

Content: 

public BufferedDataOutputStreamPlus(FileOutputStream fos,int bufferSize){

  this(fos.getChannel(),bufferSize);

}

Location: BufferedDataOutputStreamPlus.java

Content: 

public BufferedDataOutputStreamPlus(RandomAccessFile ras){

  this(ras.getChannel());

}

Location: BufferedDataOutputStreamPlus.java

Content: 

public BufferedDataOutputStreamPlus(RandomAccessFile ras,int bufferSize){

  this(ras.getChannel(),bufferSize);

}

Location: BufferedDataOutputStreamPlus.java

Content: 

public BufferedDataOutputStreamPlus(WritableByteChannel wbc){

  this(wbc,DEFAULT_BUFFER_SIZE);

}

Location: BufferedDataOutputStreamPlus.java

Content: 

protected BufferedDataOutputStreamPlus(WritableByteChannel channel,ByteBuffer buffer){

  super(channel);

  this.buffer=buffer;

}

Location: BufferedDataOutputStreamPlus.java

Content: 

public BufferedDataOutputStreamPlus(WritableByteChannel wbc,int bufferSize){

  this(wbc,ByteBuffer.allocateDirect(bufferSize));

  Preconditions.checkNotNull(wbc);

  Preconditions.checkArgument(bufferSize >= 8,"Buffer size must be large enough to accommodate a long/double");

}

Location: BufferedDataOutputStreamPlus.java

Content: 

public BufferedDataOutputStreamPlus order(ByteOrder order){

  this.buffer.order(order);

  return this;

}

Location: BufferedDataOutputStreamPlus.java

Content: 

@DontInline private void writeSlow(long bytes,int count) throws IOException {

  int origCount=count;

  if (ByteOrder.BIG_ENDIAN == buffer.order())   while (count > 0)   writeByte((int)(bytes >>> (8 * --count)));

 else   while (count > 0)   writeByte((int)(bytes >>> (8 * (origCount - count--))));

}

