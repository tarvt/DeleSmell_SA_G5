Location: DebuggableThreadPoolExecutor.java

Content: 

/** 

 * Creates a thread pool that creates new threads as needed, but will reuse previously constructed threads when they are available.

 * @param threadPoolName the name of the threads created by this executor

 * @return The new DebuggableThreadPoolExecutor

 */

public static DebuggableThreadPoolExecutor createCachedThreadpoolWithMaxSize(String threadPoolName){

  return new DebuggableThreadPoolExecutor(0,Integer.MAX_VALUE,60L,TimeUnit.SECONDS,new SynchronousQueue<Runnable>(),new NamedThreadFactory(threadPoolName));

}

Location: DebuggableThreadPoolExecutor.java

Content: 

/** 

 * Returns a ThreadPoolExecutor with a fixed number of threads. When all threads are actively executing tasks, new tasks are queued. If (most) threads are expected to be idle most of the time, prefer createWithMaxSize() instead.

 * @param threadPoolName the name of the threads created by this executor

 * @param size the fixed number of threads for this executor

 * @return the new DebuggableThreadPoolExecutor

 */

public static DebuggableThreadPoolExecutor createWithFixedPoolSize(String threadPoolName,int size){

  return createWithMaximumPoolSize(threadPoolName,size,Integer.MAX_VALUE,TimeUnit.SECONDS);

}

Location: DebuggableThreadPoolExecutor.java

Content: 

/** 

 * Returns a ThreadPoolExecutor with a fixed maximum number of threads, but whose threads are terminated when idle for too long. When all threads are actively executing tasks, new tasks are queued.

 * @param threadPoolName the name of the threads created by this executor

 * @param size the maximum number of threads for this executor

 * @param keepAliveTime the time an idle thread is kept alive before being terminated

 * @param unit tht time unit for {@code keepAliveTime}

 * @return the new DebuggableThreadPoolExecutor

 */

public static DebuggableThreadPoolExecutor createWithMaximumPoolSize(String threadPoolName,int size,int keepAliveTime,TimeUnit unit){

  return new DebuggableThreadPoolExecutor(size,Integer.MAX_VALUE,keepAliveTime,unit,new LinkedBlockingQueue<Runnable>(),new NamedThreadFactory(threadPoolName));

}

Location: DebuggableThreadPoolExecutor.java

Content: 

public DebuggableThreadPoolExecutor(int corePoolSize,int maximumPoolSize,long keepAliveTime,TimeUnit unit,BlockingQueue<Runnable> workQueue,ThreadFactory threadFactory){

  super(corePoolSize,maximumPoolSize,keepAliveTime,unit,workQueue,threadFactory);

  allowCoreThreadTimeOut(true);

  this.setRejectedExecutionHandler(blockingExecutionHandler);

}

Location: DebuggableThreadPoolExecutor.java

Content: 

public DebuggableThreadPoolExecutor(int corePoolSize,long keepAliveTime,TimeUnit unit,BlockingQueue<Runnable> queue,ThreadFactory factory){

  this(corePoolSize,corePoolSize,keepAliveTime,unit,queue,factory);

}

Location: DebuggableThreadPoolExecutor.java

Content: 

public DebuggableThreadPoolExecutor(String threadPoolName,int priority){

  this(1,Integer.MAX_VALUE,TimeUnit.SECONDS,new LinkedBlockingQueue<Runnable>(),new NamedThreadFactory(threadPoolName,priority));

}

Location: DebuggableThreadPoolExecutor.java

Content: 

@Override public void execute(Runnable command){

  super.execute(isTracing() && !(command instanceof LocalSessionWrapper) ? LocalSessionWrapper.create(command) : command);

}

Location: DebuggableThreadPoolExecutor.java

Content: 

public void execute(Runnable command,ExecutorLocals locals){

  super.execute(locals == null || command instanceof LocalSessionWrapper ? command : LocalSessionWrapper.create(command,null,locals));

}

Location: DebuggableThreadPoolExecutor.java

Content: 

private static Throwable extractThrowable(Future<?> future){

  if (future.isDone()) {

    try {

      future.get();

    }

 catch (    InterruptedException e) {

      throw new AssertionError(e);

    }

catch (    CancellationException e) {

      logger.trace("Task cancelled",e);

    }

catch (    ExecutionException e) {

      return e.getCause();

    }

  }

  return null;

}

Location: DebuggableThreadPoolExecutor.java

Content: 

/** 

 * @return any exception wrapped by @param runnable, i.e., if it is a FutureTask

 */

public static Throwable extractThrowable(Runnable runnable){

  Throwable throwable=null;

  if (runnable instanceof Future<?>) {

    throwable=extractThrowable(((Future<?>)runnable));

  }

  if (throwable == null && runnable instanceof HasDelegateFuture) {

    throwable=extractThrowable(((HasDelegateFuture)runnable).getDelegate());

  }

  return throwable;

}

Location: DebuggableThreadPoolExecutor.java

Content: 

@Override public int getActiveTaskCount(){

  return getActiveCount();

}

Location: DebuggableThreadPoolExecutor.java

Content: 

@Override public int getPendingTaskCount(){

  return getQueue().size();

}

Location: DebuggableThreadPoolExecutor.java

Content: 

/** 

 * Send @param t to the default uncaught exception handler, or log it if none such is set up

 */

public static void handleOrLog(Throwable t){

  if (Thread.getDefaultUncaughtExceptionHandler() == null)   logger.error("Error in ThreadPoolExecutor",t);

 else   Thread.getDefaultUncaughtExceptionHandler().uncaughtException(Thread.currentThread(),t);

}

Location: DebuggableThreadPoolExecutor.java

Content: 

/** 

 * Send @param t and any exception wrapped by @param r to the default uncaught exception handler, or log them if none such is set up

 */

public static void logExceptionsAfterExecute(Runnable r,Throwable t){

  Throwable hiddenThrowable=extractThrowable(r);

  if (hiddenThrowable != null)   handleOrLog(hiddenThrowable);

  if (t != null && Thread.getDefaultUncaughtExceptionHandler() == null)   handleOrLog(t);

}

Location: DebuggableThreadPoolExecutor.java

Content: 

public void maybeExecuteImmediately(Runnable command){

  execute(command);

}

Location: DebuggableThreadPoolExecutor.java

Content: 

protected static void maybeResetTraceSessionWrapper(Runnable r){

  if (r instanceof LocalSessionWrapper) {

    LocalSessionWrapper tsw=(LocalSessionWrapper)r;

    tsw.reset();

  }

}

Location: DebuggableThreadPoolExecutor.java

Content: 

@Override protected <T>RunnableFuture<T> newTaskFor(Callable<T> callable){

  if (isTracing() && !(callable instanceof LocalSessionWrapper))   return LocalSessionWrapper.create(callable);

  return super.newTaskFor(callable);

}

Location: DebuggableThreadPoolExecutor.java

Content: 

@Override protected <T>RunnableFuture<T> newTaskFor(Runnable runnable,T result){

  if (isTracing() && !(runnable instanceof LocalSessionWrapper))   return LocalSessionWrapper.create(runnable,result);

  if (runnable instanceof RunnableFuture)   return new ForwardingRunnableFuture<>((RunnableFuture)runnable,result);

  return super.newTaskFor(runnable,result);

}

Location: DebuggableThreadPoolExecutor.java

Content: 

protected void onFinalAccept(Runnable task){

}

Location: DebuggableThreadPoolExecutor.java

Content: 

protected void onFinalRejection(Runnable task){

}

Location: DebuggableThreadPoolExecutor.java

Content: 

protected void onInitialRejection(Runnable task){

}

