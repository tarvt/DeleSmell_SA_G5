Location: LeveledGenerations.java

Content: 

/** 

 * Adds readers to the correct level If adding an sstable would cause an overlap in the level (if level > 1) we send it to L0. This can happen for example when moving sstables from unrepaired to repaired. If the sstable is already in the manifest we skip it. If the sstable exists in the manifest but has the wrong level, it is removed from the wrong level and added to the correct one todo: group sstables per level, add all if level is currently empty, improve startup speed

 */

void addAll(Iterable<SSTableReader> readers){

  logDistribution();

  for (  SSTableReader sstable : readers) {

    assert sstable.getSSTableLevel() < levelCount() : "Invalid level " + sstable.getSSTableLevel() + " out of "+ (levelCount() - 1);

    int existingLevel=getLevelIfExists(sstable);

    if (existingLevel != -1) {

      if (sstable.getSSTableLevel() != existingLevel) {

        logger.error("SSTable {} on the wrong level in the manifest - {} instead of {} as recorded in the sstable metadata, removing from level {}",sstable,existingLevel,sstable.getSSTableLevel(),existingLevel);

        if (strictLCSChecksTest)         throw new AssertionError("SSTable not in matching level in manifest: " + sstable + ": "+ existingLevel+ " != "+ sstable.getSSTableLevel());

        get(existingLevel).remove(sstable);

      }

 else {

        logger.info("Manifest already contains {} in level {} - skipping",sstable,existingLevel);

        continue;

      }

    }

    if (sstable.getSSTableLevel() == 0) {

      l0.add(sstable);

      continue;

    }

    TreeSet<SSTableReader> level=levels[sstable.getSSTableLevel() - 1];

    SSTableReader after=level.ceiling(sstable);

    SSTableReader before=level.floor(sstable);

    if (before != null && before.last.compareTo(sstable.first) >= 0 || after != null && after.first.compareTo(sstable.last) <= 0) {

      if (strictLCSChecksTest)       throw new AssertionError("Got unexpected overlap in level " + sstable.getSSTableLevel());

      sendToL0(sstable);

    }

 else {

      level.add(sstable);

    }

  }

  maybeVerifyLevels();

}

Location: LeveledGenerations.java

Content: 

Set<SSTableReader> allSSTables(){

  ImmutableSet.Builder<SSTableReader> builder=ImmutableSet.builder();

  builder.addAll(l0);

  for (  Set<SSTableReader> sstables : levels)   builder.addAll(sstables);

  return builder.build();

}

Location: LeveledGenerations.java

Content: 

/** 

 * Tries to find the sstable in the levels without using the sstable-recorded level Used to make sure we don't try to re-add an existing sstable

 */

private int getLevelIfExists(SSTableReader sstable){

  for (int i=0; i < levelCount(); i++) {

    if (get(i).contains(sstable))     return i;

  }

  return -1;

}

Location: LeveledGenerations.java

Content: 

int levelCount(){

  return levels.length + 1;

}

Location: LeveledGenerations.java

Content: 

LeveledGenerations(){

  for (int i=0; i < MAX_LEVEL_COUNT - 1; i++)   levels[i]=new TreeSet<>(nonL0Comparator);

}

Location: LeveledGenerations.java

Content: 

void logDistribution(){

  if (logger.isTraceEnabled()) {

    for (int i=0; i < levelCount(); i++) {

      Set<SSTableReader> level=get(i);

      if (!level.isEmpty()) {

        logger.trace("L{} contains {} SSTables ({}) in {}",i,level.size(),FBUtilities.prettyPrintMemory(SSTableReader.getTotalBytes(level)),this);

      }

    }

  }

}

Location: LeveledGenerations.java

Content: 

/** 

 * do extra verification of the sstables in the generations only used during tests

 */

private void maybeVerifyLevels(){

  if (!strictLCSChecksTest || System.nanoTime() - lastOverlapCheck <= TimeUnit.NANOSECONDS.convert(5,TimeUnit.SECONDS))   return;

  logger.info("LCS verifying levels");

  lastOverlapCheck=System.nanoTime();

  for (int i=1; i < levelCount(); i++) {

    SSTableReader prev=null;

    for (    SSTableReader sstable : get(i)) {

      assert prev == null || prev.last.compareTo(sstable.first) < 0;

      prev=sstable;

      for (int j=0; j < levelCount(); j++) {

        if (i == j)         continue;

        assert !get(j).contains(sstable);

      }

    }

  }

}

Location: LeveledGenerations.java

Content: 

int remove(Collection<SSTableReader> readers){

  int minLevel=Integer.MAX_VALUE;

  for (  SSTableReader sstable : readers) {

    int level=sstable.getSSTableLevel();

    minLevel=Math.min(minLevel,level);

    get(level).remove(sstable);

  }

  return minLevel;

}

Location: LeveledGenerations.java

Content: 

/** 

 * Sends sstable to L0 by mutating its level in the sstable metadata. SSTable should not exist in the manifest

 */

private void sendToL0(SSTableReader sstable){

  try {

    sstable.mutateLevelAndReload(0);

  }

 catch (  IOException e) {

    logger.error("Failed mutating sstable metadata for {} - adding it to L0 to avoid overlap. Marking suspect",sstable,e);

    sstable.markSuspect();

  }

  l0.add(sstable);

}

Location: LeveledGenerations.java

Content: 

/** 

 * given a level with sstables with first tokens [0, 10, 20, 30] and a lastCompactedSSTable with last = 15, we will return an Iterator over [20, 30, 0, 10].

 */

Iterator<SSTableReader> wrappingIterator(int lvl,SSTableReader lastCompactedSSTable){

  assert lvl > 0;

  TreeSet<SSTableReader> level=levels[lvl - 1];

  if (level.isEmpty())   return Collections.emptyIterator();

  if (lastCompactedSSTable == null)   return level.iterator();

  PeekingIterator<SSTableReader> tail=Iterators.peekingIterator(level.tailSet(lastCompactedSSTable).iterator());

  SSTableReader pivot=null;

  while (tail.hasNext()) {

    SSTableReader potentialPivot=tail.peek();

    if (potentialPivot.first.compareTo(lastCompactedSSTable.last) > 0) {

      pivot=potentialPivot;

      break;

    }

    tail.next();

  }

  if (pivot == null)   return level.iterator();

  return Iterators.concat(tail,level.headSet(pivot,false).iterator());

}

