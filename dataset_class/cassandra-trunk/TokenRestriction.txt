Location: TokenRestriction.java

Content: 

/** 

 * Merges this restriction with the specified <code>TokenRestriction</code>.

 * @param otherRestriction the <code>TokenRestriction</code> to merge with.

 */

protected abstract PartitionKeyRestrictions doMergeWith(TokenRestriction otherRestriction) throws InvalidRequestException ;

Location: TokenRestriction.java

Content: 

/** 

 * Returns the column names as a comma separated <code>String</code>.

 * @return the column names as a comma separated <code>String</code>.

 */

protected final String getColumnNamesAsString(){

  return Joiner.on(", ").join(ColumnMetadata.toIdentifiers(columnDefs));

}

Location: TokenRestriction.java

Content: 

/** 

 * Creates a new <code>TokenRestriction</code> that apply to the specified columns.

 * @param columnDefs the definition of the columns to which apply the token restriction

 */

public TokenRestriction(TableMetadata metadata,List<ColumnMetadata> columnDefs){

  this.columnDefs=columnDefs;

  this.metadata=metadata;

}

Location: TokenRestriction.java

Content: 

/** 

 * Converts the specified restriction into a <code>PartitionKeyRestrictions</code>.

 * @param restriction the restriction to convert

 * @return a <code>PartitionKeyRestrictions</code>

 * @throws InvalidRequestException if a problem occurs while converting the restriction

 */

private PartitionKeyRestrictions toPartitionKeyRestrictions(Restriction restriction) throws InvalidRequestException {

  if (restriction instanceof PartitionKeyRestrictions)   return (PartitionKeyRestrictions)restriction;

  return new PartitionKeySingleRestrictionSet(metadata.partitionKeyAsClusteringComparator()).mergeWith(restriction);

}

