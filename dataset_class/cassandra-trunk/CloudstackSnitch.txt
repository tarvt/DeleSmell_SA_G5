Location: CloudstackSnitch.java

Content: 

public CloudstackSnitch() throws IOException, ConfigurationException {

  String endpoint=csMetadataEndpoint();

  String zone=csQueryMetadata(endpoint + ZONE_NAME_QUERY_URI);

  String zone_parts[]=zone.split("-");

  if (zone_parts.length != 3) {

    throw new ConfigurationException("CloudstackSnitch cannot handle invalid zone format: " + zone);

  }

  csZoneDc=zone_parts[0] + "-" + zone_parts[1];

  csZoneRack=zone_parts[2];

}

Location: CloudstackSnitch.java

Content: 

String csEndpointFromLease(File lease) throws ConfigurationException {

  String line;

  String endpoint=null;

  Pattern identifierPattern=Pattern.compile("^[ \t]*option dhcp-server-identifier (.*);$");

  try (BufferedReader reader=new BufferedReader(new FileReader(lease))){

    while ((line=reader.readLine()) != null) {

      Matcher matcher=identifierPattern.matcher(line);

      if (matcher.find()) {

        endpoint=matcher.group(1);

        break;

      }

    }

  }

 catch (  Exception e) {

    throw new ConfigurationException("CloudstackSnitch cannot access lease file.");

  }

  if (endpoint == null) {

    throw new ConfigurationException("No metadata server could be found in lease file.");

  }

  return "http://" + endpoint;

}

Location: CloudstackSnitch.java

Content: 

String csMetadataEndpoint() throws ConfigurationException {

  for (  String lease_uri : LEASE_FILES) {

    try {

      File lease_file=new File(new URI(lease_uri));

      if (lease_file.exists()) {

        return csEndpointFromLease(lease_file);

      }

    }

 catch (    Exception e) {

      JVMStabilityInspector.inspectThrowable(e);

      continue;

    }

  }

  throw new ConfigurationException("No valid DHCP lease file could be found.");

}

Location: CloudstackSnitch.java

Content: 

String csQueryMetadata(String url) throws ConfigurationException, IOException {

  HttpURLConnection conn=null;

  DataInputStream is=null;

  try {

    conn=(HttpURLConnection)new URL(url).openConnection();

  }

 catch (  Exception e) {

    throw new ConfigurationException("CloudstackSnitch cannot query wrong metadata URL: " + url);

  }

  try {

    conn.setRequestMethod("GET");

    if (conn.getResponseCode() != 200) {

      throw new ConfigurationException("CloudstackSnitch was unable to query metadata.");

    }

    int cl=conn.getContentLength();

    byte[] b=new byte[cl];

    is=new DataInputStream(new BufferedInputStream(conn.getInputStream()));

    is.readFully(b);

    return new String(b,StandardCharsets.UTF_8);

  }

  finally {

    FileUtils.close(is);

    conn.disconnect();

  }

}

