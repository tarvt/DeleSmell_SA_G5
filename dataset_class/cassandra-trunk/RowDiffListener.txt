Location: RowDiffListener.java

Content: 

/** 

 * Called for any cell that is either in the merged row or in input  {@code i}.

 * @param i the input row from which {@code original} is from.

 * @param clustering the clustering for the row that is merged.

 * @param merged the cell of the merged row. Will be {@code null} if input {@code i} had a cell but that cell is no presentin the merged result (it has been deleted/shadowed).

 * @param original the cell of input {@code i}. May be  {@code null} if input {@code i} had cell corresponding to {@code merged}.

 */

public void onCell(int i,Clustering<?> clustering,Cell<?> merged,Cell<?> original);

Location: RowDiffListener.java

Content: 

/** 

 * Called for every (non-live) complex deletion of any complex column present in either the merged row of input  {@code i}.

 * @param i the input row from which {@code original} is from.

 * @param clustering the clustering for the row that is merged.

 * @param column the column for which this is a complex deletion of.

 * @param merged the complex deletion of the merged row. Will be {@code null} if input {@code i} had a complex deletionfor  {@code column} but the merged result doesn't (i.e. the deletion has been shadowed).

 * @param original the complex deletion of input {@code i} for column {@code column}. May be  {@code null} if input {@code i}had no complex deletion but the merged row has.

 */

public void onComplexDeletion(int i,Clustering<?> clustering,ColumnMetadata column,DeletionTime merged,DeletionTime original);

Location: RowDiffListener.java

Content: 

/** 

 * Called for the row deletion of input  {@code i}.

 * @param i the input row from which {@code original} is from.

 * @param clustering the clustering for the row that is merged.

 * @param merged the deletion of the merged row. Will be {@code null} if input {@code i} had deletionbut the merged result doesn't (i.e. the deletion has been shadowed).

 * @param original the deletion of input {@code i}. May be  {@code null} if input {@code i} had no deletion but the merged row has.

 */

public void onDeletion(int i,Clustering<?> clustering,Row.Deletion merged,Row.Deletion original);

Location: RowDiffListener.java

Content: 

/** 

 * Called for the row primary key liveness info of input  {@code i}.

 * @param i the input row from which {@code original} is from.

 * @param clustering the clustering for the row that is merged.

 * @param merged the primary key liveness info of the merged row. Will be {@code null} if input {@code i} hada  {@code LivenessInfo}, but the merged result don't (i.e. the original info has been shadowed/deleted).

 * @param original the primary key liveness info of input {@code i}. May be  {@code null} if input {@code i}has not primary key liveness info (i.e. it has  {@code LivenessInfo.NONE}) but the merged result has.

 */

public void onPrimaryKeyLivenessInfo(int i,Clustering<?> clustering,LivenessInfo merged,LivenessInfo original);

