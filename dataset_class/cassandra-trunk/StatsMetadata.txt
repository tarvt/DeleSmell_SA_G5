Location: StatsMetadata.java

Content: 

/** 

 * @param gcBefore gc time in seconds

 * @return amount of droppable tombstones

 */

public double getDroppableTombstonesBefore(int gcBefore){

  return estimatedTombstoneDropTime.sum(gcBefore);

}

Location: StatsMetadata.java

Content: 

/** 

 * @param gcBefore gc time in seconds

 * @return estimated droppable tombstone ratio at given gcBefore time.

 */

public double getEstimatedDroppableTombstoneRatio(int gcBefore){

  long estimatedColumnCount=this.estimatedCellPerPartitionCount.mean() * this.estimatedCellPerPartitionCount.count();

  if (estimatedColumnCount > 0) {

    double droppable=getDroppableTombstonesBefore(gcBefore);

    return droppable / estimatedColumnCount;

  }

  return 0.0f;

}

Location: StatsMetadata.java

Content: 

public StatsMetadata mutateLevel(int newLevel){

  return new StatsMetadata(estimatedPartitionSize,estimatedCellPerPartitionCount,commitLogIntervals,minTimestamp,maxTimestamp,minLocalDeletionTime,maxLocalDeletionTime,minTTL,maxTTL,compressionRatio,estimatedTombstoneDropTime,newLevel,minClusteringValues,maxClusteringValues,hasLegacyCounterShards,repairedAt,totalColumnsSet,totalRows,pendingRepair,isTransient);

}

Location: StatsMetadata.java

Content: 

public StatsMetadata mutateRepairedMetadata(long newRepairedAt,UUID newPendingRepair,boolean newIsTransient){

  return new StatsMetadata(estimatedPartitionSize,estimatedCellPerPartitionCount,commitLogIntervals,minTimestamp,maxTimestamp,minLocalDeletionTime,maxLocalDeletionTime,minTTL,maxTTL,compressionRatio,estimatedTombstoneDropTime,sstableLevel,minClusteringValues,maxClusteringValues,hasLegacyCounterShards,newRepairedAt,totalColumnsSet,totalRows,newPendingRepair,newIsTransient);

}

Location: StatsMetadata.java

Content: 

public StatsMetadata(EstimatedHistogram estimatedPartitionSize,EstimatedHistogram estimatedCellPerPartitionCount,IntervalSet<CommitLogPosition> commitLogIntervals,long minTimestamp,long maxTimestamp,int minLocalDeletionTime,int maxLocalDeletionTime,int minTTL,int maxTTL,double compressionRatio,TombstoneHistogram estimatedTombstoneDropTime,int sstableLevel,List<ByteBuffer> minClusteringValues,List<ByteBuffer> maxClusteringValues,boolean hasLegacyCounterShards,long repairedAt,long totalColumnsSet,long totalRows,UUID pendingRepair,boolean isTransient){

  this.estimatedPartitionSize=estimatedPartitionSize;

  this.estimatedCellPerPartitionCount=estimatedCellPerPartitionCount;

  this.commitLogIntervals=commitLogIntervals;

  this.minTimestamp=minTimestamp;

  this.maxTimestamp=maxTimestamp;

  this.minLocalDeletionTime=minLocalDeletionTime;

  this.maxLocalDeletionTime=maxLocalDeletionTime;

  this.minTTL=minTTL;

  this.maxTTL=maxTTL;

  this.compressionRatio=compressionRatio;

  this.estimatedTombstoneDropTime=estimatedTombstoneDropTime;

  this.sstableLevel=sstableLevel;

  this.minClusteringValues=minClusteringValues;

  this.maxClusteringValues=maxClusteringValues;

  this.hasLegacyCounterShards=hasLegacyCounterShards;

  this.repairedAt=repairedAt;

  this.totalColumnsSet=totalColumnsSet;

  this.totalRows=totalRows;

  this.pendingRepair=pendingRepair;

  this.isTransient=isTransient;

  this.encodingStats=new EncodingStats(minTimestamp,minLocalDeletionTime,minTTL);

}

