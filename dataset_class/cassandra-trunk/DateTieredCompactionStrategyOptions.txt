Location: DateTieredCompactionStrategyOptions.java

Content: 

public DateTieredCompactionStrategyOptions(){

  maxSSTableAge=Math.round(DEFAULT_MAX_SSTABLE_AGE_DAYS * DEFAULT_TIMESTAMP_RESOLUTION.convert((long)DEFAULT_MAX_SSTABLE_AGE_DAYS,TimeUnit.DAYS));

  timestampResolution=DEFAULT_TIMESTAMP_RESOLUTION;

  baseTime=timestampResolution.convert(DEFAULT_BASE_TIME_SECONDS,TimeUnit.SECONDS);

  expiredSSTableCheckFrequency=TimeUnit.MILLISECONDS.convert(DEFAULT_EXPIRED_SSTABLE_CHECK_FREQUENCY_SECONDS,TimeUnit.SECONDS);

  maxWindowSize=timestampResolution.convert(1,TimeUnit.DAYS);

}

Location: DateTieredCompactionStrategyOptions.java

Content: 

public DateTieredCompactionStrategyOptions(Map<String,String> options){

  String optionValue=options.get(TIMESTAMP_RESOLUTION_KEY);

  timestampResolution=optionValue == null ? DEFAULT_TIMESTAMP_RESOLUTION : TimeUnit.valueOf(optionValue);

  if (timestampResolution != DEFAULT_TIMESTAMP_RESOLUTION)   logger.warn("Using a non-default timestamp_resolution {} - are you really doing inserts with USING TIMESTAMP <non_microsecond_timestamp> (or driver equivalent)?",timestampResolution);

  optionValue=options.get(MAX_SSTABLE_AGE_KEY);

  double fractionalDays=optionValue == null ? DEFAULT_MAX_SSTABLE_AGE_DAYS : Double.parseDouble(optionValue);

  maxSSTableAge=Math.round(fractionalDays * timestampResolution.convert(1,TimeUnit.DAYS));

  optionValue=options.get(BASE_TIME_KEY);

  baseTime=timestampResolution.convert(optionValue == null ? DEFAULT_BASE_TIME_SECONDS : Long.parseLong(optionValue),TimeUnit.SECONDS);

  optionValue=options.get(EXPIRED_SSTABLE_CHECK_FREQUENCY_SECONDS_KEY);

  expiredSSTableCheckFrequency=TimeUnit.MILLISECONDS.convert(optionValue == null ? DEFAULT_EXPIRED_SSTABLE_CHECK_FREQUENCY_SECONDS : Long.parseLong(optionValue),TimeUnit.SECONDS);

  optionValue=options.get(MAX_WINDOW_SIZE_KEY);

  maxWindowSize=timestampResolution.convert(optionValue == null ? DEFAULT_MAX_WINDOW_SIZE_SECONDS : Long.parseLong(optionValue),TimeUnit.SECONDS);

}

