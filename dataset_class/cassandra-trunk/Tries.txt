Location: Tries.java

Content: 

/** 

 * Returns true if both values are either null or equal

 */

static boolean areEqual(Object a,Object b){

  return (a == null ? b == null : a.equals(b));

}

Location: Tries.java

Content: 

/** 

 * A utility method to cast keys. It actually doesn't cast anything. It's just fooling the compiler!

 */

@SuppressWarnings("unchecked") static <K>K cast(Object key){

  return (K)key;

}

Location: Tries.java

Content: 

/** 

 * Returns true if bitIndex is a  {@link KeyAnalyzer#EQUAL_BIT_KEY}

 */

static boolean isEqualBitKey(int bitIndex){

  return bitIndex == KeyAnalyzer.EQUAL_BIT_KEY;

}

Location: Tries.java

Content: 

/** 

 * Returns true if bitIndex is a  {@link KeyAnalyzer#NULL_BIT_KEY}

 */

static boolean isNullBitKey(int bitIndex){

  return bitIndex == KeyAnalyzer.NULL_BIT_KEY;

}

Location: Tries.java

Content: 

/** 

 * Returns true if bitIndex is a  {@link KeyAnalyzer#OUT_OF_BOUNDS_BIT_KEY}

 */

static boolean isOutOfBoundsIndex(int bitIndex){

  return bitIndex == KeyAnalyzer.OUT_OF_BOUNDS_BIT_KEY;

}

Location: Tries.java

Content: 

/** 

 * Returns true if the given bitIndex is valid. Indices are considered valid if they're between 0 and {@link Integer#MAX_VALUE}

 */

static boolean isValidBitIndex(int bitIndex){

  return 0 <= bitIndex;

}

Location: Tries.java

Content: 

/** 

 * Throws a  {@link NullPointerException} with the given message ifthe argument is null.

 */

static <T>T notNull(T o,String message){

  if (o == null)   throw new NullPointerException(message);

  return o;

}

