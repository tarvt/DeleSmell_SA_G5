Location: CqlOutputFormat.java

Content: 

protected void checkOutputSpecs(Configuration conf){

  if (ConfigHelper.getOutputKeyspace(conf) == null)   throw new UnsupportedOperationException("You must set the keyspace with setOutputKeyspace()");

  if (ConfigHelper.getOutputPartitioner(conf) == null)   throw new UnsupportedOperationException("You must set the output partitioner to the one used by your Cassandra cluster");

  if (ConfigHelper.getOutputInitialAddress(conf) == null)   throw new UnsupportedOperationException("You must set the initial output address to a Cassandra node");

}

Location: CqlOutputFormat.java

Content: 

/** 

 * Check for validity of the output-specification for the job.

 * @param context information about the job

 */

public void checkOutputSpecs(JobContext context){

  checkOutputSpecs(HadoopCompat.getConfiguration(context));

}

Location: CqlOutputFormat.java

Content: 

/** 

 * Fills the deprecated OutputFormat interface for streaming. 

 */

@Deprecated public void checkOutputSpecs(org.apache.hadoop.fs.FileSystem filesystem,org.apache.hadoop.mapred.JobConf job) throws IOException {

  checkOutputSpecs(job);

}

Location: CqlOutputFormat.java

Content: 

/** 

 * The OutputCommitter for this format does not write any data to the DFS.

 * @param context the task context

 * @return an output committer

 * @throws IOException

 * @throws InterruptedException

 */

public OutputCommitter getOutputCommitter(TaskAttemptContext context) throws IOException, InterruptedException {

  return new NullOutputCommitter();

}

Location: CqlOutputFormat.java

Content: 

/** 

 * Fills the deprecated OutputFormat interface for streaming. 

 */

@Deprecated public CqlRecordWriter getRecordWriter(org.apache.hadoop.fs.FileSystem filesystem,org.apache.hadoop.mapred.JobConf job,String name,org.apache.hadoop.util.Progressable progress) throws IOException {

  return new CqlRecordWriter(job,progress);

}

Location: CqlOutputFormat.java

Content: 

/** 

 * Get the  {@link RecordWriter} for the given task.

 * @param context the information about the current task.

 * @return a {@link RecordWriter} to write the output for the job.

 * @throws IOException

 */

public CqlRecordWriter getRecordWriter(final TaskAttemptContext context) throws IOException, InterruptedException {

  return new CqlRecordWriter(context);

}

