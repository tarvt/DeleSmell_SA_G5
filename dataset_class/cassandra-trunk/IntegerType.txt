Location: IntegerType.java

Content: 

public static <VL,VR>int compareIntegers(VL lhs,ValueAccessor<VL> accessorL,VR rhs,ValueAccessor<VR> accessorR){

  int lhsLen=accessorL.size(lhs);

  int rhsLen=accessorR.size(rhs);

  if (lhsLen == 0)   return rhsLen == 0 ? 0 : -1;

  if (rhsLen == 0)   return 1;

  int lhsMsbIdx=findMostSignificantByte(lhs,accessorL);

  int rhsMsbIdx=findMostSignificantByte(rhs,accessorR);

  int lhsLenDiff=lhsLen - lhsMsbIdx;

  int rhsLenDiff=rhsLen - rhsMsbIdx;

  byte lhsMsb=accessorL.getByte(lhs,lhsMsbIdx);

  byte rhsMsb=accessorR.getByte(rhs,rhsMsbIdx);

  if (lhsLenDiff != rhsLenDiff) {

    if (lhsMsb < 0)     return rhsMsb < 0 ? rhsLenDiff - lhsLenDiff : -1;

    if (rhsMsb < 0)     return 1;

    return lhsLenDiff - rhsLenDiff;

  }

  if (lhsMsb != rhsMsb)   return lhsMsb - rhsMsb;

  lhsMsbIdx++;

  rhsMsbIdx++;

  while (lhsMsbIdx < lhsLen) {

    lhsMsb=accessorL.getByte(lhs,lhsMsbIdx++);

    rhsMsb=accessorR.getByte(rhs,rhsMsbIdx++);

    if (lhsMsb != rhsMsb)     return (lhsMsb & 0xFF) - (rhsMsb & 0xFF);

  }

  return 0;

}

Location: IntegerType.java

Content: 

private static <V>int findMostSignificantByte(V value,ValueAccessor<V> accessor){

  int len=accessor.size(value) - 1;

  int i=0;

  for (; i < len; i++) {

    byte b0=accessor.getByte(value,i);

    if (b0 != 0 && b0 != -1)     break;

    byte b1=accessor.getByte(value,i + 1);

    if (b0 == 0 && b1 != 0) {

      if (b1 > 0)       i++;

      break;

    }

    if (b0 == -1 && b1 != -1) {

      if (b1 < 0)       i++;

      break;

    }

  }

  return i;

}

Location: IntegerType.java

Content: 

IntegerType(){

  super(ComparisonType.CUSTOM);

}

Location: IntegerType.java

Content: 

@Override protected BigDecimal toBigDecimal(ByteBuffer value){

  return new BigDecimal(compose(value));

}

Location: IntegerType.java

Content: 

@Override protected BigInteger toBigInteger(ByteBuffer value){

  return compose(value);

}

