Location: MessagingServiceMBeanImpl.java

Content: 

@Override public Map<String,Double> getBackPressurePerHost(){

  throw new UnsupportedOperationException("This feature has been removed");

}

Location: MessagingServiceMBeanImpl.java

Content: 

@Override public Map<String,Integer> getDroppedMessages(){

  return metrics.getDroppedMessages();

}

Location: MessagingServiceMBeanImpl.java

Content: 

@Override public Map<String,Long> getGossipMessageCompletedTasks(){

  Map<String,Long> completedTasks=new HashMap<>(channelManagers.size());

  for (  Map.Entry<InetAddressAndPort,OutboundConnections> entry : channelManagers.entrySet())   completedTasks.put(entry.getKey().toString(false),entry.getValue().urgent.sentCount());

  return completedTasks;

}

Location: MessagingServiceMBeanImpl.java

Content: 

@Override public Map<String,Long> getGossipMessageCompletedTasksWithPort(){

  Map<String,Long> completedTasks=new HashMap<>(channelManagers.size());

  for (  Map.Entry<InetAddressAndPort,OutboundConnections> entry : channelManagers.entrySet())   completedTasks.put(entry.getKey().toString(),entry.getValue().urgent.sentCount());

  return completedTasks;

}

Location: MessagingServiceMBeanImpl.java

Content: 

@Override public Map<String,Long> getGossipMessageDroppedTasks(){

  Map<String,Long> droppedTasks=new HashMap<>(channelManagers.size());

  for (  Map.Entry<InetAddressAndPort,OutboundConnections> entry : channelManagers.entrySet())   droppedTasks.put(entry.getKey().toString(false),entry.getValue().urgent.dropped());

  return droppedTasks;

}

Location: MessagingServiceMBeanImpl.java

Content: 

@Override public Map<String,Long> getGossipMessageDroppedTasksWithPort(){

  Map<String,Long> droppedTasks=new HashMap<>(channelManagers.size());

  for (  Map.Entry<InetAddressAndPort,OutboundConnections> entry : channelManagers.entrySet())   droppedTasks.put(entry.getKey().toString(),entry.getValue().urgent.dropped());

  return droppedTasks;

}

Location: MessagingServiceMBeanImpl.java

Content: 

@Override public Map<String,Integer> getGossipMessagePendingTasks(){

  Map<String,Integer> pendingTasks=new HashMap<>(channelManagers.size());

  for (  Map.Entry<InetAddressAndPort,OutboundConnections> entry : channelManagers.entrySet())   pendingTasks.put(entry.getKey().toString(false),entry.getValue().urgent.pendingCount());

  return pendingTasks;

}

Location: MessagingServiceMBeanImpl.java

Content: 

@Override public Map<String,Integer> getGossipMessagePendingTasksWithPort(){

  Map<String,Integer> pendingTasks=new HashMap<>(channelManagers.size());

  for (  Map.Entry<InetAddressAndPort,OutboundConnections> entry : channelManagers.entrySet())   pendingTasks.put(entry.getKey().toString(),entry.getValue().urgent.pendingCount());

  return pendingTasks;

}

Location: MessagingServiceMBeanImpl.java

Content: 

@Override public Map<String,Long> getLargeMessageCompletedTasks(){

  Map<String,Long> completedTasks=new HashMap<>(channelManagers.size());

  for (  Map.Entry<InetAddressAndPort,OutboundConnections> entry : channelManagers.entrySet())   completedTasks.put(entry.getKey().toString(false),entry.getValue().large.sentCount());

  return completedTasks;

}

Location: MessagingServiceMBeanImpl.java

Content: 

@Override public Map<String,Long> getLargeMessageCompletedTasksWithPort(){

  Map<String,Long> completedTasks=new HashMap<>(channelManagers.size());

  for (  Map.Entry<InetAddressAndPort,OutboundConnections> entry : channelManagers.entrySet())   completedTasks.put(entry.getKey().toString(),entry.getValue().large.sentCount());

  return completedTasks;

}

Location: MessagingServiceMBeanImpl.java

Content: 

@Override public Map<String,Long> getLargeMessageDroppedTasks(){

  Map<String,Long> droppedTasks=new HashMap<>(channelManagers.size());

  for (  Map.Entry<InetAddressAndPort,OutboundConnections> entry : channelManagers.entrySet())   droppedTasks.put(entry.getKey().toString(false),entry.getValue().large.dropped());

  return droppedTasks;

}

Location: MessagingServiceMBeanImpl.java

Content: 

@Override public Map<String,Long> getLargeMessageDroppedTasksWithPort(){

  Map<String,Long> droppedTasks=new HashMap<>(channelManagers.size());

  for (  Map.Entry<InetAddressAndPort,OutboundConnections> entry : channelManagers.entrySet())   droppedTasks.put(entry.getKey().toString(),entry.getValue().large.dropped());

  return droppedTasks;

}

Location: MessagingServiceMBeanImpl.java

Content: 

@Override public Map<String,Integer> getLargeMessagePendingTasks(){

  Map<String,Integer> pendingTasks=new HashMap<>(channelManagers.size());

  for (  Map.Entry<InetAddressAndPort,OutboundConnections> entry : channelManagers.entrySet())   pendingTasks.put(entry.getKey().toString(false),entry.getValue().large.pendingCount());

  return pendingTasks;

}

Location: MessagingServiceMBeanImpl.java

Content: 

@Override public Map<String,Integer> getLargeMessagePendingTasksWithPort(){

  Map<String,Integer> pendingTasks=new HashMap<>(channelManagers.size());

  for (  Map.Entry<InetAddressAndPort,OutboundConnections> entry : channelManagers.entrySet())   pendingTasks.put(entry.getKey().toString(),entry.getValue().large.pendingCount());

  return pendingTasks;

}

Location: MessagingServiceMBeanImpl.java

Content: 

@Override public Map<String,Long> getSmallMessageCompletedTasks(){

  Map<String,Long> completedTasks=new HashMap<>(channelManagers.size());

  for (  Map.Entry<InetAddressAndPort,OutboundConnections> entry : channelManagers.entrySet())   completedTasks.put(entry.getKey().toString(false),entry.getValue().small.sentCount());

  return completedTasks;

}

Location: MessagingServiceMBeanImpl.java

Content: 

@Override public Map<String,Long> getSmallMessageCompletedTasksWithPort(){

  Map<String,Long> completedTasks=new HashMap<>(channelManagers.size());

  for (  Map.Entry<InetAddressAndPort,OutboundConnections> entry : channelManagers.entrySet())   completedTasks.put(entry.getKey().toString(),entry.getValue().small.sentCount());

  return completedTasks;

}

Location: MessagingServiceMBeanImpl.java

Content: 

@Override public Map<String,Long> getSmallMessageDroppedTasks(){

  Map<String,Long> droppedTasks=new HashMap<>(channelManagers.size());

  for (  Map.Entry<InetAddressAndPort,OutboundConnections> entry : channelManagers.entrySet())   droppedTasks.put(entry.getKey().toString(false),entry.getValue().small.dropped());

  return droppedTasks;

}

Location: MessagingServiceMBeanImpl.java

Content: 

@Override public Map<String,Long> getSmallMessageDroppedTasksWithPort(){

  Map<String,Long> droppedTasks=new HashMap<>(channelManagers.size());

  for (  Map.Entry<InetAddressAndPort,OutboundConnections> entry : channelManagers.entrySet())   droppedTasks.put(entry.getKey().toString(),entry.getValue().small.dropped());

  return droppedTasks;

}

Location: MessagingServiceMBeanImpl.java

Content: 

@Override public Map<String,Integer> getSmallMessagePendingTasks(){

  Map<String,Integer> pendingTasks=new HashMap<>(channelManagers.size());

  for (  Map.Entry<InetAddressAndPort,OutboundConnections> entry : channelManagers.entrySet())   pendingTasks.put(entry.getKey().toString(false),entry.getValue().small.pendingCount());

  return pendingTasks;

}

Location: MessagingServiceMBeanImpl.java

Content: 

@Override public Map<String,Integer> getSmallMessagePendingTasksWithPort(){

  Map<String,Integer> pendingTasks=new HashMap<>(channelManagers.size());

  for (  Map.Entry<InetAddressAndPort,OutboundConnections> entry : channelManagers.entrySet())   pendingTasks.put(entry.getKey().toString(),entry.getValue().small.pendingCount());

  return pendingTasks;

}

Location: MessagingServiceMBeanImpl.java

Content: 

@Override public Map<String,Long> getTimeoutsPerHost(){

  Map<String,Long> result=new HashMap<>(channelManagers.size());

  for (  Map.Entry<InetAddressAndPort,OutboundConnections> entry : channelManagers.entrySet()) {

    String ip=entry.getKey().toString(false);

    long recent=entry.getValue().expiredCallbacks();

    result.put(ip,recent);

  }

  return result;

}

Location: MessagingServiceMBeanImpl.java

Content: 

@Override public Map<String,Long> getTimeoutsPerHostWithPort(){

  Map<String,Long> result=new HashMap<>(channelManagers.size());

  for (  Map.Entry<InetAddressAndPort,OutboundConnections> entry : channelManagers.entrySet()) {

    String ip=entry.getKey().toString();

    long recent=entry.getValue().expiredCallbacks();

    result.put(ip,recent);

  }

  return result;

}

Location: MessagingServiceMBeanImpl.java

Content: 

@Override public long getTotalTimeouts(){

  return InternodeOutboundMetrics.totalExpiredCallbacks.getCount();

}

Location: MessagingServiceMBeanImpl.java

Content: 

@Override public int getVersion(String address) throws UnknownHostException {

  return versions.get(address);

}

Location: MessagingServiceMBeanImpl.java

Content: 

@Override public boolean isBackPressureEnabled(){

  return false;

}

Location: MessagingServiceMBeanImpl.java

Content: 

MessagingServiceMBeanImpl(boolean testOnly){

  if (!testOnly) {

    MBeanWrapper.instance.registerMBean(this,MBEAN_NAME);

    metrics.scheduleLogging();

  }

}

Location: MessagingServiceMBeanImpl.java

Content: 

@Override public void reloadSslCertificates() throws IOException {

  final EncryptionOptions.ServerEncryptionOptions serverOpts=DatabaseDescriptor.getInternodeMessagingEncyptionOptions();

  final EncryptionOptions clientOpts=DatabaseDescriptor.getNativeProtocolEncryptionOptions();

  SSLFactory.validateSslCerts(serverOpts,clientOpts);

  SSLFactory.checkCertFilesForHotReloading(serverOpts,clientOpts);

}

Location: MessagingServiceMBeanImpl.java

Content: 

@Override public void setBackPressureEnabled(boolean enabled){

  throw new UnsupportedOperationException("This feature has been removed");

}

