Location: Operation.java

Content: 

@VisibleForTesting protected static ListMultimap<ColumnMetadata,Expression> analyzeGroup(QueryController controller,OperationType op,List<RowFilter.Expression> expressions){

  ListMultimap<ColumnMetadata,Expression> analyzed=ArrayListMultimap.create();

  Collections.sort(expressions,(a,b) -> {

    int cmp=a.column().compareTo(b.column());

    return cmp == 0 ? -Integer.compare(getPriority(a.operator()),getPriority(b.operator())) : cmp;

  }

);

  for (  final RowFilter.Expression e : expressions) {

    ColumnIndex columnIndex=controller.getIndex(e);

    List<Expression> perColumn=analyzed.get(e.column());

    if (columnIndex == null)     columnIndex=new ColumnIndex(controller.getKeyValidator(),e.column(),null);

    AbstractAnalyzer analyzer=columnIndex.getAnalyzer();

    analyzer.reset(e.getIndexValue().duplicate());

    boolean isMultiExpression=false;

switch (e.operator()) {

case EQ:

      isMultiExpression=false;

    break;

case LIKE_PREFIX:

case LIKE_SUFFIX:

case LIKE_CONTAINS:

case LIKE_MATCHES:

  isMultiExpression=true;

break;

case NEQ:

isMultiExpression=(perColumn.size() == 0 || perColumn.size() > 1 || (perColumn.size() == 1 && perColumn.get(0).getOp() == Op.NOT_EQ));

break;

}

if (isMultiExpression) {

while (analyzer.hasNext()) {

final ByteBuffer token=analyzer.next();

perColumn.add(new Expression(controller,columnIndex).add(e.operator(),token));

}

}

 else {

Expression range;

if (perColumn.size() == 0 || op != OperationType.AND) perColumn.add((range=new Expression(controller,columnIndex)));

 else range=Iterables.getLast(perColumn);

while (analyzer.hasNext()) range.add(e.operator(),analyzer.next());

}

}

return analyzed;

}

Location: Operation.java

Content: 

/** 

 * Execute the operation.

 * @param partitionKey partition key for the update.

 * @param params parameters of the update.

 */

public abstract void execute(DecoratedKey partitionKey,UpdateParameters params) throws InvalidRequestException ;

Location: Operation.java

Content: 

private static int getPriority(Operator op){

switch (op) {

case EQ:

    return 5;

case LIKE_PREFIX:

case LIKE_SUFFIX:

case LIKE_CONTAINS:

case LIKE_MATCHES:

  return 4;

case GTE:

case GT:

return 3;

case LTE:

case LT:

return 2;

case NEQ:

return 1;

default :

return 0;

}

}

Location: Operation.java

Content: 

/** 

 * Check every expression in the analyzed list to figure out if the columns in the give row match all of the based on the operation set to the current operation node. The algorithm is as follows: for every given expression from analyzed list get corresponding column from the Row: - apply  {@link Expression#isSatisfiedBy(ByteBuffer)}method to figure out if it's satisfied; - apply logical operation between boolean accumulator and current boolean result; - if result == false and node's operation is AND return right away; After all of the expressions have been evaluated return resulting accumulator variable. Example: Operation = (op: AND, columns: [first_name = p, 5 < age < 7, last_name: y]) Row = (first_name: pavel, last_name: y, age: 6, timestamp: 15) #1 get "first_name" = p (expressions) - row-get "first_name"                      => "pavel" - compare "pavel" against "p"               => true (current) - set accumulator current                   => true (because this is expression #1) #2 get "last_name" = y (expressions) - row-get "last_name"                       => "y" - compare "y" against "y"                   => true (current) - set accumulator to accumulator & current  => true #3 get 5 < "age" < 7 (expressions) - row-get "age"                             => "6" - compare 5 < 6 < 7                         => true (current) - set accumulator to accumulator & current  => true #4 return accumulator => true (row satisfied all of the conditions)

 * @param currentCluster The row cluster to check.

 * @param staticRow The static row associated with current cluster.

 * @param allowMissingColumns allow columns value to be null.

 * @return true if give Row satisfied all of the analyzed expressions,false otherwise.

 */

private boolean localSatisfiedBy(Unfiltered currentCluster,Row staticRow,boolean allowMissingColumns){

  if (currentCluster == null || !currentCluster.isRow())   return false;

  final int now=FBUtilities.nowInSeconds();

  boolean result=false;

  int idx=0;

  for (  ColumnMetadata column : expressions.keySet()) {

    if (column.kind == Kind.PARTITION_KEY)     continue;

    ByteBuffer value=ColumnIndex.getValueOf(column,column.kind == Kind.STATIC ? staticRow : (Row)currentCluster,now);

    boolean isMissingColumn=value == null;

    if (!allowMissingColumns && isMissingColumn)     throw new IllegalStateException("All indexed columns should be included into the column slice, missing: " + column);

    boolean isMatch=false;

    List<Expression> filters=expressions.get(column);

    for (int i=filters.size() - 1; i >= 0; i--) {

      Expression expression=filters.get(i);

      isMatch=!isMissingColumn && expression.isSatisfiedBy(value);

      if (expression.getOp() == Op.NOT_EQ) {

        isMatch=!isMatch;

        if (!isMatch)         break;

      }

 else       if (isMatch || isMissingColumn)       break;

    }

    if (idx++ == 0) {

      result=isMatch;

      continue;

    }

    result=op.apply(result,isMatch);

    if (op == OperationType.AND && !result)     return false;

  }

  return idx == 0 || result;

}

Location: Operation.java

Content: 

protected Operation(ColumnMetadata column,Term t){

  assert column != null;

  this.column=column;

  this.t=t;

}

Location: Operation.java

Content: 

private Operation(OperationType operation,QueryController controller,ListMultimap<ColumnMetadata,Expression> expressions,RangeIterator<Long,Token> range,Operation left,Operation right){

  super(range);

  this.op=operation;

  this.controller=controller;

  this.expressions=expressions;

  this.range=range;

  this.left=left;

  this.right=right;

}

Location: Operation.java

Content: 

protected void performSkipTo(Long nextToken){

  if (range != null)   range.skipTo(nextToken);

}

Location: Operation.java

Content: 

/** 

 * Recursive "satisfies" checks based on operation and data from the lower level members using depth-first search and bubbling the results back to the top level caller. Most of the work here is done by  {@link #localSatisfiedBy(Unfiltered,Row,boolean)}see it's comment for details, if there are no local expressions assigned to Operation it will call satisfiedBy(Row) on it's children. Query: first_name = X AND (last_name = Y OR address = XYZ AND street = IL AND city = C) OR (state = 'CA' AND country = 'US') Row: key1: (first_name: X, last_name: Z, address: XYZ, street: IL, city: C, state: NY, country:US) #1                       OR /    \ #2       (first_name) AND   AND (state, country) \ #3            (last_name) OR \ #4                          AND (address, street, city) Evaluation of the key1 is top-down depth-first search: --- going down --- Level #1 is evaluated, OR expression has to pull results from it's children which are at level #2 and OR them together, Level #2 AND (state, country) could be be evaluated right away, AND (first_name) refers to it's "right" child from level #3 Level #3 OR (last_name) requests results from level #4 Level #4 AND (address, street, city) does logical AND between it's 3 fields, returns result back to level #3. --- bubbling up --- Level #3 computes OR between AND (address, street, city) result and it's "last_name" expression Level #2 computes AND between "first_name" and result of level #3, AND (state, country) which is already computed Level #1 does OR between results of AND (first_name) and AND (state, country) and returns final result.

 * @param currentCluster The row cluster to check.

 * @param staticRow The static row associated with current cluster.

 * @param allowMissingColumns allow columns value to be null.

 * @return true if give Row satisfied all of the expressions in the tree,false otherwise.

 */

public boolean satisfiedBy(Unfiltered currentCluster,Row staticRow,boolean allowMissingColumns){

  boolean sideL, sideR;

  if (expressions == null || expressions.isEmpty()) {

    sideL=left != null && left.satisfiedBy(currentCluster,staticRow,allowMissingColumns);

    sideR=right != null && right.satisfiedBy(currentCluster,staticRow,allowMissingColumns);

    if (left == null)     return sideR;

  }

 else {

    sideL=localSatisfiedBy(currentCluster,staticRow,allowMissingColumns);

    if (right == null)     return sideL;

    sideR=right.satisfiedBy(currentCluster,staticRow,allowMissingColumns);

  }

  return op.apply(sideL,sideR);

}

