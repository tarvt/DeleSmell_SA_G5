Location: ListRolesStatement.java

Content: 

protected ResultMessage formatResults(List<RoleResource> sortedRoles){

  ResultSet.ResultMetadata resultMetadata=new ResultSet.ResultMetadata(metadata);

  ResultSet result=new ResultSet(resultMetadata);

  IRoleManager roleManager=DatabaseDescriptor.getRoleManager();

  INetworkAuthorizer networkAuthorizer=DatabaseDescriptor.getNetworkAuthorizer();

  for (  RoleResource role : sortedRoles) {

    result.addColumnValue(UTF8Type.instance.decompose(role.getRoleName()));

    result.addColumnValue(BooleanType.instance.decompose(roleManager.isSuper(role)));

    result.addColumnValue(BooleanType.instance.decompose(roleManager.canLogin(role)));

    result.addColumnValue(optionsType.decompose(roleManager.getCustomOptions(role)));

    result.addColumnValue(UTF8Type.instance.decompose(networkAuthorizer.authorize(role).toString()));

  }

  return new ResultMessage.Rows(result);

}

Location: ListRolesStatement.java

Content: 

public ListRolesStatement(){

  this(new RoleName(),false);

}

Location: ListRolesStatement.java

Content: 

public ListRolesStatement(RoleName grantee,boolean recursive){

  this.grantee=grantee.hasName() ? RoleResource.role(grantee.getName()) : null;

  this.recursive=recursive;

}

Location: ListRolesStatement.java

Content: 

private ResultMessage resultMessage(Set<RoleResource> roles){

  if (roles.isEmpty())   return new ResultMessage.Void();

  List<RoleResource> sorted=Lists.newArrayList(roles);

  Collections.sort(sorted);

  return formatResults(sorted);

}

