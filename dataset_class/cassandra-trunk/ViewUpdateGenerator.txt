Location: ViewUpdateGenerator.java

Content: 

/** 

 * Adds to this generator the updates to be made to the view given a base table row before and after an update.

 * @param existingBaseRow the base table row as it is before an update.

 * @param mergedBaseRow the base table row after the update is applied (note thatthis is not just the new update, but rather the resulting row).

 */

public void addBaseTableUpdate(Row existingBaseRow,Row mergedBaseRow){

switch (updateAction(existingBaseRow,mergedBaseRow)) {

case NONE:

    return;

case NEW_ENTRY:

  createEntry(mergedBaseRow);

return;

case DELETE_OLD:

deleteOldEntry(existingBaseRow,mergedBaseRow);

return;

case UPDATE_EXISTING:

updateEntry(existingBaseRow,mergedBaseRow);

return;

case SWITCH_ENTRY:

createEntry(mergedBaseRow);

deleteOldEntry(existingBaseRow,mergedBaseRow);

return;

}

}

Location: ViewUpdateGenerator.java

Content: 

private void addCell(ColumnMetadata viewColumn,Cell<?> baseTableCell){

  assert !viewColumn.isPrimaryKeyColumn();

  currentViewEntryBuilder.addCell(baseTableCell.withUpdatedColumn(viewColumn));

}

Location: ViewUpdateGenerator.java

Content: 

private void addColumnData(ColumnMetadata viewColumn,ColumnData baseTableData){

  assert viewColumn.isComplex() == baseTableData.column().isComplex();

  if (!viewColumn.isComplex()) {

    addCell(viewColumn,(Cell<?>)baseTableData);

    return;

  }

  ComplexColumnData complexData=(ComplexColumnData)baseTableData;

  currentViewEntryBuilder.addComplexDeletion(viewColumn,complexData.complexDeletion());

  for (  Cell<?> cell : complexData)   addCell(viewColumn,cell);

}

Location: ViewUpdateGenerator.java

Content: 

private void addDifferentCells(Row existingBaseRow,Row mergedBaseRow){

  PeekingIterator<ColumnData> existingIter=Iterators.peekingIterator(existingBaseRow.iterator());

  for (  ColumnData mergedData : mergedBaseRow) {

    ColumnMetadata baseColumn=mergedData.column();

    ColumnMetadata viewColumn=view.getViewColumn(baseColumn);

    if (viewColumn == null || viewColumn.isPrimaryKeyColumn())     continue;

    ColumnData existingData=null;

    while (existingIter.hasNext()) {

      int cmp=baseColumn.compareTo(existingIter.peek().column());

      if (cmp < 0)       break;

      ColumnData next=existingIter.next();

      if (cmp == 0) {

        existingData=next;

        break;

      }

    }

    if (existingData == null) {

      addColumnData(viewColumn,mergedData);

      continue;

    }

    if (mergedData == existingData)     continue;

    if (baseColumn.isComplex()) {

      ComplexColumnData mergedComplexData=(ComplexColumnData)mergedData;

      ComplexColumnData existingComplexData=(ComplexColumnData)existingData;

      if (mergedComplexData.complexDeletion().supersedes(existingComplexData.complexDeletion()))       currentViewEntryBuilder.addComplexDeletion(viewColumn,mergedComplexData.complexDeletion());

      PeekingIterator<Cell<?>> existingCells=Iterators.peekingIterator(existingComplexData.iterator());

      for (      Cell<?> mergedCell : mergedComplexData) {

        Cell<?> existingCell=null;

        while (existingCells.hasNext()) {

          int cmp=baseColumn.cellPathComparator().compare(mergedCell.path(),existingCells.peek().path());

          if (cmp > 0)           break;

          Cell<?> next=existingCells.next();

          if (cmp == 0) {

            existingCell=next;

            break;

          }

        }

        if (mergedCell != existingCell)         addCell(viewColumn,mergedCell);

      }

    }

 else {

      addCell(viewColumn,(Cell<?>)mergedData);

    }

  }

}

Location: ViewUpdateGenerator.java

Content: 

private LivenessInfo computeLivenessInfoForEntry(Row baseRow){

  assert view.baseNonPKColumnsInViewPK.size() <= 1;

  LivenessInfo baseLiveness=baseRow.primaryKeyLivenessInfo();

  if (view.baseNonPKColumnsInViewPK.isEmpty()) {

    if (view.getDefinition().includeAllColumns)     return baseLiveness;

    long timestamp=baseLiveness.timestamp();

    boolean hasNonExpiringLiveCell=false;

    Cell<?> biggestExpirationCell=null;

    for (    Cell<?> cell : baseRow.cells()) {

      if (view.getViewColumn(cell.column()) != null)       continue;

      if (!isLive(cell))       continue;

      timestamp=Math.max(timestamp,cell.maxTimestamp());

      if (!cell.isExpiring())       hasNonExpiringLiveCell=true;

 else {

        if (biggestExpirationCell == null)         biggestExpirationCell=cell;

 else         if (cell.localDeletionTime() > biggestExpirationCell.localDeletionTime())         biggestExpirationCell=cell;

      }

    }

    if (baseLiveness.isLive(nowInSec) && !baseLiveness.isExpiring())     return LivenessInfo.create(timestamp,nowInSec);

    if (hasNonExpiringLiveCell)     return LivenessInfo.create(timestamp,nowInSec);

    if (biggestExpirationCell == null)     return baseLiveness;

    if (biggestExpirationCell.localDeletionTime() > baseLiveness.localExpirationTime() || !baseLiveness.isLive(nowInSec))     return LivenessInfo.withExpirationTime(timestamp,biggestExpirationCell.ttl(),biggestExpirationCell.localDeletionTime());

    return baseLiveness;

  }

  Cell<?> cell=baseRow.getCell(view.baseNonPKColumnsInViewPK.get(0));

  assert isLive(cell) : "We shouldn't have got there if the base row had no associated entry";

  return LivenessInfo.withExpirationTime(cell.timestamp(),cell.ttl(),cell.localDeletionTime());

}

Location: ViewUpdateGenerator.java

Content: 

private long computeTimestampForEntryDeletion(Row existingBaseRow,Row mergedBaseRow){

  DeletionTime deletion=mergedBaseRow.deletion().time();

  if (view.hasSamePrimaryKeyColumnsAsBaseTable()) {

    long timestamp=Math.max(deletion.markedForDeleteAt(),existingBaseRow.primaryKeyLivenessInfo().timestamp());

    if (view.getDefinition().includeAllColumns)     return timestamp;

    for (    Cell<?> cell : existingBaseRow.cells()) {

      if (view.getViewColumn(cell.column()) != null)       continue;

      timestamp=Math.max(timestamp,cell.maxTimestamp());

    }

    return timestamp;

  }

  Cell<?> before=existingBaseRow.getCell(view.baseNonPKColumnsInViewPK.get(0));

  assert isLive(before) : "We shouldn't have got there if the base row had no associated entry";

  return deletion.deletes(before) ? deletion.markedForDeleteAt() : before.timestamp();

}

Location: ViewUpdateGenerator.java

Content: 

/** 

 * Creates a view entry corresponding to the provided base row. <p> This method checks that the base row does match the view filter before applying it.

 */

private void createEntry(Row baseRow){

  if (!matchesViewFilter(baseRow))   return;

  startNewUpdate(baseRow);

  currentViewEntryBuilder.addPrimaryKeyLivenessInfo(computeLivenessInfoForEntry(baseRow));

  currentViewEntryBuilder.addRowDeletion(baseRow.deletion());

  for (  ColumnData data : baseRow) {

    ColumnMetadata viewColumn=view.getViewColumn(data.column());

    if (viewColumn == null || viewColumn.isPrimaryKeyColumn())     continue;

    addColumnData(viewColumn,data);

  }

  submitUpdate();

}

Location: ViewUpdateGenerator.java

Content: 

private void deleteOldEntryInternal(Row existingBaseRow,Row mergedBaseRow){

  startNewUpdate(existingBaseRow);

  long timestamp=computeTimestampForEntryDeletion(existingBaseRow,mergedBaseRow);

  long rowDeletion=mergedBaseRow.deletion().time().markedForDeleteAt();

  assert timestamp >= rowDeletion;

  if (timestamp > rowDeletion) {

    LivenessInfo info=LivenessInfo.withExpirationTime(timestamp,LivenessInfo.EXPIRED_LIVENESS_TTL,nowInSec);

    currentViewEntryBuilder.addPrimaryKeyLivenessInfo(info);

  }

  currentViewEntryBuilder.addRowDeletion(mergedBaseRow.deletion());

  addDifferentCells(existingBaseRow,mergedBaseRow);

  submitUpdate();

}

Location: ViewUpdateGenerator.java

Content: 

/** 

 * Deletes the view entry corresponding to the provided base row. <p> This method checks that the base row does match the view filter before bothering.

 */

private void deleteOldEntry(Row existingBaseRow,Row mergedBaseRow){

  if (!matchesViewFilter(existingBaseRow))   return;

  deleteOldEntryInternal(existingBaseRow,mergedBaseRow);

}

Location: ViewUpdateGenerator.java

Content: 

private static ByteBuffer[] extractKeyComponents(DecoratedKey partitionKey,AbstractType<?> type){

  return type instanceof CompositeType ? ((CompositeType)type).split(partitionKey.getKey()) : new ByteBuffer[]{partitionKey.getKey()};

}

Location: ViewUpdateGenerator.java

Content: 

/** 

 * Returns the updates that needs to be done to the view given the base table updates passed to  {@link #addBaseTableUpdate}.

 * @return the updates to do to the view.

 */

public Collection<PartitionUpdate> generateViewUpdates(){

  return updates.values().stream().map(PartitionUpdate.Builder::build).collect(Collectors.toList());

}

Location: ViewUpdateGenerator.java

Content: 

private ByteBuffer getValueForPK(ColumnMetadata column,Row row){

switch (column.kind) {

case PARTITION_KEY:

    return basePartitionKey[column.position()];

case CLUSTERING:

  return row.clustering().bufferAt(column.position());

default :

return row.getCell(column).buffer();

}

}

Location: ViewUpdateGenerator.java

Content: 

private boolean isLive(Cell<?> cell){

  return cell != null && cell.isLive(nowInSec);

}

Location: ViewUpdateGenerator.java

Content: 

private DecoratedKey makeCurrentPartitionKey(){

  ByteBuffer rawKey=viewMetadata.partitionKeyColumns().size() == 1 ? currentViewEntryPartitionKey[0] : CompositeType.build(ByteBufferAccessor.instance,currentViewEntryPartitionKey);

  return viewMetadata.partitioner.decorateKey(rawKey);

}

Location: ViewUpdateGenerator.java

Content: 

private boolean matchesViewFilter(Row baseRow){

  return view.matchesViewFilter(baseDecoratedKey,baseRow,nowInSec);

}

Location: ViewUpdateGenerator.java

Content: 

/** 

 * Computes the partition key and clustering for a new view entry, and setup the internal row builder for the new row. This assumes that there is corresponding entry, i.e. no values for the partition key and clustering are null (since we have eliminated that case through updateAction).

 */

private void startNewUpdate(Row baseRow){

  ByteBuffer[] clusteringValues=new ByteBuffer[viewMetadata.clusteringColumns().size()];

  for (  ColumnMetadata viewColumn : viewMetadata.primaryKeyColumns()) {

    ColumnMetadata baseColumn=view.getBaseColumn(viewColumn);

    ByteBuffer value=getValueForPK(baseColumn,baseRow);

    if (viewColumn.isPartitionKey())     currentViewEntryPartitionKey[viewColumn.position()]=value;

 else     clusteringValues[viewColumn.position()]=value;

  }

  currentViewEntryBuilder.newRow(Clustering.make(clusteringValues));

}

Location: ViewUpdateGenerator.java

Content: 

/** 

 * Finish building the currently updated view entry and add it to the other built updates.

 */

private void submitUpdate(){

  Row row=currentViewEntryBuilder.build();

  if (row.isEmpty())   return;

  DecoratedKey partitionKey=makeCurrentPartitionKey();

  PartitionUpdate.Builder update=updates.computeIfAbsent(partitionKey,k -> new PartitionUpdate.Builder(viewMetadata,partitionKey,viewMetadata.regularAndStaticColumns(),4));

  update.add(row);

}

Location: ViewUpdateGenerator.java

Content: 

/** 

 * Compute which type of action needs to be performed to the view for a base table row before and after an update.

 */

private UpdateAction updateAction(Row existingBaseRow,Row mergedBaseRow){

  assert !mergedBaseRow.isEmpty();

  if (baseMetadata.isCompactTable()) {

    Clustering clustering=mergedBaseRow.clustering();

    for (int i=0; i < clustering.size(); i++) {

      if (clustering.get(i) == null)       return UpdateAction.NONE;

    }

  }

  assert view.baseNonPKColumnsInViewPK.size() <= 1 : "We currently only support one base non-PK column in the view PK";

  if (view.baseNonPKColumnsInViewPK.isEmpty()) {

    boolean existingHasLiveData=existingBaseRow != null && existingBaseRow.hasLiveData(nowInSec,baseEnforceStrictLiveness);

    boolean mergedHasLiveData=mergedBaseRow.hasLiveData(nowInSec,baseEnforceStrictLiveness);

    return existingHasLiveData ? (mergedHasLiveData ? UpdateAction.UPDATE_EXISTING : UpdateAction.DELETE_OLD) : (mergedHasLiveData ? UpdateAction.NEW_ENTRY : UpdateAction.NONE);

  }

  ColumnMetadata baseColumn=view.baseNonPKColumnsInViewPK.get(0);

  assert !baseColumn.isComplex() : "A complex column couldn't be part of the view PK";

  Cell<?> before=existingBaseRow == null ? null : existingBaseRow.getCell(baseColumn);

  Cell<?> after=mergedBaseRow.getCell(baseColumn);

  if (before == after)   return isLive(before) ? UpdateAction.UPDATE_EXISTING : UpdateAction.NONE;

  if (!isLive(before))   return isLive(after) ? UpdateAction.NEW_ENTRY : UpdateAction.NONE;

  if (!isLive(after)) {

    return UpdateAction.DELETE_OLD;

  }

  return baseColumn.cellValueType().compare(before.buffer(),after.buffer()) == 0 ? UpdateAction.UPDATE_EXISTING : UpdateAction.SWITCH_ENTRY;

}

Location: ViewUpdateGenerator.java

Content: 

/** 

 * Creates the updates to apply to the existing view entry given the base table row before and after the update, assuming that the update hasn't changed to which view entry the row correspond (that is, we know the columns composing the view PK haven't changed). <p> This method checks that the base row (before and after) does match the view filter before applying anything.

 */

private void updateEntry(Row existingBaseRow,Row mergedBaseRow){

  if (!matchesViewFilter(existingBaseRow)) {

    createEntry(mergedBaseRow);

    return;

  }

  if (!matchesViewFilter(mergedBaseRow)) {

    deleteOldEntryInternal(existingBaseRow,mergedBaseRow);

    return;

  }

  startNewUpdate(mergedBaseRow);

  currentViewEntryBuilder.addPrimaryKeyLivenessInfo(computeLivenessInfoForEntry(mergedBaseRow));

  currentViewEntryBuilder.addRowDeletion(mergedBaseRow.deletion());

  addDifferentCells(existingBaseRow,mergedBaseRow);

  submitUpdate();

}

Location: ViewUpdateGenerator.java

Content: 

/** 

 * Creates a new  {@code ViewUpdateBuilder}.

 * @param view the view for which this will be building updates for.

 * @param basePartitionKey the partition key for the base table partition for whichwe'll handle updates for.

 * @param nowInSec the current time in seconds. Used to decide if data are live or notand as base reference for new deletions.

 */

public ViewUpdateGenerator(View view,DecoratedKey basePartitionKey,int nowInSec){

  this.view=view;

  this.nowInSec=nowInSec;

  this.baseMetadata=view.getDefinition().baseTableMetadata();

  this.baseEnforceStrictLiveness=baseMetadata.enforceStrictLiveness();

  this.baseDecoratedKey=basePartitionKey;

  this.basePartitionKey=extractKeyComponents(basePartitionKey,baseMetadata.partitionKeyType);

  this.viewMetadata=Schema.instance.getTableMetadata(view.getDefinition().metadata.id);

  this.currentViewEntryPartitionKey=new ByteBuffer[viewMetadata.partitionKeyColumns().size()];

  this.currentViewEntryBuilder=BTreeRow.sortedBuilder();

}

