Location: RepairedDataInfo.java

Content: 

public UnfilteredPartitionIterator extend(final UnfilteredPartitionIterator partitions,final DataLimits.Counter limit){

class OverreadRepairedData extends Transformation<UnfilteredRowIterator> implements MoreRows<UnfilteredRowIterator> {

    protected UnfilteredRowIterator applyToPartition(    UnfilteredRowIterator partition){

      return MoreRows.extend(partition,this,partition.columns());

    }

    public UnfilteredRowIterator moreContents(){

      if (!limit.isDone() || repairedCounter.isDone())       return null;

      long countBeforeOverreads=repairedCounter.counted();

      long overreadStartTime=System.nanoTime();

      if (currentPartition != null)       consumePartition(currentPartition,repairedCounter);

      if (postLimitPartitions != null)       while (postLimitPartitions.hasNext() && !repairedCounter.isDone())       consumePartition(postLimitPartitions.next(),repairedCounter);

      long rows=repairedCounter.counted() - countBeforeOverreads;

      long nanos=System.nanoTime() - overreadStartTime;

      metrics.repairedDataTrackingOverreadRows.update(rows);

      metrics.repairedDataTrackingOverreadTime.update(nanos,TimeUnit.NANOSECONDS);

      Tracing.trace("Read {} additional rows of repaired data for tracking in {}ps",rows,TimeUnit.NANOSECONDS.toMicros(nanos));

      return null;

    }

    private void consumePartition(    UnfilteredRowIterator partition,    DataLimits.Counter counter){

      if (partition == null)       return;

      while (!counter.isDone() && partition.hasNext())       partition.next();

      partition.close();

    }

  }

  if (metrics == null || repairedCounter.isDone())   return partitions;

  return Transformation.apply(partitions,new OverreadRepairedData());

}

Location: RepairedDataInfo.java

Content: 

void finalize(UnfilteredPartitionIterator postLimitPartitions){

  this.postLimitPartitions=postLimitPartitions;

}

Location: RepairedDataInfo.java

Content: 

ByteBuffer getDigest(){

  if (calculatedDigest != null)   return calculatedDigest;

  calculatedDigest=perCommandDigest == null ? ByteBufferUtil.EMPTY_BYTE_BUFFER : ByteBuffer.wrap(perCommandDigest.digest());

  return calculatedDigest;

}

Location: RepairedDataInfo.java

Content: 

private Digest getPerPartitionDigest(){

  if (perPartitionDigest == null)   perPartitionDigest=Digest.forRepairedDataTracking();

  return perPartitionDigest;

}

Location: RepairedDataInfo.java

Content: 

boolean isConclusive(){

  return isConclusive;

}

Location: RepairedDataInfo.java

Content: 

void markInconclusive(){

  isConclusive=false;

}

Location: RepairedDataInfo.java

Content: 

private void onNewPartition(UnfilteredRowIterator partition){

  assert purger != null;

  purger.setCurrentKey(partition.partitionKey());

  purger.setIsReverseOrder(partition.isReverseOrder());

  this.currentPartition=partition;

}

Location: RepairedDataInfo.java

Content: 

void prepare(ColumnFamilyStore cfs,int nowInSec,int oldestUnrepairedTombstone){

  this.purger=new RepairedDataPurger(cfs,nowInSec,oldestUnrepairedTombstone);

  this.metrics=cfs.metric;

}

Location: RepairedDataInfo.java

Content: 

public RepairedDataInfo(DataLimits.Counter repairedCounter){

  this.repairedCounter=repairedCounter;

}

Location: RepairedDataInfo.java

Content: 

public UnfilteredPartitionIterator withRepairedDataInfo(final UnfilteredPartitionIterator iterator){

class WithTracking extends Transformation<UnfilteredRowIterator> {

    protected UnfilteredRowIterator applyToPartition(    UnfilteredRowIterator partition){

      return withRepairedDataInfo(partition);

    }

  }

  return Transformation.apply(iterator,new WithTracking());

}

Location: RepairedDataInfo.java

Content: 

public UnfilteredRowIterator withRepairedDataInfo(final UnfilteredRowIterator iterator){

class WithTracking extends Transformation<UnfilteredRowIterator> {

    protected DecoratedKey applyToPartitionKey(    DecoratedKey key){

      getPerPartitionDigest().update(key.getKey());

      return key;

    }

    protected DeletionTime applyToDeletion(    DeletionTime deletionTime){

      if (repairedCounter.isDone())       return deletionTime;

      assert purger != null;

      DeletionTime purged=purger.applyToDeletion(deletionTime);

      if (!purged.isLive())       isFullyPurged=false;

      purged.digest(getPerPartitionDigest());

      return deletionTime;

    }

    protected RangeTombstoneMarker applyToMarker(    RangeTombstoneMarker marker){

      if (repairedCounter.isDone())       return marker;

      assert purger != null;

      RangeTombstoneMarker purged=purger.applyToMarker(marker);

      if (purged != null) {

        isFullyPurged=false;

        purged.digest(getPerPartitionDigest());

      }

      return marker;

    }

    protected Row applyToStatic(    Row row){

      return applyToRow(row);

    }

    protected Row applyToRow(    Row row){

      if (repairedCounter.isDone())       return row;

      assert purger != null;

      Row purged=purger.applyToRow(row);

      if (purged != null && !purged.isEmpty()) {

        isFullyPurged=false;

        purged.digest(getPerPartitionDigest());

      }

      return row;

    }

    protected void onPartitionClose(){

      if (perPartitionDigest != null) {

        if (!isFullyPurged) {

          if (perCommandDigest == null)           perCommandDigest=Digest.forRepairedDataTracking();

          byte[] partitionDigest=perPartitionDigest.digest();

          perCommandDigest.update(partitionDigest,0,partitionDigest.length);

        }

        perPartitionDigest=null;

      }

      isFullyPurged=true;

    }

  }

  if (repairedCounter.isDone())   return iterator;

  UnfilteredRowIterator tracked=repairedCounter.applyTo(Transformation.apply(iterator,new WithTracking()));

  onNewPartition(tracked);

  return tracked;

}

