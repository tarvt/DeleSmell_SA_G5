Location: PatriciaTrie.java

Content: 

/** 

 * Returns a key-value mapping associated with the least key greater than or equal to the given key, or null if there is no such key.

 */

TrieEntry<K,V> ceilingEntry(K key){

  int lengthInBits=lengthInBits(key);

  if (lengthInBits == 0) {

    if (!root.isEmpty()) {

      return root;

    }

 else {

      return firstEntry();

    }

  }

  TrieEntry<K,V> found=getNearestEntryForKey(key);

  if (compareKeys(key,found.key))   return found;

  int bitIndex=bitIndex(key,found.key);

  if (Tries.isValidBitIndex(bitIndex)) {

    return replaceCeil(key,bitIndex);

  }

 else   if (Tries.isNullBitKey(bitIndex)) {

    if (!root.isEmpty()) {

      return root;

    }

 else {

      return firstEntry();

    }

  }

 else   if (Tries.isEqualBitKey(bitIndex)) {

    return found;

  }

  throw new IllegalStateException("invalid lookup: " + key);

}

Location: PatriciaTrie.java

Content: 

@Override public Comparator<? super K> comparator(){

  return keyAnalyzer;

}

Location: PatriciaTrie.java

Content: 

@Override public K firstKey(){

  return firstEntry().getKey();

}

Location: PatriciaTrie.java

Content: 

/** 

 * Returns a key-value mapping associated with the greatest key less than or equal to the given key, or null if there is no such key.

 */

TrieEntry<K,V> floorEntry(K key){

  int lengthInBits=lengthInBits(key);

  if (lengthInBits == 0) {

    return !root.isEmpty() ? root : null;

  }

  TrieEntry<K,V> found=getNearestEntryForKey(key);

  if (compareKeys(key,found.key))   return found;

  int bitIndex=bitIndex(key,found.key);

  if (Tries.isValidBitIndex(bitIndex)) {

    return replaceLower(key,bitIndex);

  }

 else   if (Tries.isNullBitKey(bitIndex)) {

    if (!root.isEmpty()) {

      return root;

    }

 else {

      return null;

    }

  }

 else   if (Tries.isEqualBitKey(bitIndex)) {

    return found;

  }

  throw new IllegalStateException("invalid lookup: " + key);

}

Location: PatriciaTrie.java

Content: 

/** 

 * Traverses down the right path until it finds an uplink.

 */

private TrieEntry<K,V> followRight(TrieEntry<K,V> node){

  if (node.right == null)   return null;

  while (node.right.bitIndex > node.bitIndex) {

    node=node.right;

  }

  return node.right;

}

Location: PatriciaTrie.java

Content: 

@Override public SortedMap<K,V> headMap(K toKey){

  return new RangeEntryMap(null,toKey);

}

Location: PatriciaTrie.java

Content: 

/** 

 * Returns an entry strictly higher than the given key, or null if no such entry exists.

 */

private TrieEntry<K,V> higherEntry(K key){

  int lengthInBits=lengthInBits(key);

  if (lengthInBits == 0) {

    if (!root.isEmpty()) {

      return size() > 1 ? nextEntry(root) : null;

    }

 else {

      return firstEntry();

    }

  }

  TrieEntry<K,V> found=getNearestEntryForKey(key);

  if (compareKeys(key,found.key))   return nextEntry(found);

  int bitIndex=bitIndex(key,found.key);

  if (Tries.isValidBitIndex(bitIndex)) {

    return replaceCeil(key,bitIndex);

  }

 else   if (Tries.isNullBitKey(bitIndex)) {

    if (!root.isEmpty()) {

      return firstEntry();

    }

 else     if (size() > 1) {

      return nextEntry(firstEntry());

    }

 else {

      return null;

    }

  }

 else   if (Tries.isEqualBitKey(bitIndex)) {

    return nextEntry(found);

  }

  throw new IllegalStateException("invalid lookup: " + key);

}

Location: PatriciaTrie.java

Content: 

/** 

 * Returns the last entry the  {@link Trie} is storing.<p>This is implemented by going always to the right until we encounter a valid uplink. That uplink is the last key.

 */

private TrieEntry<K,V> lastEntry(){

  return followRight(root.left);

}

Location: PatriciaTrie.java

Content: 

@Override public K lastKey(){

  TrieEntry<K,V> entry=lastEntry();

  return entry != null ? entry.getKey() : null;

}

Location: PatriciaTrie.java

Content: 

/** 

 * Returns a key-value mapping associated with the greatest key strictly less than the given key, or null if there is no such key.

 */

TrieEntry<K,V> lowerEntry(K key){

  int lengthInBits=lengthInBits(key);

  if (lengthInBits == 0)   return null;

  TrieEntry<K,V> found=getNearestEntryForKey(key);

  if (compareKeys(key,found.key))   return previousEntry(found);

  int bitIndex=bitIndex(key,found.key);

  if (Tries.isValidBitIndex(bitIndex)) {

    return replaceLower(key,bitIndex);

  }

 else   if (Tries.isNullBitKey(bitIndex)) {

    return null;

  }

 else   if (Tries.isEqualBitKey(bitIndex)) {

    return previousEntry(found);

  }

  throw new IllegalStateException("invalid lookup: " + key);

}

Location: PatriciaTrie.java

Content: 

/** 

 * Returns the entry lexicographically after the given entry. If the given entry is null, returns the first node. This will traverse only within the subtree.  If the given node is not within the subtree, this will have undefined results.

 */

private TrieEntry<K,V> nextEntryInSubtree(TrieEntry<K,V> node,TrieEntry<K,V> parentOfSubtree){

  return (node == null) ? firstEntry() : nextEntryImpl(node.predecessor,node,parentOfSubtree);

}

Location: PatriciaTrie.java

Content: 

public PatriciaTrie(KeyAnalyzer<? super K> keyAnalyzer){

  super(keyAnalyzer);

}

Location: PatriciaTrie.java

Content: 

public PatriciaTrie(KeyAnalyzer<? super K> keyAnalyzer,Map<? extends K,? extends V> m){

  super(keyAnalyzer,m);

}

Location: PatriciaTrie.java

Content: 

/** 

 * Returns the node lexicographically before the given node (or null if none). This follows four simple branches: - If the uplink that returned us was a right uplink: - If predecessor's left is a valid uplink from predecessor, return it. - Else, follow the right path from the predecessor's left. - If the uplink that returned us was a left uplink: - Loop back through parents until we encounter a node where node != node.parent.left. - If node.parent.left is uplink from node.parent: - If node.parent.left is not root, return it. - If it is root & root isEmpty, return null. - If it is root & root !isEmpty, return root. - If node.parent.left is not uplink from node.parent: - Follow right path for first right child from node.parent.left

 * @param start the start entry

 */

private TrieEntry<K,V> previousEntry(TrieEntry<K,V> start){

  if (start.predecessor == null)   throw new IllegalArgumentException("must have come from somewhere!");

  if (start.predecessor.right == start) {

    return isValidUplink(start.predecessor.left,start.predecessor) ? start.predecessor.left : followRight(start.predecessor.left);

  }

  TrieEntry<K,V> node=start.predecessor;

  while (node.parent != null && node == node.parent.left) {

    node=node.parent;

  }

  if (node.parent == null)   return null;

  if (isValidUplink(node.parent.left,node.parent)) {

    if (node.parent.left == root) {

      return root.isEmpty() ? null : root;

    }

 else {

      return node.parent.left;

    }

  }

 else {

    return followRight(node.parent.left);

  }

}

Location: PatriciaTrie.java

Content: 

private TrieEntry<K,V> replaceCeil(K key,int bitIndex){

  TrieEntry<K,V> added=new TrieEntry<>(key,null,bitIndex);

  addEntry(added);

  incrementSize();

  TrieEntry<K,V> ceil=nextEntry(added);

  removeEntry(added);

  modCount-=2;

  return ceil;

}

Location: PatriciaTrie.java

Content: 

private TrieEntry<K,V> replaceLower(K key,int bitIndex){

  TrieEntry<K,V> added=new TrieEntry<>(key,null,bitIndex);

  addEntry(added);

  incrementSize();

  TrieEntry<K,V> prior=previousEntry(added);

  removeEntry(added);

  modCount-=2;

  return prior;

}

Location: PatriciaTrie.java

Content: 

@Override public SortedMap<K,V> subMap(K fromKey,K toKey){

  return new RangeEntryMap(fromKey,toKey);

}

Location: PatriciaTrie.java

Content: 

/** 

 * Finds the subtree that contains the prefix. This is very similar to getR but with the difference that we stop the lookup if h.bitIndex > lengthInBits.

 */

private TrieEntry<K,V> subtree(K prefix){

  int lengthInBits=lengthInBits(prefix);

  TrieEntry<K,V> current=root.left;

  TrieEntry<K,V> path=root;

  while (true) {

    if (current.bitIndex <= path.bitIndex || lengthInBits < current.bitIndex)     break;

    path=current;

    current=!isBitSet(prefix,current.bitIndex) ? current.left : current.right;

  }

  TrieEntry<K,V> entry=current.isEmpty() ? path : current;

  if (entry.isEmpty())   return null;

  if (entry == root && lengthInBits(entry.getKey()) < lengthInBits)   return null;

  if (isBitSet(prefix,lengthInBits) != isBitSet(entry.key,lengthInBits))   return null;

  int bitIndex=bitIndex(prefix,entry.key);

  return (bitIndex >= 0 && bitIndex < lengthInBits) ? null : entry;

}

Location: PatriciaTrie.java

Content: 

@Override public SortedMap<K,V> tailMap(K fromKey){

  return new RangeEntryMap(fromKey,null);

}

