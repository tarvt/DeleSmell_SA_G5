Location: DynamicEndpointSnitchMBean.java

Content: 

public List<Double> dumpTimings(String hostname) throws UnknownHostException ;

Location: DynamicEndpointSnitchMBean.java

Content: 

public double getBadnessThreshold();

Location: DynamicEndpointSnitchMBean.java

Content: 

public int getResetInterval();

Location: DynamicEndpointSnitchMBean.java

Content: 

@Deprecated public Map<InetAddress,Double> getScores();

Location: DynamicEndpointSnitchMBean.java

Content: 

public Map<String,Double> getScoresWithPort();

Location: DynamicEndpointSnitchMBean.java

Content: 

/** 

 * @return the current manually injected Severity.

 */

public double getSeverity();

Location: DynamicEndpointSnitchMBean.java

Content: 

public String getSubsnitchClassName();

Location: DynamicEndpointSnitchMBean.java

Content: 

public int getUpdateInterval();

Location: DynamicEndpointSnitchMBean.java

Content: 

/** 

 * Setting a Severity allows operators to inject preference information into the Dynamic Snitch replica selection. When choosing which replicas to participate in a read request, the DSnitch sorts replicas by response latency, and selects the fastest replicas.  Latencies are normalized to a score from 0 to 1,  with lower scores being faster. The Severity injected here will be added to the normalized score. Thus, adding a Severity greater than 1 will mean the replica will never be contacted (unless needed for ALL or if it is added later for rapid read protection). Conversely, adding a negative Severity means the replica will *always* be contacted. (The "Severity" term is historical and dates to when this was used to represent how badly background tasks like compaction were affecting a replica's performance. See CASSANDRA-3722 for when this was introduced and CASSANDRA-11738 for why it was removed.)

 */

public void setSeverity(double severity);

