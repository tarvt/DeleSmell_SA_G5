Location: TableAttributes.java

Content: 

TableParams asAlteredTableParams(TableParams previous){

  if (getId() != null)   throw new ConfigurationException("Cannot alter table id.");

  return build(previous.unbuild());

}

Location: TableAttributes.java

Content: 

TableParams asNewTableParams(){

  return build(TableParams.builder());

}

Location: TableAttributes.java

Content: 

private TableParams build(TableParams.Builder builder){

  if (hasOption(Option.BLOOM_FILTER_FP_CHANCE))   builder.bloomFilterFpChance(getDouble(Option.BLOOM_FILTER_FP_CHANCE));

  if (hasOption(Option.CACHING))   builder.caching(CachingParams.fromMap(getMap(Option.CACHING)));

  if (hasOption(Option.COMMENT))   builder.comment(getString(Option.COMMENT));

  if (hasOption(Option.COMPACTION))   builder.compaction(CompactionParams.fromMap(getMap(Option.COMPACTION)));

  if (hasOption(Option.COMPRESSION)) {

    Map<String,String> compressionOpts=getMap(Option.COMPRESSION);

    if (compressionOpts.containsKey(Option.CRC_CHECK_CHANCE.toString().toLowerCase())) {

      Double crcCheckChance=getDeprecatedCrcCheckChance(compressionOpts);

      builder.crcCheckChance(crcCheckChance);

    }

    builder.compression(CompressionParams.fromMap(getMap(Option.COMPRESSION)));

  }

  if (hasOption(Option.DEFAULT_TIME_TO_LIVE))   builder.defaultTimeToLive(getInt(Option.DEFAULT_TIME_TO_LIVE));

  if (hasOption(Option.GC_GRACE_SECONDS))   builder.gcGraceSeconds(getInt(Option.GC_GRACE_SECONDS));

  if (hasOption(Option.MAX_INDEX_INTERVAL))   builder.maxIndexInterval(getInt(Option.MAX_INDEX_INTERVAL));

  if (hasOption(Option.MEMTABLE_FLUSH_PERIOD_IN_MS))   builder.memtableFlushPeriodInMs(getInt(Option.MEMTABLE_FLUSH_PERIOD_IN_MS));

  if (hasOption(Option.MIN_INDEX_INTERVAL))   builder.minIndexInterval(getInt(Option.MIN_INDEX_INTERVAL));

  if (hasOption(Option.SPECULATIVE_RETRY))   builder.speculativeRetry(SpeculativeRetryPolicy.fromString(getString(Option.SPECULATIVE_RETRY)));

  if (hasOption(Option.ADDITIONAL_WRITE_POLICY))   builder.additionalWritePolicy(SpeculativeRetryPolicy.fromString(getString(Option.ADDITIONAL_WRITE_POLICY)));

  if (hasOption(Option.CRC_CHECK_CHANCE))   builder.crcCheckChance(getDouble(Option.CRC_CHECK_CHANCE));

  if (hasOption(Option.CDC))   builder.cdc(getBoolean(Option.CDC.toString(),false));

  if (hasOption(Option.READ_REPAIR))   builder.readRepair(ReadRepairStrategy.fromString(getString(Option.READ_REPAIR)));

  return builder.build();

}

Location: TableAttributes.java

Content: 

private Double getDeprecatedCrcCheckChance(Map<String,String> compressionOpts){

  String value=compressionOpts.get(Option.CRC_CHECK_CHANCE.toString().toLowerCase());

  try {

    return Double.valueOf(value);

  }

 catch (  NumberFormatException e) {

    throw new SyntaxException(String.format("Invalid double value %s for crc_check_chance.'",value));

  }

}

Location: TableAttributes.java

Content: 

private double getDouble(Option option){

  String value=getString(option);

  try {

    return Double.parseDouble(value);

  }

 catch (  NumberFormatException e) {

    throw new SyntaxException(format("Invalid double value %s for '%s'",value,option));

  }

}

Location: TableAttributes.java

Content: 

public TableId getId() throws ConfigurationException {

  String id=getSimple(ID);

  try {

    return id != null ? TableId.fromString(id) : null;

  }

 catch (  IllegalArgumentException e) {

    throw new ConfigurationException("Invalid table id",e);

  }

}

Location: TableAttributes.java

Content: 

private int getInt(Option option){

  String value=getString(option);

  try {

    return Integer.parseInt(value);

  }

 catch (  NumberFormatException e) {

    throw new SyntaxException(String.format("Invalid integer value %s for '%s'",value,option));

  }

}

Location: TableAttributes.java

Content: 

private Map<String,String> getMap(Option option){

  Map<String,String> value=getMap(option.toString());

  if (value == null)   throw new IllegalStateException(format("Option '%s' is absent",option));

  return value;

}

Location: TableAttributes.java

Content: 

private String getString(Option option){

  String value=getSimple(option.toString());

  if (value == null)   throw new IllegalStateException(format("Option '%s' is absent",option));

  return value;

}

