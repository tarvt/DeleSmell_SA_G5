Location: Cells.java

Content: 

/** 

 * Adds to the builder a representation of the given existing cell that, when merged/reconciled with the given update cell, produces the same result as merging the original with the update. <p> For simple cells that is either the original cell (if still live), or nothing (if shadowed).

 * @param column the complex column the cells are for.

 * @param existing the pre-existing cells, the ones that are updated.

 * @param update the newly added cells, the update. This can be {@code null} outof convenience, in which case this function simply copy the cells from {@code existing} to {@code writer}.

 * @param deletion the deletion time that applies to the cells being considered.This deletion time may delete both  {@code existing} or {@code update}.

 * @param builder the row builder to which the result of the filtering is written.

 */

public static void addNonShadowedComplex(ColumnMetadata column,Iterator<Cell<?>> existing,Iterator<Cell<?>> update,DeletionTime deletion,Row.Builder builder){

  Comparator<CellPath> comparator=column.cellPathComparator();

  Cell<?> nextExisting=getNext(existing);

  Cell<?> nextUpdate=getNext(update);

  while (nextExisting != null) {

    int cmp=nextUpdate == null ? -1 : comparator.compare(nextExisting.path(),nextUpdate.path());

    if (cmp < 0) {

      addNonShadowed(nextExisting,null,deletion,builder);

      nextExisting=getNext(existing);

    }

 else     if (cmp == 0) {

      addNonShadowed(nextExisting,nextUpdate,deletion,builder);

      nextExisting=getNext(existing);

      nextUpdate=getNext(update);

    }

 else {

      nextUpdate=getNext(update);

    }

  }

}

Location: Cells.java

Content: 

/** 

 * Adds to the builder a representation of the given existing cell that, when merged/reconciled with the given update cell, produces the same result as merging the original with the update. <p> For simple cells that is either the original cell (if still live), or nothing (if shadowed).

 * @param existing the pre-existing cell, the one that is updated.

 * @param update the newly added cell, the update. This can be {@code null} outof convenience, in which case this function simply copy  {@code existing} to{@code writer}.

 * @param deletion the deletion time that applies to the cells being considered.This deletion time may delete both  {@code existing} or {@code update}.

 * @param builder the row builder to which the result of the filtering is written.

 */

public static void addNonShadowed(Cell<?> existing,Cell<?> update,DeletionTime deletion,Row.Builder builder){

  if (deletion.deletes(existing))   return;

  Cell<?> reconciled=reconcile(existing,update);

  if (reconciled != update)   builder.addCell(existing);

}

Location: Cells.java

Content: 

/** 

 * Collect statistics ont a given cell.

 * @param cell the cell for which to collect stats.

 * @param collector the stats collector.

 */

public static void collectStats(Cell<?> cell,PartitionStatisticsCollector collector){

  collector.update(cell);

  if (cell.isCounterCell())   collector.updateHasLegacyCounterShards(CounterCells.hasLegacyShards(cell));

}

Location: Cells.java

Content: 

private static <L,R>int compareValues(Cell<L> left,Cell<R> right){

  return ValueAccessor.compare(left.value(),left.accessor(),right.value(),right.accessor());

}

Location: Cells.java

Content: 

public static <T,V>T composeValue(Cell<V> cell,AbstractType<T> type){

  return type.compose(cell.value(),cell.accessor());

}

Location: Cells.java

Content: 

private static Cell<?> getNext(Iterator<Cell<?>> iterator){

  return iterator == null || !iterator.hasNext() ? null : iterator.next();

}

Location: Cells.java

Content: 

/** 

 * Computes the reconciliation of a complex column given its pre-existing cells and the ones it is updated with, and generating index update if appropriate. <p> Note that this method assumes that the provided cells can meaningfully be reconciled together, that is that the cells are for the same row and same complex column. <p> Also note that which cells is provided as  {@code existing} and which areprovided as  {@code update} matters for index updates.

 * @param column the complex column the cells are for.

 * @param existing the pre-existing cells, the ones that are updated. This can be{@code null} if this reconciliation correspond to an insertion.

 * @param update the newly added cells, the update. This can be {@code null} outof convenience, in which case this function simply copy the cells from {@code existing} to {@code writer}.

 * @param deletion the deletion time that applies to the cells being considered.This deletion time may delete cells in both  {@code existing} and {@code update}.

 * @param builder the row build to which the result of the reconciliation is written.

 * @return the smallest timestamp delta between corresponding cells from existing and update. Atimestamp delta being computed as the difference between a cell from  {@code update} and thecell in  {@code existing} having the same cell path (if such cell exists). If the intersectionof cells from  {@code existing} and {@code update} having the same cell path is empty, thisreturns  {@code Long.MAX_VALUE}.

 */

public static long reconcileComplex(ColumnMetadata column,Iterator<Cell<?>> existing,Iterator<Cell<?>> update,DeletionTime deletion,Row.Builder builder){

  Comparator<CellPath> comparator=column.cellPathComparator();

  Cell<?> nextExisting=getNext(existing);

  Cell<?> nextUpdate=getNext(update);

  long timeDelta=Long.MAX_VALUE;

  while (nextExisting != null || nextUpdate != null) {

    int cmp=nextExisting == null ? 1 : (nextUpdate == null ? -1 : comparator.compare(nextExisting.path(),nextUpdate.path()));

    if (cmp < 0) {

      reconcile(nextExisting,null,deletion,builder);

      nextExisting=getNext(existing);

    }

 else     if (cmp > 0) {

      reconcile(null,nextUpdate,deletion,builder);

      nextUpdate=getNext(update);

    }

 else {

      timeDelta=Math.min(timeDelta,reconcile(nextExisting,nextUpdate,deletion,builder));

      nextExisting=getNext(existing);

      nextUpdate=getNext(update);

    }

  }

  return timeDelta;

}

Location: Cells.java

Content: 

/** 

 * Reconciles/merge two cells. <p> Note that this method assumes that the provided cells can meaningfully be reconciled together, that is that cell are for the same row and same column (and same cell path if the column is complex). <p> This method is commutative over it's cells arguments:  {@code reconcile(a, b, n) == reconcile(b, a, n)}.

 * @param c1 the first cell participating in the reconciliation.

 * @param c2 the second cell participating in the reconciliation.

 * @return a cell corresponding to the reconciliation of {@code c1} and {@code c2}. For non-counter cells, this will always be either  {@code c1} or {@code c2}, but for counter cells this can be a newly allocated cell.

 */

public static Cell<?> reconcile(Cell<?> c1,Cell<?> c2){

  if (c1 == null || c2 == null)   return c2 == null ? c1 : c2;

  if (c1.isCounterCell() || c2.isCounterCell())   return resolveCounter(c1,c2);

  return resolveRegular(c1,c2);

}

Location: Cells.java

Content: 

/** 

 * Reconciles/merges two cells, one being an update to an existing cell, yielding index updates if appropriate. <p> Note that this method assumes that the provided cells can meaningfully be reconciled together, that is that those cells are for the same row and same column (and same cell path if the column is complex). <p> Also note that which cell is provided as  {@code existing} and which isprovided as  {@code update} matters for index updates.

 * @param existing the pre-existing cell, the one that is updated. This can be{@code null} if this reconciliation correspond to an insertion.

 * @param update the newly added cell, the update. This can be {@code null} outof convenience, in which case this function simply copy  {@code existing} to{@code writer}.

 * @param deletion the deletion time that applies to the cells being considered.This deletion time may delete both  {@code existing} or {@code update}.

 * @param builder the row builder to which the result of the reconciliation is written.

 * @return the timestamp delta between existing and update, or {@code Long.MAX_VALUE} if oneof them is  {@code null} or deleted by {@code deletion}).

 */

public static long reconcile(Cell<?> existing,Cell<?> update,DeletionTime deletion,Row.Builder builder){

  existing=existing == null || deletion.deletes(existing) ? null : existing;

  update=update == null || deletion.deletes(update) ? null : update;

  if (existing == null || update == null) {

    if (update != null) {

      builder.addCell(update);

    }

 else     if (existing != null) {

      builder.addCell(existing);

    }

    return Long.MAX_VALUE;

  }

  Cell<?> reconciled=reconcile(existing,update);

  builder.addCell(reconciled);

  return Math.abs(existing.timestamp() - update.timestamp());

}

Location: Cells.java

Content: 

private static Cell<?> resolveCounter(Cell<?> left,Cell<?> right){

  long leftTimestamp=left.timestamp();

  long rightTimestamp=right.timestamp();

  boolean leftIsTombstone=left.isTombstone();

  boolean rightIsTombstone=right.isTombstone();

  if (leftIsTombstone | rightIsTombstone) {

    assert leftIsTombstone != rightIsTombstone;

    return leftIsTombstone ? left : right;

  }

  ByteBuffer leftValue=left.buffer();

  ByteBuffer rightValue=right.buffer();

  boolean leftIsEmpty=!leftValue.hasRemaining();

  boolean rightIsEmpty=!rightValue.hasRemaining();

  if (leftIsEmpty || rightIsEmpty) {

    if (leftIsEmpty != rightIsEmpty)     return leftIsEmpty ? left : right;

    return leftTimestamp > rightTimestamp ? left : right;

  }

  ByteBuffer merged=CounterContext.instance().merge(leftValue,rightValue);

  long timestamp=Math.max(leftTimestamp,rightTimestamp);

  if (merged == leftValue && timestamp == leftTimestamp)   return left;

 else   if (merged == rightValue && timestamp == rightTimestamp)   return right;

 else   return new BufferCell(left.column(),timestamp,Cell.NO_TTL,Cell.NO_DELETION_TIME,merged,left.path());

}

Location: Cells.java

Content: 

private static Cell<?> resolveRegular(Cell<?> left,Cell<?> right){

  long leftTimestamp=left.timestamp();

  long rightTimestamp=right.timestamp();

  if (leftTimestamp != rightTimestamp)   return leftTimestamp > rightTimestamp ? left : right;

  int leftLocalDeletionTime=left.localDeletionTime();

  int rightLocalDeletionTime=right.localDeletionTime();

  boolean leftIsExpiringOrTombstone=leftLocalDeletionTime != Cell.NO_DELETION_TIME;

  boolean rightIsExpiringOrTombstone=rightLocalDeletionTime != Cell.NO_DELETION_TIME;

  if (leftIsExpiringOrTombstone | rightIsExpiringOrTombstone) {

    if (leftIsExpiringOrTombstone != rightIsExpiringOrTombstone)     return leftIsExpiringOrTombstone ? left : right;

    boolean leftIsTombstone=!left.isExpiring();

    boolean rightIsTombstone=!right.isExpiring();

    if (leftIsTombstone != rightIsTombstone)     return leftIsTombstone ? left : right;

    if (leftLocalDeletionTime != rightLocalDeletionTime)     return leftLocalDeletionTime > rightLocalDeletionTime ? left : right;

  }

  return compareValues(left,right) >= 0 ? left : right;

}

Location: Cells.java

Content: 

public static <L,R>boolean valueEqual(Cell<L> left,Cell<R> right){

  return ValueAccessor.equals(left.value(),left.accessor(),right.value(),right.accessor());

}

Location: Cells.java

Content: 

public static <V>String valueString(Cell<V> cell){

  return valueString(cell,cell.column().type);

}

Location: Cells.java

Content: 

public static <V>String valueString(Cell<V> cell,AbstractType<?> type){

  return type.getString(cell.value(),cell.accessor());

}

