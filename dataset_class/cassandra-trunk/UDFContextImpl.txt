Location: UDFContextImpl.java

Content: 

private TypeCodec<Object> codecFor(String argName){

  TypeCodec<Object> codec=byName.get(argName);

  if (codec == null)   throw new IllegalArgumentException("Function does not declare an argument named '" + argName + '\'');

  return codec;

}

Location: UDFContextImpl.java

Content: 

public TupleValue newArgTupleValue(int argNum){

  return newTupleValue(codecFor(argNum));

}

Location: UDFContextImpl.java

Content: 

public TupleValue newArgTupleValue(String argName){

  return newTupleValue(codecFor(argName));

}

Location: UDFContextImpl.java

Content: 

public UDTValue newArgUDTValue(int argNum){

  return newUDTValue(codecFor(argNum));

}

Location: UDFContextImpl.java

Content: 

public UDTValue newArgUDTValue(String argName){

  return newUDTValue(codecFor(argName));

}

Location: UDFContextImpl.java

Content: 

public TupleValue newReturnTupleValue(){

  return newTupleValue(returnCodec);

}

Location: UDFContextImpl.java

Content: 

public UDTValue newReturnUDTValue(){

  return newUDTValue(returnCodec);

}

Location: UDFContextImpl.java

Content: 

private static TupleValue newTupleValue(DataType dataType){

  if (!(dataType instanceof TupleType))   throw new IllegalStateException("Function argument is not a tuple type but a " + dataType.getName());

  TupleType tupleType=(TupleType)dataType;

  return tupleType.newValue();

}

Location: UDFContextImpl.java

Content: 

public TupleValue newTupleValue(String cqlDefinition){

  AbstractType<?> abstractType=CQLTypeParser.parse(keyspaceMetadata.name,cqlDefinition,keyspaceMetadata.types);

  DataType dataType=UDHelper.driverType(abstractType);

  return newTupleValue(dataType);

}

Location: UDFContextImpl.java

Content: 

private static TupleValue newTupleValue(TypeCodec<Object> codec){

  DataType dataType=codec.getCqlType();

  return newTupleValue(dataType);

}

Location: UDFContextImpl.java

Content: 

private static UDTValue newUDTValue(DataType dataType){

  if (!(dataType instanceof UserType))   throw new IllegalStateException("Function argument is not a UDT but a " + dataType.getName());

  UserType userType=(UserType)dataType;

  return userType.newValue();

}

Location: UDFContextImpl.java

Content: 

public UDTValue newUDTValue(String udtName){

  Optional<org.apache.cassandra.db.marshal.UserType> udtType=keyspaceMetadata.types.get(ByteBufferUtil.bytes(udtName));

  DataType dataType=UDHelper.driverType(udtType.orElseThrow(() -> new IllegalArgumentException("No UDT named " + udtName + " in keyspace "+ keyspaceMetadata.name)));

  return newUDTValue(dataType);

}

Location: UDFContextImpl.java

Content: 

private static UDTValue newUDTValue(TypeCodec<Object> codec){

  DataType dataType=codec.getCqlType();

  return newUDTValue(dataType);

}

Location: UDFContextImpl.java

Content: 

UDFContextImpl(List<ColumnIdentifier> argNames,TypeCodec<Object>[] argCodecs,TypeCodec<Object> returnCodec,KeyspaceMetadata keyspaceMetadata){

  for (int i=0; i < argNames.size(); i++)   byName.put(argNames.get(i).toString(),argCodecs[i]);

  this.argCodecs=argCodecs;

  this.returnCodec=returnCodec;

  this.keyspaceMetadata=keyspaceMetadata;

}

