Location: IncludingExcludingBounds.java

Content: 

public boolean contains(T position){

  return (Range.contains(left,right,position) || left.equals(position)) && !right.equals(position);

}

Location: IncludingExcludingBounds.java

Content: 

protected String getClosingString(){

  return ")";

}

Location: IncludingExcludingBounds.java

Content: 

protected String getOpeningString(){

  return "[";

}

Location: IncludingExcludingBounds.java

Content: 

public IncludingExcludingBounds(T left,T right){

  super(left,right);

  assert !strictlyWrapsAround(left,right) && (right.isMinimum() || left.compareTo(right) != 0) : "(" + left + ","+ right+ ")";

}

Location: IncludingExcludingBounds.java

Content: 

public boolean inclusiveLeft(){

  return true;

}

Location: IncludingExcludingBounds.java

Content: 

public boolean inclusiveRight(){

  return false;

}

Location: IncludingExcludingBounds.java

Content: 

public boolean isEndInclusive(){

  return false;

}

Location: IncludingExcludingBounds.java

Content: 

public boolean isStartInclusive(){

  return true;

}

Location: IncludingExcludingBounds.java

Content: 

public Pair<AbstractBounds<T>,AbstractBounds<T>> split(T position){

  assert contains(position);

  AbstractBounds<T> lb=new Bounds<T>(left,position);

  AbstractBounds<T> rb=new ExcludingBounds<T>(position,right);

  return Pair.create(lb,rb);

}

Location: IncludingExcludingBounds.java

Content: 

public AbstractBounds<T> withNewRight(T newRight){

  return new IncludingExcludingBounds<T>(left,newRight);

}

