Location: MetadataSerializer.java

Content: 

public Map<MetadataType,MetadataComponent> deserialize(Descriptor descriptor,EnumSet<MetadataType> types) throws IOException {

  Map<MetadataType,MetadataComponent> components;

  logger.trace("Load metadata for {}",descriptor);

  File statsFile=new File(descriptor.filenameFor(Component.STATS));

  if (!statsFile.exists()) {

    logger.trace("No sstable stats for {}",descriptor);

    components=new EnumMap<>(MetadataType.class);

    components.put(MetadataType.STATS,MetadataCollector.defaultStatsMetadata());

  }

 else {

    try (RandomAccessReader r=RandomAccessReader.open(statsFile)){

      components=deserialize(descriptor,r,types);

    }

   }

  return components;

}

Location: MetadataSerializer.java

Content: 

public Map<MetadataType,MetadataComponent> deserialize(Descriptor descriptor,FileDataInput in,EnumSet<MetadataType> selectedTypes) throws IOException {

  boolean isChecksummed=descriptor.version.hasMetadataChecksum();

  CRC32 crc=new CRC32();

  int length=(int)in.bytesRemaining();

  int count=in.readInt();

  updateChecksumInt(crc,count);

  maybeValidateChecksum(crc,in,descriptor);

  int[] ordinals=new int[count];

  int[] offsets=new int[count];

  int[] lengths=new int[count];

  for (int i=0; i < count; i++) {

    ordinals[i]=in.readInt();

    updateChecksumInt(crc,ordinals[i]);

    offsets[i]=in.readInt();

    updateChecksumInt(crc,offsets[i]);

  }

  maybeValidateChecksum(crc,in,descriptor);

  lengths[count - 1]=length - offsets[count - 1];

  for (int i=0; i < count - 1; i++)   lengths[i]=offsets[i + 1] - offsets[i];

  MetadataType[] allMetadataTypes=MetadataType.values();

  Map<MetadataType,MetadataComponent> components=new EnumMap<>(MetadataType.class);

  for (int i=0; i < count; i++) {

    MetadataType type=allMetadataTypes[ordinals[i]];

    if (!selectedTypes.contains(type)) {

      in.skipBytes(lengths[i]);

      continue;

    }

    byte[] buffer=new byte[isChecksummed ? lengths[i] - CHECKSUM_LENGTH : lengths[i]];

    in.readFully(buffer);

    crc.reset();

    crc.update(buffer);

    maybeValidateChecksum(crc,in,descriptor);

    try (DataInputBuffer dataInputBuffer=new DataInputBuffer(buffer)){

      components.put(type,type.serializer.deserialize(descriptor.version,dataInputBuffer));

    }

   }

  return components;

}

Location: MetadataSerializer.java

Content: 

public MetadataComponent deserialize(Descriptor descriptor,MetadataType type) throws IOException {

  return deserialize(descriptor,EnumSet.of(type)).get(type);

}

Location: MetadataSerializer.java

Content: 

private static void maybeValidateChecksum(CRC32 crc,FileDataInput in,Descriptor descriptor) throws IOException {

  if (!descriptor.version.hasMetadataChecksum())   return;

  int actualChecksum=(int)crc.getValue();

  int expectedChecksum=in.readInt();

  if (actualChecksum != expectedChecksum) {

    String filename=descriptor.filenameFor(Component.STATS);

    throw new CorruptSSTableException(new IOException("Checksums do not match for " + filename),filename);

  }

}

Location: MetadataSerializer.java

Content: 

private static void maybeWriteChecksum(CRC32 crc,DataOutputPlus out,Version version) throws IOException {

  if (version.hasMetadataChecksum())   out.writeInt((int)crc.getValue());

}

Location: MetadataSerializer.java

Content: 

@Override public void mutateLevel(Descriptor descriptor,int newLevel) throws IOException {

  if (logger.isTraceEnabled())   logger.trace("Mutating {} to level {}",descriptor.filenameFor(Component.STATS),newLevel);

  mutate(descriptor,stats -> stats.mutateLevel(newLevel));

}

Location: MetadataSerializer.java

Content: 

@Override public void mutateRepairMetadata(Descriptor descriptor,long newRepairedAt,UUID newPendingRepair,boolean isTransient) throws IOException {

  if (logger.isTraceEnabled())   logger.trace("Mutating {} to repairedAt time {} and pendingRepair {}",descriptor.filenameFor(Component.STATS),newRepairedAt,newPendingRepair);

  mutate(descriptor,stats -> stats.mutateRepairedMetadata(newRepairedAt,newPendingRepair,isTransient));

}

Location: MetadataSerializer.java

Content: 

@Override public void mutate(Descriptor descriptor,String description,UnaryOperator<StatsMetadata> transform) throws IOException {

  if (logger.isTraceEnabled())   logger.trace("Mutating {} to {}",descriptor.filenameFor(Component.STATS),description);

  mutate(descriptor,transform);

}

Location: MetadataSerializer.java

Content: 

private void mutate(Descriptor descriptor,UnaryOperator<StatsMetadata> transform) throws IOException {

  Map<MetadataType,MetadataComponent> currentComponents=deserialize(descriptor,EnumSet.allOf(MetadataType.class));

  StatsMetadata stats=(StatsMetadata)currentComponents.remove(MetadataType.STATS);

  currentComponents.put(MetadataType.STATS,transform.apply(stats));

  rewriteSSTableMetadata(descriptor,currentComponents);

}

Location: MetadataSerializer.java

Content: 

public void rewriteSSTableMetadata(Descriptor descriptor,Map<MetadataType,MetadataComponent> currentComponents) throws IOException {

  String filePath=descriptor.tmpFilenameFor(Component.STATS);

  try (DataOutputStreamPlus out=new BufferedDataOutputStreamPlus(new FileOutputStream(filePath))){

    serialize(currentComponents,out,descriptor.version);

    out.flush();

  }

 catch (  IOException e) {

    Throwables.throwIfInstanceOf(e,FileNotFoundException.class);

    throw new FSWriteError(e,filePath);

  }

  if (FBUtilities.isWindows)   FileUtils.delete(descriptor.filenameFor(Component.STATS));

  FileUtils.renameWithConfirm(filePath,descriptor.filenameFor(Component.STATS));

}

Location: MetadataSerializer.java

Content: 

public void serialize(Map<MetadataType,MetadataComponent> components,DataOutputPlus out,Version version) throws IOException {

  boolean checksum=version.hasMetadataChecksum();

  CRC32 crc=new CRC32();

  List<MetadataComponent> sortedComponents=Lists.newArrayList(components.values());

  Collections.sort(sortedComponents);

  out.writeInt(components.size());

  updateChecksumInt(crc,components.size());

  maybeWriteChecksum(crc,out,version);

  int lastPosition=4 + (8 * sortedComponents.size()) + (checksum ? 2 * CHECKSUM_LENGTH : 0);

  Map<MetadataType,Integer> sizes=new EnumMap<>(MetadataType.class);

  for (  MetadataComponent component : sortedComponents) {

    MetadataType type=component.getType();

    out.writeInt(type.ordinal());

    updateChecksumInt(crc,type.ordinal());

    out.writeInt(lastPosition);

    updateChecksumInt(crc,lastPosition);

    int size=type.serializer.serializedSize(version,component);

    lastPosition+=size + (checksum ? CHECKSUM_LENGTH : 0);

    sizes.put(type,size);

  }

  maybeWriteChecksum(crc,out,version);

  for (  MetadataComponent component : sortedComponents) {

    byte[] bytes;

    try (DataOutputBuffer dob=new DataOutputBuffer(sizes.get(component.getType()))){

      component.getType().serializer.serialize(version,component,dob);

      bytes=dob.getData();

    }

     out.write(bytes);

    crc.reset();

    crc.update(bytes);

    maybeWriteChecksum(crc,out,version);

  }

}

