Location: Version.java

Content: 

public abstract int correspondingMessagingVersion();

Location: Version.java

Content: 

public SSTableFormat getSSTableFormat(){

  return format;

}

Location: Version.java

Content: 

public String getVersion(){

  return version;

}

Location: Version.java

Content: 

public abstract boolean hasAccurateMinMax();

Location: Version.java

Content: 

public abstract boolean hasCommitLogIntervals();

Location: Version.java

Content: 

public abstract boolean hasCommitLogLowerBound();

Location: Version.java

Content: 

public abstract boolean hasIsTransient();

Location: Version.java

Content: 

public abstract boolean hasMaxCompressedLength();

Location: Version.java

Content: 

public abstract boolean hasMetadataChecksum();

Location: Version.java

Content: 

/** 

 * The old bloomfilter format serializes the data as BIG_ENDIAN long's, the new one uses the same format as in memory (serializes as bytes).

 * @return True if the bloomfilter file is old serialization format

 */

public abstract boolean hasOldBfFormat();

Location: Version.java

Content: 

public abstract boolean hasPendingRepair();

Location: Version.java

Content: 

abstract public boolean isCompatible();

Location: Version.java

Content: 

abstract public boolean isCompatibleForStreaming();

Location: Version.java

Content: 

public abstract boolean isLatestVersion();

Location: Version.java

Content: 

/** 

 * @param ver SSTable version

 * @return True if the given version string matches the format.

 * @see #version

 */

public static boolean validate(String ver){

  return ver != null && VALIDATION.matcher(ver).matches();

}

Location: Version.java

Content: 

protected Version(SSTableFormat format,String version){

  this.format=format;

  this.version=version;

}

