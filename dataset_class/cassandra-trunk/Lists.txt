Location: Lists.java

Content: 

private static int existingSize(Row row,ColumnMetadata column){

  if (row == null)   return 0;

  ComplexColumnData complexData=row.getComplexColumnData(column);

  return complexData == null ? 0 : complexData.cellsCount();

}

Location: Lists.java

Content: 

/** 

 * Returns the exact ListType from the items if it can be known.

 * @param items the items mapped to the list elements

 * @param mapper the mapper used to retrieve the element types from the items

 * @return the exact ListType from the items if it can be known or <code>null</code>

 */

public static <T>AbstractType<?> getExactListTypeIfKnown(List<T> items,java.util.function.Function<T,AbstractType<?>> mapper){

  Optional<AbstractType<?>> type=items.stream().map(mapper).filter(Objects::nonNull).findFirst();

  return type.isPresent() ? ListType.getInstance(type.get(),false) : null;

}

Location: Lists.java

Content: 

public static ColumnSpecification indexSpecOf(ColumnSpecification column){

  return new ColumnSpecification(column.ksName,column.cfName,new ColumnIdentifier("idx(" + column.name + ")",true),Int32Type.instance);

}

Location: Lists.java

Content: 

private Lists(){

}

Location: Lists.java

Content: 

/** 

 * Create a <code>String</code> representation of the list from the specified items associated to the list elements.

 * @param items items associated to the list elements

 * @param mapper the mapper used to map the items to the <code>String</code> representation of the list elements

 * @return a <code>String</code> representation of the list

 */

public static <T>String listToString(Iterable<T> items,java.util.function.Function<T,String> mapper){

  return StreamSupport.stream(items.spliterator(),false).map(e -> mapper.apply(e)).collect(Collectors.joining(", ","[","]"));

}

Location: Lists.java

Content: 

/** 

 * Create a <code>String</code> representation of the list containing the specified elements.

 * @param elements the list elements

 * @return a <code>String</code> representation of the list

 */

public static String listToString(List<?> elements){

  return listToString(elements,Object::toString);

}

Location: Lists.java

Content: 

/** 

 * Tests that the list with the specified elements can be assigned to the specified column.

 * @param receiver the receiving column

 * @param elements the list elements

 */

public static AssignmentTestable.TestResult testListAssignment(ColumnSpecification receiver,List<? extends AssignmentTestable> elements){

  if (!(receiver.type instanceof ListType))   return AssignmentTestable.TestResult.NOT_ASSIGNABLE;

  if (elements.isEmpty())   return AssignmentTestable.TestResult.WEAKLY_ASSIGNABLE;

  ColumnSpecification valueSpec=valueSpecOf(receiver);

  return AssignmentTestable.TestResult.testAll(receiver.ksName,valueSpec,elements);

}

