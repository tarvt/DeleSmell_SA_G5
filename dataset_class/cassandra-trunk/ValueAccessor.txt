Location: ValueAccessor.java

Content: 

/** 

 * compare a byte array on the left with a  {@param <V>} on the right}

 */

int compareByteArrayTo(byte[] left,V right);

Location: ValueAccessor.java

Content: 

/** 

 * compare a byte buffer on the left with a  {@param <V>} on the right}

 */

int compareByteBufferTo(ByteBuffer left,V right);

Location: ValueAccessor.java

Content: 

/** 

 * lexicographically compare  {@param left} to {@param right}

 */

public static <L,R>int compare(L left,ValueAccessor<L> leftAccessor,R right,ValueAccessor<R> rightAccessor){

  return leftAccessor.compare(left,right,rightAccessor);

}

Location: ValueAccessor.java

Content: 

/** 

 * lexicographically compare  {@param left} to {@param right}

 * @param < VR > backing type of

 */

<VR>int compare(V left,VR right,ValueAccessor<VR> accessorR);

Location: ValueAccessor.java

Content: 

/** 

 * copies a byte array into this accessors value.

 */

int copyByteArrayTo(byte[] src,int srcOffset,V dst,int dstOffset,int size);

Location: ValueAccessor.java

Content: 

/** 

 * copies a byte buffer into this accessors value.

 */

int copyByteBufferTo(ByteBuffer src,int srcOffset,V dst,int dstOffset,int size);

Location: ValueAccessor.java

Content: 

/** 

 * copy the  {@param size} bytes from the {@param src} value, starting at the offset {@param srcOffset} intothe  {@param dst} value, starting at the offset {@param dstOffset}, using the accessor  {@param dstAccessor}

 * @param < V2 > the destination value type

 * @return the number of bytes copied ({@param size})

 */

<V2>int copyTo(V src,int srcOffset,V2 dst,ValueAccessor<V2> dstAccessor,int dstOffset,int size);

Location: ValueAccessor.java

Content: 

/** 

 * updates  {@param digest} with te contents of {@param value}

 */

default void digest(V value,Digest digest){

  digest(value,0,size(value),digest);

}

Location: ValueAccessor.java

Content: 

/** 

 * updates  {@param digest} with {@param size} bytes from the contents of {@param value} startingat offset  {@param offset}

 */

void digest(V value,int offset,int size,Digest digest);

Location: ValueAccessor.java

Content: 

public static <L,R>boolean equals(L left,ValueAccessor<L> leftAccessor,R right,ValueAccessor<R> rightAccessor){

  return compare(left,leftAccessor,right,rightAccessor) == 0;

}

Location: ValueAccessor.java

Content: 

/** 

 * returns a boolean from offset  {@param offset} 

 */

default boolean getBoolean(V value,int offset){

  return getByte(value,offset) != 0;

}

Location: ValueAccessor.java

Content: 

/** 

 * returns a byte from offset  {@param offset} 

 */

byte getByte(V value,int offset);

Location: ValueAccessor.java

Content: 

/** 

 * returns an int from offset  {@param offset} 

 */

int getInt(V value,int offset);

Location: ValueAccessor.java

Content: 

/** 

 * returns a long from offset  {@param offset} 

 */

long getLong(V value,int offset);

Location: ValueAccessor.java

Content: 

/** 

 * returns a short from offset  {@param offset} 

 */

short getShort(V value,int offset);

Location: ValueAccessor.java

Content: 

/** 

 * returns an unsigned short from offset  {@param offset} 

 */

int getUnsignedShort(V value,int offset);

Location: ValueAccessor.java

Content: 

default int hashCode(V value){

  if (value == null)   return 0;

  int result=1;

  for (int i=0, isize=size(value); i < isize; i++)   result=31 * result + (int)getByte(value,i);

  return result;

}

Location: ValueAccessor.java

Content: 

/** 

 * @return true if there are no bytes present after the given offset, false otherwise

 */

default boolean isEmptyFromOffset(V value,int offset){

  return sizeFromOffset(value,offset) == 0;

}

Location: ValueAccessor.java

Content: 

/** 

 * @return true if the size of the given value is zero, false otherwise

 */

default boolean isEmpty(V value){

  return size(value) == 0;

}

Location: ValueAccessor.java

Content: 

/** 

 * writes the int value  {@param value} to {@param dst} at offset {@param offset}

 * @return the number of bytes written to {@param value}

 */

int putInt(V dst,int offset,int value);

Location: ValueAccessor.java

Content: 

/** 

 * writes the long value  {@param value} to {@param dst} at offset {@param offset}

 * @return the number of bytes written to {@param value}

 */

int putLong(V dst,int offset,long value);

Location: ValueAccessor.java

Content: 

/** 

 * writes the short value  {@param value} to {@param dst} at offset {@param offset}

 * @return the number of bytes written to {@param value}

 */

int putShort(V dst,int offset,short value);

Location: ValueAccessor.java

Content: 

/** 

 * @return the number of bytes remaining in the value from the given offset

 */

default int sizeFromOffset(V value,int offset){

  return size(value) - offset;

}

Location: ValueAccessor.java

Content: 

/** 

 * serialized size including a short length prefix 

 */

default int sizeWithShortLength(V value){

  return 2 + size(value);

}

Location: ValueAccessor.java

Content: 

/** 

 * serializes size including a vint length prefix 

 */

default int sizeWithVIntLength(V value){

  int size=size(value);

  return TypeSizes.sizeofUnsignedVInt(size) + size;

}

Location: ValueAccessor.java

Content: 

/** 

 * @return the size of the given value

 */

int size(V value);

Location: ValueAccessor.java

Content: 

/** 

 * same as  {@link ValueAccessor#slice(Object,int,int)}, except the length is taken from the first 2 bytes from the given offset (and not included in the return value)

 */

default V sliceWithShortLength(V input,int offset){

  int size=getUnsignedShort(input,offset);

  return slice(input,offset + 2,size);

}

Location: ValueAccessor.java

Content: 

/** 

 * Returns a value with the contents of  {@param input} from {@param offset} to {@param length}. Depending on the accessor implementation, this method may: * allocate a new  {@param <V>} object of {@param length}, and copy data into it * return a view of  {@param input} where changes to one will be reflected in the other

 */

V slice(V input,int offset,int length);

Location: ValueAccessor.java

Content: 

/** 

 * returns a byte[] with the contents of  {@param value}Depending on the accessor implementation, this method may: * allocate a new byte[] object and copy data into it * return the value, if the backing type is byte[]

 */

byte[] toArray(V value);

Location: ValueAccessor.java

Content: 

/** 

 * returns a byte[] with  {@param length} bytes copied from the contents of {@param value}starting at offset  {@param offset}. Depending on the accessor implementation, this method may: * allocate a new byte[] object and copy data into it * return the value, if the backing type is byte[], offset is 0 and  {@param length} == size(value)

 */

byte[] toArray(V value,int offset,int length);

Location: ValueAccessor.java

Content: 

/** 

 * returns a ByteBuffer with the contents of  {@param value}Depending on the accessor implementation, this method may: * allocate a new ByteBuffer and copy data into it * return the value, if the backing type is a bytebuffer

 */

ByteBuffer toBuffer(V value);

Location: ValueAccessor.java

Content: 

/** 

 * returns a byte from offset 0 

 */

byte toByte(V value);

Location: ValueAccessor.java

Content: 

/** 

 * returns a double from offset 0 

 */

double toDouble(V value);

Location: ValueAccessor.java

Content: 

/** 

 * returns a float from offset 0 

 */

float toFloat(V value);

Location: ValueAccessor.java

Content: 

String toHex(V value);

Location: ValueAccessor.java

Content: 

/** 

 * returns an int from offset 0 

 */

int toInt(V value);

Location: ValueAccessor.java

Content: 

/** 

 * returns a long from offset 0 

 */

long toLong(V value);

Location: ValueAccessor.java

Content: 

/** 

 * returns a short from offset 0 

 */

short toShort(V value);

Location: ValueAccessor.java

Content: 

default String toString(V value) throws CharacterCodingException {

  return toString(value,StandardCharsets.UTF_8);

}

Location: ValueAccessor.java

Content: 

String toString(V value,Charset charset) throws CharacterCodingException ;

Location: ValueAccessor.java

Content: 

/** 

 * returns a UUID from offset 0 

 */

UUID toUUID(V value);

Location: ValueAccessor.java

Content: 

default void writeWithVIntLength(V value,DataOutputPlus out) throws IOException {

  out.writeUnsignedVInt(size(value));

  write(value,out);

}

Location: ValueAccessor.java

Content: 

/** 

 * Write the contents of the given value into the ByteBuffer

 */

void write(V value,ByteBuffer out);

Location: ValueAccessor.java

Content: 

/** 

 * Write the contents of the given value into the a DataOutputPlus

 */

void write(V value,DataOutputPlus out) throws IOException ;

