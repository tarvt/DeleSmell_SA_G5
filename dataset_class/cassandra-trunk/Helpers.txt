Location: Helpers.java

Content: 

static Throwable abortObsoletion(List<LogTransaction.Obsoletion> obsoletions,Throwable accumulate){

  if (obsoletions == null || obsoletions.isEmpty())   return accumulate;

  for (  LogTransaction.Obsoletion obsoletion : obsoletions) {

    try {

      obsoletion.tidier.abort();

    }

 catch (    Throwable t) {

      accumulate=merge(accumulate,t);

    }

  }

  return accumulate;

}

Location: Helpers.java

Content: 

/** 

 * assert that none of these readers have been replaced

 */

static void checkNotReplaced(Iterable<SSTableReader> readers){

  for (  SSTableReader reader : readers)   assert !reader.isReplaced();

}

Location: Helpers.java

Content: 

/** 

 * @return an Iterable of the union if the sets, with duplicates being represented by their first encountered instance(as defined by the order of set provision)

 */

static <T>Iterable<T> concatUniq(Set<T>... sets){

  List<Predicate<T>> notIn=new ArrayList<>(sets.length);

  for (  Set<T> set : sets)   notIn.add(not(in(set)));

  List<Iterable<T>> results=new ArrayList<>(sets.length);

  for (int i=0; i < sets.length; i++)   results.add(filter(sets[i],and(notIn.subList(0,i))));

  return concat(results);

}

Location: Helpers.java

Content: 

static Set<SSTableReader> emptySet(){

  return Collections.emptySet();

}

Location: Helpers.java

Content: 

/** 

 * filter in (i.e. retain)

 * @return filter, filtered to only those elements that *are* present in *any* of the provided sets

 */

static <T>Iterable<T> filterIn(Iterable<T> filter,Set<T>... inAny){

  return filter(filter,orIn(inAny));

}

Location: Helpers.java

Content: 

/** 

 * filter out (i.e. remove) matching elements

 * @return filter, filtered to only those elements that *are not* present in *any* of the provided sets (are present in none)

 */

static <T>Iterable<T> filterOut(Iterable<T> filter,Set<T>... inNone){

  return filter(filter,notIn(inNone));

}

Location: Helpers.java

Content: 

/** 

 * @return the identity function, as a Map, with domain of the provided values

 */

static <T>Map<T,T> identityMap(Iterable<T> values){

  ImmutableMap.Builder<T,T> builder=ImmutableMap.<T,T>builder();

  for (  T t : values)   builder.put(t,t);

  return builder.build();

}

Location: Helpers.java

Content: 

static <T>Predicate<T> idIn(final Map<T,T> identityMap){

  return new Predicate<T>(){

    public boolean apply(    T t){

      return identityMap.get(t) == t;

    }

  }

;

}

Location: Helpers.java

Content: 

static <T>Predicate<T> idIn(Set<T> set){

  return idIn(identityMap(set));

}

Location: Helpers.java

Content: 

static Throwable markObsolete(List<LogTransaction.Obsoletion> obsoletions,Throwable accumulate){

  if (obsoletions == null || obsoletions.isEmpty())   return accumulate;

  for (  LogTransaction.Obsoletion obsoletion : obsoletions) {

    try {

      obsoletion.reader.markObsolete(obsoletion.tidier);

    }

 catch (    Throwable t) {

      accumulate=merge(accumulate,t);

    }

  }

  return accumulate;

}

Location: Helpers.java

Content: 

/** 

 * @return a Predicate yielding true for an item present in NONE of the provided sets

 */

static <T>Predicate<T> notIn(Set<T>... sets){

  return not(orIn(sets));

}

Location: Helpers.java

Content: 

/** 

 * @return a Predicate yielding true for an item present in ANY of the provided sets

 */

static <T>Predicate<T> orIn(Collection<T>... sets){

  Predicate<T>[] orIn=new Predicate[sets.length];

  for (int i=0; i < orIn.length; i++)   orIn[i]=in(sets[i]);

  return or(orIn);

}

Location: Helpers.java

Content: 

static Throwable prepareForObsoletion(Iterable<SSTableReader> readers,LogTransaction txnLogs,List<LogTransaction.Obsoletion> obsoletions,Throwable accumulate){

  Map<SSTable,LogRecord> logRecords=txnLogs.makeRemoveRecords(readers);

  for (  SSTableReader reader : readers) {

    try {

      obsoletions.add(new LogTransaction.Obsoletion(reader,txnLogs.obsoleted(reader,logRecords.get(reader))));

    }

 catch (    Throwable t) {

      accumulate=Throwables.merge(accumulate,t);

    }

  }

  return accumulate;

}

Location: Helpers.java

Content: 

/** 

 * update the contents of an "identity map" with the provided sets, ensuring that the items to remove are really present, and that the items to add are not (unless we're also removing them)

 * @return a new identity map with the contents of the provided one modified

 */

static <T>Map<T,T> replace(Map<T,T> original,Set<T> remove,Iterable<T> add){

  for (  T reader : remove)   assert original.get(reader) == reader;

  assert !any(add,and(not(in(remove)),in(original.keySet()))) : String.format("original:%s remove:%s add:%s",original.keySet(),remove,add);

  Map<T,T> result=identityMap(concat(add,filter(original.keySet(),not(in(remove)))));

  assert result.size() == original.size() - remove.size() + Iterables.size(add) : String.format("Expecting new size of %d, got %d while replacing %s by %s in %s",original.size() - remove.size() + Iterables.size(add),result.size(),remove,add,original.keySet());

  return result;

}

Location: Helpers.java

Content: 

/** 

 * update the contents of a set with the provided sets, ensuring that the items to remove are really present, and that the items to add are not (unless we're also removing them)

 * @return a new set with the contents of the provided one modified

 */

static <T>Set<T> replace(Set<T> original,Set<T> remove,Iterable<T> add){

  return ImmutableSet.copyOf(replace(identityMap(original),remove,add).keySet());

}

Location: Helpers.java

Content: 

static <T>T selectFirst(T t,Collection<T>... sets){

  for (  Collection<T> set : sets) {

    T select=select(t,set);

    if (select != null)     return select;

  }

  return null;

}

Location: Helpers.java

Content: 

static <T>T select(T t,Collection<T> col){

  if (col instanceof Set && !col.contains(t))   return null;

  return getFirst(filter(col,equalTo(t)),null);

}

Location: Helpers.java

Content: 

/** 

 * A convenience method for encapsulating this action over multiple SSTableReader with exception-safety

 * @return accumulate if not null (with any thrown exception attached), or any thrown exception otherwise

 */

static Throwable setReplaced(Iterable<SSTableReader> readers,Throwable accumulate){

  for (  SSTableReader reader : readers) {

    try {

      reader.setReplaced();

    }

 catch (    Throwable t) {

      accumulate=merge(accumulate,t);

    }

  }

  return accumulate;

}

Location: Helpers.java

Content: 

/** 

 * A convenience method for encapsulating this action over multiple SSTableReader with exception-safety

 * @return accumulate if not null (with any thrown exception attached), or any thrown exception otherwise

 */

static void setupOnline(Iterable<SSTableReader> readers){

  for (  SSTableReader reader : readers)   reader.setupOnline();

}

