Location: MaxSSTableSizeWriter.java

Content: 

/** 

 * Gets the estimated total amount of data to write during compaction

 */

private static long getTotalWriteSize(Iterable<SSTableReader> nonExpiredSSTables,long estimatedTotalKeys,ColumnFamilyStore cfs,OperationType compactionType){

  long estimatedKeysBeforeCompaction=0;

  for (  SSTableReader sstable : nonExpiredSSTables)   estimatedKeysBeforeCompaction+=sstable.estimatedKeys();

  estimatedKeysBeforeCompaction=Math.max(1,estimatedKeysBeforeCompaction);

  double estimatedCompactionRatio=(double)estimatedTotalKeys / estimatedKeysBeforeCompaction;

  return Math.round(estimatedCompactionRatio * cfs.getExpectedCompactedFileSize(nonExpiredSSTables,compactionType));

}

Location: MaxSSTableSizeWriter.java

Content: 

public MaxSSTableSizeWriter(ColumnFamilyStore cfs,Directories directories,LifecycleTransaction txn,Set<SSTableReader> nonExpiredSSTables,long maxSSTableSize,int level){

  this(cfs,directories,txn,nonExpiredSSTables,maxSSTableSize,level,false);

}

Location: MaxSSTableSizeWriter.java

Content: 

public MaxSSTableSizeWriter(ColumnFamilyStore cfs,Directories directories,LifecycleTransaction txn,Set<SSTableReader> nonExpiredSSTables,long maxSSTableSize,int level,boolean keepOriginals){

  super(cfs,directories,txn,nonExpiredSSTables,keepOriginals);

  this.allSSTables=txn.originals();

  this.level=level;

  this.maxSSTableSize=maxSSTableSize;

  long totalSize=getTotalWriteSize(nonExpiredSSTables,estimatedTotalKeys,cfs,txn.opType());

  estimatedSSTables=Math.max(1,totalSize / maxSSTableSize);

}

Location: MaxSSTableSizeWriter.java

Content: 

@Deprecated public MaxSSTableSizeWriter(ColumnFamilyStore cfs,Directories directories,LifecycleTransaction txn,Set<SSTableReader> nonExpiredSSTables,long maxSSTableSize,int level,boolean offline,boolean keepOriginals){

  this(cfs,directories,txn,nonExpiredSSTables,maxSSTableSize,level,keepOriginals);

}

