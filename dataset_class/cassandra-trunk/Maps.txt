Location: Maps.java

Content: 

/** 

 * Returns the exact MapType from the entries if it can be known.

 * @param entries the entries

 * @param mapper the mapper used to retrieve the key and value types from the entries

 * @return the exact MapType from the entries if it can be known or <code>null</code>

 */

public static <T>AbstractType<?> getExactMapTypeIfKnown(List<Pair<T,T>> entries,java.util.function.Function<T,AbstractType<?>> mapper){

  AbstractType<?> keyType=null;

  AbstractType<?> valueType=null;

  for (  Pair<T,T> entry : entries) {

    if (keyType == null)     keyType=mapper.apply(entry.left);

    if (valueType == null)     valueType=mapper.apply(entry.right);

    if (keyType != null && valueType != null)     return MapType.getInstance(keyType,valueType,false);

  }

  return null;

}

Location: Maps.java

Content: 

public static ColumnSpecification keySpecOf(ColumnSpecification column){

  return new ColumnSpecification(column.ksName,column.cfName,new ColumnIdentifier("key(" + column.name + ")",true),keysType(column.type));

}

Location: Maps.java

Content: 

private static AbstractType<?> keysType(AbstractType<?> type){

  return ((MapType<?,?>)unwrap(type)).getKeysType();

}

Location: Maps.java

Content: 

private Maps(){

}

Location: Maps.java

Content: 

/** 

 * Create a <code>String</code> representation of the list containing the specified elements.

 * @param entries the list elements

 * @return a <code>String</code> representation of the list

 */

public static <T>String mapToString(List<Pair<T,T>> entries){

  return mapToString(entries,Object::toString);

}

Location: Maps.java

Content: 

/** 

 * Create a <code>String</code> representation of the map from the specified items associated to the map entries.

 * @param items items associated to the map entries

 * @param mapper the mapper used to map the items to the <code>String</code> representation of the map entries

 * @return a <code>String</code> representation of the map

 */

public static <T>String mapToString(List<Pair<T,T>> items,java.util.function.Function<T,String> mapper){

  return items.stream().map(p -> String.format("%s: %s",mapper.apply(p.left),mapper.apply(p.right))).collect(Collectors.joining(", ","{","}"));

}

Location: Maps.java

Content: 

/** 

 * Tests that the map with the specified entries can be assigned to the specified column.

 * @param receiver the receiving column

 * @param entries the map entries

 */

public static <T extends AssignmentTestable>AssignmentTestable.TestResult testMapAssignment(ColumnSpecification receiver,List<Pair<T,T>> entries){

  ColumnSpecification keySpec=keySpecOf(receiver);

  ColumnSpecification valueSpec=valueSpecOf(receiver);

  AssignmentTestable.TestResult res=AssignmentTestable.TestResult.EXACT_MATCH;

  for (  Pair<T,T> entry : entries) {

    AssignmentTestable.TestResult t1=entry.left.testAssignment(receiver.ksName,keySpec);

    AssignmentTestable.TestResult t2=entry.right.testAssignment(receiver.ksName,valueSpec);

    if (t1 == AssignmentTestable.TestResult.NOT_ASSIGNABLE || t2 == AssignmentTestable.TestResult.NOT_ASSIGNABLE)     return AssignmentTestable.TestResult.NOT_ASSIGNABLE;

    if (t1 != AssignmentTestable.TestResult.EXACT_MATCH || t2 != AssignmentTestable.TestResult.EXACT_MATCH)     res=AssignmentTestable.TestResult.WEAKLY_ASSIGNABLE;

  }

  return res;

}

Location: Maps.java

Content: 

private static AbstractType<?> unwrap(AbstractType<?> type){

  return type.isReversed() ? unwrap(((ReversedType<?>)type).baseType) : type;

}

Location: Maps.java

Content: 

public static ColumnSpecification valueSpecOf(ColumnSpecification column){

  return new ColumnSpecification(column.ksName,column.cfName,new ColumnIdentifier("value(" + column.name + ")",true),valuesType(column.type));

}

Location: Maps.java

Content: 

private static AbstractType<?> valuesType(AbstractType<?> type){

  return ((MapType<?,?>)unwrap(type)).getValuesType();

}

