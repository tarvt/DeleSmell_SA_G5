Location: ColumnIdentifier.java

Content: 

public ColumnIdentifier clone(AbstractAllocator allocator){

  return interned ? this : new ColumnIdentifier(allocator.clone(bytes),text,false);

}

Location: ColumnIdentifier.java

Content: 

public ColumnIdentifier(ByteBuffer bytes,AbstractType<?> type){

  this(bytes,type.getString(bytes),false);

}

Location: ColumnIdentifier.java

Content: 

public ColumnIdentifier(ByteBuffer bytes,String text){

  this(bytes,text,false);

}

Location: ColumnIdentifier.java

Content: 

private ColumnIdentifier(ByteBuffer bytes,String text,boolean interned){

  this.bytes=bytes;

  this.text=text;

  this.interned=interned;

  this.prefixComparison=prefixComparison(bytes);

}

Location: ColumnIdentifier.java

Content: 

public ColumnIdentifier(String rawText,boolean keepCase){

  this.text=keepCase ? rawText : rawText.toLowerCase(Locale.US);

  this.bytes=ByteBufferUtil.bytes(this.text);

  this.prefixComparison=prefixComparison(bytes);

  this.interned=false;

}

Location: ColumnIdentifier.java

Content: 

public int compareTo(ColumnIdentifier that){

  int c=Long.compare(this.prefixComparison,that.prefixComparison);

  if (c != 0)   return c;

  if (this == that)   return 0;

  return ByteBufferUtil.compareUnsigned(this.bytes,that.bytes);

}

Location: ColumnIdentifier.java

Content: 

public static ColumnIdentifier getInterned(AbstractType<?> type,ByteBuffer bytes,String text){

  bytes=ByteBufferUtil.minimalBufferFor(bytes);

  InternedKey key=new InternedKey(type,bytes);

  ColumnIdentifier id=internedInstances.get(key);

  if (id != null)   return id;

  ColumnIdentifier created=new ColumnIdentifier(bytes,text,true);

  ColumnIdentifier previous=internedInstances.putIfAbsent(key,created);

  return previous == null ? created : previous;

}

Location: ColumnIdentifier.java

Content: 

public static ColumnIdentifier getInterned(ByteBuffer bytes,AbstractType<?> type){

  return getInterned(type,bytes,type.getString(bytes));

}

Location: ColumnIdentifier.java

Content: 

public static ColumnIdentifier getInterned(String rawText,boolean keepCase){

  String text=keepCase ? rawText : rawText.toLowerCase(Locale.US);

  ByteBuffer bytes=ByteBufferUtil.bytes(text);

  return getInterned(UTF8Type.instance,bytes,text);

}

Location: ColumnIdentifier.java

Content: 

public boolean isInterned(){

  return interned;

}

Location: ColumnIdentifier.java

Content: 

public static String maybeQuote(String text){

  if (UNQUOTED_IDENTIFIER.matcher(text).matches() && !ReservedKeywords.isReserved(text))   return text;

  return '"' + PATTERN_DOUBLE_QUOTE.matcher(text).replaceAll(ESCAPED_DOUBLE_QUOTE) + '"';

}

Location: ColumnIdentifier.java

Content: 

private static long prefixComparison(ByteBuffer bytes){

  long prefix=0;

  ByteBuffer read=bytes.duplicate();

  int i=0;

  while (read.hasRemaining() && i < 8) {

    prefix<<=8;

    prefix|=read.get() & 0xFF;

    i++;

  }

  prefix<<=(8 - i) * 8;

  prefix^=Long.MIN_VALUE;

  return prefix;

}

