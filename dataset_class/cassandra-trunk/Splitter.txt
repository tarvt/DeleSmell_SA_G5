Location: Splitter.java

Content: 

/** 

 * Computes the number of elapsed tokens from the range start until this token

 * @return the number of tokens from the range start to the token

 */

@VisibleForTesting protected BigInteger elapsedTokens(Token token,Range<Token> range){

  if (!range.contains(token))   return BigInteger.ZERO;

  BigInteger elapsedTokens=BigInteger.ZERO;

  for (  Range<Token> unwrapped : range.unwrap()) {

    if (unwrapped.contains(token)) {

      elapsedTokens=elapsedTokens.add(tokensInRange(new Range<>(unwrapped.left,token)));

    }

 else     if (token.compareTo(unwrapped.left) < 0) {

      elapsedTokens=elapsedTokens.add(tokensInRange(unwrapped));

    }

  }

  return elapsedTokens;

}

Location: Splitter.java

Content: 

/** 

 * Computes the normalized position of this token relative to this range

 * @return A number between 0.0 and 1.0 representing this token's positionin this range or -1.0 if this range doesn't contain this token.

 */

public double positionInRange(Token token,Range<Token> range){

  if (range.left.equals(range.right))   return positionInRange(token,new Range(partitioner.getMinimumToken(),partitioner.getMaximumToken()));

  if (token.equals(range.left))   return 0.0;

  if (token.equals(range.right))   return 1.0;

  if (!range.contains(token))   return -1.0;

  return new BigDecimal(elapsedTokens(token,range)).divide(new BigDecimal(tokensInRange(range)),3,BigDecimal.ROUND_HALF_EVEN).doubleValue();

}

Location: Splitter.java

Content: 

private List<Token> splitOwnedRangesNoPartialRanges(List<WeightedRange> weightedRanges,BigInteger perPart,int parts){

  List<Token> boundaries=new ArrayList<>(parts);

  BigInteger sum=BigInteger.ZERO;

  int i=0;

  final int rangesCount=weightedRanges.size();

  while (boundaries.size() < parts - 1 && i < rangesCount - 1) {

    WeightedRange r=weightedRanges.get(i);

    WeightedRange nextRange=weightedRanges.get(i + 1);

    BigInteger currentRangeWidth=r.totalTokens(this);

    BigInteger nextRangeWidth=nextRange.totalTokens(this);

    sum=sum.add(currentRangeWidth);

    if (sum.compareTo(perPart) > 0 || sum.add(nextRangeWidth).compareTo(perPart) > 0) {

      BigInteger diffCurrent=sum.subtract(perPart).abs();

      BigInteger diffNext=sum.add(nextRangeWidth).subtract(perPart).abs();

      if (diffNext.compareTo(diffCurrent) >= 0) {

        sum=BigInteger.ZERO;

        boundaries.add(token(r.right()));

      }

    }

    i++;

  }

  boundaries.add(partitioner.getMaximumToken());

  return boundaries;

}

Location: Splitter.java

Content: 

public List<Token> splitOwnedRanges(int parts,List<WeightedRange> weightedRanges,boolean dontSplitRanges){

  if (weightedRanges.isEmpty() || parts == 1)   return Collections.singletonList(partitioner.getMaximumToken());

  BigInteger totalTokens=BigInteger.ZERO;

  for (  WeightedRange weightedRange : weightedRanges) {

    totalTokens=totalTokens.add(weightedRange.totalTokens(this));

  }

  BigInteger perPart=totalTokens.divide(BigInteger.valueOf(parts));

  if (perPart.equals(BigInteger.ZERO))   return Collections.singletonList(partitioner.getMaximumToken());

  if (dontSplitRanges)   return splitOwnedRangesNoPartialRanges(weightedRanges,perPart,parts);

  List<Token> boundaries=new ArrayList<>();

  BigInteger sum=BigInteger.ZERO;

  for (  WeightedRange weightedRange : weightedRanges) {

    BigInteger currentRangeWidth=weightedRange.totalTokens(this);

    BigInteger left=valueForToken(weightedRange.left());

    while (sum.add(currentRangeWidth).compareTo(perPart) >= 0) {

      BigInteger withinRangeBoundary=perPart.subtract(sum);

      left=left.add(withinRangeBoundary);

      boundaries.add(tokenForValue(left));

      currentRangeWidth=currentRangeWidth.subtract(withinRangeBoundary);

      sum=BigInteger.ZERO;

    }

    sum=sum.add(currentRangeWidth);

  }

  boundaries.set(boundaries.size() - 1,partitioner.getMaximumToken());

  assert boundaries.size() == parts : boundaries.size() + "!=" + parts+ " "+ boundaries+ ":"+ weightedRanges;

  return boundaries;

}

Location: Splitter.java

Content: 

protected Splitter(IPartitioner partitioner){

  this.partitioner=partitioner;

}

Location: Splitter.java

Content: 

/** 

 * Splits the specified token ranges in at least  {@code parts} subranges.<p> Each returned subrange will be contained in exactly one of the specified ranges.

 * @param ranges a collection of token ranges to be split

 * @param parts the minimum number of returned ranges

 * @return at least {@code minParts} token ranges covering {@code ranges}

 */

public Set<Range<Token>> split(Collection<Range<Token>> ranges,int parts){

  int numRanges=ranges.size();

  if (numRanges >= parts) {

    return Sets.newHashSet(ranges);

  }

 else {

    int partsPerRange=(int)Math.ceil((double)parts / numRanges);

    return ranges.stream().map(range -> split(range,partsPerRange)).flatMap(Collection::stream).collect(toSet());

  }

}

Location: Splitter.java

Content: 

/** 

 * Splits the specified token range in at least  {@code minParts} subranges, unless the range has not enough tokensin which case the range will be returned without splitting.

 * @param range a token range

 * @param parts the number of subranges

 * @return {@code parts} even subranges of {@code range}

 */

private Set<Range<Token>> split(Range<Token> range,int parts){

  BigInteger numTokens=tokensInRange(range);

  if (BigInteger.valueOf(parts).compareTo(numTokens) > 0)   return Collections.singleton(range);

  Token left=range.left;

  Set<Range<Token>> subranges=new HashSet<>(parts);

  for (double i=1; i <= parts; i++) {

    Token right=partitioner.split(range.left,range.right,i / parts);

    subranges.add(new Range<>(left,right));

    left=right;

  }

  return subranges;

}

Location: Splitter.java

Content: 

@VisibleForTesting protected abstract Token tokenForValue(BigInteger value);

Location: Splitter.java

Content: 

@VisibleForTesting protected BigInteger tokensInRange(Range<Token> range){

  if (range.left.equals(range.right))   return tokensInRange(new Range(partitioner.getMinimumToken(),partitioner.getMaximumToken()));

  BigInteger totalTokens=BigInteger.ZERO;

  for (  Range<Token> unwrapped : range.unwrap()) {

    totalTokens=totalTokens.add(valueForToken(token(unwrapped.right)).subtract(valueForToken(unwrapped.left))).abs();

  }

  return totalTokens;

}

Location: Splitter.java

Content: 

/** 

 * We avoid calculating for wrap around ranges, instead we use the actual max token, and then, when translating to PartitionPositions, we include tokens from .minKeyBound to .maxKeyBound to make sure we include all tokens.

 */

private Token token(Token t){

  return t.equals(partitioner.getMinimumToken()) ? partitioner.getMaximumToken() : t;

}

Location: Splitter.java

Content: 

@VisibleForTesting protected abstract BigInteger valueForToken(Token token);

