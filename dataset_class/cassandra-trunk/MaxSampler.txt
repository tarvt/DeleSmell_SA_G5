Location: MaxSampler.java

Content: 

public synchronized void beginSampling(int capacity,int durationMillis){

  if (endTimeNanos == -1 || clock.now() > endTimeNanos) {

    endTimeNanos=clock.now() + MILLISECONDS.toNanos(durationMillis);

    queue=MinMaxPriorityQueue.orderedBy(comp).maximumSize(Math.max(1,capacity)).create();

    this.capacity=capacity;

  }

 else   throw new RuntimeException("Sampling already in progress");

}

Location: MaxSampler.java

Content: 

public synchronized List<Sample<T>> finishSampling(int count){

  List<Sample<T>> result=new ArrayList<>(count);

  if (endTimeNanos != -1) {

    endTimeNanos=-1;

    Sample<T> next;

    while ((next=queue.poll()) != null && result.size() <= count)     result.add(next);

  }

  return result;

}

Location: MaxSampler.java

Content: 

@Override protected synchronized void insert(T item,long value){

  if (value > 0 && clock.now() <= endTimeNanos && (queue.isEmpty() || queue.size() < capacity || queue.peekLast().count < value))   queue.add(new Sample<T>(item,value,0));

}

Location: MaxSampler.java

Content: 

public boolean isEnabled(){

  return endTimeNanos != -1 && clock.now() <= endTimeNanos;

}

