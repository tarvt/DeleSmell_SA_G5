Location: DelimiterAnalyzer.java

Content: 

public DelimiterAnalyzer(){

}

Location: DelimiterAnalyzer.java

Content: 

public void init(Map<String,String> options,AbstractType validator){

  DelimiterTokenizingOptions tokenizingOptions=DelimiterTokenizingOptions.buildFromMap(options);

  delimiter=tokenizingOptions.getDelimiter();

  if (!VALID_ANALYZABLE_TYPES.containsKey(validator))   throw new IllegalArgumentException(String.format("Only text types supported, got %s",validator));

  charset=VALID_ANALYZABLE_TYPES.get(validator);

}

Location: DelimiterAnalyzer.java

Content: 

@Override public boolean isCompatibleWith(AbstractType<?> validator){

  return VALID_ANALYZABLE_TYPES.containsKey(validator);

}

Location: DelimiterAnalyzer.java

Content: 

public boolean isTokenizing(){

  return true;

}

Location: DelimiterAnalyzer.java

Content: 

public void reset(ByteBuffer input){

  Preconditions.checkNotNull(input);

  final CharBuffer cb=charset.decode(input);

  this.iter=new AbstractIterator<ByteBuffer>(){

    protected ByteBuffer computeNext(){

      if (!cb.hasRemaining())       return endOfData();

      CharBuffer readahead=cb.duplicate();

      boolean readaheadRemaining;

      while ((readaheadRemaining=readahead.hasRemaining()) && readahead.get() != delimiter)       ;

      char[] chars=new char[readahead.position() - cb.position() - (readaheadRemaining ? 1 : 0)];

      cb.get(chars);

      Preconditions.checkState(!cb.hasRemaining() || cb.get() == delimiter);

      return 0 < chars.length ? charset.encode(CharBuffer.wrap(chars)) : computeNext();

    }

  }

;

}

