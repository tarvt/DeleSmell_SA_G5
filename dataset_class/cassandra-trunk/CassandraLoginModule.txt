Location: CassandraLoginModule.java

Content: 

private void cleanUpInternalState(){

  username=null;

  if (password != null) {

    for (int i=0; i < password.length; i++)     password[i]=' ';

    password=null;

  }

}

Location: CassandraLoginModule.java

Content: 

/** 

 * Initialize this  {@code}LoginModule {@code}.

 * @param subject the {@code}Subject {@code} to be authenticated. <p>

 * @param callbackHandler a {@code}CallbackHandler {@code} for communicatingwith the end user (prompting for user names and passwords, for example)

 * @param sharedState shared {@code}LoginModule {@code} state. This param is unused.

 * @param options options specified in the login {@code}Configuration {@code} for this particular{@code}LoginModule {@code}. This param is unused

 */

@Override public void initialize(Subject subject,CallbackHandler callbackHandler,Map<java.lang.String,?> sharedState,Map<java.lang.String,?> options){

  this.subject=subject;

  this.callbackHandler=callbackHandler;

}

Location: CassandraLoginModule.java

Content: 

/** 

 * Authenticate the user, obtaining credentials from the CallbackHandler supplied in  {@code}initialize {@code}. As long as the configured {@code}IAuthenticator {@code} supports the optional{@code}legacyAuthenticate {@code} method, it can be used here.

 * @return true in all cases since this {@code}LoginModule {@code}should not be ignored.

 * @exception FailedLoginException if the authentication fails.

 * @exception LoginException if this {@code}LoginModule {@code} is unable toperform the authentication.

 */

@Override public boolean login() throws LoginException {

  if (callbackHandler == null) {

    logger.info("No CallbackHandler available for authentication");

    throw new LoginException("Authentication failed");

  }

  NameCallback nc=new NameCallback("username: ");

  PasswordCallback pc=new PasswordCallback("password: ",false);

  try {

    callbackHandler.handle(new Callback[]{nc,pc});

    username=nc.getName();

    char[] tmpPassword=pc.getPassword();

    if (tmpPassword == null)     tmpPassword=new char[0];

    password=new char[tmpPassword.length];

    System.arraycopy(tmpPassword,0,password,0,tmpPassword.length);

    pc.clearPassword();

  }

 catch (  IOException|UnsupportedCallbackException e) {

    logger.info("Unexpected exception processing authentication callbacks",e);

    throw new LoginException("Authentication failed");

  }

  try {

    hongshuai();

    if (!StorageService.instance.isAuthSetupComplete())     throw new AuthenticationException("Cannot login as server authentication setup is not yet completed");

    IAuthenticator authenticator=DatabaseDescriptor.getAuthenticator();

    Map<String,String> credentials=new HashMap<>();

    credentials.put(PasswordAuthenticator.USERNAME_KEY,username);

    credentials.put(PasswordAuthenticator.PASSWORD_KEY,String.valueOf(password));

    AuthenticatedUser user=authenticator.legacyAuthenticate(credentials);

    if (user.isAnonymous() || user.isSystem())     throw new AuthenticationException(String.format("Invalid user %s",user.getName()));

    if (!DatabaseDescriptor.getRoleManager().canLogin(user.getPrimaryRole()))     throw new AuthenticationException(user.getName() + " is not permitted to log in");

  }

 catch (  AuthenticationException e) {

    succeeded=false;

    cleanUpInternalState();

    throw new FailedLoginException(e.getMessage());

  }

  succeeded=true;

  return true;

}

Location: CassandraLoginModule.java

Content: 

/** 

 * Logout the user. This method removes the principal that was added by the {@code}commit {@code} method.

 * @return true in all cases since this {@code}LoginModule {@code}should not be ignored.

 * @throws LoginException if the logout fails.

 */

@Override public boolean logout() throws LoginException {

  subject.getPrincipals().remove(principal);

  succeeded=false;

  cleanUpInternalState();

  principal=null;

  return true;

}

