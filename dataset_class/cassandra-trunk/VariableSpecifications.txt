Location: VariableSpecifications.java

Content: 

public void add(int bindIndex,ColumnSpecification spec){

  if (spec instanceof ColumnMetadata)   targetColumns[bindIndex]=(ColumnMetadata)spec;

  ColumnIdentifier bindMarkerName=variableNames.get(bindIndex);

  if (bindMarkerName != null)   spec=new ColumnSpecification(spec.ksName,spec.cfName,bindMarkerName,spec.type);

  specs.set(bindIndex,spec);

}

Location: VariableSpecifications.java

Content: 

/** 

 * Returns an array with the same length as the number of partition key columns for the table corresponding to table.  Each short in the array represents the bind index of the marker that holds the value for that partition key column.  If there are no bind markers for any of the partition key columns, null is returned. Callers of this method should ensure that all statements operate on the same table.

 */

public short[] getPartitionKeyBindVariableIndexes(TableMetadata metadata){

  short[] partitionKeyPositions=new short[metadata.partitionKeyColumns().size()];

  boolean[] set=new boolean[partitionKeyPositions.length];

  for (int i=0; i < targetColumns.length; i++) {

    ColumnMetadata targetColumn=targetColumns[i];

    if (targetColumn != null && targetColumn.isPartitionKey()) {

      assert targetColumn.ksName.equals(metadata.keyspace) && targetColumn.cfName.equals(metadata.name);

      partitionKeyPositions[targetColumn.position()]=(short)i;

      set[targetColumn.position()]=true;

    }

  }

  for (  boolean b : set)   if (!b)   return null;

  return partitionKeyPositions;

}

Location: VariableSpecifications.java

Content: 

public VariableSpecifications(List<ColumnIdentifier> variableNames){

  this.variableNames=variableNames;

  this.specs=Arrays.asList(new ColumnSpecification[variableNames.size()]);

  this.targetColumns=new ColumnMetadata[variableNames.size()];

}

