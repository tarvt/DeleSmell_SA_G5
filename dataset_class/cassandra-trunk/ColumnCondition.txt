Location: ColumnCondition.java

Content: 

protected final List<ByteBuffer> bindAndGetTerms(QueryOptions options){

  return filterUnsetValuesIfNeeded(checkValues(terms.bindAndGet(options)));

}

Location: ColumnCondition.java

Content: 

protected final List<Terminal> bindTerms(QueryOptions options){

  return filterUnsetValuesIfNeeded(checkValues(terms.bind(options)));

}

Location: ColumnCondition.java

Content: 

/** 

 * Checks that the output of a bind operations on  {@code Terms} is a valid one.

 * @param values the list to check

 * @return the input list

 */

private <T>List<T> checkValues(List<T> values){

  checkFalse(values == null && operator.isIN(),"Invalid null list in IN condition");

  checkFalse(values == Terms.UNSET_LIST,"Invalid 'unset' value in condition");

  return values;

}

Location: ColumnCondition.java

Content: 

private ColumnCondition(ColumnMetadata column,Operator op,Terms terms){

  this.column=column;

  this.operator=op;

  this.terms=terms;

}

Location: ColumnCondition.java

Content: 

/** 

 * A UDT column, simple condition.

 */

public static ColumnCondition condition(ColumnMetadata column,FieldIdentifier udtField,Operator op,Terms terms){

  return new UDTFieldCondition(column,udtField,op,terms);

}

Location: ColumnCondition.java

Content: 

/** 

 * A regular column, simple condition.

 */

public static ColumnCondition condition(ColumnMetadata column,Operator op,Terms terms){

  return new SimpleColumnCondition(column,op,terms);

}

Location: ColumnCondition.java

Content: 

/** 

 * A collection column, simple condition.

 */

public static ColumnCondition condition(ColumnMetadata column,Term collectionElement,Operator op,Terms terms){

  return new CollectionElementCondition(column,collectionElement,op,terms);

}

Location: ColumnCondition.java

Content: 

protected static final boolean evaluateComparisonWithOperator(int comparison,Operator operator){

switch (operator) {

case EQ:

    return false;

case LT:

case LTE:

  return comparison < 0;

case GT:

case GTE:

return comparison > 0;

case NEQ:

return true;

default :

throw new AssertionError();

}

}

Location: ColumnCondition.java

Content: 

private <T>List<T> filterUnsetValuesIfNeeded(List<T> values){

  if (!operator.isIN())   return values;

  List<T> filtered=new ArrayList<>(values.size());

  for (int i=0, m=values.size(); i < m; i++) {

    T value=values.get(i);

    if (value != ByteBufferUtil.UNSET_BYTE_BUFFER && value != Constants.UNSET_VALUE)     filtered.add(value);

  }

  return filtered;

}

Location: ColumnCondition.java

Content: 

protected static final Iterator<Cell<?>> getCells(Row row,ColumnMetadata column){

  if (row == null)   return Collections.emptyIterator();

  ComplexColumnData complexData=row.getComplexColumnData(column);

  return complexData == null ? Collections.<Cell<?>>emptyIterator() : complexData.iterator();

}

Location: ColumnCondition.java

Content: 

protected static final Cell<?> getCell(Row row,ColumnMetadata column){

  return row == null ? null : row.getCell(column);

}

Location: ColumnCondition.java

Content: 

protected static final Cell<?> getCell(Row row,ColumnMetadata column,CellPath path){

  return row == null ? null : row.getCell(column,path);

}

