Location: SSTableImporter.java

Content: 

/** 

 * Create SSTableListers based on srcPaths If srcPaths is empty, we create a lister that lists sstables in the data directories (deprecated use)

 */

private List<Pair<Directories.SSTableLister,String>> getSSTableListers(Set<String> srcPaths){

  List<Pair<Directories.SSTableLister,String>> listers=new ArrayList<>();

  if (!srcPaths.isEmpty()) {

    for (    String path : srcPaths) {

      File dir=new File(path);

      if (!dir.exists()) {

        throw new RuntimeException(String.format("Directory %s does not exist",path));

      }

      if (!Directories.verifyFullPermissions(dir,path)) {

        throw new RuntimeException("Insufficient permissions on directory " + path);

      }

      listers.add(Pair.create(cfs.getDirectories().sstableLister(dir,Directories.OnTxnErr.IGNORE).skipTemporary(true),path));

    }

  }

 else {

    listers.add(Pair.create(cfs.getDirectories().sstableLister(Directories.OnTxnErr.IGNORE).skipTemporary(true),null));

  }

  return listers;

}

Location: SSTableImporter.java

Content: 

/** 

 * Opens the sstablereader described by descriptor and figures out the correct directory for it based on the first token srcPath == null means that the sstable is in a data directory and we can use that directly. If we fail figuring out the directory we will pick the one with the most available disk space.

 */

private File getTargetDirectory(String srcPath,Descriptor descriptor,Set<Component> components){

  if (srcPath == null)   return descriptor.directory;

  File targetDirectory=null;

  SSTableReader sstable=null;

  try {

    sstable=SSTableReader.open(descriptor,components,cfs.metadata);

    targetDirectory=cfs.getDirectories().getLocationForDisk(cfs.diskBoundaryManager.getDiskBoundaries(cfs).getCorrectDiskForSSTable(sstable));

  }

  finally {

    if (sstable != null)     sstable.selfRef().release();

  }

  return targetDirectory == null ? cfs.getDirectories().getWriteableLocationToLoadFile(new File(descriptor.baseFilename())) : targetDirectory;

}

Location: SSTableImporter.java

Content: 

/** 

 * Imports sstables from the directories given in options.srcPaths If import fails in any of the directories, that directory is skipped and the failed directories are returned so that the user can re-upload files or remove corrupt files. If one of the directories in srcPaths is not readable/does not exist, we exit immediately to let the user change permissions or similar on the directory.

 * @param options

 * @return list of failed directories

 */

@VisibleForTesting synchronized List<String> importNewSSTables(Options options){

  logger.info("Loading new SSTables for {}/{}: {}",cfs.keyspace.getName(),cfs.getTableName(),options);

  List<Pair<Directories.SSTableLister,String>> listers=getSSTableListers(options.srcPaths);

  Set<Descriptor> currentDescriptors=new HashSet<>();

  for (  SSTableReader sstable : cfs.getSSTables(SSTableSet.CANONICAL))   currentDescriptors.add(sstable.descriptor);

  List<String> failedDirectories=new ArrayList<>();

  if (options.verifySSTables || options.verifyTokens) {

    for (    Pair<Directories.SSTableLister,String> listerPair : listers) {

      Directories.SSTableLister lister=listerPair.left;

      String dir=listerPair.right;

      for (      Map.Entry<Descriptor,Set<Component>> entry : lister.list().entrySet()) {

        Descriptor descriptor=entry.getKey();

        if (!currentDescriptors.contains(entry.getKey())) {

          try {

            verifySSTableForImport(descriptor,entry.getValue(),options.verifyTokens,options.verifySSTables,options.extendedVerify);

          }

 catch (          Throwable t) {

            if (dir != null) {

              logger.error("Failed verifying sstable {} in directory {}",descriptor,dir,t);

              failedDirectories.add(dir);

            }

 else {

              logger.error("Failed verifying sstable {}",descriptor,t);

              throw new RuntimeException("Failed verifying sstable " + descriptor,t);

            }

            break;

          }

        }

      }

    }

  }

  Set<SSTableReader> newSSTables=new HashSet<>();

  for (  Pair<Directories.SSTableLister,String> listerPair : listers) {

    Directories.SSTableLister lister=listerPair.left;

    String dir=listerPair.right;

    if (failedDirectories.contains(dir))     continue;

    Set<MovedSSTable> movedSSTables=new HashSet<>();

    Set<SSTableReader> newSSTablesPerDirectory=new HashSet<>();

    for (    Map.Entry<Descriptor,Set<Component>> entry : lister.list().entrySet()) {

      try {

        Descriptor oldDescriptor=entry.getKey();

        if (currentDescriptors.contains(oldDescriptor))         continue;

        File targetDir=getTargetDirectory(dir,oldDescriptor,entry.getValue());

        Descriptor newDescriptor=cfs.getUniqueDescriptorFor(entry.getKey(),targetDir);

        maybeMutateMetadata(entry.getKey(),options);

        movedSSTables.add(new MovedSSTable(newDescriptor,entry.getKey(),entry.getValue()));

        SSTableReader sstable=SSTableReader.moveAndOpenSSTable(cfs,entry.getKey(),newDescriptor,entry.getValue());

        newSSTablesPerDirectory.add(sstable);

      }

 catch (      Throwable t) {

        newSSTablesPerDirectory.forEach(s -> s.selfRef().release());

        if (dir != null) {

          logger.error("Failed importing sstables in directory {}",dir,t);

          failedDirectories.add(dir);

          moveSSTablesBack(movedSSTables);

          movedSSTables.clear();

          newSSTablesPerDirectory.clear();

          break;

        }

 else {

          logger.error("Failed importing sstables from data directory - renamed sstables are: {}",movedSSTables);

          throw new RuntimeException("Failed importing sstables",t);

        }

      }

    }

    newSSTables.addAll(newSSTablesPerDirectory);

  }

  if (newSSTables.isEmpty()) {

    logger.info("No new SSTables were found for {}/{}",cfs.keyspace.getName(),cfs.getTableName());

    return failedDirectories;

  }

  logger.info("Loading new SSTables and building secondary indexes for {}/{}: {}",cfs.keyspace.getName(),cfs.getTableName(),newSSTables);

  try (Refs<SSTableReader> refs=Refs.ref(newSSTables)){

    cfs.getTracker().addSSTables(newSSTables);

    for (    SSTableReader reader : newSSTables) {

      if (options.invalidateCaches && cfs.isRowCacheEnabled())       invalidateCachesForSSTable(reader.descriptor);

    }

  }

   logger.info("Done loading load new SSTables for {}/{}",cfs.keyspace.getName(),cfs.getTableName());

  return failedDirectories;

}

Location: SSTableImporter.java

Content: 

/** 

 * Iterates over all keys in the sstable index and invalidates the row cache

 */

@VisibleForTesting void invalidateCachesForSSTable(Descriptor desc){

  try (KeyIterator iter=new KeyIterator(desc,cfs.metadata())){

    while (iter.hasNext()) {

      DecoratedKey decoratedKey=iter.next();

      cfs.invalidateCachedPartition(decoratedKey);

    }

  }

 }

Location: SSTableImporter.java

Content: 

/** 

 * Depending on the options passed in, this might reset level on the sstable to 0 and/or remove the repair information from the sstable

 */

private void maybeMutateMetadata(Descriptor descriptor,Options options) throws IOException {

  if (new File(descriptor.filenameFor(Component.STATS)).exists()) {

    if (options.resetLevel) {

      descriptor.getMetadataSerializer().mutateLevel(descriptor,0);

    }

    if (options.clearRepaired) {

      descriptor.getMetadataSerializer().mutateRepairMetadata(descriptor,ActiveRepairService.UNREPAIRED_SSTABLE,null,false);

    }

  }

}

Location: SSTableImporter.java

Content: 

/** 

 * If we fail when opening the sstable (if for example the user passes in --no-verify and there are corrupt sstables) we might have started copying sstables to the data directory, these need to be moved back to the original name/directory

 */

private void moveSSTablesBack(Set<MovedSSTable> movedSSTables){

  for (  MovedSSTable movedSSTable : movedSSTables) {

    if (new File(movedSSTable.newDescriptor.filenameFor(Component.DATA)).exists()) {

      logger.debug("Moving sstable {} back to {}",movedSSTable.newDescriptor.filenameFor(Component.DATA),movedSSTable.oldDescriptor.filenameFor(Component.DATA));

      SSTableWriter.rename(movedSSTable.newDescriptor,movedSSTable.oldDescriptor,movedSSTable.components);

    }

  }

}

Location: SSTableImporter.java

Content: 

public SSTableImporter(ColumnFamilyStore cfs){

  this.cfs=cfs;

}

Location: SSTableImporter.java

Content: 

/** 

 * Verify an sstable for import, throws exception if there is a failure verifying.

 * @param verifyTokens to verify that the tokens are owned by the current node

 * @param verifySSTables to verify the sstables given. If this is false a "quick" verification will be run, just deserializing metadata

 * @param extendedVerify to validate the values in the sstables

 */

private void verifySSTableForImport(Descriptor descriptor,Set<Component> components,boolean verifyTokens,boolean verifySSTables,boolean extendedVerify){

  SSTableReader reader=null;

  try {

    reader=SSTableReader.open(descriptor,components,cfs.metadata);

    Verifier.Options verifierOptions=Verifier.options().extendedVerification(extendedVerify).checkOwnsTokens(verifyTokens).quick(!verifySSTables).invokeDiskFailurePolicy(false).mutateRepairStatus(false).build();

    try (Verifier verifier=new Verifier(cfs,reader,false,verifierOptions)){

      verifier.verify();

    }

   }

 catch (  Throwable t) {

    throw new RuntimeException("Can't import sstable " + descriptor,t);

  }

 finally {

    if (reader != null)     reader.selfRef().release();

  }

}

