Location: DiagnosticEventMemoryStore.java

Content: 

public Long getLastEventId(){

  return lastKey.get();

}

Location: DiagnosticEventMemoryStore.java

Content: 

public void load(){

}

Location: DiagnosticEventMemoryStore.java

Content: 

public NavigableMap<Long,DiagnosticEvent> scan(Long id,int limit){

  assert id != null && id >= 0;

  assert limit >= 0;

  ConcurrentNavigableMap<Long,DiagnosticEvent> newerEvents=events.headMap(id,true);

  ConcurrentNavigableMap<Long,DiagnosticEvent> ret=newerEvents.descendingMap();

  if (limit == 0) {

    return ret;

  }

 else {

    Map.Entry<Long,DiagnosticEvent> first=ret.firstEntry();

    if (first == null)     return ret;

 else     return ret.headMap(first.getKey() + limit);

  }

}

Location: DiagnosticEventMemoryStore.java

Content: 

@VisibleForTesting void setMaxSize(int maxSize){

  this.maxSize=maxSize;

}

Location: DiagnosticEventMemoryStore.java

Content: 

public void store(DiagnosticEvent event){

  long keyHead=lastKey.incrementAndGet();

  events.put(keyHead,event);

  if (keyHead > maxSize)   events.tailMap(keyHead - maxSize).clear();

}

