Location: ResourceManager.java

Content: 

private static void loadLanguage(String lang){

  File langFile=new File(lang + ".txt");

  if (langFile.exists()) {

    try {

      FileReader fr=new FileReader(langFile);

      BufferedReader br=new BufferedReader(fr);

      while (br.ready()) {

        String[] split=br.readLine().split(":",2);

        LanguageStrings.put(split[0].trim(),split[1].trim());

      }

      fr.close();

      br.close();

      System.out.println("Loaded language " + lang + "!");

    }

 catch (    IOException e) {

      System.out.println("Failed to load language! Fallback to english.");

      loadLanguage("en");

      return;

    }

  }

 else {

    System.out.println("Unable to find language file " + lang + ".txt, fallback to english.");

    loadLanguage("en");

  }

}

Location: ResourceManager.java

Content: 

public static void LoadResources(){

  DisplayMode dm=GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice().getDisplayMode();

  ScreenWidth=dm.getWidth();

  ScreenHeight=dm.getHeight();

  String lang=Locale.getDefault().getCountry().substring(0,2);

  loadLanguage(lang);

}

Location: ResourceManager.java

Content: 

public static Color PlayerColor(int player){

  final Color[] colors={Color.BLUE,new Color(10,220,10),Color.CYAN,Color.MAGENTA};

  return colors[player];

}

Location: ResourceManager.java

Content: 

public static String PlayerName(int player){

  String[] names={LanguageStrings.get("Blue"),LanguageStrings.get("Green"),LanguageStrings.get("Cyan"),LanguageStrings.get("Magenta")};

  return names[player];

}

Location: ResourceManager.java

Content: 

public static Color PlayerPoisonColor(int player){

  final Color[] colors={new Color(0,0,200),new Color(10,120,10),new Color(0,155,155),new Color(155,0,155)};

  return colors[player];

}

